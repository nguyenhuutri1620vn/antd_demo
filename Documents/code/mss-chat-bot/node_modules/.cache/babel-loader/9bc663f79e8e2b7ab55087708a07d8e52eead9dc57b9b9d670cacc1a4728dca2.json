{"ast":null,"code":"import * as ChatServices from '../app/services';\nexport default function getService({\n  valueMessage,\n  isLoadingRespons,\n  setIsOpen,\n  setSubmitMessage,\n  setValueMessage,\n  setIsLoadingRespons\n}) {\n  const APISendMessage = async () => {\n    const userMessage = valueMessage;\n    setSubmitMessage(prev => [...prev, {\n      text: userMessage,\n      sender: 'user'\n    }]);\n    setValueMessage('');\n    setIsLoadingRespons(true);\n    let resp = await ChatServices.sendMessage({\n      Message: userMessage\n    });\n    const botResponse = resp.Message;\n    setSubmitMessage(prev => {\n      var _resp$Content;\n      return [...prev, {\n        text: botResponse,\n        sender: 'bot',\n        type: resp.Type,\n        content: resp === null || resp === void 0 ? void 0 : (_resp$Content = resp.Content) === null || _resp$Content === void 0 ? void 0 : _resp$Content.Datas\n      }];\n    });\n    setIsLoadingRespons(false);\n  };\n  const sendMessage = (e, type) => {\n    if (type === 'mouse') {\n      e === null || e === void 0 ? void 0 : e.preventDefault();\n      if (valueMessage.trim() !== '') {\n        APISendMessage();\n      } else {\n        setValueMessage('');\n      }\n    } else if (type === 'key') {\n      if ((e === null || e === void 0 ? void 0 : e.key) === 'Enter' && !isLoadingRespons) {\n        if (valueMessage.trim() !== '') {\n          APISendMessage();\n        } else {\n          setValueMessage('');\n        }\n      }\n    }\n  };\n  const handleInput = e => {\n    if ((e === null || e === void 0 ? void 0 : e.target.value.length) <= 500) {\n      setValueMessage(e === null || e === void 0 ? void 0 : e.target.value);\n    }\n  };\n  return {\n    sendMessage,\n    handleInput\n  };\n}","map":{"version":3,"names":["ChatServices","getService","valueMessage","isLoadingRespons","setIsOpen","setSubmitMessage","setValueMessage","setIsLoadingRespons","APISendMessage","userMessage","prev","text","sender","resp","sendMessage","Message","botResponse","_resp$Content","type","Type","content","Content","Datas","e","preventDefault","trim","key","handleInput","target","value","length"],"sources":["/home/trinh/Documents/code/mss-showme/src/services/InputServices.ts"],"sourcesContent":["import * as ChatServices from '../app/services';\n\nexport default function getService({\n    valueMessage,\n    isLoadingRespons,\n    setIsOpen,\n    setSubmitMessage,\n    setValueMessage,\n    setIsLoadingRespons,\n}: any) {\n\n    const APISendMessage = async () => {\n        const userMessage = valueMessage;\n        setSubmitMessage((prev: any) => [...prev, { text: userMessage, sender: 'user' }]);\n        setValueMessage('');\n        setIsLoadingRespons(true);\n        let resp: any = await ChatServices.sendMessage({ Message: userMessage })\n        const botResponse = resp.Message;\n        setSubmitMessage((prev: any) => [...prev, { text: botResponse, sender: 'bot', type: resp.Type, content: resp?.Content?.Datas }]);\n        setIsLoadingRespons(false);\n    }\n\n    const sendMessage = (e: any, type: string) => {\n        if (type === 'mouse') {\n            e?.preventDefault();\n            if (valueMessage.trim() !== '') {\n                APISendMessage();\n            } else {\n                setValueMessage('');\n            }\n        } else if (type === 'key') {\n            if (e?.key === 'Enter' && !isLoadingRespons) {\n                if (valueMessage.trim() !== '') {\n                    APISendMessage();\n                } else {\n                    setValueMessage('');\n                }\n            }\n        }\n    }\n\n    const handleInput = (e: any) => {\n        if (e?.target.value.length <= 500) {\n            setValueMessage(e?.target.value);\n        }\n    }\n    return {\n        sendMessage,\n        handleInput\n    }\n}"],"mappings":"AAAA,OAAO,KAAKA,YAAY,MAAM,iBAAiB;AAE/C,eAAe,SAASC,UAAUA,CAAC;EAC/BC,YAAY;EACZC,gBAAgB;EAChBC,SAAS;EACTC,gBAAgB;EAChBC,eAAe;EACfC;AACC,CAAC,EAAE;EAEJ,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,WAAW,GAAGP,YAAY;IAChCG,gBAAgB,CAAEK,IAAS,IAAK,CAAC,GAAGA,IAAI,EAAE;MAAEC,IAAI,EAAEF,WAAW;MAAEG,MAAM,EAAE;IAAO,CAAC,CAAC,CAAC;IACjFN,eAAe,CAAC,EAAE,CAAC;IACnBC,mBAAmB,CAAC,IAAI,CAAC;IACzB,IAAIM,IAAS,GAAG,MAAMb,YAAY,CAACc,WAAW,CAAC;MAAEC,OAAO,EAAEN;IAAY,CAAC,CAAC;IACxE,MAAMO,WAAW,GAAGH,IAAI,CAACE,OAAO;IAChCV,gBAAgB,CAAEK,IAAS;MAAA,IAAAO,aAAA;MAAA,OAAK,CAAC,GAAGP,IAAI,EAAE;QAAEC,IAAI,EAAEK,WAAW;QAAEJ,MAAM,EAAE,KAAK;QAAEM,IAAI,EAAEL,IAAI,CAACM,IAAI;QAAEC,OAAO,EAAEP,IAAI,aAAJA,IAAI,wBAAAI,aAAA,GAAJJ,IAAI,CAAEQ,OAAO,cAAAJ,aAAA,uBAAbA,aAAA,CAAeK;MAAM,CAAC,CAAC;IAAA,EAAC;IAChIf,mBAAmB,CAAC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMO,WAAW,GAAGA,CAACS,CAAM,EAAEL,IAAY,KAAK;IAC1C,IAAIA,IAAI,KAAK,OAAO,EAAE;MAClBK,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,cAAc,CAAC,CAAC;MACnB,IAAItB,YAAY,CAACuB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QAC5BjB,cAAc,CAAC,CAAC;MACpB,CAAC,MAAM;QACHF,eAAe,CAAC,EAAE,CAAC;MACvB;IACJ,CAAC,MAAM,IAAIY,IAAI,KAAK,KAAK,EAAE;MACvB,IAAI,CAAAK,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEG,GAAG,MAAK,OAAO,IAAI,CAACvB,gBAAgB,EAAE;QACzC,IAAID,YAAY,CAACuB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UAC5BjB,cAAc,CAAC,CAAC;QACpB,CAAC,MAAM;UACHF,eAAe,CAAC,EAAE,CAAC;QACvB;MACJ;IACJ;EACJ,CAAC;EAED,MAAMqB,WAAW,GAAIJ,CAAM,IAAK;IAC5B,IAAI,CAAAA,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEK,MAAM,CAACC,KAAK,CAACC,MAAM,KAAI,GAAG,EAAE;MAC/BxB,eAAe,CAACiB,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEK,MAAM,CAACC,KAAK,CAAC;IACpC;EACJ,CAAC;EACD,OAAO;IACHf,WAAW;IACXa;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}