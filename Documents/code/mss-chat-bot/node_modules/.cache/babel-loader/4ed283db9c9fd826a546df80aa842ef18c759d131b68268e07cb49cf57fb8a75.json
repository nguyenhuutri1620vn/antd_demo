{"ast":null,"code":"import Config from '../config';\nimport AppLogger from './logger';\nexport { default as UtilInject } from './inject';\nexport { default as localStorage } from './localStorage';\nexport { default as sessionStorage } from './sessionStorage';\nexport { default as cookie } from './cookie';\nclass Utils {\n  constructor() {\n    this.logger = void 0;\n    this.logger = new AppLogger(window.console, {\n      level: Config.LOG_LEVEL\n    });\n  }\n  handleError(error, errorInfo = {}) {\n    // Log out the error\n    this.logger.error(error);\n  }\n  trimWhiteSpacesInput(str = '') {\n    return str && str.replace(/\\s\\s+/g, ' ').replace(/^\\s/, '');\n  }\n  trimWhiteSpaces(str = '') {\n    return str && this.trimWhiteSpacesInput(str).trim();\n  }\n  isEmail(email) {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i;\n    return email ? re.test(email.trim()) : false;\n  }\n}\nexport default new Utils();","map":{"version":3,"names":["Config","AppLogger","default","UtilInject","localStorage","sessionStorage","cookie","Utils","constructor","logger","window","console","level","LOG_LEVEL","handleError","error","errorInfo","trimWhiteSpacesInput","str","replace","trimWhiteSpaces","trim","isEmail","email","re","test"],"sources":["/home/trinh/Documents/code/mss-showme/src/app/utils/index.ts"],"sourcesContent":["import Config from '../config';\nimport AppLogger from './logger';\n\nexport { default as UtilInject } from './inject';\nexport { default as localStorage } from './localStorage';\nexport { default as sessionStorage } from './sessionStorage';\nexport { default as cookie } from './cookie';\n\nclass Utils {\n  logger: AppLogger;\n\n  constructor() {\n    this.logger = new AppLogger(window.console, { level: Config.LOG_LEVEL });\n  }\n\n  handleError(error: Error | any, errorInfo: object = {}) {\n    // Log out the error\n    this.logger.error(error);\n  }\n\n  trimWhiteSpacesInput(str: string = '') {\n    return str && str.replace(/\\s\\s+/g, ' ').replace(/^\\s/, '');\n  }\n\n  trimWhiteSpaces(str: string = '') {\n    return str && this.trimWhiteSpacesInput(str).trim();\n  }\n\n  isEmail(email: string) {\n    const re =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i;\n    return email ? re.test(email.trim()) : false;\n  }\n}\n\nexport default new Utils();\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,WAAW;AAC9B,OAAOC,SAAS,MAAM,UAAU;AAEhC,SAASC,OAAO,IAAIC,UAAU,QAAQ,UAAU;AAChD,SAASD,OAAO,IAAIE,YAAY,QAAQ,gBAAgB;AACxD,SAASF,OAAO,IAAIG,cAAc,QAAQ,kBAAkB;AAC5D,SAASH,OAAO,IAAII,MAAM,QAAQ,UAAU;AAE5C,MAAMC,KAAK,CAAC;EAGVC,WAAWA,CAAA,EAAG;IAAA,KAFdC,MAAM;IAGJ,IAAI,CAACA,MAAM,GAAG,IAAIR,SAAS,CAACS,MAAM,CAACC,OAAO,EAAE;MAAEC,KAAK,EAAEZ,MAAM,CAACa;IAAU,CAAC,CAAC;EAC1E;EAEAC,WAAWA,CAACC,KAAkB,EAAEC,SAAiB,GAAG,CAAC,CAAC,EAAE;IACtD;IACA,IAAI,CAACP,MAAM,CAACM,KAAK,CAACA,KAAK,CAAC;EAC1B;EAEAE,oBAAoBA,CAACC,GAAW,GAAG,EAAE,EAAE;IACrC,OAAOA,GAAG,IAAIA,GAAG,CAACC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC7D;EAEAC,eAAeA,CAACF,GAAW,GAAG,EAAE,EAAE;IAChC,OAAOA,GAAG,IAAI,IAAI,CAACD,oBAAoB,CAACC,GAAG,CAAC,CAACG,IAAI,CAAC,CAAC;EACrD;EAEAC,OAAOA,CAACC,KAAa,EAAE;IACrB,MAAMC,EAAE,GACN,wJAAwJ;IAC1J,OAAOD,KAAK,GAAGC,EAAE,CAACC,IAAI,CAACF,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK;EAC9C;AACF;AAEA,eAAe,IAAId,KAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}