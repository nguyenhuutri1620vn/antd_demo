[{"/home/trinh/Documents/code/mss-showme/src/index.tsx":"1","/home/trinh/Documents/code/mss-showme/src/reportWebVitals.ts":"2","/home/trinh/Documents/code/mss-showme/src/App.tsx":"3","/home/trinh/Documents/code/mss-showme/src/components/index.tsx":"4","/home/trinh/Documents/code/mss-showme/src/components/ChatBot/InputMessage.tsx":"5","/home/trinh/Documents/code/mss-showme/src/components/ChatBot/IconChatbot.tsx":"6","/home/trinh/Documents/code/mss-showme/src/services/InputServices.ts":"7","/home/trinh/Documents/code/mss-showme/src/components/ChatBot/ChatMessage.tsx":"8","/home/trinh/Documents/code/mss-showme/src/app/services.ts":"9","/home/trinh/Documents/code/mss-showme/src/app/actions.ts":"10","/home/trinh/Documents/code/mss-showme/src/app/utils/index.ts":"11","/home/trinh/Documents/code/mss-showme/src/app/config/index.ts":"12","/home/trinh/Documents/code/mss-showme/src/app/constants.ts":"13","/home/trinh/Documents/code/mss-showme/src/app/utils/logger.ts":"14","/home/trinh/Documents/code/mss-showme/src/app/utils/inject.ts":"15","/home/trinh/Documents/code/mss-showme/src/app/utils/localStorage.ts":"16","/home/trinh/Documents/code/mss-showme/src/app/utils/cookie.ts":"17","/home/trinh/Documents/code/mss-showme/src/app/utils/sessionStorage.ts":"18","/home/trinh/Documents/code/mss-showme/src/components/AnswerType/index.ts":"19","/home/trinh/Documents/code/mss-showme/src/components/AnswerType/text.tsx":"20","/home/trinh/Documents/code/mss-showme/src/components/AnswerType/table.tsx":"21","/home/trinh/Documents/code/mss-showme/src/app/utils/api.ts":"22"},{"size":662,"mtime":1690438266701,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1690435873635,"results":"25","hashOfConfig":"24"},{"size":199,"mtime":1690435873631,"results":"26","hashOfConfig":"24"},{"size":2365,"mtime":1695104059425,"results":"27","hashOfConfig":"24"},{"size":3133,"mtime":1694578845697,"results":"28","hashOfConfig":"24"},{"size":703,"mtime":1690539843779,"results":"29","hashOfConfig":"24"},{"size":1791,"mtime":1694664143515,"results":"30","hashOfConfig":"24"},{"size":3592,"mtime":1694765722258,"results":"31","hashOfConfig":"24"},{"size":200,"mtime":1695103033953,"results":"32","hashOfConfig":"24"},{"size":247,"mtime":1694594465796,"results":"33","hashOfConfig":"24"},{"size":1041,"mtime":1690435873635,"results":"34","hashOfConfig":"24"},{"size":772,"mtime":1690435873631,"results":"35","hashOfConfig":"24"},{"size":302,"mtime":1694594234915,"results":"36","hashOfConfig":"24"},{"size":2010,"mtime":1690435873635,"results":"37","hashOfConfig":"24"},{"size":428,"mtime":1690435873635,"results":"38","hashOfConfig":"24"},{"size":728,"mtime":1690435873635,"results":"39","hashOfConfig":"24"},{"size":1612,"mtime":1694594433133,"results":"40","hashOfConfig":"24"},{"size":563,"mtime":1690435873635,"results":"41","hashOfConfig":"24"},{"size":292,"mtime":1694575759916,"results":"42","hashOfConfig":"24"},{"size":82,"mtime":1694575475698,"results":"43","hashOfConfig":"24"},{"size":946,"mtime":1694575545037,"results":"44","hashOfConfig":"24"},{"size":3165,"mtime":1695098112954,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sy7ag1",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},"/home/trinh/Documents/code/mss-showme/src/index.tsx",[],[],"/home/trinh/Documents/code/mss-showme/src/reportWebVitals.ts",[],[],"/home/trinh/Documents/code/mss-showme/src/App.tsx",[],[],"/home/trinh/Documents/code/mss-showme/src/components/index.tsx",["119"],[],"/home/trinh/Documents/code/mss-showme/src/components/ChatBot/InputMessage.tsx",["120","121"],[],"import React, { FC, PropsWithChildren, useEffect, useMemo, useState } from 'react';\nimport { Button, Col, Input, Modal, Row } from 'antd';\nimport { MinusOutlined, SendOutlined } from '@ant-design/icons';\nimport ChatMessage from './ChatMessage';\nimport services from '../../services/InputServices';\n\nexport interface IInputProps {\n    submitMessage: any[]\n    inputRef: any\n    isOpen: boolean\n    isLoadingRespons: boolean,\n    setIsOpen: (value: boolean) => void;\n    setSubmitMessage: (value: any) => void;\n    setIsLoadingRespons: (value: boolean) => void;\n}\n\nconst Chatbot: FC<PropsWithChildren<IInputProps>> = ({ inputRef, isOpen, isLoadingRespons, setIsOpen, submitMessage, setSubmitMessage, setIsLoadingRespons }: any) => {\n    const [valueMessage, setValueMessage] = useState<string>('');\n\n    const input = {\n        valueMessage,\n        isLoadingRespons,\n        setIsOpen,\n        setSubmitMessage,\n        setValueMessage,\n        setIsLoadingRespons,\n    }\n\n    const {\n        sendMessage,\n        handleInput\n    } = useMemo(() => {\n        return services(input);\n    }, [...Object.values(input)]);\n\n    useEffect(() => {\n        if (isOpen) {\n            setTimeout(() => inputRef?.current?.focus({\n                cursor: 'end',\n            }), 100);\n        }\n    }, [isOpen, inputRef]);\n\n    return (\n        <>\n            <Modal\n                title=\"Insight Assistant\"\n                key=\"modal-chatbot\"\n                width={600}\n                wrapClassName='chatbot-modal'\n                style={{ position: 'absolute', bottom: 0, right: 16, padding: 0 }}\n                open={isOpen}\n                onCancel={() => setIsOpen(false)}\n                closeIcon={<MinusOutlined />}\n                footer={\n                    <Row>\n                        <Col span={22}>\n                            <Input\n                                placeholder='Enter your message...'\n                                style={{ borderRadius: 20, background: '#F0F0F0', color: '#262626', height: 40 }}\n                                ref={inputRef}\n                                maxLength={500}\n                                showCount\n                                onChange={handleInput}\n                                value={valueMessage}\n                                onKeyUp={(e) => sendMessage(e, 'key')}\n                            />\n                        </Col>\n                        <Col span={1} style={{ marginLeft: '6px' }}>\n                            <Button style={{ borderRadius: 100, height: 40 }} type='primary' onClick={(e) => sendMessage(e, 'mouse')} disabled={isLoadingRespons}>\n                                <SendOutlined style={{ fontSize: 22, margin: '-7px', paddingTop: '9px', paddingLeft: '3px' }} />\n                            </Button>\n                        </Col>\n                    </Row>\n                }>\n                <ChatMessage\n                    isOpen={isOpen}\n                    isLoadingRespons={isLoadingRespons}\n                    submitMessage={submitMessage}\n                />\n            </Modal>\n        </>\n    );\n};\n\nexport default Chatbot;\n","/home/trinh/Documents/code/mss-showme/src/components/ChatBot/IconChatbot.tsx",[],[],"/home/trinh/Documents/code/mss-showme/src/services/InputServices.ts",[],[],"/home/trinh/Documents/code/mss-showme/src/components/ChatBot/ChatMessage.tsx",["122","123"],[],"import React, { FC, PropsWithChildren, useEffect } from 'react';\nimport { RobotOutlined, UserOutlined } from '@ant-design/icons';\nimport { Avatar, Col, Row } from 'antd';\nimport { Content } from 'antd/lib/layout/layout';\nimport numeral from 'numeral';\nimport { getTypeReponse } from '../AnswerType';\n\nexport interface IChatMessage {\n    isOpen: boolean\n    isLoadingRespons: boolean\n    submitMessage: any[]\n}\n\nconst formatNumber = '0,0.00'\nconst ChatMessage: FC<PropsWithChildren<IChatMessage>> = ({ isOpen, isLoadingRespons, submitMessage }: any) => {\n    useEffect(() => {\n        let objDiv = document.querySelector('.ant-modal-body');\n        if (objDiv !== null) {\n            objDiv.scrollTop = objDiv.scrollHeight;\n        }\n    }, [isOpen, submitMessage]);\n\n    return (\n        <Content key=\"chatbot-messenge-chatbot-content\" id=\"chatbot-messenge-chatbot-content\">\n            <Row key=\"default-message\" className='message-chatbot message-bot'>\n                <Col span={2} className='avatar-bot'>\n                    <Avatar icon={<RobotOutlined />} size={40} />\n                </Col>\n                <Col span={21} className='messenge-content'>\n                    <p>\n                        Hi there. Feel free to ask me any question\n                    </p>\n                </Col>\n            </Row>\n            {\n                submitMessage?.map((message: any, index: number) => {\n                    return (\n                        message?.sender === 'user' ?\n                            <>\n                                <Row key={index} className={`message-chatbot message-user`}>\n                                    <Col span={22} className='messenge-content' style={{ paddingRight: '5px', boxSizing: 'border-box' }}>\n                                        <p >\n                                            {message?.text}\n                                        </p>\n                                    </Col>\n                                    <Col span={2} className='avatar-chatbot-user'>\n                                        <Avatar icon={<UserOutlined />} size={40} />\n                                    </Col>\n                                </Row>\n                            </>\n                            :\n                            <Row key={index} className={`message-chatbot message-bot`}>\n                                <Col span={2} className='avatar-bot'>\n                                    <Avatar icon={<RobotOutlined />} size={40} />\n                                </Col>\n                                <Col span={21} className='messenge-content'>\n                                    <p>\n                                        {getTypeReponse(message.json)(message)}\n                                    </p>\n                                </Col>\n                            </Row>\n                    )\n                })\n            }\n            {isLoadingRespons &&\n                <Row className={`message-chatbot message-bot`}>\n                    <Col span={2} className='avatar-bot' >\n                        <Avatar icon={<RobotOutlined />} size={40} />\n                    </Col>\n                    <Col span={21} style={{ background: '#E4E6EB', padding: '10px', borderRadius: 50, maxWidth: 50 }}>\n                        <div className=\"chatbot-typing\" >\n                            <span></span>\n                            <span></span>\n                            <span></span>\n                        </div>\n                    </Col>\n                </Row>}\n        </Content>\n    );\n};\n\nexport default ChatMessage;\n","/home/trinh/Documents/code/mss-showme/src/app/services.ts",[],[],"/home/trinh/Documents/code/mss-showme/src/app/actions.ts",["124"],[],"/home/trinh/Documents/code/mss-showme/src/app/utils/index.ts",["125"],[],"import Config from '../config';\nimport AppLogger from './logger';\n\nexport { default as UtilInject } from './inject';\nexport { default as localStorage } from './localStorage';\nexport { default as sessionStorage } from './sessionStorage';\nexport { default as cookie } from './cookie';\n\nclass Utils {\n  logger: AppLogger;\n\n  constructor() {\n    this.logger = new AppLogger(window.console, { level: Config.LOG_LEVEL });\n  }\n\n  handleError(error: Error | any, errorInfo: object = {}) {\n    // Log out the error\n    this.logger.error(error);\n  }\n\n  trimWhiteSpacesInput(str: string = '') {\n    return str && str.replace(/\\s\\s+/g, ' ').replace(/^\\s/, '');\n  }\n\n  trimWhiteSpaces(str: string = '') {\n    return str && this.trimWhiteSpacesInput(str).trim();\n  }\n\n  isEmail(email: string) {\n    const re =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i;\n    return email ? re.test(email.trim()) : false;\n  }\n}\n\nexport default new Utils();\n","/home/trinh/Documents/code/mss-showme/src/app/config/index.ts",[],[],"/home/trinh/Documents/code/mss-showme/src/app/constants.ts",[],[],"/home/trinh/Documents/code/mss-showme/src/app/utils/logger.ts",[],[],"/home/trinh/Documents/code/mss-showme/src/app/utils/inject.ts",[],[],"/home/trinh/Documents/code/mss-showme/src/app/utils/localStorage.ts",["126"],[],"const language = 'language';\nclass LocalStorageAdapter {\n  setItem(key: string, value: string): void {\n    localStorage.setItem(key, value);\n  }\n\n  getItem(key: string): string | null {\n    return localStorage.getItem(key);\n  }\n\n  getItemJson(key: string): any {\n    const value: any = localStorage.getItem(key);\n    return JSON.parse(value);\n  }\n\n  setItemJson(key: string, value: any): void {\n    localStorage.setItem(key, JSON.stringify(value));\n  }\n\n  removeItem(key: string): void {\n    localStorage.removeItem(key);\n  }\n\n  // Language\n  setLanguage(lang: string): void {\n    this.setItem(language, lang);\n  }\n  getLang(): string | null {\n    return this.getItem(language);\n  }\n}\n\nexport default new LocalStorageAdapter();\n","/home/trinh/Documents/code/mss-showme/src/app/utils/cookie.ts",["127"],[],"import Cookies, { CookieAttributes } from 'js-cookie';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nclass Cookie {\n  keys = {\n    TOKEN: 'token',\n  };\n\n  setItem(key: string, value: any, option: object, onlyDomain: boolean = true): void {\n    Cookies.set(key, value, this.calcOption(option, onlyDomain));\n  }\n\n  getItem(key: string): string | undefined {\n    return Cookies.get(key);\n  }\n\n  getItemJson(key: string): any {\n    try {\n      const value: any = Cookies.get(key);\n      return JSON.parse(value);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  setItemJson(key: string, value: any, option: any, onlyDomain = true): void {\n    Cookies.set(key, JSON.stringify(value), this.calcOption(option, onlyDomain));\n  }\n\n  removeItem(key: string, option: any, onlyDomain = true): void {\n    Cookies.remove(key, this.calcOption(option, onlyDomain));\n  }\n\n  calcOption(option: any, onlyDomain = true): CookieAttributes {\n    let calcOption: any = typeof option === 'object' ? _.cloneDeep(option) : {};\n    if (!calcOption.domain && onlyDomain) {\n      const host = window.location.host;\n      const hostSegments = host.split(':')[0].split('.');\n      const domain = hostSegments.splice(-2).join('.');\n      calcOption.domain = `.${domain}`;\n    }\n\n    if (!(calcOption.expires instanceof Date)) {\n      let expiredDate = null;\n      if (calcOption.expires > 0) {\n        expiredDate = new Date(calcOption.expires);\n      } else {\n        expiredDate = moment().add(30, 'minutes').toDate();\n      }\n      calcOption.expires = expiredDate;\n    }\n\n    return calcOption;\n  }\n}\n\nexport default new Cookie();\n","/home/trinh/Documents/code/mss-showme/src/app/utils/sessionStorage.ts",["128"],[],"class SessionStorageAdapter {\n  setItem(key: string, value: string): void {\n    sessionStorage.setItem(key, value);\n  }\n\n  getItem(key: string): string | null {\n    return sessionStorage.getItem(key);\n  }\n\n  getItemJson(key: string): any {\n    const value: any = sessionStorage.getItem(key);\n    return JSON.parse(value);\n  }\n\n  setItemJson(key: string, value: any): void {\n    sessionStorage.setItem(key, JSON.stringify(value));\n  }\n\n  removeItem(key: string): void {\n    return sessionStorage.removeItem(key);\n  }\n}\n\nexport default new SessionStorageAdapter();\n","/home/trinh/Documents/code/mss-showme/src/components/AnswerType/index.ts",[],[],"/home/trinh/Documents/code/mss-showme/src/components/AnswerType/text.tsx",[],[],"/home/trinh/Documents/code/mss-showme/src/components/AnswerType/table.tsx",[],[],"/home/trinh/Documents/code/mss-showme/src/app/utils/api.ts",["129"],[],"import axios, { AxiosInstance, AxiosRequestConfig, AxiosError, AxiosResponse } from 'axios';\nimport _ from 'lodash';\nimport Config from '../config';\nimport { localStorage } from '../utils';\nimport { Object } from '../types';\nimport Cookies from 'js-cookie';\n\ntype optionsType = object | undefined | null;\n\nexport class Api {\n  instance: AxiosInstance;\n  getDefaultHeader?(): Object<any> {\n    return { 'content-type': 'application/json' };\n  }\n\n  constructor(instance?: AxiosInstance, getDefaultHeader?: () => Object<any>) {\n    if (instance) {\n      this.instance = instance;\n      this.getDefaultHeader = getDefaultHeader;\n    } else {\n      this.instance = axios.create({\n        baseURL: 'http://172.16.9.47:8989',\n      });\n    }\n  }\n\n  getDefaultOptions(isAuth = true) {\n    return {\n      headers: {\n        ...(typeof this.getDefaultHeader === 'function' ? this.getDefaultHeader() : {}),\n        // ...auth,\n      },\n    };\n  }\n\n  attachToken(payload: any = {}) {\n    const token = Cookies.get('_token');\n    const sessionId = localStorage.getItem('sessionId');\n    return {\n      ...payload,\n      Token: token,\n      SessionId: sessionId,\n    };\n  }\n\n  handleError(error: AxiosError) {\n    if (error.response && error.response.status === 401) {\n      Cookies.remove('_token');\n      window.location.href = Config.SIGN_IN_URL + '?url_new_insight=' + window.location.href.replaceAll('&', \"and\");\n    }\n  }\n\n  async createPromise(response: Promise<AxiosResponse>): Promise<AxiosResponse> {\n    return new Promise((resolve, reject) => {\n      response.then(\n        (result: any) => {\n          resolve(result);\n        },\n        error => {\n          this.handleError(error);\n          reject(error);\n        }\n      );\n    });\n  }\n\n  fetch(url: string, options = {}) {\n    return this.createPromise(this.get(url, options, false));\n  }\n\n  get(url: string, options: any = {}, isAuth = true): Promise<AxiosResponse> {\n    const finalOptions = _.merge(this.getDefaultOptions(isAuth), options);\n    return this.createPromise(this.instance.get(url, finalOptions));\n  }\n\n  put(url: string, payload: any = null, options: any = {}, isAuth = true): Promise<AxiosResponse> {\n    const finalOptions = _.merge(this.getDefaultOptions(isAuth), options);\n    const finalPayload = this.attachToken(payload);\n    return this.createPromise(this.instance.put(url, finalPayload, finalOptions));\n  }\n\n  post(url: string, payload: any = null, options: optionsType = {}, isAuth = true): Promise<AxiosResponse> {\n    const finalOptions = _.merge(this.getDefaultOptions(isAuth), options);\n    const finalPayload = this.attachToken(payload);\n    return this.createPromise(this.instance.post(url, finalPayload, finalOptions));\n  }\n\n  delete(url: string, payload: any = null, options: any = {}, isAuth = true): Promise<AxiosResponse> {\n    const finalOptions: AxiosRequestConfig = _.merge(this.getDefaultOptions(isAuth), options);\n    const finalPayload = this.attachToken(payload);\n\n    if (finalPayload) {\n      finalOptions.data = finalPayload;\n    }\n\n    return this.createPromise(this.instance.request({ method: 'DELETE', url, ...finalOptions }));\n  }\n}\n\nexport default new Api();\n",{"ruleId":"130","severity":1,"message":"131","line":4,"column":13,"nodeType":"132","messageId":"133","endLine":4,"endColumn":25},{"ruleId":"134","severity":1,"message":"135","line":34,"column":8,"nodeType":"136","endLine":34,"endColumn":33,"suggestions":"137"},{"ruleId":"134","severity":1,"message":"138","line":34,"column":9,"nodeType":"139","endLine":34,"endColumn":32},{"ruleId":"130","severity":1,"message":"140","line":5,"column":8,"nodeType":"132","messageId":"133","endLine":5,"endColumn":15},{"ruleId":"130","severity":1,"message":"141","line":14,"column":7,"nodeType":"132","messageId":"133","endLine":14,"endColumn":19},{"ruleId":"130","severity":1,"message":"142","line":2,"column":13,"nodeType":"132","messageId":"133","endLine":2,"endColumn":18},{"ruleId":"143","severity":1,"message":"144","line":36,"column":1,"nodeType":"145","endLine":36,"endColumn":28},{"ruleId":"143","severity":1,"message":"144","line":33,"column":1,"nodeType":"145","endLine":33,"endColumn":42},{"ruleId":"143","severity":1,"message":"144","line":58,"column":1,"nodeType":"145","endLine":58,"endColumn":29},{"ruleId":"143","severity":1,"message":"144","line":24,"column":1,"nodeType":"145","endLine":24,"endColumn":44},{"ruleId":"143","severity":1,"message":"144","line":100,"column":1,"nodeType":"145","endLine":100,"endColumn":26},"@typescript-eslint/no-unused-vars","'ChatServices' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'input'. Either include it or remove the dependency array.","ArrayExpression",["146"],"React Hook useMemo has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.","SpreadElement","'numeral' is defined but never used.","'formatNumber' is assigned a value but never used.","'types' is defined but never used.","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"147","fix":"148"},"Update the dependencies array to be: [input]",{"range":"149","text":"150"},[1088,1113],"[input]"]