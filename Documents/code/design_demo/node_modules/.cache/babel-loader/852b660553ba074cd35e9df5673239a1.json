{"ast":null,"code":"export function createProgram(gl, vshader, fshader) {\n  var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);\n  var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);\n\n  if (!vertexShader || !fragmentShader) {\n    return null;\n  }\n\n  var program = gl.createProgram();\n\n  if (!program) {\n    return null;\n  }\n\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n  if (!linked) {\n    var error = gl.getProgramInfoLog(program);\n    console.warn('Failed to link program: ' + error);\n    gl.deleteProgram(program);\n    gl.deleteShader(fragmentShader);\n    gl.deleteShader(vertexShader);\n    return null;\n  }\n\n  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  for (var i = 0; i < numAttributes; i++) {\n    var attribute = gl.getActiveAttrib(program, i);\n    program[attribute.name] = gl.getAttribLocation(program, attribute.name);\n  }\n\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n  for (var i$1 = 0; i$1 < numUniforms; i$1++) {\n    var uniform = gl.getActiveUniform(program, i$1);\n    program[uniform.name] = gl.getUniformLocation(program, uniform.name);\n  }\n\n  program.vertexShader = vertexShader;\n  program.fragmentShader = fragmentShader;\n  return program;\n}\nexport function loadShader(gl, type, source) {\n  var shader = gl.createShader(type);\n\n  if (shader == null) {\n    console.warn('unable to create shader');\n    return null;\n  }\n\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!compiled) {\n    var error = gl.getShaderInfoLog(shader);\n    console.warn('Failed to compile shader: ' + error);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\nexport function createTexture(gl, filter, data, width, height) {\n  var texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return texture;\n}\nexport function createDataTexture(gl, filter, data) {\n  var texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filter);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  return texture;\n}\nexport function bindTexture(gl, texture, unit) {\n  gl.activeTexture(gl.TEXTURE0 + unit);\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n}\nexport function createBuffer(gl, data) {\n  var buffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n  return buffer;\n}\nexport function bindAttriBuffer(gl, attrName, vertices, count, program) {\n  var buffer = gl.createBuffer();\n\n  if (!buffer) {\n    console.warn('failed create vertex buffer');\n  }\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n  var attr = gl.getAttribLocation(program, attrName);\n  gl.vertexAttribPointer(attr, count, gl.FLOAT, false, 0, 0);\n  gl.enableVertexAttribArray(attr);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  return {\n    buffer: buffer,\n    attr: attr,\n    count: count\n  };\n}\nexport function bindAttriIndicesBuffer(gl, indices) {\n  var buffer = gl.createBuffer();\n\n  if (!buffer) {\n    console.warn('failed create vertex buffer');\n  }\n\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);\n  return buffer;\n}\nexport function bindUnifrom(gl, unifromName, data, program, vec) {\n  var uniform = gl.getUniformLocation(program, unifromName);\n\n  if (uniform < 0) {\n    console.warn('无法获取 uniform 变量的存储位置');\n  }\n\n  setUnifrom(gl, uniform, data, vec);\n  return uniform;\n}\nexport function setUnifrom(gl, location, data, vec) {\n  switch (vec) {\n    case 'float':\n      gl.uniform1f(location, data);\n      break;\n\n    case 'vec2':\n      gl.uniform2fv(location, data);\n      break;\n\n    case 'vec3':\n      gl.uniform3fv(location, data);\n      break;\n\n    case 'vec4':\n      gl.uniform4fv(location, data);\n      break;\n\n    case 'bool':\n      gl.uniform1i(location, data);\n      break;\n\n    case 'sampler2d':\n      break;\n\n    case 'mat4':\n      gl.uniformMatrix4fv(location, false, data);\n      break;\n  }\n}\nexport function initFramebuffer(gl) {\n  var drawingBufferWidth = gl.drawingBufferWidth,\n      drawingBufferHeight = gl.drawingBufferHeight;\n  var OFFER_SCREEN_WIDTH = drawingBufferWidth;\n  var OFFER_SCREEN_HEIGHT = drawingBufferHeight;\n  var FRAMEBUFFER = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, FRAMEBUFFER);\n  var depthbuffer = gl.createRenderbuffer();\n  gl.bindRenderbuffer(gl.RENDERBUFFER, depthbuffer);\n  gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, OFFER_SCREEN_WIDTH, OFFER_SCREEN_HEIGHT);\n  gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthbuffer);\n  var texture = gl.createTexture();\n  var textureSize = 1024;\n  FRAMEBUFFER.texture = texture;\n  FRAMEBUFFER.width = OFFER_SCREEN_WIDTH;\n  FRAMEBUFFER.height = OFFER_SCREEN_HEIGHT;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, OFFER_SCREEN_WIDTH, OFFER_SCREEN_HEIGHT, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  return {\n    FRAMEBUFFER: FRAMEBUFFER,\n    OFFER_SCREEN_WIDTH: OFFER_SCREEN_WIDTH,\n    OFFER_SCREEN_HEIGHT: OFFER_SCREEN_HEIGHT\n  };\n}","map":null,"metadata":{},"sourceType":"module"}