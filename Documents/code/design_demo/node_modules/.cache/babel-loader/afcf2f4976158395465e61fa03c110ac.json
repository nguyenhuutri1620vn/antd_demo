{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { getMask, rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { LineArcTriangulation } from '../../core/triangulation';\nimport { EARTH_RADIUS } from '../../earth/utils';\nvar arc3d_line_frag = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\n\\nuniform float u_opacity;\\nuniform float u_textureBlend;\\nuniform float u_blur : 0.9;\\nuniform float u_line_type: 0.0;\\n// varying vec2 v_normal;\\nvarying vec4 v_dash_array;\\nvarying vec4 v_color;\\n\\nuniform float u_line_texture: 0.0;\\nuniform sampler2D u_texture;\\nuniform vec2 u_textSize;\\nvarying float v_segmentIndex;\\nuniform float segmentNumber;\\n\\nvarying vec2 v_iconMapUV;\\n\\nuniform float u_time;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\n\\nvarying mat4 styleMappingMat;\\n\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float opacity = styleMappingMat[0][0];\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_distance_ratio = styleMappingMat[3].g; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  gl_FragColor = v_color;\\n\\n  gl_FragColor.a *= opacity;\\n  if(u_line_type == LineTypeDash) {\\n    float flag = 0.;\\n    float dashLength = mod(d_distance_ratio, v_dash_array.x + v_dash_array.y + v_dash_array.z + v_dash_array.w);\\n    if(dashLength < v_dash_array.x || (dashLength > (v_dash_array.x + v_dash_array.y) && dashLength <  v_dash_array.x + v_dash_array.y + v_dash_array.z)) {\\n      flag = 1.;\\n    }\\n    gl_FragColor.a *=flag;\\n  }\\n\\n  if(u_aimate.x == Animate && u_line_texture != LineTexture) {\\n      animateSpeed = u_time / u_aimate.y;\\n      float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_aimate.z)* (1.0/ u_aimate.z) + u_time / u_aimate.y);\\n\\n      alpha = (alpha + u_aimate.w -1.0) / u_aimate.w;\\n      // alpha = smoothstep(0., 1., alpha);\\n      alpha = clamp(alpha, 0.0, 1.0);\\n      gl_FragColor.a *= alpha;\\n\\n      // u_aimate \\n      // x enable\\n      // y duration\\n      // z interval\\n      // w trailLength\\n  }\\n\\n  if(u_line_texture == LineTexture && u_line_type != LineTypeDash) { // while load texture\\n    // float arcRadio = smoothstep( 0.0, 1.0, (v_segmentIndex / segmentNumber));\\n    float arcRadio = v_segmentIndex / (segmentNumber - 1.0);\\n    float count = styleMappingMat[3].b; // // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    float time = 0.0;\\n    if(u_aimate.x == Animate) {\\n      time = u_time / u_aimate.y;\\n    }\\n    float redioCount = arcRadio * count;\\n\\n    float u = fract(redioCount - time);\\n\\n    float v = styleMappingMat[3].a;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    vec4 pattern = texture2D(u_texture, uv);\\n\\n    if(u_aimate.x == Animate) {\\n      float currentPlane = floor(redioCount - time);\\n      float textureStep = floor(count * u_aimate.z);\\n      float a = mod(currentPlane, textureStep);\\n      if(a < textureStep - 1.0) {\\n        pattern = vec4(0.0);\\n      }\\n    }\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      gl_FragColor = filterColor(gl_FragColor + pattern);\\n    } else { // replace\\n        pattern.a *= opacity;\\n        if(gl_FragColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n          discard;\\n        } else {\\n          gl_FragColor = filterColor(pattern);\\n        }\\n    }\\n\\n  } else {\\n    gl_FragColor = filterColor(gl_FragColor);\\n  }\\n}\\n\";\nvar arc3d_line_vert = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\nattribute vec3 a_Position;\\nattribute vec4 a_Instance;\\nattribute vec4 a_Color;\\nattribute float a_Size;\\n\\nuniform float u_globel;\\nuniform float u_globel_radius;\\nuniform float u_global_height: 10;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nuniform float segmentNumber;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\nvarying vec4 v_color;\\n// varying vec2 v_normal;\\nuniform float u_line_type: 0.0;\\nuniform vec4 u_dash_array: [10.0, 5., 0, 0];\\nvarying vec4 v_dash_array;\\n\\nuniform float u_icon_step: 100;\\nuniform float u_line_texture: 0.0;\\nvarying float v_segmentIndex;\\n\\nattribute vec2 a_iconMapUV;\\nvarying vec2 v_iconMapUV;\\n\\nuniform float u_opacity: 1.0;\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat maps (float value, float start1, float stop1, float start2, float stop2) {\\n  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\\n}\\n\\nfloat getSegmentRatio(float index) {\\n  return smoothstep(0.0, 1.0, index / (segmentNumber - 1.0));\\n}\\n\\nfloat paraboloid(vec2 source, vec2 target, float ratio) {\\n  vec2 x = mix(source, target, ratio);\\n  vec2 center = mix(source, target, 0.5);\\n  float dSourceCenter = distance(source, center);\\n  float dXCenter = distance(x, center);\\n  return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter);\\n}\\n\\nvec3 getPos(vec2 source, vec2 target, float segmentRatio) {\\n  float vertex_height = paraboloid(source, target, segmentRatio);\\n\\n  return vec3(\\n    mix(source, target, segmentRatio),\\n    sqrt(max(0.0, vertex_height))\\n  );\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  return reverse_offset_normal(vec3(dir_screenspace,1.0)).xy * sign(offset_direction);\\n}\\n\\nfloat torad(float deg) {\\n  return (deg / 180.0) * acos(-1.0);\\n}\\n\\nvec3 lglt2xyz(vec2 lnglat) {\\n  float pi = 3.1415926;\\n  // TODO: + Math.PI/2 \\u662F\\u4E3A\\u4E86\\u5BF9\\u9F50\\u5750\\u6807\\n  float lng = torad(lnglat.x) + pi / 2.0;\\n  float lat = torad(lnglat.y);\\n\\n  // TODO: \\u624B\\u52A8\\u589E\\u52A0\\u4E00\\u4E9B\\u504F\\u79FB\\uFF0C\\u51CF\\u8F7B\\u9762\\u7684\\u51B2\\u7A81\\n  float radius = u_globel_radius;\\n\\n  float z = radius * cos(lat) * cos(lng);\\n  float x = radius * cos(lat) * sin(lng);\\n  float y = radius * sin(lat);\\n  return vec3(x, y, z);\\n}\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0  // dataset \\u6570\\u636E\\u96C6\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  v_color = a_Color;\\n  vec2 source = project_position(vec4(a_Instance.rg, 0, 0)).xy;\\n  vec2 target = project_position(vec4(a_Instance.ba, 0, 0)).xy;\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n\\n  float d_distance_ratio;\\n   if(u_line_type == LineTypeDash) {\\n    d_distance_ratio = segmentIndex / segmentNumber;\\n    // float total_Distance = pixelDistance(a_Instance.rg, a_Instance.ba) / 2.0 * PI;\\n    vec2 s = source;\\n    vec2 t = target;\\n    \\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      s = unProjCustomCoord(source);\\n      t = unProjCustomCoord(target);\\n    }\\n    float total_Distance = pixelDistance(s, t) / 2.0 * PI;\\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / (total_Distance / segmentNumber * segmentIndex);\\n  }\\n    if(u_aimate.x == Animate) {\\n      d_distance_ratio = segmentIndex / segmentNumber;\\n  }\\n  styleMappingMat[3].g = d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  vec3 curr = getPos(source, target, segmentRatio);\\n  vec3 next = getPos(source, target, nextSegmentRatio);\\n  vec2 offset = getExtrusionOffset((next.xy - curr.xy) * indexDir, a_Position.y);\\n  // v_normal = getNormal((next.xy - curr.xy) * indexDir, a_Position.y);\\n\\n\\n  v_segmentIndex = a_Position.x;\\n  if(LineTexture == u_line_texture && u_line_type != LineTypeDash) { // \\u5F00\\u542F\\u8D34\\u56FE\\u6A21\\u5F0F  \\n\\n    float arcDistrance = length(source - target);\\n    float pixelLen =  project_pixel_texture(u_icon_step);\\n    styleMappingMat[3].b = floor(arcDistrance/pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    vec2 projectOffset = project_pixel(offset);\\n    float lineOffsetWidth = length(projectOffset + projectOffset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size);  // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\uFF0C\\u6309\\u5730\\u56FE\\u7B49\\u7EA7\\u7F29\\u653E\\u540E\\u7684\\u8DDD\\u79BB\\n    styleMappingMat[3].a = lineOffsetWidth/linePixelSize;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    v_iconMapUV = a_iconMapUV;\\n  }\\n  \\n\\n  // gl_Position = project_common_position_to_clipspace(vec4(curr.xy + project_pixel(offset), curr.z, 1.0));\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(curr.xy + project_pixel(offset), curr.z, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(curr.xy + project_pixel(offset), curr.z, 1.0));\\n  }\\n\\n  // \\u5730\\u7403\\u6A21\\u5F0F\\n  if(u_globel > 0.0) {\\n    vec3 startLngLat = lglt2xyz(a_Instance.rg);\\n    vec3 endLngLat = lglt2xyz(a_Instance.ba);\\n    float globalRadius = length(startLngLat);\\n\\n    vec3 lineDir = normalize(endLngLat - startLngLat);\\n    vec3 midPointDir = normalize((startLngLat + endLngLat)/2.0);\\n\\n    // \\u7EBF\\u7684\\u504F\\u79FB\\n    vec3 lnglatOffset = cross(lineDir, midPointDir) * a_Position.y;\\n    // \\u8BA1\\u7B97\\u8D77\\u59CB\\u70B9\\u548C\\u7EC8\\u6B62\\u70B9\\u7684\\u8DDD\\u79BB\\n    float lnglatLength = length(a_Instance.rg - a_Instance.ba)/50.0;\\n    // \\u8BA1\\u7B97\\u98DE\\u7EBF\\u5404\\u4E2A\\u8282\\u70B9\\u76F8\\u5E94\\u7684\\u9AD8\\u5EA6\\n    float lineHeight = u_global_height * (-4.0*segmentRatio*segmentRatio + 4.0 * segmentRatio) * lnglatLength;\\n    // \\u5730\\u7403\\u70B9\\u4F4D\\n    vec3 globalPoint = normalize(mix(startLngLat, endLngLat, segmentRatio)) * (globalRadius + lineHeight) + lnglatOffset * a_Size;\\n    \\n    gl_Position = u_ViewProjectionMatrix * vec4(globalPoint, 1.0);\\n  }\\n \\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar arc3d_linear_frag = \"\\n#define Animate 0.0\\n\\nuniform float u_opacity;\\nuniform float u_blur : 0.9;\\nvarying float v_segmentIndex;\\nuniform float segmentNumber;\\n\\n\\nuniform float u_time;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\n\\nuniform float u_linearColor: 0;\\nuniform vec4 u_sourceColor;\\nuniform vec4 u_targetColor;\\n\\nvarying mat4 styleMappingMat;\\n\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  float opacity = styleMappingMat[0][0];\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_distance_ratio = styleMappingMat[3].g; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n\\n  gl_FragColor = mix(u_sourceColor, u_targetColor, v_segmentIndex/segmentNumber);\\n\\n  gl_FragColor.a *= opacity;\\n\\n  if(u_aimate.x == Animate) {\\n      animateSpeed = u_time / u_aimate.y;\\n      float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_aimate.z)* (1.0/ u_aimate.z) + u_time / u_aimate.y);\\n\\n      alpha = (alpha + u_aimate.w -1.0) / u_aimate.w;\\n      // alpha = smoothstep(0., 1., alpha);\\n      alpha = clamp(alpha, 0.0, 1.0);\\n      gl_FragColor.a *= alpha;\\n\\n      // u_aimate \\n      // x enable\\n      // y duration\\n      // z interval\\n      // w trailLength\\n  }\\n\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar arc3d_linear_vert = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\nattribute vec3 a_Position;\\nattribute vec4 a_Instance;\\nattribute vec4 a_Color;\\nattribute float a_Size;\\n\\nuniform float u_globel;\\nuniform float u_globel_radius;\\nuniform float u_global_height: 10;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nuniform float segmentNumber;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\nvarying vec4 v_color;\\n// varying vec2 v_normal;\\nuniform float u_line_type: 0.0;\\nuniform vec4 u_dash_array: [10.0, 5., 0, 0];\\nvarying vec4 v_dash_array;\\n\\nuniform float u_icon_step: 100;\\nuniform float u_line_texture: 0.0;\\nvarying float v_segmentIndex;\\n\\nattribute vec2 a_iconMapUV;\\nvarying vec2 v_iconMapUV;\\n\\nuniform float u_opacity: 1.0;\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"project\\\"\\n#pragma include \\\"picking\\\"\\n\\nfloat maps (float value, float start1, float stop1, float start2, float stop2) {\\n  return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\\n}\\n\\nfloat getSegmentRatio(float index) {\\n  return smoothstep(0.0, 1.0, index / (segmentNumber - 1.0));\\n}\\n\\nfloat paraboloid(vec2 source, vec2 target, float ratio) {\\n  vec2 x = mix(source, target, ratio);\\n  vec2 center = mix(source, target, 0.5);\\n  float dSourceCenter = distance(source, center);\\n  float dXCenter = distance(x, center);\\n  return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter);\\n}\\n\\nvec3 getPos(vec2 source, vec2 target, float segmentRatio) {\\n  float vertex_height = paraboloid(source, target, segmentRatio);\\n\\n  return vec3(\\n    mix(source, target, segmentRatio),\\n    sqrt(max(0.0, vertex_height))\\n  );\\n}\\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n\\n  vec2 offset = dir_screenspace * offset_direction * setPickingSize(a_Size) / 2.0;\\n\\n  return offset;\\n}\\nvec2 getNormal(vec2 line_clipspace, float offset_direction) {\\n  // normalized direction of the line\\n  vec2 dir_screenspace = normalize(line_clipspace);\\n  // rotate by 90 degrees\\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\\n  return reverse_offset_normal(vec3(dir_screenspace,1.0)).xy * sign(offset_direction);\\n}\\n\\nfloat torad(float deg) {\\n  return (deg / 180.0) * acos(-1.0);\\n}\\n\\nvec3 lglt2xyz(vec2 lnglat) {\\n  float pi = 3.1415926;\\n  // TODO: + Math.PI/2 \\u662F\\u4E3A\\u4E86\\u5BF9\\u9F50\\u5750\\u6807\\n  float lng = torad(lnglat.x) + pi / 2.0;\\n  float lat = torad(lnglat.y);\\n\\n  // TODO: \\u624B\\u52A8\\u589E\\u52A0\\u4E00\\u4E9B\\u504F\\u79FB\\uFF0C\\u51CF\\u8F7B\\u9762\\u7684\\u51B2\\u7A81\\n  float radius = u_globel_radius;\\n\\n  float z = radius * cos(lat) * cos(lng);\\n  float x = radius * cos(lat) * sin(lng);\\n  float y = radius * sin(lat);\\n  return vec3(x, y, z);\\n}\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0  // dataset \\u6570\\u636E\\u96C6\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  v_color = a_Color;\\n  vec2 source = project_position(vec4(a_Instance.rg, 0, 0)).xy;\\n  vec2 target = project_position(vec4(a_Instance.ba, 0, 0)).xy;\\n  float segmentIndex = a_Position.x;\\n  float segmentRatio = getSegmentRatio(segmentIndex);\\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\\n\\n  float d_distance_ratio;\\n   if(u_line_type == LineTypeDash) {\\n    d_distance_ratio = segmentIndex / segmentNumber;\\n    // float total_Distance = pixelDistance(a_Instance.rg, a_Instance.ba) / 2.0 * PI;\\n    vec2 s = source;\\n    vec2 t = target;\\n    \\n    if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      s = unProjCustomCoord(source);\\n      t = unProjCustomCoord(target);\\n    }\\n    float total_Distance = pixelDistance(s, t) / 2.0 * PI;\\n    v_dash_array = pow(2.0, 20.0 - u_Zoom) * u_dash_array / (total_Distance / segmentNumber * segmentIndex);\\n  }\\n    if(u_aimate.x == Animate) {\\n      d_distance_ratio = segmentIndex / segmentNumber;\\n  }\\n  styleMappingMat[3].g = d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n\\n  float nextSegmentRatio = getSegmentRatio(segmentIndex + indexDir);\\n  vec3 curr = getPos(source, target, segmentRatio);\\n  vec3 next = getPos(source, target, nextSegmentRatio);\\n  vec2 offset = getExtrusionOffset((next.xy - curr.xy) * indexDir, a_Position.y);\\n  // v_normal = getNormal((next.xy - curr.xy) * indexDir, a_Position.y);\\n\\n\\n  v_segmentIndex = a_Position.x;\\n  if(LineTexture == u_line_texture && u_line_type != LineTypeDash) { // \\u5F00\\u542F\\u8D34\\u56FE\\u6A21\\u5F0F  \\n\\n    float arcDistrance = length(source - target);\\n    float pixelLen =  project_pixel_texture(u_icon_step);\\n    styleMappingMat[3].b = floor(arcDistrance/pixelLen); // \\u8D34\\u56FE\\u5728\\u5F27\\u7EBF\\u4E0A\\u91CD\\u590D\\u7684\\u6570\\u91CF\\n\\n    vec2 projectOffset = project_pixel(offset);\\n    float lineOffsetWidth = length(projectOffset + projectOffset * sign(a_Position.y)); // \\u7EBF\\u6A2A\\u5411\\u504F\\u79FB\\u7684\\u8DDD\\u79BB\\n    float linePixelSize = project_pixel(a_Size);  // \\u5B9A\\u70B9\\u4F4D\\u7F6E\\u504F\\u79FB\\uFF0C\\u6309\\u5730\\u56FE\\u7B49\\u7EA7\\u7F29\\u653E\\u540E\\u7684\\u8DDD\\u79BB\\n    styleMappingMat[3].a = lineOffsetWidth/linePixelSize;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    v_iconMapUV = a_iconMapUV;\\n  }\\n  \\n\\n  // gl_Position = project_common_position_to_clipspace(vec4(curr.xy + project_pixel(offset), curr.z, 1.0));\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(curr.xy + project_pixel(offset), curr.z, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(curr.xy + project_pixel(offset), curr.z, 1.0));\\n  }\\n\\n  // \\u5730\\u7403\\u6A21\\u5F0F\\n  if(u_globel > 0.0) {\\n    vec3 startLngLat = lglt2xyz(a_Instance.rg);\\n    vec3 endLngLat = lglt2xyz(a_Instance.ba);\\n    float globalRadius = length(startLngLat);\\n\\n    vec3 lineDir = normalize(endLngLat - startLngLat);\\n    vec3 midPointDir = normalize((startLngLat + endLngLat)/2.0);\\n\\n    // \\u7EBF\\u7684\\u504F\\u79FB\\n    vec3 lnglatOffset = cross(lineDir, midPointDir) * a_Position.y;\\n    // \\u8BA1\\u7B97\\u8D77\\u59CB\\u70B9\\u548C\\u7EC8\\u6B62\\u70B9\\u7684\\u8DDD\\u79BB\\n    float lnglatLength = length(a_Instance.rg - a_Instance.ba)/50.0;\\n    // \\u8BA1\\u7B97\\u98DE\\u7EBF\\u5404\\u4E2A\\u8282\\u70B9\\u76F8\\u5E94\\u7684\\u9AD8\\u5EA6\\n    float lineHeight = u_global_height * (-4.0*segmentRatio*segmentRatio + 4.0 * segmentRatio) * lnglatLength;\\n    // \\u5730\\u7403\\u70B9\\u4F4D\\n    vec3 globalPoint = normalize(mix(startLngLat, endLngLat, segmentRatio)) * (globalRadius + lineHeight) + lnglatOffset * a_Size;\\n    \\n    gl_Position = u_ViewProjectionMatrix * vec4(globalPoint, 1.0);\\n  }\\n \\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\nvar lineStyleObj = {\n  solid: 0.0,\n  dash: 1.0\n};\n\nvar Arc3DModel = function (_BaseModel) {\n  _inherits(Arc3DModel, _BaseModel);\n\n  var _super = _createSuper(Arc3DModel);\n\n  function Arc3DModel() {\n    var _this;\n\n    _classCallCheck(this, Arc3DModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n\n        _this.layer.render();\n\n        return;\n      }\n\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Arc3DModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity,\n          sourceColor = _ref.sourceColor,\n          targetColor = _ref.targetColor,\n          _ref$textureBlend = _ref.textureBlend,\n          textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,\n          _ref$lineType = _ref.lineType,\n          lineType = _ref$lineType === void 0 ? 'solid' : _ref$lineType,\n          _ref$dashArray = _ref.dashArray,\n          dashArray = _ref$dashArray === void 0 ? [10, 5] : _ref$dashArray,\n          _ref$lineTexture = _ref.lineTexture,\n          lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,\n          _ref$iconStep = _ref.iconStep,\n          iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,\n          _ref$segmentNumber = _ref.segmentNumber,\n          segmentNumber = _ref$segmentNumber === void 0 ? 30 : _ref$segmentNumber,\n          _ref$globalArcHeight = _ref.globalArcHeight,\n          globalArcHeight = _ref$globalArcHeight === void 0 ? 10 : _ref$globalArcHeight;\n\n      if (dashArray.length === 2) {\n        dashArray.push(0, 0);\n      }\n\n      var useLinearColor = 0;\n      var sourceColorArr = [0, 0, 0, 0];\n      var targetColorArr = [0, 0, 0, 0];\n\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_globel: this.mapService.version === 'GLOBEL' ? 1 : 0,\n        u_globel_radius: EARTH_RADIUS,\n        u_global_height: globalArcHeight,\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n        segmentNumber: segmentNumber,\n        u_line_type: lineStyleObj[lineType] || 0.0,\n        u_dash_array: dashArray,\n        u_texture: this.texture,\n        u_line_texture: lineTexture ? 1.0 : 0.0,\n        u_icon_step: iconStep,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_linearColor: useLinearColor,\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr\n      };\n    }\n  }, {\n    key: \"getAnimateUniforms\",\n    value: function getAnimateUniforms() {\n      var _ref2 = this.layer.getLayerConfig(),\n          animateOption = _ref2.animateOption;\n\n      return {\n        u_aimate: this.animateOption2Array(animateOption),\n        u_time: this.layer.getLayerAnimateTime()\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.updateTexture();\n      this.iconService.on('imageUpdate', this.updateTexture);\n      return this.buildModels();\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture, _this$dataTexture;\n\n      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders() {\n      var _ref3 = this.layer.getLayerConfig(),\n          sourceColor = _ref3.sourceColor,\n          targetColor = _ref3.targetColor,\n          lineType = _ref3.lineType;\n\n      if (sourceColor && targetColor) {\n        return {\n          frag: arc3d_linear_frag,\n          vert: arc3d_linear_vert,\n          type: 'linear'\n        };\n      } else {\n        return {\n          frag: arc3d_line_frag,\n          vert: arc3d_line_vert,\n          type: 'normal'\n        };\n      }\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      var _ref4 = this.layer.getLayerConfig(),\n          _ref4$segmentNumber = _ref4.segmentNumber,\n          segmentNumber = _ref4$segmentNumber === void 0 ? 30 : _ref4$segmentNumber,\n          _ref4$mask = _ref4.mask,\n          mask = _ref4$mask === void 0 ? false : _ref4$mask,\n          _ref4$maskInside = _ref4.maskInside,\n          maskInside = _ref4$maskInside === void 0 ? true : _ref4$maskInside;\n\n      var _this$getShaders = this.getShaders(),\n          frag = _this$getShaders.frag,\n          vert = _this$getShaders.vert,\n          type = _this$getShaders.type;\n\n      return [this.layer.buildLayerModel({\n        moduleName: 'arc3Dline' + type,\n        vertexShader: vert,\n        fragmentShader: frag,\n        triangulation: LineArcTriangulation,\n        blend: this.getBlend(),\n        segmentNumber: segmentNumber,\n        stencil: getMask(mask, maskInside)\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'instance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Instance',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 4,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4], vertex[5], vertex[6]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_iconMapUV',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var iconMap = _this2.iconService.getIconMap();\n\n            var texture = feature.texture;\n\n            var _ref5 = iconMap[texture] || {\n              x: 0,\n              y: 0\n            },\n                x = _ref5.x,\n                y = _ref5.y;\n\n            return [x, y];\n          }\n        }\n      });\n    }\n  }]);\n\n  return Arc3DModel;\n}(BaseModel);\n\nexport { Arc3DModel as default };","map":null,"metadata":{},"sourceType":"module"}