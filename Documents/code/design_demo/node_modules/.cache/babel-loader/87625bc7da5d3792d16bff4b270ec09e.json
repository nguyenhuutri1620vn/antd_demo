{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getArcParams } from '@antv/g-canvas';\nimport { isNumberEqual, isEqual } from '@antv/util';\nimport { getArcPath, getSectorPath } from '../../util/graphics';\n\nfunction getAngle(startPoint, arcPath) {\n  var _a;\n\n  var _b = getArcParams(startPoint, arcPath),\n      startAngle = _b.startAngle,\n      endAngle = _b.endAngle;\n\n  if (!isNumberEqual(startAngle, -Math.PI * 0.5) && startAngle < -Math.PI * 0.5) {\n    startAngle += Math.PI * 2;\n  }\n\n  if (!isNumberEqual(endAngle, -Math.PI * 0.5) && endAngle < -Math.PI * 0.5) {\n    endAngle += Math.PI * 2;\n  }\n\n  if (arcPath[5] === 0) {\n    // 逆时针，需要将 startAngle 和 endAngle 转置，因为 G2 极坐标系为顺时针方向\n    _a = [endAngle, startAngle], startAngle = _a[0], endAngle = _a[1];\n  }\n\n  if (isNumberEqual(startAngle, Math.PI * 1.5)) {\n    startAngle = Math.PI * -0.5;\n  }\n\n  if (isNumberEqual(endAngle, Math.PI * -0.5)) {\n    endAngle = Math.PI * 1.5;\n  }\n\n  return {\n    startAngle: startAngle,\n    endAngle: endAngle\n  };\n}\n\nfunction getArcStartPoint(path) {\n  var startPoint;\n\n  if (path[0] === 'M' || path[0] === 'L') {\n    startPoint = [path[1], path[2]];\n  } else if (path[0] === 'a' || path[0] === 'A' || path[0] === 'C') {\n    startPoint = [path[path.length - 2], path[path.length - 1]];\n  }\n\n  return startPoint;\n}\n/**\n * path 存在以下情况\n * 1. 饼图不为整圆的 path，命令为 M, L, A, L, Z\n * 2. 饼图为整圆的 path，命令为 M, M, A, A, M, Z\n * 3. 环图不为整圆的 path，命令为 M, A, L, A, L, Z\n * 4. 环图为整圆的 path，命令为 M, A, A, M, A, A, M, Z\n * 5. radial-line, 不为整圆时的 path, 命令为 M, A, A, Z\n * 6. radial-line, 为整圆时的 path，命令为 M, A, A, A, A, Z\n * @param path theta 坐标系下圆弧的 path 命令\n */\n\n\nfunction getArcInfo(path) {\n  var _a;\n\n  var startAngle;\n  var endAngle;\n  var arcPaths = path.filter(function (command) {\n    return command[0] === 'A' || command[0] === 'a';\n  });\n\n  if (arcPaths.length === 0) {\n    return {\n      startAngle: 0,\n      endAngle: 0,\n      radius: 0,\n      innerRadius: 0\n    };\n  }\n\n  var firstArcPathCommand = arcPaths[0];\n  var lastArcPathCommand = arcPaths.length > 1 ? arcPaths[1] : arcPaths[0];\n  var firstIndex = path.indexOf(firstArcPathCommand);\n  var lastIndex = path.indexOf(lastArcPathCommand);\n  var firstStartPoint = getArcStartPoint(path[firstIndex - 1]);\n  var lastStartPoint = getArcStartPoint(path[lastIndex - 1]);\n\n  var _b = getAngle(firstStartPoint, firstArcPathCommand),\n      firstStartAngle = _b.startAngle,\n      firstEndAngle = _b.endAngle;\n\n  var _c = getAngle(lastStartPoint, lastArcPathCommand),\n      lastStartAngle = _c.startAngle,\n      lastEndAngle = _c.endAngle;\n\n  if (isNumberEqual(firstStartAngle, lastStartAngle) && isNumberEqual(firstEndAngle, lastEndAngle)) {\n    startAngle = firstStartAngle;\n    endAngle = firstEndAngle;\n  } else {\n    startAngle = Math.min(firstStartAngle, lastStartAngle);\n    endAngle = Math.max(firstEndAngle, lastEndAngle);\n  }\n\n  var radius = firstArcPathCommand[1];\n  var innerRadius = arcPaths[arcPaths.length - 1][1];\n\n  if (radius < innerRadius) {\n    _a = [innerRadius, radius], radius = _a[0], innerRadius = _a[1];\n  } else if (radius === innerRadius) {\n    innerRadius = 0;\n  }\n\n  return {\n    startAngle: startAngle,\n    endAngle: endAngle,\n    radius: radius,\n    innerRadius: innerRadius\n  };\n}\n/**\n * @ignore\n * 饼图更新动画\n * @param shape 文本图形\n * @param animateCfg\n * @param cfg\n */\n\n\nexport function sectorPathUpdate(shape, animateCfg, cfg) {\n  var toAttrs = cfg.toAttrs,\n      coordinate = cfg.coordinate;\n  var path = toAttrs.path || [];\n  var pathCommands = path.map(function (command) {\n    return command[0];\n  });\n  if (path.length < 1) return;\n\n  var _a = getArcInfo(path),\n      curStartAngle = _a.startAngle,\n      curEndAngle = _a.endAngle,\n      radius = _a.radius,\n      innerRadius = _a.innerRadius;\n\n  var _b = getArcInfo(shape.attr('path')),\n      preStartAngle = _b.startAngle,\n      preEndAngle = _b.endAngle;\n\n  var center = coordinate.getCenter();\n  var diffStartAngle = curStartAngle - preStartAngle;\n  var diffEndAngle = curEndAngle - preEndAngle; // 没有 diff 时直接返回最终 attrs，不需要额外动画\n\n  if (diffStartAngle === 0 && diffEndAngle === 0) {\n    shape.attr('path', path);\n    return;\n  }\n\n  shape.animate(function (ratio) {\n    var onFrameStartAngle = preStartAngle + ratio * diffStartAngle;\n    var onFrameEndAngle = preEndAngle + ratio * diffEndAngle;\n    return __assign(__assign({}, toAttrs), {\n      path: // hack, 兼容 /examples/bar/basic/demo/radial-line.ts 动画\n      isEqual(pathCommands, ['M', 'A', 'A', 'Z']) ? getArcPath(center.x, center.y, radius, onFrameStartAngle, onFrameEndAngle) : getSectorPath(center.x, center.y, radius, onFrameStartAngle, onFrameEndAngle, innerRadius)\n    });\n  }, __assign(__assign({}, animateCfg), {\n    callback: function () {\n      // 将 path 保持原始态，否则会影响 setState() 的动画\n      shape.attr('path', path);\n    }\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}