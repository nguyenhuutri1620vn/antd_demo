{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { boundsContains, getMask, padBounds } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport CollisionIndex from '../../utils/collision-index';\nimport { calculateCentroid } from '../../utils/geo';\nimport { getGlyphQuads, shapeText } from '../../utils/symbol-layout';\nvar textFrag = \"#define SDF_PX 8.0\\n#define EDGE_GAMMA 0.105\\n#define FONT_SIZE 48.0\\nuniform sampler2D u_sdf_map;\\nuniform float u_gamma_scale : 0.5;\\n// uniform float u_font_size : 24.0;\\nuniform float u_opacity : 1.0;\\nuniform vec4 u_stroke_color : [0, 0, 0, 1];\\nuniform float u_stroke_width : 2.0;\\nuniform float u_halo_blur : 0.5;\\nuniform float u_DevicePixelRatio;\\n\\nvarying vec4 v_color;\\nvarying vec2 v_uv;\\nvarying float v_gamma_scale;\\nvarying float v_fontScale;\\n\\nvarying mat4 styleMappingMat; // \\u4F20\\u9012\\u4ECE\\u7247\\u5143\\u4E2D\\u4F20\\u9012\\u7684\\u6620\\u5C04\\u6570\\u636E\\n\\n#pragma include \\\"picking\\\"\\nvoid main() {\\n  // get style data mapping\\n  float opacity = styleMappingMat[0][0];\\n  float strokeWidth = styleMappingMat[0][2];\\n  vec4 textrueStroke = vec4(\\n    styleMappingMat[1][0],\\n    styleMappingMat[1][1],\\n    styleMappingMat[1][2],\\n    styleMappingMat[1][3]\\n  );\\n\\n  // get sdf from atlas\\n  float dist = texture2D(u_sdf_map, v_uv).a;\\n\\n  // float fontScale = u_font_size / FONT_SIZE;\\n\\n  // lowp float buff = (6.0 - u_stroke_width / v_fontScale) / SDF_PX;\\n  lowp float buff = (6.0 - strokeWidth / v_fontScale) / SDF_PX;\\n  highp float gamma = (u_halo_blur * 1.19 / SDF_PX + EDGE_GAMMA) / (v_fontScale * u_gamma_scale) / 1.0;\\n\\n  highp float gamma_scaled = gamma * v_gamma_scale;\\n\\n  highp float alpha = smoothstep(buff - gamma_scaled, buff + gamma_scaled, dist);\\n  // gl_FragColor = mix(vec4(v_color.rgb, v_color.a * u_opacity), vec4(u_stroke_color.rgb, u_stroke_color.a * u_opacity), smoothstep(0., 0.5, 1. - dist));\\n  gl_FragColor = mix(vec4(v_color.rgb, v_color.a * opacity), vec4(textrueStroke.rgb, textrueStroke.a * opacity), smoothstep(0., 0.5, 1. - dist));\\n  gl_FragColor.a= gl_FragColor.a * alpha;\\n  gl_FragColor = filterColor(gl_FragColor);\\n}\\n\";\nvar textVert = \"#define SDF_PX 8.0\\n#define EDGE_GAMMA 0.105\\n#define FONT_SIZE 24.0\\nattribute vec3 a_Position;\\nattribute vec2 a_tex;\\nattribute vec2 a_textOffsets;\\nattribute vec4 a_Color;\\nattribute float a_Size;\\nattribute float a_Rotate;\\n\\nuniform vec2 u_sdf_map_size;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\n\\nvarying vec2 v_uv;\\nvarying float v_gamma_scale;\\nvarying vec4 v_color;\\nvarying float v_fontScale;\\n\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\nuniform float u_opacity : 1;\\nuniform float u_stroke_width : 2;\\nuniform vec4 u_stroke_color : [0.0, 0.0, 0.0, 0.0];\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n#pragma include \\\"styleMappingCalStrokeWidth\\\"\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"picking\\\"\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n   styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n\\n   vec2 strokeWidthAndOffset = calStrokeWidthAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][2] = strokeWidthAndOffset.r;\\n  textureOffset = strokeWidthAndOffset.g;\\n\\n  vec4 textrueStroke = vec4(-1.0, -1.0, -1.0, -1.0);\\n  if(hasStroke()) {\\n    vec2 valueRPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][0] = pos2value(valueRPos, columnWidth, rowHeight); // R\\n    textureOffset += 1.0;\\n\\n    vec2 valueGPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][1] = pos2value(valueGPos, columnWidth, rowHeight); // G\\n    textureOffset += 1.0;\\n\\n    vec2 valueBPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][2] = pos2value(valueBPos, columnWidth, rowHeight); // B\\n    textureOffset += 1.0;\\n\\n    vec2 valueAPos = nextPos(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset);\\n    styleMappingMat[1][3] = pos2value(valueAPos, columnWidth, rowHeight); // A\\n    textureOffset += 1.0;\\n  } else {\\n    if(u_stroke_color == vec4(0.0)) {\\n      styleMappingMat[1][0] = v_color.r;\\n      styleMappingMat[1][1] = v_color.g;\\n      styleMappingMat[1][2] = v_color.b;\\n      styleMappingMat[1][3] = v_color.a;\\n    } else {\\n      styleMappingMat[1][0] = u_stroke_color.r;\\n      styleMappingMat[1][1] = u_stroke_color.g;\\n      styleMappingMat[1][2] = u_stroke_color.b;\\n      styleMappingMat[1][3] = u_stroke_color.a;\\n    }\\n  }\\n  \\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  v_color = a_Color;\\n  v_uv = a_tex / u_sdf_map_size;\\n\\n  // \\u6587\\u672C\\u7F29\\u653E\\u6BD4\\u4F8B\\n  float fontScale = a_Size / FONT_SIZE;\\n  v_fontScale = fontScale;\\n\\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n  // vec4 projected_position  = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n\\n  highp float angle_sin = sin(a_Rotate);\\n  highp float angle_cos = cos(a_Rotate);\\n  mat2 rotation_matrix = mat2(angle_cos, -1.0 * angle_sin, angle_sin, angle_cos);\\n  \\n  // gl_Position = vec4(projected_position.xy / projected_position.w + rotation_matrix * a_textOffsets * fontScale / u_ViewportSize * 2.0 * u_DevicePixelRatio, 0.0, 1.0);\\n\\n  vec4 projected_position;\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n   projected_position  = u_Mvp * (vec4(a_Position.xyz, 1.0));\\n  } else { // else\\n   projected_position  = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  }\\n\\n  gl_Position = vec4(projected_position.xy / projected_position.w + rotation_matrix * a_textOffsets * fontScale / u_ViewportSize * 2.0 * u_DevicePixelRatio, 0.0, 1.0);\\n  v_gamma_scale = gl_Position.w;\\n  setPickingColor(a_PickingColor);\\n\\n}\\n\";\nexport function TextTriangulation(feature) {\n  var that = this;\n  var id = feature.id;\n  var vertices = [];\n  var indices = [];\n\n  if (!that.glyphInfoMap || !that.glyphInfoMap[id]) {\n    return {\n      vertices: [],\n      indices: [],\n      size: 7\n    };\n  }\n\n  var centroid = that.glyphInfoMap[id].centroid;\n  var coord = centroid.length === 2 ? [centroid[0], centroid[1], 0] : centroid;\n  that.glyphInfoMap[id].glyphQuads.forEach(function (quad, index) {\n    vertices.push.apply(vertices, _toConsumableArray(coord).concat([quad.tex.x, quad.tex.y + quad.tex.height, quad.tl.x, quad.tl.y], _toConsumableArray(coord), [quad.tex.x + quad.tex.width, quad.tex.y + quad.tex.height, quad.tr.x, quad.tr.y], _toConsumableArray(coord), [quad.tex.x + quad.tex.width, quad.tex.y, quad.br.x, quad.br.y], _toConsumableArray(coord), [quad.tex.x, quad.tex.y, quad.bl.x, quad.bl.y]));\n    indices.push(0 + index * 4, 1 + index * 4, 2 + index * 4, 2 + index * 4, 3 + index * 4, 0 + index * 4);\n  });\n  return {\n    vertices: vertices,\n    indices: indices,\n    size: 7\n  };\n}\n\nvar TextModel = function (_BaseModel) {\n  _inherits(TextModel, _BaseModel);\n\n  var _super = _createSuper(TextModel);\n\n  function TextModel() {\n    var _this;\n\n    _classCallCheck(this, TextModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"glyphInfo\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"glyphInfoMap\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"currentZoom\", -1);\n\n    _defineProperty(_assertThisInitialized(_this), \"extent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"textureHeight\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"textCount\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"preTextStyle\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"buildModels\", function () {\n      var _ref = _this.layer.getLayerConfig(),\n          _ref$mask = _ref.mask,\n          mask = _ref$mask === void 0 ? false : _ref$mask,\n          _ref$maskInside = _ref.maskInside,\n          maskInside = _ref$maskInside === void 0 ? true : _ref$maskInside;\n\n      _this.initGlyph();\n\n      _this.updateTexture();\n\n      _this.filterGlyphs();\n\n      _this.reBuildModel();\n\n      return [_this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(_assertThisInitialized(_this)),\n        depth: {\n          enable: false\n        },\n        blend: _this.getBlend(),\n        stencil: getMask(mask, maskInside)\n      })];\n    });\n\n    return _this;\n  }\n\n  _createClass(TextModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref2 = this.layer.getLayerConfig(),\n          _ref2$opacity = _ref2.opacity,\n          opacity = _ref2$opacity === void 0 ? 1.0 : _ref2$opacity,\n          _ref2$stroke = _ref2.stroke,\n          stroke = _ref2$stroke === void 0 ? '#fff' : _ref2$stroke,\n          _ref2$strokeWidth = _ref2.strokeWidth,\n          strokeWidth = _ref2$strokeWidth === void 0 ? 0 : _ref2$strokeWidth,\n          _ref2$textAnchor = _ref2.textAnchor,\n          textAnchor = _ref2$textAnchor === void 0 ? 'center' : _ref2$textAnchor,\n          _ref2$textAllowOverla = _ref2.textAllowOverlap,\n          textAllowOverlap = _ref2$textAllowOverla === void 0 ? false : _ref2$textAllowOverla,\n          _ref2$halo = _ref2.halo,\n          halo = _ref2$halo === void 0 ? 0.5 : _ref2$halo,\n          _ref2$gamma = _ref2.gamma,\n          gamma = _ref2$gamma === void 0 ? 2.0 : _ref2$gamma;\n\n      var _this$fontService = this.fontService,\n          canvas = _this$fontService.canvas,\n          mapping = _this$fontService.mapping;\n\n      if (Object.keys(mapping).length !== this.textCount) {\n        this.updateTexture();\n        this.textCount = Object.keys(mapping).length;\n      }\n\n      this.preTextStyle = {\n        textAnchor: textAnchor,\n        textAllowOverlap: textAllowOverlap\n      };\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity,\n        strokeWidth: strokeWidth,\n        stroke: stroke\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity,\n          strokeWidth: strokeWidth,\n          stroke: stroke\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_stroke_width: _isNumber(strokeWidth) ? strokeWidth : 0.0,\n        u_stroke_color: this.getStrokeColor(stroke),\n        u_sdf_map: this.texture,\n        u_halo_blur: halo,\n        u_gamma_scale: gamma,\n        u_sdf_map_size: [canvas.width, canvas.height]\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.layer.on('remapping', this.buildModels);\n      this.extent = this.textExtent();\n\n      var _ref3 = this.layer.getLayerConfig(),\n          _ref3$textAnchor = _ref3.textAnchor,\n          textAnchor = _ref3$textAnchor === void 0 ? 'center' : _ref3$textAnchor,\n          _ref3$textAllowOverla = _ref3.textAllowOverlap,\n          textAllowOverlap = _ref3$textAllowOverla === void 0 ? true : _ref3$textAllowOverla;\n\n      this.preTextStyle = {\n        textAnchor: textAnchor,\n        textAllowOverlap: textAllowOverlap\n      };\n      return this.buildModels();\n    }\n  }, {\n    key: \"needUpdate\",\n    value: function needUpdate() {\n      var _ref4 = this.layer.getLayerConfig(),\n          _ref4$textAllowOverla = _ref4.textAllowOverlap,\n          textAllowOverlap = _ref4$textAllowOverla === void 0 ? false : _ref4$textAllowOverla;\n\n      var zoom = this.mapService.getZoom();\n      var extent = this.mapService.getBounds();\n      var flag = boundsContains(this.extent, extent);\n\n      if (!textAllowOverlap && (Math.abs(this.currentZoom - zoom) > 1 || !flag) || textAllowOverlap !== this.preTextStyle.textAllowOverlap) {\n        this.reBuildModel();\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n      this.layer.off('remapping', this.buildModels);\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'rotate',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Rotate',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$rotate = feature.rotate,\n                rotate = _feature$rotate === void 0 ? 0 : _feature$rotate;\n            return Array.isArray(rotate) ? [rotate[0]] : [rotate];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'textOffsets',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_textOffsets',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[5], vertex[6]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 12 : _feature$size;\n            return Array.isArray(size) ? [size[0]] : [size];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'textUv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_tex',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"textExtent\",\n    value: function textExtent() {\n      var bounds = this.mapService.getBounds();\n      return padBounds(bounds, 0.5);\n    }\n  }, {\n    key: \"initTextFont\",\n    value: function initTextFont() {\n      var _ref5 = this.layer.getLayerConfig(),\n          _ref5$fontWeight = _ref5.fontWeight,\n          fontWeight = _ref5$fontWeight === void 0 ? '400' : _ref5$fontWeight,\n          _ref5$fontFamily = _ref5.fontFamily,\n          fontFamily = _ref5$fontFamily === void 0 ? 'sans-serif' : _ref5$fontFamily;\n\n      var data = this.layer.getEncodedData();\n      var characterSet = [];\n      data.forEach(function (item) {\n        var _item$shape = item.shape,\n            shape = _item$shape === void 0 ? '' : _item$shape;\n        shape = shape.toString();\n\n        var _iterator = _createForOfIteratorHelper(shape),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var char = _step.value;\n\n            if (characterSet.indexOf(char) === -1) {\n              characterSet.push(char);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n      this.fontService.setFontOptions({\n        characterSet: characterSet,\n        fontWeight: fontWeight,\n        fontFamily: fontFamily,\n        iconfont: false\n      });\n    }\n  }, {\n    key: \"initIconFontTex\",\n    value: function initIconFontTex() {\n      var _ref6 = this.layer.getLayerConfig(),\n          _ref6$fontWeight = _ref6.fontWeight,\n          fontWeight = _ref6$fontWeight === void 0 ? '400' : _ref6$fontWeight,\n          _ref6$fontFamily = _ref6.fontFamily,\n          fontFamily = _ref6$fontFamily === void 0 ? 'sans-serif' : _ref6$fontFamily;\n\n      var data = this.layer.getEncodedData();\n      var characterSet = [];\n      data.forEach(function (item) {\n        var _item$shape2 = item.shape,\n            shape = _item$shape2 === void 0 ? '' : _item$shape2;\n        shape = \"\".concat(shape);\n\n        if (characterSet.indexOf(shape) === -1) {\n          characterSet.push(shape);\n        }\n      });\n      this.fontService.setFontOptions({\n        characterSet: characterSet,\n        fontWeight: fontWeight,\n        fontFamily: fontFamily,\n        iconfont: true\n      });\n    }\n  }, {\n    key: \"generateGlyphLayout\",\n    value: function generateGlyphLayout(iconfont) {\n      var _this2 = this;\n\n      var mapping = this.fontService.mapping;\n\n      var _ref7 = this.layer.getLayerConfig(),\n          _ref7$spacing = _ref7.spacing,\n          spacing = _ref7$spacing === void 0 ? 2 : _ref7$spacing,\n          _ref7$textAnchor = _ref7.textAnchor,\n          textAnchor = _ref7$textAnchor === void 0 ? 'center' : _ref7$textAnchor;\n\n      var data = this.layer.getEncodedData();\n      this.glyphInfo = data.map(function (feature) {\n        var _feature$shape = feature.shape,\n            shape = _feature$shape === void 0 ? '' : _feature$shape,\n            id = feature.id,\n            _feature$size2 = feature.size,\n            size = _feature$size2 === void 0 ? 1 : _feature$size2,\n            _feature$textOffset = feature.textOffset,\n            textOffset = _feature$textOffset === void 0 ? [0, 0] : _feature$textOffset;\n        var shaping = shapeText(shape.toString(), mapping, size, textAnchor, 'left', spacing, textOffset, iconfont);\n        var glyphQuads = getGlyphQuads(shaping, textOffset, false);\n        feature.shaping = shaping;\n        feature.glyphQuads = glyphQuads;\n        feature.centroid = calculateCentroid(feature.coordinates);\n        feature.originCentroid = feature.version === 'GAODE2.x' ? calculateCentroid(feature.originCoordinates) : feature.originCentroid = feature.centroid;\n        _this2.glyphInfoMap[id] = {\n          shaping: shaping,\n          glyphQuads: glyphQuads,\n          centroid: calculateCentroid(feature.coordinates)\n        };\n        return feature;\n      });\n    }\n  }, {\n    key: \"filterGlyphs\",\n    value: function filterGlyphs() {\n      var _this3 = this;\n\n      var _ref8 = this.layer.getLayerConfig(),\n          _ref8$padding = _ref8.padding,\n          padding = _ref8$padding === void 0 ? [4, 4] : _ref8$padding,\n          _ref8$textAllowOverla = _ref8.textAllowOverlap,\n          textAllowOverlap = _ref8$textAllowOverla === void 0 ? false : _ref8$textAllowOverla;\n\n      if (textAllowOverlap) {\n        return;\n      }\n\n      this.glyphInfoMap = {};\n      this.currentZoom = this.mapService.getZoom();\n      this.extent = this.textExtent();\n\n      var _this$rendererService = this.rendererService.getViewportSize(),\n          width = _this$rendererService.width,\n          height = _this$rendererService.height;\n\n      var collisionIndex = new CollisionIndex(width, height);\n      var filterData = this.glyphInfo.filter(function (feature) {\n        var shaping = feature.shaping,\n            _feature$id = feature.id,\n            id = _feature$id === void 0 ? 0 : _feature$id;\n        var centroid = feature.version === 'GAODE2.x' ? feature.originCentroid : feature.centroid;\n        var size = feature.size;\n        var fontScale = size / 24;\n\n        var pixels = _this3.mapService.lngLatToContainer(centroid);\n\n        var _collisionIndex$place = collisionIndex.placeCollisionBox({\n          x1: shaping.left * fontScale - padding[0],\n          x2: shaping.right * fontScale + padding[0],\n          y1: shaping.top * fontScale - padding[1],\n          y2: shaping.bottom * fontScale + padding[1],\n          anchorPointX: pixels.x,\n          anchorPointY: pixels.y\n        }),\n            box = _collisionIndex$place.box;\n\n        if (box && box.length) {\n          collisionIndex.insertCollisionBox(box, id);\n          return true;\n        } else {\n          return false;\n        }\n      });\n      filterData.forEach(function (item) {\n        _this3.glyphInfoMap[item.id] = item;\n      });\n    }\n  }, {\n    key: \"initGlyph\",\n    value: function initGlyph() {\n      var _this$layer$getLayerC = this.layer.getLayerConfig(),\n          _this$layer$getLayerC2 = _this$layer$getLayerC.iconfont,\n          iconfont = _this$layer$getLayerC2 === void 0 ? false : _this$layer$getLayerC2;\n\n      iconfont ? this.initIconFontTex() : this.initTextFont();\n      this.generateGlyphLayout(iconfont);\n    }\n  }, {\n    key: \"updateTexture\",\n    value: function updateTexture() {\n      var createTexture2D = this.rendererService.createTexture2D;\n      var canvas = this.fontService.canvas;\n      this.textureHeight = canvas.height;\n\n      if (this.texture) {\n        this.texture.destroy();\n      }\n\n      this.texture = createTexture2D({\n        data: canvas,\n        mag: gl.LINEAR,\n        min: gl.LINEAR,\n        width: canvas.width,\n        height: canvas.height\n      });\n    }\n  }, {\n    key: \"reBuildModel\",\n    value: function reBuildModel() {\n      var _ref9 = this.layer.getLayerConfig(),\n          _ref9$mask = _ref9.mask,\n          mask = _ref9$mask === void 0 ? false : _ref9$mask,\n          _ref9$maskInside = _ref9.maskInside,\n          maskInside = _ref9$maskInside === void 0 ? true : _ref9$maskInside;\n\n      this.filterGlyphs();\n      this.layer.models = [this.layer.buildLayerModel({\n        moduleName: 'pointText',\n        vertexShader: textVert,\n        fragmentShader: textFrag,\n        triangulation: TextTriangulation.bind(this),\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside)\n      })];\n    }\n  }]);\n\n  return TextModel;\n}(BaseModel);\n\nexport { TextModel as default };","map":null,"metadata":{},"sourceType":"module"}