{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands, XFlowNodeCommands } from '../constant';\nexport var NsHighlightNode;\n\n(function (NsHighlightNode) {\n  NsHighlightNode.command = XFlowNodeCommands.HIGHLIGHT_NODE;\n  NsHighlightNode.hookKey = 'highlightNode';\n})(NsHighlightNode || (NsHighlightNode = {}));\n\nlet HighlightNodeCommand =\n/** 节点高亮 */\nclass HighlightNodeCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.highlightNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const {\n          nodeId,\n          stroke,\n          strokeWidth\n        } = handlerArgs;\n        const x6Node = x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(nodeId);\n\n        if (!x6Node) {\n          console.error(nodeId, 'this nodeId is not exist');\n          return {\n            err: 'this nodeId is not exist'\n          };\n        } else {\n          /** 高亮节点 */\n          x6Node === null || x6Node === void 0 ? void 0 : x6Node.setAttrs({\n            body: {\n              stroke: stroke || '#7c68fc',\n              strokeWidth: strokeWidth || 2\n            }\n          });\n          /** 节点关联的连线, 联动高亮 */\n\n          if (handlerArgs === null || handlerArgs === void 0 ? void 0 : handlerArgs.isHighlightRelatedLines) {\n            const {\n              edgeStroke,\n              edgeStrokeWidth\n            } = handlerArgs;\n            const allEdges = x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getEdges();\n            allEdges.forEach(x6Edge => {\n              const x6EdgeData = x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.getData();\n              handlerArgs === null || handlerArgs === void 0 ? void 0 : handlerArgs.commandService.executeCommand(XFlowEdgeCommands.HIGHLIGHT_EDGE.id, {\n                edgeId: x6EdgeData === null || x6EdgeData === void 0 ? void 0 : x6EdgeData.id,\n                strokeColor: edgeStroke,\n                strokeWidth: edgeStrokeWidth\n              });\n            });\n          }\n        }\n\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], HighlightNodeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], HighlightNodeCommand.prototype, \"init\", null);\n\nHighlightNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsHighlightNode.command.id\n  }\n})\n/** 节点高亮 */\n], HighlightNodeCommand);\nexport { HighlightNodeCommand };","map":null,"metadata":{},"sourceType":"module"}