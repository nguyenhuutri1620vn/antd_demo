{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../../types';\nimport { PassType } from '../IMultiPassRenderer';\nvar BaseNormalPass = (_dec = injectable(), _dec(_class = function () {\n  function BaseNormalPass() {\n    _classCallCheck(this, BaseNormalPass);\n\n    _defineProperty(this, \"shaderModuleService\", void 0);\n\n    _defineProperty(this, \"rendererService\", void 0);\n\n    _defineProperty(this, \"cameraService\", void 0);\n\n    _defineProperty(this, \"mapService\", void 0);\n\n    _defineProperty(this, \"interactionService\", void 0);\n\n    _defineProperty(this, \"layerService\", void 0);\n\n    _defineProperty(this, \"config\", void 0);\n  }\n\n  _createClass(BaseNormalPass, [{\n    key: \"getName\",\n    value: function getName() {\n      return '';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return PassType.Normal;\n    }\n  }, {\n    key: \"init\",\n    value: function init(layer, config) {\n      this.config = config;\n      this.rendererService = layer.getContainer().get(TYPES.IRendererService);\n      this.cameraService = layer.getContainer().get(TYPES.ICameraService);\n      this.mapService = layer.getContainer().get(TYPES.IMapService);\n      this.interactionService = layer.getContainer().get(TYPES.IInteractionService);\n      this.layerService = layer.getContainer().get(TYPES.ILayerService);\n      this.shaderModuleService = layer.getContainer().get(TYPES.IShaderModuleService);\n    }\n  }, {\n    key: \"render\",\n    value: function render(layer) {}\n  }]);\n\n  return BaseNormalPass;\n}()) || _class);\nexport { BaseNormalPass as default };","map":null,"metadata":{},"sourceType":"module"}