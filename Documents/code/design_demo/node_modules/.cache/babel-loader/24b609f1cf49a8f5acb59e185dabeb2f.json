{"ast":null,"code":"/**\n * @fileOverview grid layout\n * @author shiwu.wyy@antfin.com\n * this algorithm refers to <cytoscape.js> - https://github.com/cytoscape/cytoscape.js/\n */\nimport { isString, isArray, isNumber, getDegree, isNaN, isObject } from \"../util\";\nimport { Base } from \"./base\";\n/**\n * 网格布局\n */\n\nexport class GridLayout extends Base {\n  constructor(options) {\n    super();\n    /** 布局起始点 */\n\n    this.begin = [0, 0];\n    /** prevents node overlap, may overflow boundingBox if not enough space */\n\n    this.preventOverlap = true;\n    /** extra spacing around nodes when preventOverlap: true */\n\n    this.preventOverlapPadding = 10;\n    /** uses all available space on false, uses minimal space on true */\n\n    this.condense = false;\n    /** a sorting function to order the nodes; e.g. function(a, b){ return a.datapublic ('weight') - b.data('weight') } */\n\n    this.sortBy = \"degree\";\n    this.nodeSize = 30;\n    this.nodes = [];\n    this.edges = [];\n    this.width = 300;\n    this.height = 300;\n    this.row = 0;\n    this.col = 0;\n    this.cellWidth = 0;\n    this.cellHeight = 0;\n    this.cellUsed = {};\n    this.id2manPos = {};\n    /** 迭代结束的回调函数 */\n\n    this.onLayoutEnd = () => {};\n\n    this.updateCfg(options);\n  }\n\n  getDefaultCfg() {\n    return {\n      begin: [0, 0],\n      preventOverlap: true,\n      preventOverlapPadding: 10,\n      condense: false,\n      rows: undefined,\n      cols: undefined,\n      position: undefined,\n      sortBy: \"degree\",\n      nodeSize: 30\n    };\n  }\n  /**\n   * 执行布局\n   */\n\n\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const edges = self.edges;\n    const n = nodes.length;\n    const begin = self.begin;\n\n    if (n === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        nodes,\n        edges\n      };\n    }\n\n    if (n === 1) {\n      nodes[0].x = begin[0];\n      nodes[0].y = begin[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        nodes,\n        edges\n      };\n    }\n\n    const layoutNodes = [];\n    nodes.forEach(node => {\n      layoutNodes.push(node);\n    });\n    const nodeIdxMap = {};\n    layoutNodes.forEach((node, i) => {\n      nodeIdxMap[node.id] = i;\n    });\n\n    if (self.sortBy === \"degree\" || !isString(self.sortBy) || layoutNodes[0][self.sortBy] === undefined) {\n      self.sortBy = \"degree\";\n\n      if (isNaN(nodes[0].degree)) {\n        const values = getDegree(layoutNodes.length, nodeIdxMap, edges);\n        layoutNodes.forEach((node, i) => {\n          node.degree = values[i];\n        });\n      }\n    } // sort nodes by value\n\n\n    layoutNodes.sort((n1, n2) => n2[self.sortBy] - n1[self.sortBy]);\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n\n    const oRows = self.rows;\n    const oCols = self.cols != null ? self.cols : self.columns;\n    self.cells = n; // if rows or columns were set in self, use those values\n\n    if (oRows != null && oCols != null) {\n      self.rows = oRows;\n      self.cols = oCols;\n    } else if (oRows != null && oCols == null) {\n      self.rows = oRows;\n      self.cols = Math.ceil(self.cells / self.rows);\n    } else if (oRows == null && oCols != null) {\n      self.cols = oCols;\n      self.rows = Math.ceil(self.cells / self.cols);\n    } else {\n      // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n      // width/height * splits^2 = cells where splits is number of times to split width\n      self.splits = Math.sqrt(self.cells * self.height / self.width);\n      self.rows = Math.round(self.splits);\n      self.cols = Math.round(self.width / self.height * self.splits);\n    }\n\n    if (self.cols * self.rows > self.cells) {\n      // otherwise use the automatic values and adjust accordingly\n      // if rounding was up, see if we can reduce rows or columns\n      const sm = self.small();\n      const lg = self.large(); // reducing the small side takes away the most cells, so try it first\n\n      if ((sm - 1) * lg >= self.cells) {\n        self.small(sm - 1);\n      } else if ((lg - 1) * sm >= self.cells) {\n        self.large(lg - 1);\n      }\n    } else {\n      // if rounding was too low, add rows or columns\n      while (self.cols * self.rows < self.cells) {\n        const sm = self.small();\n        const lg = self.large(); // try to add to larger side first (adds less in multiplication)\n\n        if ((lg + 1) * sm >= self.cells) {\n          self.large(lg + 1);\n        } else {\n          self.small(sm + 1);\n        }\n      }\n    }\n\n    self.cellWidth = self.width / self.cols;\n    self.cellHeight = self.height / self.rows;\n\n    if (self.condense) {\n      self.cellWidth = 0;\n      self.cellHeight = 0;\n    }\n\n    if (self.preventOverlap) {\n      layoutNodes.forEach(node => {\n        if (!node.x || !node.y) {\n          // for bb\n          node.x = 0;\n          node.y = 0;\n        }\n\n        let nodew;\n        let nodeh;\n\n        if (isArray(node.size)) {\n          nodew = node.size[0];\n          nodeh = node.size[1];\n        } else if (isNumber(node.size)) {\n          nodew = node.size;\n          nodeh = node.size;\n        } else if (isObject(node.size)) {\n          nodew = node.size.width;\n          nodeh = node.size.height;\n        }\n\n        if (nodew === undefined || nodeh === undefined) {\n          if (isArray(self.nodeSize)) {\n            nodew = self.nodeSize[0];\n            nodeh = self.nodeSize[1];\n          } else if (isNumber(self.nodeSize)) {\n            nodew = self.nodeSize;\n            nodeh = self.nodeSize;\n          } else {\n            nodew = 30;\n            nodeh = 30;\n          }\n        }\n\n        const p = self.preventOverlapPadding;\n        const w = nodew + p;\n        const h = nodeh + p;\n        self.cellWidth = Math.max(self.cellWidth, w);\n        self.cellHeight = Math.max(self.cellHeight, h);\n      });\n    }\n\n    self.cellUsed = {}; // e.g. 'c-0-2' => true\n    // to keep track of current cell position\n\n    self.row = 0;\n    self.col = 0; // get a cache of all the manual positions\n\n    self.id2manPos = {};\n\n    for (let i = 0; i < layoutNodes.length; i++) {\n      const node = layoutNodes[i];\n      let rcPos;\n\n      if (self.position) {\n        rcPos = self.position(node);\n      }\n\n      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n        // must have at least row or col def'd\n        const pos = {\n          row: rcPos.row,\n          col: rcPos.col\n        };\n\n        if (pos.col === undefined) {\n          // find unused col\n          pos.col = 0;\n\n          while (self.used(pos.row, pos.col)) {\n            pos.col++;\n          }\n        } else if (pos.row === undefined) {\n          // find unused row\n          pos.row = 0;\n\n          while (self.used(pos.row, pos.col)) {\n            pos.row++;\n          }\n        }\n\n        self.id2manPos[node.id] = pos;\n        self.use(pos.row, pos.col);\n      }\n\n      self.getPos(node);\n    }\n\n    if (self.onLayoutEnd) self.onLayoutEnd();\n    return {\n      edges,\n      nodes: layoutNodes\n    };\n  }\n\n  small(val) {\n    const self = this;\n    let res;\n    const rows = self.rows || 5;\n    const cols = self.cols || 5;\n\n    if (val == null) {\n      res = Math.min(rows, cols);\n    } else {\n      const min = Math.min(rows, cols);\n\n      if (min === self.rows) {\n        self.rows = val;\n      } else {\n        self.cols = val;\n      }\n    }\n\n    return res;\n  }\n\n  large(val) {\n    const self = this;\n    let res;\n    const rows = self.rows || 5;\n    const cols = self.cols || 5;\n\n    if (val == null) {\n      res = Math.max(rows, cols);\n    } else {\n      const max = Math.max(rows, cols);\n\n      if (max === self.rows) {\n        self.rows = val;\n      } else {\n        self.cols = val;\n      }\n    }\n\n    return res;\n  }\n\n  used(row, col) {\n    const self = this;\n    return self.cellUsed[`c-${row}-${col}`] || false;\n  }\n\n  use(row, col) {\n    const self = this;\n    self.cellUsed[`c-${row}-${col}`] = true;\n  }\n\n  moveToNextCell() {\n    const self = this;\n    const cols = self.cols || 5;\n    self.col++;\n\n    if (self.col >= cols) {\n      self.col = 0;\n      self.row++;\n    }\n  }\n\n  getPos(node) {\n    const self = this;\n    const begin = self.begin;\n    const cellWidth = self.cellWidth;\n    const cellHeight = self.cellHeight;\n    let x;\n    let y; // see if we have a manual position set\n\n    const rcPos = self.id2manPos[node.id];\n\n    if (rcPos) {\n      x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n      y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n    } else {\n      // otherwise set automatically\n      while (self.used(self.row, self.col)) {\n        self.moveToNextCell();\n      }\n\n      x = self.col * cellWidth + cellWidth / 2 + begin[0];\n      y = self.row * cellHeight + cellHeight / 2 + begin[1];\n      self.use(self.row, self.col);\n      self.moveToNextCell();\n    }\n\n    node.x = x;\n    node.y = y;\n  }\n\n  getType() {\n    return \"grid\";\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}