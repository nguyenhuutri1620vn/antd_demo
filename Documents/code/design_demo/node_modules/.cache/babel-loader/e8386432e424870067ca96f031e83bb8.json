{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VIEW_LIFE_CIRCLE, Event } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { adaptor, statistic } from './adaptor';\nimport { INDICATEOR_VIEW_ID, RANGE_VIEW_ID, DEFAULT_OPTIONS } from './constants';\nimport { getIndicatorData, getRangeData } from './utils'; // 注册 shape\n\nimport './shapes/indicator';\nimport './shapes/meter-gauge';\n/**\n * 仪表盘\n */\n\nvar Gauge =\n/** @class */\nfunction (_super) {\n  __extends(Gauge, _super);\n\n  function Gauge() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'gauge';\n    return _this;\n  }\n  /**\n   * 获取 仪表盘 默认配置项\n   * 供外部使用\n   */\n\n\n  Gauge.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 更新数据\n   * @param percent\n   */\n\n\n  Gauge.prototype.changeData = function (percent) {\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    this.updateOption({\n      percent: percent\n    });\n    var indicatorView = this.chart.views.find(function (v) {\n      return v.id === INDICATEOR_VIEW_ID;\n    });\n\n    if (indicatorView) {\n      indicatorView.data(getIndicatorData(percent));\n    }\n\n    var rangeView = this.chart.views.find(function (v) {\n      return v.id === RANGE_VIEW_ID;\n    });\n\n    if (rangeView) {\n      rangeView.data(getRangeData(percent, this.options.range));\n    } // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations\n\n\n    statistic({\n      chart: this.chart,\n      options: this.options\n    }, true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  /**\n   * 获取默认配置\n   * 供 base 使用\n   */\n\n\n  Gauge.prototype.getDefaultOptions = function () {\n    return Gauge.getDefaultOptions();\n  };\n  /**\n   * 获取适配器\n   */\n\n\n  Gauge.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return Gauge;\n}(Plot);\n\nexport { Gauge };","map":null,"metadata":{},"sourceType":"module"}