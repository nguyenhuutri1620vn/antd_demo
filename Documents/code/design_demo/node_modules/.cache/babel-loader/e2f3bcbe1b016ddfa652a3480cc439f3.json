{"ast":null,"code":"import { __spreadArray } from \"tslib\";\nimport { isString, memoize, values, toString } from '@antv/util';\nimport { getCanvasContext } from './context';\n/**\n * 计算文本在画布中的宽度\n */\n\nexport var measureTextWidth = memoize(function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n\n  var fontSize = font.fontSize,\n      fontFamily = font.fontFamily,\n      fontWeight = font.fontWeight,\n      fontStyle = font.fontStyle,\n      fontVariant = font.fontVariant;\n  var ctx = getCanvasContext();\n  ctx.font = [fontStyle, fontVariant, fontWeight, \"\".concat(fontSize, \"px\"), fontFamily].join(' ');\n  return ctx.measureText(isString(text) ? text : '').width;\n}, function (text, font) {\n  if (font === void 0) {\n    font = {};\n  }\n\n  return __spreadArray([text], values(font), true).join('');\n});\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n */\n\nexport var getEllipsisText = function (text, maxWidth, font) {\n  var STEP = 16; // 每次 16，调参工程师\n\n  var DOT_WIDTH = measureTextWidth('...', font);\n  var leftText;\n\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n\n  var leftWidth = maxWidth;\n  var r = []; // 最终的分段字符串\n\n  var currentText;\n  var currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  } // 首先通过 step 计算，找出最大的未超出长度的\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP); // 字符串整体没有超出\n\n    if (!leftText) {\n      return r.join('');\n    }\n  } // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n\n\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1); // 计算宽度\n\n    currentWidth = measureTextWidth(currentText, font); // 超出剩余宽度，则停止\n\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText); // 没有超出，则计算剩余宽度\n\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return \"\".concat(r.join(''), \"...\");\n};","map":null,"metadata":{},"sourceType":"module"}