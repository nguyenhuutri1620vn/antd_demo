{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { ManaSyringe, DisposableCollection, Disposable } from '@antv/xflow-core';\nimport { IHookContribution } from '@antv/xflow-core';\nimport { XFlowNode } from '../x6-extension/node';\nimport { Shape } from '@antv/x6';\nexport const flowOptions = {\n  grid: true,\n  mousewheel: {\n    enabled: true,\n    zoomAtMousePosition: true,\n    modifiers: 'ctrl',\n    minScale: 0.5,\n    maxScale: 3\n  },\n  connecting: {\n    router: 'manhattan',\n    connector: {\n      name: 'rounded',\n      args: {\n        radius: 8\n      }\n    },\n    anchor: 'center',\n    connectionPoint: 'anchor',\n    allowBlank: false,\n    snap: {\n      radius: 20\n    },\n\n    createEdge() {\n      return new Shape.Edge({\n        attrs: {\n          line: {\n            stroke: '#A2B1C3',\n            strokeWidth: 2,\n            targetMarker: {\n              name: 'block',\n              width: 12,\n              height: 8\n            }\n          }\n        },\n        zIndex: 0\n      });\n    },\n\n    validateConnection(_ref) {\n      let {\n        targetMagnet\n      } = _ref;\n      return !!targetMagnet;\n    }\n\n  },\n  highlighting: {\n    magnetAdsorbed: {\n      name: 'stroke',\n      args: {\n        attrs: {\n          fill: '#5F95FF',\n          stroke: '#5F95FF'\n        }\n      }\n    }\n  },\n  resizing: true,\n  rotating: true,\n  selecting: {\n    enabled: true,\n    rubberband: true,\n    showNodeSelectionBox: true,\n    modifiers: 'shift'\n  },\n  snapline: true,\n  keyboard: true,\n  clipboard: true\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nlet FlowHooksContribution = class FlowHooksContribution {\n  constructor() {\n    this.toDispose = new DisposableCollection();\n\n    this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n      return Disposable.create(() => {});\n    });\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [hooks.addNode.registerHook({\n        name: 'flow-add-node',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n            const node = new XFlowNode(Object.assign({}, nodeConfig));\n            return node;\n          });\n\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'flow-add-edge',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = edgeConfig => __awaiter(this, void 0, void 0, function* () {\n            delete edgeConfig.id;\n            const cell = new Shape.Edge({\n              source: {\n                cell: edgeConfig.source,\n                port: edgeConfig.sourcePortId\n              },\n              target: {\n                cell: edgeConfig.target,\n                port: edgeConfig.targetPortId\n              },\n              attrs: {\n                line: {\n                  stroke: '#A2B1C3',\n                  strokeWidth: 2,\n                  targetMarker: {\n                    name: 'block',\n                    width: 12,\n                    height: 8\n                  }\n                }\n              },\n              zIndex: -1,\n              data: Object.assign({}, edgeConfig)\n            });\n            return cell;\n          });\n\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.graphOptions.registerHook({\n        name: 'assign options ',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          Object.assign(args, flowOptions);\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return Disposable.create(() => {});\n    });\n  }\n\n};\nFlowHooksContribution = __decorate([ManaSyringe.singleton({\n  contrib: IHookContribution\n})], FlowHooksContribution);\nexport { FlowHooksContribution };","map":null,"metadata":{},"sourceType":"module"}