{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar bounds_1 = require(\"../geometry/bounds\");\n\nvar lng_lat_1 = require(\"../geometry/lng-lat\");\n\nvar util_1 = require(\"../../util\");\n\nvar spherical_mercator_1 = require(\"../projection/spherical-mercator\");\n\nvar transformation_1 = require(\"../transformation\");\n\nvar lng_lat_bounds_1 = require(\"../geometry/lng-lat-bounds\");\n\nvar scale = 0.5 / (Math.PI * spherical_mercator_1.sphericalMercator.R);\nvar transform = new transformation_1.Transformation(scale, 0.5, -scale, 0.5);\nexports.CRS = {\n  wrapLng: [-180, 180],\n  wrapLat: null,\n  projection: spherical_mercator_1.sphericalMercator,\n  transformation: transform,\n  lngLatToPoint: function (lnglat, zoom) {\n    var projectedPoint = this.projection.project(lnglat);\n    var scale = this.scale(zoom);\n    return this.transformation.transform(projectedPoint, scale);\n  },\n  pointToLngLat: function (point, zoom) {\n    var scale = this.scale(zoom);\n    var untransformedPoint = this.transformation.untransform(point, scale);\n    return this.projection.unproject(untransformedPoint);\n  },\n  project: function (lnglat) {\n    return this.projection.project(lnglat);\n  },\n  unproject: function (point) {\n    return this.projection.unproject(point);\n  },\n  zoom: function (scale) {\n    return Math.log(scale / 256) / Math.LN2;\n  },\n  scale: function (zoom) {\n    return 256 * Math.pow(2, zoom);\n  },\n  getProjectedBounds: function (zoom) {\n    if (this.infinite) {\n      return new bounds_1.Bounds([[Infinity, Infinity], [Infinity, Infinity]]);\n    }\n\n    var b = this.projection.bounds;\n    var s = this.scale(zoom);\n    var min = this.transformation.transform(b.min, s);\n    var max = this.transformation.transform(b.max, s);\n    return new bounds_1.Bounds(min, max);\n  },\n  infinite: false,\n  wrapLngLat: function (lnglat) {\n    var lng = Array.isArray(this.wrapLng) ? util_1.wrapNum(lnglat.lng, this.wrapLng, true) : lnglat.lng;\n    var lat = Array.isArray(this.wrapLat) ? util_1.wrapNum(lnglat.lat, this.wrapLat, true) : lnglat.lat;\n    var alt = lnglat.alt;\n    return new lng_lat_1.LngLat(lng, lat, alt);\n  },\n  wrapLngLatBounds: function (bounds) {\n    var center = bounds.getCenter();\n    var newCenter = this.wrapLngLat(center);\n    var latShift = center.lat - newCenter.lat;\n    var lngShift = center.lng - newCenter.lng;\n\n    if (latShift === 0 && lngShift === 0) {\n      return bounds;\n    }\n\n    var sw = bounds.getSouthWest();\n    var ne = bounds.getNorthEast();\n    var newSw = new lng_lat_1.LngLat(sw.lng - lngShift, sw.lat - latShift);\n    var newNe = new lng_lat_1.LngLat(ne.lng - lngShift, ne.lat - latShift);\n    return new lng_lat_bounds_1.LngLatBounds(newSw, newNe);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}