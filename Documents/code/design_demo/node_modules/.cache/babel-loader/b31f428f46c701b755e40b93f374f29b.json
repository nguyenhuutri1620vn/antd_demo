{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { MAX_TAP_INTERVAL } from './single_tap_recognizer';\nimport TapRecognizer from './tap_recognizer';\n\nvar TapDragZoomHandler = function () {\n  function TapDragZoomHandler() {\n    _classCallCheck(this, TapDragZoomHandler);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"active\", void 0);\n\n    _defineProperty(this, \"swipePoint\", void 0);\n\n    _defineProperty(this, \"swipeTouch\", void 0);\n\n    _defineProperty(this, \"tapTime\", void 0);\n\n    _defineProperty(this, \"tap\", void 0);\n\n    this.tap = new TapRecognizer({\n      numTouches: 1,\n      numTaps: 1\n    });\n    this.reset();\n  }\n\n  _createClass(TapDragZoomHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      this.active = false;\n      delete this.swipePoint;\n      delete this.swipeTouch;\n      delete this.tapTime;\n      this.tap.reset();\n    }\n  }, {\n    key: \"touchstart\",\n    value: function touchstart(e, points, mapTouches) {\n      if (this.swipePoint) {\n        return;\n      }\n\n      if (this.tapTime && e.timeStamp - this.tapTime > MAX_TAP_INTERVAL) {\n        this.reset();\n      }\n\n      if (!this.tapTime) {\n        this.tap.touchstart(e, points, mapTouches);\n      } else if (mapTouches.length > 0) {\n        this.swipePoint = points[0];\n        this.swipeTouch = mapTouches[0].identifier;\n      }\n    }\n  }, {\n    key: \"touchmove\",\n    value: function touchmove(e, points, mapTouches) {\n      if (!this.tapTime) {\n        this.tap.touchmove(e, points, mapTouches);\n      } else if (this.swipePoint) {\n        if (mapTouches[0].identifier !== this.swipeTouch) {\n          return;\n        }\n\n        var newSwipePoint = points[0];\n        var dist = newSwipePoint.y - this.swipePoint.y;\n        this.swipePoint = newSwipePoint;\n        e.preventDefault();\n        this.active = true;\n        return {\n          zoomDelta: dist / 128\n        };\n      }\n    }\n  }, {\n    key: \"touchend\",\n    value: function touchend(e, points, mapTouches) {\n      if (!this.tapTime) {\n        var point = this.tap.touchend(e, points, mapTouches);\n\n        if (point) {\n          this.tapTime = e.timeStamp;\n        }\n      } else if (this.swipePoint) {\n        if (mapTouches.length === 0) {\n          this.reset();\n        }\n      }\n    }\n  }, {\n    key: \"touchcancel\",\n    value: function touchcancel() {\n      this.reset();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      this.reset();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }]);\n\n  return TapDragZoomHandler;\n}();\n\nexport { TapDragZoomHandler as default };","map":null,"metadata":{},"sourceType":"module"}