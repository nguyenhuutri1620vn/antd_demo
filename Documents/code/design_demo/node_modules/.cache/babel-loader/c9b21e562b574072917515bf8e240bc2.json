{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport React from 'react';\nimport { WorkspacePanel, useXflowPrefixCls } from '@antv/xflow';\nimport { PanelBody } from './panel-body';\nimport { usePanelLyaoutStyle } from './utils';\nimport { useJsonSchemaFormModel } from './service';\nexport { FormItemWrapper } from './schema-form';\nexport { executeJsonSchemaFormCommand } from './service';\n/** useFormPanelData获取数据 */\n\nexport var JsonSchemaFormMain = function (props) {\n  var prefixClz = props.prefixClz;\n  var getCustomRenderComponent = props.getCustomRenderComponent,\n      afterUpdatingCb = props.afterUpdatingCb,\n      formValueUpdateService = props.formValueUpdateService;\n\n  var _a = useJsonSchemaFormModel(props),\n      state = _a.state,\n      commandService = _a.commandService,\n      modelService = _a.modelService; // 联动更新form items的值\n\n\n  var triggerUpdate = React.useCallback(function (form, values) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            form.setFieldsValue(values);\n            return [4\n            /*yield*/\n            , formValueUpdateService({\n              values: values,\n              modelService: modelService,\n              commandService: commandService,\n              targetData: state.targetData,\n              targetType: state.targetType\n            })];\n\n          case 1:\n            result = _a.sent();\n\n            if (afterUpdatingCb) {\n              afterUpdatingCb(result);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, [afterUpdatingCb, commandService, formValueUpdateService, modelService, state.targetData, state.targetType]); // 在fields change时的回调\n\n  var onFieldsChange = React.useCallback(function (values) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , formValueUpdateService({\n              values: values,\n              modelService: modelService,\n              commandService: commandService,\n              targetData: state.targetData,\n              targetType: state.targetType\n            })];\n\n          case 1:\n            result = _a.sent();\n\n            if (afterUpdatingCb) {\n              afterUpdatingCb(result);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, [afterUpdatingCb, commandService, formValueUpdateService, modelService, state.targetData, state.targetType]);\n  /** schema为空的情况  */\n\n  var noSchema = React.useMemo(function () {\n    try {\n      return state.schema.tabs.length === 0 || !state.schema;\n    } catch (error) {\n      return true;\n    }\n  }, [state.schema]);\n  var bodyStyle = usePanelLyaoutStyle(props, noSchema).bodyStyle;\n  /** 支持自定义渲染 */\n\n  if (getCustomRenderComponent) {\n    var Component = getCustomRenderComponent(state.targetType, state.targetData, modelService, commandService);\n\n    if (Component) {\n      return React.createElement(Component, __assign(__assign({}, props), {\n        bodyStyle: bodyStyle,\n        targetData: state.targetData,\n        targetType: state.targetType,\n        modelService: modelService,\n        commandService: commandService\n      }));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: prefixClz\n  }, React.createElement(PanelBody, __assign({}, props, {\n    style: bodyStyle,\n    prefixClz: props.prefixClz,\n    loading: state.loading,\n    schema: state.schema,\n    triggerUpdate: triggerUpdate,\n    onFieldsChange: onFieldsChange\n  })));\n};\nexport var JsonSchemaForm = function (props) {\n  var prefixClz = useXflowPrefixCls('json-schema-form');\n  return React.createElement(WorkspacePanel, __assign({}, props, {\n    className: prefixClz\n  }), React.createElement(JsonSchemaFormMain, __assign({}, props)));\n};","map":null,"metadata":{},"sourceType":"module"}