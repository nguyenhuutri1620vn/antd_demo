{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { $window, isMini } from '@antv/l7-utils';\nimport UnitBezier from '@mapbox/unitbezier';\nvar reducedMotionQuery;\nexport function wrap(n, min, max) {\n  var d = max - min;\n  var w = ((n - min) % d + d) % d + min;\n  return w === min ? max : w;\n}\nexport function clamp(n, min, max) {\n  return Math.min(max, Math.max(min, n));\n}\nexport function interpolate(a, b, t) {\n  return a * (1 - t) + b * t;\n}\nexport function bezier(p1x, p1y, p2x, p2y) {\n  var bez = new UnitBezier(p1x, p1y, p2x, p2y);\n  return function (t) {\n    return bez.solve(t);\n  };\n}\nexport var ease = bezier(0.25, 0.1, 0.25, 1);\nexport function prefersReducedMotion() {\n  if (isMini || !$window.matchMedia) {\n    return false;\n  }\n\n  if (reducedMotionQuery == null) {\n    reducedMotionQuery = $window.matchMedia('(prefers-reduced-motion: reduce)');\n  }\n\n  return reducedMotionQuery.matches;\n}\nexport function pick(src, properties) {\n  var result = {};\n\n  var _iterator = _createForOfIteratorHelper(properties),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var name = _step.value;\n\n      if (name in src) {\n        result[name] = src[name];\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\nexport var now = isMini ? Date.now.bind(Date) : $window.performance && $window.performance.now ? $window.performance.now.bind($window.performance) : Date.now.bind(Date);\nexport var raf = $window.requestAnimationFrame || $window.mozRequestAnimationFrame || $window.webkitRequestAnimationFrame || $window.msRequestAnimationFrame;\n\nvar _cancel = $window.cancelAnimationFrame || $window.mozCancelAnimationFrame || $window.webkitCancelAnimationFrame || $window.msCancelAnimationFrame;\n\nexport { _cancel as cancel };\nexport function renderframe(fn) {\n  var frame = raf(fn);\n  return {\n    cancel: function cancel() {\n      return _cancel(frame);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}