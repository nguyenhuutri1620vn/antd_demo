{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Path } from '../../geometry';\nimport { NumberExt } from '../../util';\nimport { normalize } from './util';\nexport const block = _a => {\n  var {\n    size,\n    width,\n    height,\n    offset,\n    open\n  } = _a,\n      attrs = __rest(_a, [\"size\", \"width\", \"height\", \"offset\", \"open\"]);\n\n  return createClassicMarker({\n    size,\n    width,\n    height,\n    offset\n  }, open === true, true, undefined, attrs);\n};\nexport const classic = _a => {\n  var {\n    size,\n    width,\n    height,\n    offset,\n    factor\n  } = _a,\n      attrs = __rest(_a, [\"size\", \"width\", \"height\", \"offset\", \"factor\"]);\n\n  return createClassicMarker({\n    size,\n    width,\n    height,\n    offset\n  }, false, false, factor, attrs);\n};\n\nfunction createClassicMarker(options, open, full) {\n  let factor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3 / 4;\n  let attrs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  const size = options.size || 10;\n  const width = options.width || size;\n  const height = options.height || size;\n  const path = new Path();\n  const localAttrs = {};\n\n  if (open) {\n    path.moveTo(width, 0).lineTo(0, height / 2).lineTo(width, height);\n    localAttrs.fill = 'none';\n  } else {\n    path.moveTo(0, height / 2);\n    path.lineTo(width, 0);\n\n    if (!full) {\n      const f = NumberExt.clamp(factor, 0, 1);\n      path.lineTo(width * f, height / 2);\n    }\n\n    path.lineTo(width, height);\n    path.close();\n  }\n\n  return Object.assign(Object.assign(Object.assign({}, localAttrs), attrs), {\n    tagName: 'path',\n    d: normalize(path.serialize(), {\n      x: options.offset != null ? options.offset : -width / 2\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}