{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport { ConfigProvider, Tooltip } from 'antd';\nimport merge from 'lodash/merge';\nimport { createGraphConfig } from '@antv/xflow-core';\nimport { Shape } from '@antv/x6';\nimport { NODE_HEIGHT, ASPECTRATIONODE, setNodeRender, setGroupRender } from '../flowchart-node-panel';\nimport { movedNode, resizeNode, changePortsVisible, addTools, removeTools, setProps } from './utils';\n/** 临时边 */\n\nconst TEMP_EGDE = 'flowchart-connecting-edge';\n/** 自定义React节点 */\n\nconst ANT_PREFIX = 'ant';\nexport var NsAddEdgeEvent;\n\n(function (NsAddEdgeEvent) {\n  NsAddEdgeEvent.EVENT_NAME = 'ADD_FLOWCHART_EDGE_CMD_EVENT';\n})(NsAddEdgeEvent || (NsAddEdgeEvent = {}));\n\nconst XFlowEdge = Shape.Edge.registry.register('xflow', Shape.Edge.define({\n  zIndex: 1,\n  highlight: true,\n  name: TEMP_EGDE,\n  label: '',\n  anchor: {\n    name: 'midSide',\n    args: {\n      dx: 10\n    }\n  },\n  attrs: {\n    line: {\n      stroke: '#A2B1C3',\n      targetMarker: {\n        name: 'block',\n        width: 12,\n        height: 8\n      },\n      strokeDasharray: '5 5',\n      strokeWidth: 1\n    }\n  },\n  data: {\n    label: ''\n  }\n}), true);\nexport const useGraphConfig = createGraphConfig((config, proxy) => {\n  const {\n    config: canvasConfig = {},\n    useConfig\n  } = proxy.getValue();\n  config.setEdgeTypeParser(edge => edge === null || edge === void 0 ? void 0 : edge.renderKey);\n  setNodeRender(config);\n  setGroupRender(config);\n  /** 这里比较黑，props 共享*/\n\n  setProps(Object.assign(Object.assign({}, proxy.getValue()), {\n    graphConfig: config\n  }));\n  config.setX6Config(merge({\n    grid: true,\n    history: true,\n    resizing: {\n      enabled: true,\n      minWidth: NODE_HEIGHT,\n      minHeight: NODE_HEIGHT,\n      preserveAspectRatio: shape => {\n        const {\n          data\n        } = shape;\n        return ASPECTRATIONODE.includes(data.name);\n      }\n    },\n    snapline: {\n      enabled: true\n    },\n    connecting: {\n      router: 'manhattan',\n      connector: {\n        name: 'rounded',\n        args: {\n          radius: 8\n        }\n      },\n      anchor: 'center',\n      connectionPoint: 'anchor',\n      allowBlank: false,\n      snap: {\n        radius: 20\n      },\n\n      createEdge() {\n        const tempEdge = new XFlowEdge({});\n        this.once('edge:connected', args => {\n          const {\n            edge,\n            isNew\n          } = args;\n          /** 没有edge:connected时，会导致graph.once的事件没有执行 */\n\n          if (isNew && edge && edge.isEdge() && tempEdge === edge) {\n            const targetNode = edge.getTargetCell();\n\n            if (targetNode && targetNode.isNode()) {\n              const targetPortId = edge.getTargetPortId();\n              const sourcePortId = edge.getSourcePortId();\n              const sourceCellId = edge.getSourceCellId();\n              const targetCellId = edge.getTargetCellId();\n              this.trigger(NsAddEdgeEvent.EVENT_NAME, {\n                targetPortId,\n                sourcePortId,\n                source: sourceCellId,\n                target: targetCellId,\n                edge: edge\n              });\n            }\n          }\n        });\n        return tempEdge;\n      },\n\n      validateEdge: args => {\n        var _a;\n\n        const {\n          edge\n        } = args;\n        return !!((_a = edge === null || edge === void 0 ? void 0 : edge.target) === null || _a === void 0 ? void 0 : _a.port);\n      },\n\n      // 是否触发交互事件\n      validateMagnet() {\n        // 所有锚点均可触发\n        return true;\n      },\n\n      // 显示可用的链接桩\n      validateConnection(_ref) {\n        let {\n          sourceView,\n          targetView,\n          targetMagnet\n        } = _ref;\n\n        // 不允许连接到自己\n        if (sourceView === targetView) {\n          return false;\n        }\n\n        const node = targetView.cell; // 判断目标链接桩是否可连接\n\n        if (targetMagnet) {\n          const portId = targetMagnet.getAttribute('port');\n          const port = node.getPort(portId);\n          return !(port && port.connected);\n        }\n\n        return;\n      }\n\n    },\n    highlighting: {\n      nodeAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAdsorbed: {\n        name: 'className',\n        args: {\n          className: 'adsorbed'\n        }\n      }\n    },\n\n    onPortRendered(args) {\n      const {\n        port\n      } = args;\n      const {\n        contentSelectors\n      } = args;\n      const container = contentSelectors && contentSelectors.content;\n      const placement = port.group;\n      const clz = classnames('xflow-port', {\n        connected: port.connected\n      });\n\n      if (container) {\n        ReactDOM.render(React.createElement(ConfigProvider, {\n          prefixCls: ANT_PREFIX\n        }, React.createElement(Tooltip, {\n          title: port.tooltip,\n          placement: placement\n        }, React.createElement(\"span\", {\n          className: clz\n        }))), container);\n      }\n    }\n\n  }, canvasConfig));\n  /** 内交互，上层通过实例绑定 */\n\n  config.setEvents([{\n    eventName: 'node:selected',\n    callback: () => {\n      changePortsVisible(false);\n    }\n  }, {\n    eventName: 'edge:dblclick',\n    callback: e => {\n      addTools(e);\n    }\n  }, {\n    eventName: 'edge:mouseleave',\n    callback: (e, cmds) => {\n      removeTools(e, cmds);\n    }\n  }, {\n    eventName: 'node:mouseenter',\n    callback: e => {\n      changePortsVisible(true, e);\n    }\n  }, {\n    eventName: 'node:mouseleave',\n    callback: e => {\n      changePortsVisible(false, e);\n    }\n  }, {\n    eventName: 'node:moved',\n    callback: (e, cmds) => {\n      movedNode(e, cmds);\n    }\n  }, {\n    eventName: 'node:resized',\n    callback: (e, cmds) => {\n      resizeNode(e, cmds);\n    }\n  }]);\n\n  if (typeof useConfig === 'function') {\n    useConfig(config);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}