{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ErrorBoundary from '../../../errorBoundary';\nimport useGraph from '../../hooks/useGraph';\nimport ChartLoading from '../../../utils/createLoading';\nimport { getGraphSize, getGraphId, useProps } from '../utils';\nimport { bindDefaultEvents, renderGraph, getDefaultEdgeArrowCfg } from '../utils';\nimport { registerCardNode } from '../customItems';\nimport { defaultNodeAnchorPoints, defaultNodeSize, defaultStateStyles, defaultNodeStyle } from '../constants';\nvar graphs = {};\nregisterCardNode();\nvar defaultLayout = {\n  type: 'compactBox',\n  direction: 'LR',\n  getId: function (d) {\n    return d.id;\n  },\n  getHeight: function () {\n    return 60;\n  },\n  getWidth: function () {\n    return 16;\n  },\n  getVGap: function () {\n    return 16;\n  },\n  getHGap: function () {\n    return 100;\n  }\n};\nvar defaultProps = {\n  nodeType: 'card',\n  edgeType: 'cubic-horizontal',\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n  nodeAnchorPoints: defaultNodeAnchorPoints,\n  nodeSize: defaultNodeSize,\n  layout: defaultLayout,\n  animate: true,\n  markerPosition: 'right',\n  nodeStateStyles: defaultStateStyles,\n  edgeStateStyles: defaultStateStyles,\n  collapseExpand: true,\n  showArrow: true,\n  arrowType: 'vee',\n  autoFit: true,\n  style: {\n    height: 'inherit'\n  }\n};\n\nvar IndentedTreeGraph = function (props) {\n  var uProps = useProps(props, defaultProps);\n  var data = uProps.data,\n      className = uProps.className,\n      style = uProps.style,\n      width = uProps.width,\n      height = uProps.height,\n      _a = uProps.nodeType,\n      nodeType = _a === void 0 ? 'card' : _a,\n      _b = uProps.edgeType,\n      edgeType = _b === void 0 ? 'cubic-horizontal' : _b,\n      _c = uProps.behaviors,\n      behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c,\n      _d = uProps.nodeAnchorPoints,\n      nodeAnchorPoints = _d === void 0 ? defaultNodeAnchorPoints : _d,\n      _e = uProps.nodeSize,\n      nodeSize = _e === void 0 ? defaultNodeSize : _e,\n      layout = uProps.layout,\n      _f = uProps.animate,\n      animate = _f === void 0 ? true : _f,\n      nodeStyle = uProps.nodeStyle,\n      edgeStyle = uProps.edgeStyle,\n      edgeCfg = uProps.edgeCfg,\n      markerStyle = uProps.markerStyle,\n      _g = uProps.markerPosition,\n      markerPosition = _g === void 0 ? 'right' : _g,\n      _h = uProps.nodeStateStyles,\n      nodeStateStyles = _h === void 0 ? defaultStateStyles : _h,\n      _j = uProps.edgeStateStyles,\n      edgeStateStyles = _j === void 0 ? defaultStateStyles : _j,\n      _k = uProps.collapseExpand,\n      collapseExpand = _k === void 0 ? true : _k,\n      titleStyle = uProps.titleStyle,\n      bodyStyle = uProps.bodyStyle,\n      footerStyle = uProps.footerStyle,\n      footerValueStyle = uProps.footerValueStyle,\n      _l = uProps.showArrow,\n      showArrow = _l === void 0 ? true : _l,\n      _m = uProps.arrowType,\n      arrowType = _m === void 0 ? 'vee' : _m,\n      _o = uProps.autoFit,\n      autoFit = _o === void 0 ? true : _o,\n      onReady = uProps.onReady,\n      loading = uProps.loading,\n      loadingTemplate = uProps.loadingTemplate,\n      errorTemplate = uProps.errorTemplate;\n  var container = React.useRef(null);\n  var graph = React.useRef(null);\n  var graphId = getGraphId(graph);\n  useGraph(graphs[graphId], uProps, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n    var graph = graphs[graphId];\n\n    if (!graph) {\n      graph = new G6.TreeGraph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        animate: animate,\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          anchorPoints: nodeAnchorPoints,\n          titleStyle: titleStyle,\n          bodyStyle: bodyStyle,\n          footerStyle: footerStyle,\n          footerValueStyle: footerValueStyle,\n          markerStyle: markerStyle,\n          collapseExpand: collapseExpand,\n          markerPosition: markerPosition\n        },\n        defaultEdge: {\n          type: edgeType\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout,\n        fitView: autoFit\n      });\n      graphs[graphId] = graph;\n    }\n\n    graph.node(function (node) {\n      if (typeof nodeStyle === 'function') {\n        return {\n          style: nodeStyle(node, graph)\n        };\n      }\n\n      return {\n        style: __assign(__assign({}, defaultNodeStyle), nodeStyle)\n      };\n    });\n    graph.edge(function (edge) {\n      if (edgeCfg) {\n        return typeof edgeCfg === 'function' ? edgeCfg(edge, graph) : edgeCfg;\n      }\n\n      if (typeof edgeStyle === 'function') {\n        return {\n          style: edgeStyle(edge, graph)\n        };\n      }\n\n      return {\n        style: __assign(__assign({\n          stroke: '#ccc'\n        }, showArrow && getDefaultEdgeArrowCfg(0, arrowType)), edgeStyle)\n      };\n    });\n\n    if (collapseExpand) {\n      bindDefaultEvents(graph, collapseExpand);\n    }\n\n    renderGraph(graph, data);\n\n    if (onReady) {\n      onReady(graph);\n    }\n\n    return function () {\n      if (graphs[graphId]) {\n        graphs[graphId].destroy();\n        delete graphs[graphId];\n      }\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, {\n    errorTemplate: errorTemplate\n  }, loading && React.createElement(ChartLoading, {\n    loadingTemplate: loadingTemplate\n  }), React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default IndentedTreeGraph;","map":null,"metadata":{},"sourceType":"module"}