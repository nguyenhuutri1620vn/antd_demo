{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { uuidv4 } from '@antv/xflow-core';\nimport { isNumber } from 'lodash';\nimport * as NodesComponent from './nodes';\nimport { NODE_HEIGHT, NODE_WIDTH, NODEPOOL } from './constants';\n/** 和 graph config 注册的节点保持一致 */\n\nconst getAnchorStyle = position => {\n  return {\n    position: {\n      name: position\n    },\n    attrs: {\n      circle: {\n        r: 4,\n        magnet: true,\n        stroke: '#31d0c6',\n        strokeWidth: 2,\n        fill: '#fff',\n        style: {\n          visibility: 'hidden'\n        }\n      }\n    },\n    zIndex: 10\n  };\n};\n\nconst getPorts = function () {\n  let position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['top', 'right', 'bottom', 'left'];\n  return {\n    items: position.map(name => {\n      return {\n        group: name,\n        id: uuidv4()\n      };\n    }),\n    groups: {\n      top: getAnchorStyle('top'),\n      right: getAnchorStyle('right'),\n      bottom: getAnchorStyle('bottom'),\n      left: getAnchorStyle('left')\n    }\n  };\n};\n\nexport const getRegisterNode = nodes => {\n  return (nodes || []).map(item => {\n    const {\n      name,\n      popover,\n      label = '',\n      width = NODE_HEIGHT,\n      height = NODE_HEIGHT,\n      ports\n    } = item;\n    const id = uuidv4(); // 暂不使用上层数据\n\n    return {\n      id,\n      renderKey: name,\n      name,\n      label,\n      popoverContent: popover,\n      width,\n      height,\n      ports: ports || getPorts(),\n      originData: Object.assign({}, item),\n      isCustom: true\n    };\n  });\n};\nexport const nodeService = nodes => __awaiter(void 0, void 0, void 0, function* () {\n  const customNodes = getRegisterNode(nodes);\n  return [...customNodes, ...NODEPOOL.map(_ref => {\n    let {\n      name,\n      ports,\n      width = NODE_WIDTH,\n      height = NODE_HEIGHT,\n      label = ''\n    } = _ref;\n    return {\n      id: uuidv4(),\n      renderKey: name,\n      name,\n      label,\n      popoverContent: () => name,\n      width,\n      height,\n      ports: getPorts(ports)\n    };\n  })];\n});\nexport const setNodeRender = function (config) {\n  let nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  // 自定义节点\n  if (nodes === null || nodes === void 0 ? void 0 : nodes.length) {\n    nodes.forEach(item => {\n      const {\n        name,\n        component\n      } = item;\n      config.setNodeRender(name, component);\n    });\n  }\n  /** 默认节点，通过 Terminal 标识，避免多次调用*/\n\n\n  if (!config.nodeRender.get('Terminal')) {\n    NODEPOOL.forEach(item => {\n      config.setNodeRender(item.name, NodesComponent[`${item.name.replace(/\\s+/g, '')}Node`]);\n    });\n  }\n}; // 创建节点路径\n\nexport const createPath = function (paths) {\n  let offsetX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let offsetY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!paths.length) {\n    return null;\n  }\n\n  let path = ''; // @ts-ignore\n\n  paths.forEach(item => {\n    const [c, x, y, c2x, c2y] = item;\n    path += isNumber(y) ? ` ${c} ${x + offsetX} ${y + offsetY}` : ` ${c}`;\n\n    if (c2y) {\n      path += ` ${c2x + offsetX} ${c2y + offsetY}`;\n    }\n  });\n  return path;\n};","map":null,"metadata":{},"sourceType":"module"}