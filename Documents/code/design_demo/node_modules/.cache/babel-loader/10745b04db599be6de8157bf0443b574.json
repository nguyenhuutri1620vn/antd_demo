{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _throttle from \"lodash/throttle\";\nimport { $window } from '@antv/l7-utils';\n\nvar Hash = function () {\n  function Hash(hashName) {\n    var _this = this;\n\n    _classCallCheck(this, Hash);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"updateHash\", void 0);\n\n    _defineProperty(this, \"hashName\", void 0);\n\n    _defineProperty(this, \"onHashChange\", function () {\n      var loc = _this.getCurrentHash();\n\n      if (loc.length >= 3 && !loc.some(function (v) {\n        return isNaN(+v);\n      })) {\n        var bearing = _this.map.dragRotate.isEnabled() && _this.map.touchZoomRotate.isEnabled() ? +(loc[3] || 0) : _this.map.getBearing();\n\n        _this.map.jumpTo({\n          center: [+loc[2], +loc[1]],\n          zoom: +loc[0],\n          bearing: bearing,\n          pitch: +(loc[4] || 0)\n        });\n\n        return true;\n      }\n\n      return false;\n    });\n\n    _defineProperty(this, \"getCurrentHash\", function () {\n      var hash = window.location.hash.replace('#', '');\n\n      if (_this.hashName) {\n        var keyval;\n        hash.split('&').map(function (part) {\n          return part.split('=');\n        }).forEach(function (part) {\n          if (part[0] === _this.hashName) {\n            keyval = part;\n          }\n        });\n        return (keyval ? keyval[1] || '' : '').split('/');\n      }\n\n      return hash.split('/');\n    });\n\n    _defineProperty(this, \"updateHashUnthrottled\", function () {\n      var hash = _this.getHashString();\n\n      try {\n        window.history.replaceState(window.history.state, '', hash);\n      } catch (SecurityError) {}\n    });\n\n    this.hashName = hashName && encodeURIComponent(hashName);\n    this.updateHash = _throttle(this.updateHashUnthrottled, 30 * 1000 / 100);\n  }\n\n  _createClass(Hash, [{\n    key: \"addTo\",\n    value: function addTo(map) {\n      this.map = map;\n      $window.addEventListener('hashchange', this.onHashChange, false);\n      this.map.on('moveend', this.updateHash);\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      $window.removeEventListener('hashchange', this.onHashChange, false);\n      this.map.off('moveend', this.updateHash);\n      delete this.map;\n      return this;\n    }\n  }, {\n    key: \"getHashString\",\n    value: function getHashString(mapFeedback) {\n      var center = this.map.getCenter();\n      var zoom = Math.round(this.map.getZoom() * 100) / 100;\n      var precision = Math.ceil((zoom * Math.LN2 + Math.log(512 / 360 / 0.5)) / Math.LN10);\n      var m = Math.pow(10, precision);\n      var lng = Math.round(center.lng * m) / m;\n      var lat = Math.round(center.lat * m) / m;\n      var bearing = this.map.getBearing();\n      var pitch = this.map.getPitch();\n      var hash = '';\n\n      if (mapFeedback) {\n        hash += \"/\".concat(lng, \"/\").concat(lat, \"/\").concat(zoom);\n      } else {\n        hash += \"\".concat(zoom, \"/\").concat(lat, \"/\").concat(lng);\n      }\n\n      if (bearing || pitch) {\n        hash += \"/\".concat(Math.round(bearing * 10) / 10);\n      }\n\n      if (pitch) {\n        hash += \"/\".concat(Math.round(pitch));\n      }\n\n      if (this.hashName) {\n        var hashName = this.hashName;\n        var found = false;\n        var parts = window.location.hash.slice(1).split('&').map(function (part) {\n          var key = part.split('=')[0];\n\n          if (key === hashName) {\n            found = true;\n            return \"\".concat(key, \"=\").concat(hash);\n          }\n\n          return part;\n        }).filter(function (a) {\n          return a;\n        });\n\n        if (!found) {\n          parts.push(\"\".concat(hashName, \"=\").concat(hash));\n        }\n\n        return \"#\".concat(parts.join('&'));\n      }\n\n      return \"#\".concat(hash);\n    }\n  }]);\n\n  return Hash;\n}();\n\nexport default Hash;","map":null,"metadata":{},"sourceType":"module"}