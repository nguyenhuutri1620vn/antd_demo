{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nimport { TYPES } from '@antv/l7-core';\nimport Source, { DEFAULT_DATA, DEFAULT_PARSER } from '@antv/l7-source';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar DataSourcePlugin = (_dec = injectable(), _dec(_class = function () {\n  function DataSourcePlugin() {\n    _classCallCheck(this, DataSourcePlugin);\n\n    _defineProperty(this, \"mapService\", void 0);\n  }\n\n  _createClass(DataSourcePlugin, [{\n    key: \"apply\",\n    value: function apply(layer) {\n      var _this = this;\n\n      this.mapService = layer.getContainer().get(TYPES.IMapService);\n      layer.hooks.init.tap('DataSourcePlugin', function () {\n        var source = layer.getSource();\n\n        if (!source) {\n          var _ref = layer.sourceOption || {\n            data: DEFAULT_DATA,\n            options: DEFAULT_PARSER\n          },\n              data = _ref.data,\n              options = _ref.options;\n\n          layer.setSource(new Source(data, options));\n        }\n\n        _this.updateClusterData(layer);\n      });\n      layer.hooks.beforeRenderData.tap('DataSourcePlugin', function () {\n        var neeUpdateCluster = _this.updateClusterData(layer);\n\n        var dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;\n        layer.dataState.dataSourceNeedUpdate = false;\n        return neeUpdateCluster || dataSourceNeedUpdate;\n      });\n    }\n  }, {\n    key: \"updateClusterData\",\n    value: function updateClusterData(layer) {\n      var source = layer.getSource();\n      var cluster = source.cluster;\n      var _source$clusterOption = source.clusterOptions,\n          _source$clusterOption2 = _source$clusterOption.zoom,\n          zoom = _source$clusterOption2 === void 0 ? 0 : _source$clusterOption2,\n          _source$clusterOption3 = _source$clusterOption.maxZoom,\n          maxZoom = _source$clusterOption3 === void 0 ? 16 : _source$clusterOption3;\n      var newZoom = this.mapService.getZoom() - 1;\n      var dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;\n\n      if (cluster && (dataSourceNeedUpdate || Math.abs(layer.clusterZoom - newZoom) >= 1)) {\n        if (zoom !== Math.floor(newZoom)) {\n          source.updateClusterData(Math.floor(newZoom));\n        }\n\n        layer.clusterZoom = newZoom;\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return DataSourcePlugin;\n}()) || _class);\nexport { DataSourcePlugin as default };","map":null,"metadata":{},"sourceType":"module"}