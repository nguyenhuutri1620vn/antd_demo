{"ast":null,"code":"import { toResult } from './util';\nexport const outside = (portPosition, elemBBox, args) => outsideLayout(portPosition, elemBBox, false, args);\nexport const outsideOriented = (portPosition, elemBBox, args) => outsideLayout(portPosition, elemBBox, true, args);\nexport const inside = (portPosition, elemBBox, args) => insideLayout(portPosition, elemBBox, false, args);\nexport const insideOriented = (portPosition, elemBBox, args) => insideLayout(portPosition, elemBBox, true, args);\n\nfunction outsideLayout(portPosition, elemBBox, autoOrient, args) {\n  const offset = args.offset != null ? args.offset : 15;\n  const angle = elemBBox.getCenter().theta(portPosition);\n  const bboxAngles = getBBoxAngles(elemBBox);\n  let y;\n  let tx;\n  let ty;\n  let textAnchor;\n  let orientAngle = 0;\n\n  if (angle < bboxAngles[1] || angle > bboxAngles[2]) {\n    y = '.3em';\n    tx = offset;\n    ty = 0;\n    textAnchor = 'start';\n  } else if (angle < bboxAngles[0]) {\n    y = '0';\n    tx = 0;\n    ty = -offset;\n\n    if (autoOrient) {\n      orientAngle = -90;\n      textAnchor = 'start';\n    } else {\n      textAnchor = 'middle';\n    }\n  } else if (angle < bboxAngles[3]) {\n    y = '.3em';\n    tx = -offset;\n    ty = 0;\n    textAnchor = 'end';\n  } else {\n    y = '.6em';\n    tx = 0;\n    ty = offset;\n\n    if (autoOrient) {\n      orientAngle = 90;\n      textAnchor = 'start';\n    } else {\n      textAnchor = 'middle';\n    }\n  }\n\n  return toResult({\n    position: {\n      x: Math.round(tx),\n      y: Math.round(ty)\n    },\n    angle: orientAngle,\n    attrs: {\n      '.': {\n        y,\n        'text-anchor': textAnchor\n      }\n    }\n  }, args);\n}\n\nfunction insideLayout(portPosition, elemBBox, autoOrient, args) {\n  const offset = args.offset != null ? args.offset : 15;\n  const angle = elemBBox.getCenter().theta(portPosition);\n  const bboxAngles = getBBoxAngles(elemBBox);\n  let y;\n  let tx;\n  let ty;\n  let textAnchor;\n  let orientAngle = 0;\n\n  if (angle < bboxAngles[1] || angle > bboxAngles[2]) {\n    y = '.3em';\n    tx = -offset;\n    ty = 0;\n    textAnchor = 'end';\n  } else if (angle < bboxAngles[0]) {\n    y = '.6em';\n    tx = 0;\n    ty = offset;\n\n    if (autoOrient) {\n      orientAngle = 90;\n      textAnchor = 'start';\n    } else {\n      textAnchor = 'middle';\n    }\n  } else if (angle < bboxAngles[3]) {\n    y = '.3em';\n    tx = offset;\n    ty = 0;\n    textAnchor = 'start';\n  } else {\n    y = '0em';\n    tx = 0;\n    ty = -offset;\n\n    if (autoOrient) {\n      orientAngle = -90;\n      textAnchor = 'start';\n    } else {\n      textAnchor = 'middle';\n    }\n  }\n\n  return toResult({\n    position: {\n      x: Math.round(tx),\n      y: Math.round(ty)\n    },\n    angle: orientAngle,\n    attrs: {\n      '.': {\n        y,\n        'text-anchor': textAnchor\n      }\n    }\n  }, args);\n}\n\nfunction getBBoxAngles(elemBBox) {\n  const center = elemBBox.getCenter();\n  const tl = center.theta(elemBBox.getTopLeft());\n  const bl = center.theta(elemBBox.getBottomLeft());\n  const br = center.theta(elemBBox.getBottomRight());\n  const tr = center.theta(elemBBox.getTopRight());\n  return [tl, tr, br, bl];\n}","map":null,"metadata":{},"sourceType":"module"}