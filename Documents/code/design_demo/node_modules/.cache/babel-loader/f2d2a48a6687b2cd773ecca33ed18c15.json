{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport 'reflect-metadata';\nimport { singleton, inject, contrib, Contribution } from 'mana-syringe';\nimport debounce from 'lodash/debounce';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isBoolean from 'lodash/isBoolean';\nimport { Disposable, DisposableCollection } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { RxModel } from '../common/rx-model';\nimport { IGraphCommandService } from '../command';\nimport { IModelService } from '../model-service';\nimport { IToolbarService, IToolbarContribution } from './interface';\n/**\n * Main, shared registry for toolbar items.\n */\n\nlet ToolbarRegistry = class ToolbarRegistry {\n  constructor() {\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** 储存所有toolbar items */\n\n    this.toolbarItems = new Map();\n    /** 注册ToolbarRegistry的onChange的事件 */\n\n    this.onDidChangeEvent = new RxModel(null);\n    /** 通过ToolbarRegistry.onDidChange监听ToolbarRegistry items的变化  */\n\n    this.onDidChange = this.onDidChangeEvent.watch;\n    /** debounce in order to avoid to fire more than once in the same tick */\n\n    this.fireOnDidChange = debounce(() => this.onDidChangeEvent.setValue(undefined), 16);\n    /**\n     * 批量注册可单独dispose的扩展项目\n     * @param externalRegisterFn IRegisterMenuFunction\n     */\n\n    this.registerDisposableToolbar = externalRegisterFn => {\n      const toDispose = new DisposableCollection();\n      const disposableRegistry = {\n        registerToolbarItem: config => {\n          const disposable = this.registerItem(config);\n          toDispose.push(disposable);\n          return disposable;\n        }\n      };\n      externalRegisterFn(disposableRegistry);\n      this.toDispose.push(toDispose);\n      return toDispose;\n    };\n    /**\n     * 获取 ToolbarModel\n     * @param toolbarConfig IToolbarOptions\n     */\n\n\n    this.getToolbarModel = toolbarConfig => {\n      const {\n        layout,\n        mainGroups = [],\n        extraGroups = []\n      } = toolbarConfig;\n      return new RxModel({\n        layout,\n        mainGroups: this.createToolbarGroupModel(mainGroups),\n        extraGroups: this.createToolbarGroupModel(extraGroups)\n      });\n    };\n    /**\n     * 创建 ToolbarModel\n     * @param groups IToolbarGroupOptions[]\n     */\n\n\n    this.createToolbarGroupModel = groups => {\n      const groupModels = groups.map(group => {\n        const {\n          items = []\n        } = group;\n        return Object.assign(Object.assign({}, group), {\n          items: items.map(item => this.createToolbarModel({\n            id: item.id\n          })).filter(i => !!i)\n        });\n      });\n      return groupModels;\n    };\n  }\n  /** App启动时，收集Toolbar扩展点的注册项 */\n\n\n  onStart() {\n    const contributions = this.contributionProvider.getContributions();\n\n    for (const contribution of contributions) {\n      contribution.registerToolbarItems(this);\n    }\n  }\n  /**\n   * App 销毁时调用\n   * dispose toolbarProvider\n   */\n\n\n  onStop() {\n    this.toDispose.dispose();\n  }\n  /**\n   * 注册ToolbarItem\n   * item所需的command需要提前在command registry注册\n   * @param config IToolbarItem\n   */\n\n\n  registerItem(config) {\n    if (this.toolbarItems.has(config.id)) {\n      console.warn(`ToolbarRegistry ${config.id} is duplicated, in`, config);\n    }\n    /** 注册 */\n\n\n    this.toolbarItems.set(config.id, config);\n    /** 通知更新 */\n\n    this.fireOnDidChange();\n    const toDispose = new DisposableCollection(Disposable.create(() => this.fireOnDidChange()), Disposable.create(() => this.toolbarItems.delete(config.id)));\n    return toDispose;\n  }\n  /**\n   * 创建 ToolbarModel\n   * @param option IToolbarItem\n   */\n\n\n  createToolbarModel(option) {\n    const item = cloneDeep(this.toolbarItems.get(option.id));\n    const isEnabled = isBoolean(item.isEnabled) ? item.isEnabled : true;\n    const isVisible = isBoolean(item.isVisible) ? item.isVisible : true;\n    const toolbarItem = Object.assign(Object.assign({}, item), {\n      isEnabled: isEnabled,\n      isVisible: isVisible,\n      iconName: item.iconName,\n      text: item.text\n    });\n    return toolbarItem;\n  }\n\n};\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], ToolbarRegistry.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], ToolbarRegistry.prototype, \"modelService\", void 0);\n\n__decorate([contrib(IToolbarContribution), __metadata(\"design:type\", Object)], ToolbarRegistry.prototype, \"contributionProvider\", void 0);\n\nToolbarRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IToolbarService]\n})], ToolbarRegistry);\nexport { ToolbarRegistry };","map":null,"metadata":{},"sourceType":"module"}