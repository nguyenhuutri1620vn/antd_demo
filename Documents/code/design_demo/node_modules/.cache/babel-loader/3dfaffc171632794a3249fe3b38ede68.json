{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { regressionLinear, regressionExp, regressionLoess, regressionLog, regressionPoly, regressionPow, regressionQuad } from 'd3-regression';\nimport { isArray, get, isNumber } from '@antv/util';\nimport { getSplinePath } from '../../utils';\nvar REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad\n};\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\n\nexport function getQuadrantDefaultConfig(xBaseline, yBaseline) {\n  // 文本便宜距离\n  var textOffset = 10; // 四象限默认样式\n\n  var defaultConfig = {\n    regionStyle: [{\n      position: {\n        start: [xBaseline, 'max'],\n        end: ['max', yBaseline]\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', 'max'],\n        end: [xBaseline, yBaseline]\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', yBaseline],\n        end: [xBaseline, 'min']\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: [xBaseline, yBaseline],\n        end: ['max', 'min']\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1\n    },\n    labelStyle: [{\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }]\n  };\n  return defaultConfig;\n}\n\nvar splinePath = function (data, config) {\n  var view = config.view,\n      _a = config.options,\n      xField = _a.xField,\n      yField = _a.yField;\n  var xScaleView = view.getScaleByField(xField);\n  var yScaleView = view.getScaleByField(yField);\n  var pathData = data.map(function (d) {\n    return view.getCoordinate().convert({\n      x: xScaleView.scale(d[0]),\n      y: yScaleView.scale(d[1])\n    });\n  });\n  return getSplinePath(pathData, false);\n};\n\nexport var getPath = function (config) {\n  var options = config.options;\n  var xField = options.xField,\n      yField = options.yField,\n      data = options.data,\n      regressionLine = options.regressionLine;\n  var _a = regressionLine.type,\n      type = _a === void 0 ? 'linear' : _a,\n      algorithm = regressionLine.algorithm;\n  var pathData;\n\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n  } else {\n    var reg = REGRESSION_MAP[type]().x(function (d) {\n      return d[xField];\n    }).y(function (d) {\n      return d[yField];\n    });\n    pathData = reg(data);\n  }\n\n  return splinePath(pathData, config);\n};\n/**\n * 调整散点图 meta: { min, max } ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param options\n * @returns\n */\n\nexport var getMeta = function (options) {\n  var _a;\n\n  var _b = options.meta,\n      meta = _b === void 0 ? {} : _b,\n      xField = options.xField,\n      yField = options.yField,\n      data = options.data;\n  var xFieldValue = data[0][xField];\n  var yFieldValue = data[0][yField];\n  var xIsPositiveNumber = xFieldValue > 0;\n  var yIsPositiveNumber = yFieldValue > 0;\n  /**\n   * 获得对应字段的 min max scale 配置\n   */\n\n  function getMetaMinMax(field, axis) {\n    var fieldMeta = get(meta, [field]);\n\n    function getCustomValue(type) {\n      return get(fieldMeta, type);\n    }\n\n    var range = {};\n\n    if (axis === 'x') {\n      if (isNumber(xFieldValue)) {\n        if (!isNumber(getCustomValue('min'))) {\n          range['min'] = xIsPositiveNumber ? 0 : xFieldValue * 2;\n        }\n\n        if (!isNumber(getCustomValue('max'))) {\n          range['max'] = xIsPositiveNumber ? xFieldValue * 2 : 0;\n        }\n      }\n\n      return range;\n    }\n\n    if (isNumber(yFieldValue)) {\n      if (!isNumber(getCustomValue('min'))) {\n        range['min'] = yIsPositiveNumber ? 0 : yFieldValue * 2;\n      }\n\n      if (!isNumber(getCustomValue('max'))) {\n        range['max'] = yIsPositiveNumber ? yFieldValue * 2 : 0;\n      }\n    }\n\n    return range;\n  }\n\n  return __assign(__assign({}, meta), (_a = {}, _a[xField] = __assign(__assign({}, meta[xField]), getMetaMinMax(xField, 'x')), _a[yField] = __assign(__assign({}, meta[yField]), getMetaMinMax(yField, 'y')), _a));\n};","map":null,"metadata":{},"sourceType":"module"}