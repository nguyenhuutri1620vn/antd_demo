{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { Syringe } from 'mana-syringe';\nimport { Deferred } from '../../common/deferred';\nimport { MAX_ZOOM, MIN_ZOOM, XFLOW_DEFAULT_EDGE, XFLOW_DEFAULT_NODE, XFLOW_DEFAULT_GROUP_NODE } from '../../constants';\nimport { uuidv4 } from '../../common/uuid';\nimport { XFlowDefaultGroupNode } from './react-group-node';\nimport { XFlowDefaultNode } from './react-node';\nexport var NsGraphConfig;\n\n(function (NsGraphConfig) {\n  NsGraphConfig.CONFIG_TYPE = 'GraphConfig';\n  /** 默认的Node解析函数 */\n\n  NsGraphConfig.defaultNodeTypeParser = nodeConfig => nodeConfig.renderKey;\n  /** 构造的Edge解析函数 */\n\n\n  NsGraphConfig.defaultEdgeTypeParser = edgeConfig => edgeConfig.renderKey;\n  /** XFlow默认的React组件 */\n\n\n  NsGraphConfig.defaultNodeMapValue = [[XFLOW_DEFAULT_NODE, XFlowDefaultNode], [XFLOW_DEFAULT_GROUP_NODE, XFlowDefaultGroupNode]];\n})(NsGraphConfig || (NsGraphConfig = {}));\n\nexport class GraphConfig {\n  /** 构造函数 */\n  constructor() {\n    /** 配置类型 */\n    this.CONFIG_TYPE = NsGraphConfig.CONFIG_TYPE;\n    /** 画布的属性 */\n\n    this.x6Options = new Deferred();\n    /** 画布的root节点 */\n\n    this.rootContainer = new Deferred();\n    /** 画布的dom节点 */\n\n    this.graphContainer = new Deferred();\n    /** 自定义节点 */\n\n    this.nodeRender = new Map(NsGraphConfig.defaultNodeMapValue);\n    /** 自定义边 */\n\n    this.edgeRender = new Map();\n    /** 解析node渲染类型的parser */\n\n    this.nodeTypeParser = NsGraphConfig.defaultNodeTypeParser;\n    /** 解析edge渲染类型的parser  */\n\n    this.edgeTypeParser = NsGraphConfig.defaultEdgeTypeParser;\n    /** 自定义事件 */\n\n    this.events = [];\n\n    this.mergeX6Config = config => __awaiter(this, void 0, void 0, function* () {\n      const current = yield this.getX6Config();\n      return Object.assign(current, config);\n    });\n\n    this.getX6Config = () => __awaiter(this, void 0, void 0, function* () {\n      const config = yield this.x6Options.promise;\n      return config;\n    });\n\n    this.setX6Config = options => {\n      var _a;\n\n      const defaultOptions = this.getDefaultGraphOptions();\n      (_a = this.x6Options) === null || _a === void 0 ? void 0 : _a.resolve(Object.assign(Object.assign({}, defaultOptions), options));\n    };\n\n    this.setRootContainer = ele => {\n      ele && (this === null || this === void 0 ? void 0 : this.rootContainer.resolve(ele));\n    };\n\n    this.setGraphContainer = ele => {\n      var _a;\n\n      ele && ((_a = this.graphContainer) === null || _a === void 0 ? void 0 : _a.resolve(ele));\n    };\n\n    this.setEvents = events => {\n      this.events = events;\n    };\n\n    this.setDefaultNodeRender = component => {\n      this.nodeRender.set(XFLOW_DEFAULT_NODE, component);\n    };\n\n    this.setDefaultEdgeRender = component => {\n      this.edgeRender.set(XFLOW_DEFAULT_EDGE, component);\n    };\n\n    this.setNodeRender = (renderKey, component) => {\n      this.nodeRender.set(renderKey, component);\n    };\n\n    this.setEdgeRender = (renderKey, component) => {\n      this.edgeRender.set(renderKey, component);\n    };\n    /** 设置解析node render key的 parser */\n\n\n    this.setNodeTypeParser = parser => {\n      this.nodeTypeParser = parser;\n    };\n    /** 设置解析edge render key的 parser */\n\n\n    this.setEdgeTypeParser = parser => {\n      this.edgeTypeParser = parser;\n    };\n    /** 获取Graph参数 */\n\n\n    this.getConfig = () => __awaiter(this, void 0, void 0, function* () {\n      const [rootContainer, graphContainer, x6Options] = yield Promise.all([this.rootContainer.promise, this.graphContainer.promise, this.x6Options.promise]);\n      const graphConfig = {\n        xflowInstanceId: this.xflowInstanceId,\n        graphId: this.graphId,\n        nodeViewId: this.graphId,\n        rootContainer,\n        graphContainer,\n        x6Options,\n        events: this.events,\n        nodeRender: this.nodeRender,\n        edgeRender: this.edgeRender,\n        nodeTypeParser: this.nodeTypeParser,\n        edgeTypeParser: this.edgeTypeParser\n      };\n      return graphConfig;\n    });\n\n    this.getDefaultGraphOptions = () => {\n      const defaultOptions = {\n        // 节点是否可旋转\n        rotating: false,\n        // 节点是否可调整大小\n        resizing: false,\n        // 节点连线规则配置（详细文档：https://X6.antv.vision/zh/docs/api/graph/interaction#connecting）\n        connecting: {\n          snap: true,\n          dangling: false,\n          highlight: false,\n          connectionPoint: 'rect',\n          router: {\n            name: 'er'\n          },\n          connector: {\n            name: 'rounded',\n            args: {\n              radius: 15\n            }\n          }\n        },\n        // 画布背景，支持颜色/图片/水印等（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/background）\n        background: {},\n        // 网格配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/grid）\n        grid: {\n          visible: true\n        },\n        // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n        selecting: {\n          strict: true,\n          enabled: true,\n          multiple: true,\n          selectCellOnMoved: true,\n          showNodeSelectionBox: false,\n          // 框选可以选中edge\n          rubberEdge: true,\n          // 框选可以选中node\n          rubberNode: true,\n          movable: true\n        },\n        // 对齐线配置，辅助移动节点排版（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/snapline）\n        snapline: {\n          enabled: false\n        },\n        // 撤销/重做能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/history）\n        history: {\n          enabled: false\n        },\n        // 剪切板，支持跨画布的复制/粘贴（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/clipboard）\n        clipboard: {\n          enabled: true,\n          useLocalStorage: true\n        },\n        // 使画布具备滚动、平移、居中、缩放等能力（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/scroller）\n        scroller: {\n          enabled: false\n        },\n        // 滚轮缩放 （详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/mousewheel）\n        mousewheel: {\n          enabled: true,\n          minScale: MIN_ZOOM,\n          maxScale: MAX_ZOOM,\n          factor: 1.1,\n          modifiers: ['ctrl', 'meta']\n        },\n\n        /** 普通画布, 支持拖拽平移 */\n        panning: {\n          enabled: true\n        },\n\n        /** 缩放参数 */\n        scaling: {\n          min: MIN_ZOOM,\n          max: MAX_ZOOM\n        },\n\n        /** keyboad */\n        keyboard: {\n          enabled: true\n        },\n\n        /** 定制节点和边的交互行为 */\n        interacting: {\n          /** 节点默认可以被移动 */\n          nodeMovable: true,\n\n          /** 边上标签默认不可以被移动 */\n          edgeLabelMovable: false\n        },\n        async: false\n      };\n      return defaultOptions;\n    };\n\n    this.dispose = () => {\n      // TODO: 统一看下defer的销毁\n      this.rootContainer = new Deferred();\n      this.graphContainer = new Deferred();\n      this.x6Options = new Deferred();\n    };\n\n    this.graphId = uuidv4();\n  }\n\n}\nexport const IGraphOptionProvider = Symbol('IGraphOptionProvider');\nexport const registerGraphConfig = (register, graphConfig) => {\n  register(IGraphOptionProvider, {\n    lifecycle: Syringe.Lifecycle.singleton,\n    useDynamic: () => {\n      return {\n        getOptions: () => __awaiter(void 0, void 0, void 0, function* () {\n          return graphConfig.getConfig();\n        })\n      };\n    }\n  });\n};\nexport const createGraphConfig = addOptions => props => {\n  /** bridge config and props */\n  const propsContainer = React.useMemo(() => ({\n    getValue: () => ({})\n  }), []);\n\n  propsContainer.getValue = () => props;\n\n  const graphConfig = React.useMemo(() => {\n    const config = new GraphConfig();\n    addOptions(config, propsContainer);\n    return config;\n  }, [propsContainer]);\n  return graphConfig;\n};","map":null,"metadata":{},"sourceType":"module"}