{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { ModifierKey } from '../types';\nimport { Dom, NumberExt } from '../util';\nimport { Disposable } from '../common';\nexport class MouseWheel extends Disposable {\n  constructor(options) {\n    super();\n    this.options = options;\n    this.cumulatedFactor = 1;\n    const scroller = this.graph.scroller.widget;\n    this.container = scroller ? scroller.container : this.graph.container;\n    this.target = this.options.global ? document : this.container;\n    this.mousewheelHandle = new Dom.MouseWheelHandle(this.target, this.onMouseWheel.bind(this), this.allowMouseWheel.bind(this));\n\n    if (this.options.enabled) {\n      this.enable(true);\n    }\n  }\n\n  get graph() {\n    return this.options.graph;\n  }\n\n  get disabled() {\n    return this.options.enabled !== true;\n  }\n\n  enable(force) {\n    if (this.disabled || force) {\n      this.options.enabled = true;\n      this.graph.options.mousewheel.enabled = true;\n      this.mousewheelHandle.enable();\n    }\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.options.enabled = false;\n      this.graph.options.mousewheel.enabled = false;\n      this.mousewheelHandle.disable();\n    }\n  }\n\n  allowMouseWheel(evt) {\n    const e = evt.originalEvent || evt;\n    const guard = this.options.guard;\n    return (guard == null || guard.call(this.graph, e)) && ModifierKey.isMatch(e, this.options.modifiers);\n  }\n\n  onMouseWheel(evt) {\n    const e = evt.originalEvent || evt;\n    const guard = this.options.guard;\n\n    if ((guard == null || guard.call(this.graph, e)) && ModifierKey.isMatch(e, this.options.modifiers)) {\n      const factor = this.options.factor || 1.2;\n\n      if (this.currentScale == null) {\n        this.startPos = {\n          x: evt.clientX,\n          y: evt.clientY\n        };\n        this.currentScale = this.graph.scroller.widget ? this.graph.scroller.widget.zoom() : this.graph.transform.getScale().sx;\n      }\n\n      const delta = evt.deltaY;\n\n      if (delta < 0) {\n        // zoomin\n        // ------\n        // Switches to 1% zoom steps below 15%\n        if (this.currentScale < 0.15) {\n          this.cumulatedFactor = (this.currentScale + 0.01) / this.currentScale;\n        } else {\n          // Uses to 5% zoom steps for better grid rendering in\n          // webkit and to avoid rounding errors for zoom steps\n          this.cumulatedFactor = Math.round(this.currentScale * factor * 20) / 20 / this.currentScale;\n        }\n      } else {\n        // zoomout\n        // -------\n        // Switches to 1% zoom steps below 15%\n        if (this.currentScale <= 0.15) {\n          this.cumulatedFactor = (this.currentScale - 0.01) / this.currentScale;\n        } else {\n          // Uses to 5% zoom steps for better grid rendering in\n          // webkit and to avoid rounding errors for zoom steps\n          this.cumulatedFactor = Math.round(this.currentScale * (1 / factor) * 20) / 20 / this.currentScale;\n        }\n      }\n\n      this.cumulatedFactor = Math.max(0.01, Math.min(this.currentScale * this.cumulatedFactor, 160) / this.currentScale);\n      const scroller = this.graph.scroller.widget;\n      const currentScale = this.currentScale;\n      let targetScale = this.graph.transform.clampScale(currentScale * this.cumulatedFactor);\n      const minScale = this.options.minScale || Number.MIN_SAFE_INTEGER;\n      const maxScale = this.options.maxScale || Number.MAX_SAFE_INTEGER;\n      targetScale = NumberExt.clamp(targetScale, minScale, maxScale);\n\n      if (targetScale !== currentScale) {\n        if (scroller) {\n          if (this.options.zoomAtMousePosition) {\n            const origin = this.graph.coord.clientToLocalPoint(this.startPos);\n            scroller.zoom(targetScale, {\n              absolute: true,\n              center: origin.clone()\n            });\n          } else {\n            scroller.zoom(targetScale, {\n              absolute: true\n            });\n          }\n        } else if (this.options.zoomAtMousePosition) {\n          const origin = this.graph.coord.clientToGraphPoint(this.startPos);\n          this.graph.zoom(targetScale, {\n            absolute: true,\n            center: origin.clone()\n          });\n        } else {\n          this.graph.zoom(targetScale, {\n            absolute: true\n          });\n        }\n      }\n\n      this.currentScale = null;\n      this.cumulatedFactor = 1;\n    }\n  }\n\n  dispose() {\n    this.disable();\n  }\n\n}\n\n__decorate([Disposable.dispose()], MouseWheel.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}