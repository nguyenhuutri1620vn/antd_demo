{"ast":null,"code":"import { NumberExt } from '../../../util';\nimport { Point, Angle } from '../../../geometry';\nimport { orth } from '../orth';\nexport const defaults = {\n  step: 10,\n  maxLoopCount: 2000,\n  precision: 1,\n  maxDirectionChange: 90,\n  perpendicular: true,\n  excludeTerminals: [],\n  excludeShapes: [],\n  excludeHiddenNodes: false,\n  startDirections: ['top', 'right', 'bottom', 'left'],\n  endDirections: ['top', 'right', 'bottom', 'left'],\n  directionMap: {\n    top: {\n      x: 0,\n      y: -1\n    },\n    right: {\n      x: 1,\n      y: 0\n    },\n    bottom: {\n      x: 0,\n      y: 1\n    },\n    left: {\n      x: -1,\n      y: 0\n    }\n  },\n\n  cost() {\n    const step = resolve(this.step, this);\n    return step;\n  },\n\n  directions() {\n    const step = resolve(this.step, this);\n    const cost = resolve(this.cost, this);\n    return [{\n      cost,\n      offsetX: step,\n      offsetY: 0\n    }, {\n      cost,\n      offsetX: -step,\n      offsetY: 0\n    }, {\n      cost,\n      offsetX: 0,\n      offsetY: step\n    }, {\n      cost,\n      offsetX: 0,\n      offsetY: -step\n    }];\n  },\n\n  penalties() {\n    const step = resolve(this.step, this);\n    return {\n      0: 0,\n      45: step / 2,\n      90: step / 2\n    };\n  },\n\n  paddingBox() {\n    const step = resolve(this.step, this);\n    return {\n      x: -step,\n      y: -step,\n      width: 2 * step,\n      height: 2 * step\n    };\n  },\n\n  fallbackRouter: orth,\n  draggingRouter: null\n};\nexport function resolve(input, options) {\n  if (typeof input === 'function') {\n    return input.call(options);\n  }\n\n  return input;\n}\nexport function resolveOptions(options) {\n  const result = Object.keys(options).reduce((memo, key) => {\n    const ret = memo;\n\n    if (key === 'fallbackRouter' || key === 'draggingRouter' || key === 'fallbackRoute') {\n      ret[key] = options[key];\n    } else {\n      ret[key] = resolve(options[key], options);\n    }\n\n    return memo;\n  }, {});\n\n  if (result.padding) {\n    const sides = NumberExt.normalizeSides(result.padding);\n    options.paddingBox = {\n      x: -sides.left,\n      y: -sides.top,\n      width: sides.left + sides.right,\n      height: sides.top + sides.bottom\n    };\n  }\n\n  result.directions.forEach(direction => {\n    const point1 = new Point(0, 0);\n    const point2 = new Point(direction.offsetX, direction.offsetY);\n    direction.angle = Angle.normalize(point1.theta(point2));\n  });\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}