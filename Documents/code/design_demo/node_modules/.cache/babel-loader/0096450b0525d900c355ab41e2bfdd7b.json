{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport Point from '../../geo/point';\nimport { indexTouches } from '../handler_util';\n\nvar TouchPanHandler = function () {\n  function TouchPanHandler(options) {\n    _classCallCheck(this, TouchPanHandler);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"active\", void 0);\n\n    _defineProperty(this, \"touches\", void 0);\n\n    _defineProperty(this, \"minTouches\", void 0);\n\n    _defineProperty(this, \"clickTolerance\", void 0);\n\n    _defineProperty(this, \"sum\", void 0);\n\n    this.minTouches = 1;\n    this.clickTolerance = options.clickTolerance || 1;\n    this.reset();\n  }\n\n  _createClass(TouchPanHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      this.active = false;\n      this.touches = {};\n      this.sum = new Point(0, 0);\n    }\n  }, {\n    key: \"touchstart\",\n    value: function touchstart(e, points, mapTouches) {\n      return this.calculateTransform(e, points, mapTouches);\n    }\n  }, {\n    key: \"touchmove\",\n    value: function touchmove(e, points, mapTouches) {\n      if (!this.active) {\n        return;\n      }\n\n      e.preventDefault();\n      return this.calculateTransform(e, points, mapTouches);\n    }\n  }, {\n    key: \"touchend\",\n    value: function touchend(e, points, mapTouches) {\n      this.calculateTransform(e, points, mapTouches);\n\n      if (this.active && mapTouches.length < this.minTouches) {\n        this.reset();\n      }\n    }\n  }, {\n    key: \"touchcancel\",\n    value: function touchcancel() {\n      this.reset();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      this.reset();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: \"calculateTransform\",\n    value: function calculateTransform(e, points, mapTouches) {\n      if (mapTouches.length > 0) {\n        this.active = true;\n      }\n\n      var touches = indexTouches(mapTouches, points);\n      var touchPointSum = new Point(0, 0);\n      var touchDeltaSum = new Point(0, 0);\n      var touchDeltaCount = 0;\n\n      for (var identifier in touches) {\n        if (touches[identifier]) {\n          var point = touches[identifier];\n          var prevPoint = this.touches[identifier];\n\n          if (prevPoint) {\n            touchPointSum._add(point);\n\n            touchDeltaSum._add(point.sub(prevPoint));\n\n            touchDeltaCount++;\n            touches[identifier] = point;\n          }\n        }\n      }\n\n      this.touches = touches;\n\n      if (touchDeltaCount < this.minTouches || !touchDeltaSum.mag()) {\n        return;\n      }\n\n      var panDelta = touchDeltaSum.div(touchDeltaCount);\n\n      this.sum._add(panDelta);\n\n      if (this.sum.mag() < this.clickTolerance) {\n        return;\n      }\n\n      var around = touchPointSum.div(touchDeltaCount);\n      return {\n        around: around,\n        panDelta: panDelta\n      };\n    }\n  }]);\n\n  return TouchPanHandler;\n}();\n\nexport { TouchPanHandler as default };","map":null,"metadata":{},"sourceType":"module"}