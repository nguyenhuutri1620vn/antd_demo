{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport JQuery from 'jquery';\nimport { Dom, FunctionExt } from '../util';\nimport { Cell } from '../model';\nimport { Config } from '../global';\nimport { View, Markup } from '../view';\nexport class GraphView extends View {\n  constructor(graph) {\n    super();\n    this.graph = graph;\n    const {\n      selectors,\n      fragment\n    } = Markup.parseJSONMarkup(GraphView.markup);\n    this.background = selectors.background;\n    this.grid = selectors.grid;\n    this.svg = selectors.svg;\n    this.defs = selectors.defs;\n    this.viewport = selectors.viewport;\n    this.primer = selectors.primer;\n    this.stage = selectors.stage;\n    this.decorator = selectors.decorator;\n    this.overlay = selectors.overlay;\n    this.container = this.options.container;\n    this.restore = GraphView.snapshoot(this.container);\n    this.$(this.container).addClass(this.prefixClassName('graph')).append(fragment);\n    this.delegateEvents();\n  }\n\n  get model() {\n    return this.graph.model;\n  }\n\n  get options() {\n    return this.graph.options;\n  }\n\n  delegateEvents() {\n    const ctor = this.constructor;\n    super.delegateEvents(ctor.events);\n    return this;\n  }\n  /**\n   * Guard the specified event. If the event is not interesting, it\n   * returns `true`, otherwise returns `false`.\n   */\n\n\n  guard(e, view) {\n    // handled as `contextmenu` type\n    if (e.type === 'mousedown' && e.button === 2) {\n      return true;\n    }\n\n    if (this.options.guard && this.options.guard(e, view)) {\n      return true;\n    }\n\n    if (e.data && e.data.guarded !== undefined) {\n      return e.data.guarded;\n    }\n\n    if (view && view.cell && Cell.isCell(view.cell)) {\n      return false;\n    }\n\n    if (this.svg === e.target || this.container === e.target || JQuery.contains(this.svg, e.target)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  findView(elem) {\n    return this.graph.renderer.findViewByElem(elem);\n  }\n\n  onDblClick(evt) {\n    if (this.options.preventDefaultDblClick) {\n      evt.preventDefault();\n    }\n\n    const e = this.normalizeEvent(evt);\n    const view = this.findView(e.target);\n\n    if (this.guard(e, view)) {\n      return;\n    }\n\n    const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n\n    if (view) {\n      view.onDblClick(e, localPoint.x, localPoint.y);\n    } else {\n      this.graph.trigger('blank:dblclick', {\n        e,\n        x: localPoint.x,\n        y: localPoint.y\n      });\n    }\n  }\n\n  onClick(evt) {\n    if (this.getMouseMovedCount(evt) <= this.options.clickThreshold) {\n      const e = this.normalizeEvent(evt);\n      const view = this.findView(e.target);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n\n      if (view) {\n        view.onClick(e, localPoint.x, localPoint.y);\n      } else {\n        this.graph.trigger('blank:click', {\n          e,\n          x: localPoint.x,\n          y: localPoint.y\n        });\n      }\n    }\n  }\n\n  onContextMenu(evt) {\n    if (this.options.preventDefaultContextMenu) {\n      evt.preventDefault();\n    }\n\n    const e = this.normalizeEvent(evt);\n    const view = this.findView(e.target);\n\n    if (this.guard(e, view)) {\n      return;\n    }\n\n    const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n\n    if (view) {\n      view.onContextMenu(e, localPoint.x, localPoint.y);\n    } else {\n      this.graph.trigger('blank:contextmenu', {\n        e,\n        x: localPoint.x,\n        y: localPoint.y\n      });\n    }\n  }\n\n  delegateDragEvents(e, view) {\n    if (e.data == null) {\n      e.data = {};\n    }\n\n    this.setEventData(e, {\n      currentView: view || null,\n      mouseMovedCount: 0,\n      startPosition: {\n        x: e.clientX,\n        y: e.clientY\n      }\n    });\n    const ctor = this.constructor;\n    this.delegateDocumentEvents(ctor.documentEvents, e.data);\n    this.undelegateEvents();\n  }\n\n  getMouseMovedCount(e) {\n    const data = this.getEventData(e);\n    return data.mouseMovedCount || 0;\n  }\n\n  onMouseDown(evt) {\n    const e = this.normalizeEvent(evt);\n    const view = this.findView(e.target);\n\n    if (this.guard(e, view)) {\n      return;\n    }\n\n    if (this.options.preventDefaultMouseDown) {\n      e.preventDefault();\n    }\n\n    const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n\n    if (view) {\n      view.onMouseDown(e, localPoint.x, localPoint.y);\n    } else {\n      if (this.options.preventDefaultBlankAction) {\n        e.preventDefault();\n      }\n\n      this.graph.trigger('blank:mousedown', {\n        e,\n        x: localPoint.x,\n        y: localPoint.y\n      });\n    }\n\n    this.delegateDragEvents(e, view);\n  }\n\n  onMouseMove(evt) {\n    const data = this.getEventData(evt);\n    const startPosition = data.startPosition;\n\n    if (startPosition && startPosition.x === evt.clientX && startPosition.y === evt.clientY) {\n      return;\n    }\n\n    if (data.mouseMovedCount == null) {\n      data.mouseMovedCount = 0;\n    }\n\n    data.mouseMovedCount += 1;\n    const mouseMovedCount = data.mouseMovedCount;\n\n    if (mouseMovedCount <= this.options.moveThreshold) {\n      return;\n    }\n\n    const e = this.normalizeEvent(evt);\n    const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n    const view = data.currentView;\n\n    if (view) {\n      view.onMouseMove(e, localPoint.x, localPoint.y);\n    } else {\n      this.graph.trigger('blank:mousemove', {\n        e,\n        x: localPoint.x,\n        y: localPoint.y\n      });\n    }\n\n    this.setEventData(e, data);\n  }\n\n  onMouseUp(e) {\n    this.undelegateDocumentEvents();\n    const normalized = this.normalizeEvent(e);\n    const localPoint = this.graph.snapToGrid(normalized.clientX, normalized.clientY);\n    const data = this.getEventData(e);\n    const view = data.currentView;\n\n    if (view) {\n      view.onMouseUp(normalized, localPoint.x, localPoint.y);\n    } else {\n      this.graph.trigger('blank:mouseup', {\n        e: normalized,\n        x: localPoint.x,\n        y: localPoint.y\n      });\n    }\n\n    if (!e.isPropagationStopped()) {\n      this.onClick(JQuery.Event(e, {\n        type: 'click',\n        data: e.data\n      }));\n    }\n\n    e.stopImmediatePropagation();\n    this.delegateEvents();\n  }\n\n  onMouseOver(evt) {\n    const e = this.normalizeEvent(evt);\n    const view = this.findView(e.target);\n\n    if (this.guard(e, view)) {\n      return;\n    }\n\n    if (view) {\n      view.onMouseOver(e);\n    } else {\n      // prevent border of paper from triggering this\n      if (this.container === e.target) {\n        return;\n      }\n\n      this.graph.trigger('blank:mouseover', {\n        e\n      });\n    }\n  }\n\n  onMouseOut(evt) {\n    const e = this.normalizeEvent(evt);\n    const view = this.findView(e.target);\n\n    if (this.guard(e, view)) {\n      return;\n    }\n\n    if (view) {\n      view.onMouseOut(e);\n    } else {\n      if (this.container === e.target) {\n        return;\n      }\n\n      this.graph.trigger('blank:mouseout', {\n        e\n      });\n    }\n  }\n\n  onMouseEnter(evt) {\n    const e = this.normalizeEvent(evt);\n    const view = this.findView(e.target);\n\n    if (this.guard(e, view)) {\n      return;\n    }\n\n    const relatedView = this.graph.renderer.findViewByElem(e.relatedTarget);\n\n    if (view) {\n      if (relatedView === view) {\n        // mouse moved from tool to view\n        return;\n      }\n\n      view.onMouseEnter(e);\n    } else {\n      if (relatedView) {\n        return;\n      }\n\n      this.graph.trigger('graph:mouseenter', {\n        e\n      });\n    }\n  }\n\n  onMouseLeave(evt) {\n    const e = this.normalizeEvent(evt);\n    const view = this.findView(e.target);\n\n    if (this.guard(e, view)) {\n      return;\n    }\n\n    const relatedView = this.graph.renderer.findViewByElem(e.relatedTarget);\n\n    if (view) {\n      if (relatedView === view) {\n        // mouse moved from view to tool\n        return;\n      }\n\n      view.onMouseLeave(e);\n    } else {\n      if (relatedView) {\n        return;\n      }\n\n      this.graph.trigger('graph:mouseleave', {\n        e\n      });\n    }\n  }\n\n  onMouseWheel(evt) {\n    const e = this.normalizeEvent(evt);\n    const view = this.findView(e.target);\n\n    if (this.guard(e, view)) {\n      return;\n    }\n\n    const originalEvent = e.originalEvent;\n    const localPoint = this.graph.snapToGrid(originalEvent.clientX, originalEvent.clientY);\n    const delta = Math.max(-1, Math.min(1, originalEvent.wheelDelta || -originalEvent.detail));\n\n    if (view) {\n      view.onMouseWheel(e, localPoint.x, localPoint.y, delta);\n    } else {\n      this.graph.trigger('blank:mousewheel', {\n        e,\n        delta,\n        x: localPoint.x,\n        y: localPoint.y\n      });\n    }\n  }\n\n  onCustomEvent(evt) {\n    const elem = evt.currentTarget;\n    const event = elem.getAttribute('event') || elem.getAttribute('data-event');\n\n    if (event) {\n      const view = this.findView(elem);\n\n      if (view) {\n        const e = this.normalizeEvent(evt);\n\n        if (this.guard(e, view)) {\n          return;\n        }\n\n        const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n        view.onCustomEvent(e, event, localPoint.x, localPoint.y);\n      }\n    }\n  }\n\n  handleMagnetEvent(evt, handler) {\n    const magnetElem = evt.currentTarget;\n    const magnetValue = magnetElem.getAttribute('magnet');\n\n    if (magnetValue && magnetValue.toLowerCase() !== 'false') {\n      const view = this.findView(magnetElem);\n\n      if (view) {\n        const e = this.normalizeEvent(evt);\n\n        if (this.guard(e, view)) {\n          return;\n        }\n\n        const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n        FunctionExt.call(handler, this.graph, view, e, magnetElem, localPoint.x, localPoint.y);\n      }\n    }\n  }\n\n  onMagnetMouseDown(e) {\n    this.handleMagnetEvent(e, (view, e, magnet, x, y) => {\n      view.onMagnetMouseDown(e, magnet, x, y);\n    });\n  }\n\n  onMagnetDblClick(e) {\n    this.handleMagnetEvent(e, (view, e, magnet, x, y) => {\n      view.onMagnetDblClick(e, magnet, x, y);\n    });\n  }\n\n  onMagnetContextMenu(e) {\n    if (this.options.preventDefaultContextMenu) {\n      e.preventDefault();\n    }\n\n    this.handleMagnetEvent(e, (view, e, magnet, x, y) => {\n      view.onMagnetContextMenu(e, magnet, x, y);\n    });\n  }\n\n  onLabelMouseDown(evt) {\n    const labelNode = evt.currentTarget;\n    const view = this.findView(labelNode);\n\n    if (view) {\n      const e = this.normalizeEvent(evt);\n\n      if (this.guard(e, view)) {\n        return;\n      }\n\n      const localPoint = this.graph.snapToGrid(e.clientX, e.clientY);\n      view.onLabelMouseDown(e, localPoint.x, localPoint.y);\n    }\n  }\n\n  onImageDragStart() {\n    // This is the only way to prevent image dragging in Firefox that works.\n    // Setting -moz-user-select: none, draggable=\"false\" attribute or\n    // user-drag: none didn't help.\n    return false;\n  }\n\n  dispose() {\n    this.undelegateEvents();\n    this.undelegateDocumentEvents();\n    this.restore();\n\n    this.restore = () => {};\n  }\n\n}\n\n__decorate([View.dispose()], GraphView.prototype, \"dispose\", null);\n\n(function (GraphView) {\n  const prefixCls = `${Config.prefixCls}-graph`;\n  GraphView.markup = [{\n    ns: Dom.ns.xhtml,\n    tagName: 'div',\n    selector: 'background',\n    className: `${prefixCls}-background`\n  }, {\n    ns: Dom.ns.xhtml,\n    tagName: 'div',\n    selector: 'grid',\n    className: `${prefixCls}-grid`\n  }, {\n    ns: Dom.ns.svg,\n    tagName: 'svg',\n    selector: 'svg',\n    className: `${prefixCls}-svg`,\n    attrs: {\n      width: '100%',\n      height: '100%',\n      'xmlns:xlink': Dom.ns.xlink\n    },\n    children: [{\n      tagName: 'defs',\n      selector: 'defs'\n    }, {\n      tagName: 'g',\n      selector: 'viewport',\n      className: `${prefixCls}-svg-viewport`,\n      children: [{\n        tagName: 'g',\n        selector: 'primer',\n        className: `${prefixCls}-svg-primer`\n      }, {\n        tagName: 'g',\n        selector: 'stage',\n        className: `${prefixCls}-svg-stage`\n      }, {\n        tagName: 'g',\n        selector: 'decorator',\n        className: `${prefixCls}-svg-decorator`\n      }, {\n        tagName: 'g',\n        selector: 'overlay',\n        className: `${prefixCls}-svg-overlay`\n      }]\n    }]\n  }];\n\n  function snapshoot(elem) {\n    const cloned = elem.cloneNode();\n    elem.childNodes.forEach(child => cloned.appendChild(child));\n    return () => {\n      // remove all children\n      Dom.empty(elem); // remove all attributes\n\n      while (elem.attributes.length > 0) {\n        elem.removeAttribute(elem.attributes[0].name);\n      } // restore attributes\n\n\n      for (let i = 0, l = cloned.attributes.length; i < l; i += 1) {\n        const attr = cloned.attributes[i];\n        elem.setAttribute(attr.name, attr.value);\n      } // restore children\n\n\n      cloned.childNodes.forEach(child => elem.appendChild(child));\n    };\n  }\n\n  GraphView.snapshoot = snapshoot;\n})(GraphView || (GraphView = {}));\n\n(function (GraphView) {\n  const prefixCls = Config.prefixCls;\n  GraphView.events = {\n    dblclick: 'onDblClick',\n    contextmenu: 'onContextMenu',\n    touchstart: 'onMouseDown',\n    mousedown: 'onMouseDown',\n    mouseover: 'onMouseOver',\n    mouseout: 'onMouseOut',\n    mouseenter: 'onMouseEnter',\n    mouseleave: 'onMouseLeave',\n    mousewheel: 'onMouseWheel',\n    DOMMouseScroll: 'onMouseWheel',\n    [`mouseenter  .${prefixCls}-cell`]: 'onMouseEnter',\n    [`mouseleave  .${prefixCls}-cell`]: 'onMouseLeave',\n    [`mouseenter  .${prefixCls}-cell-tools`]: 'onMouseEnter',\n    [`mouseleave  .${prefixCls}-cell-tools`]: 'onMouseLeave',\n    [`mousedown   .${prefixCls}-cell [event]`]: 'onCustomEvent',\n    [`touchstart  .${prefixCls}-cell [event]`]: 'onCustomEvent',\n    [`mousedown   .${prefixCls}-cell [data-event]`]: 'onCustomEvent',\n    [`touchstart  .${prefixCls}-cell [data-event]`]: 'onCustomEvent',\n    [`dblclick    .${prefixCls}-cell [magnet]`]: 'onMagnetDblClick',\n    [`contextmenu .${prefixCls}-cell [magnet]`]: 'onMagnetContextMenu',\n    [`mousedown   .${prefixCls}-cell [magnet]`]: 'onMagnetMouseDown',\n    [`touchstart  .${prefixCls}-cell [magnet]`]: 'onMagnetMouseDown',\n    [`dblclick    .${prefixCls}-cell [data-magnet]`]: 'onMagnetDblClick',\n    [`contextmenu .${prefixCls}-cell [data-magnet]`]: 'onMagnetContextMenu',\n    [`mousedown   .${prefixCls}-cell [data-magnet]`]: 'onMagnetMouseDown',\n    [`touchstart  .${prefixCls}-cell [data-magnet]`]: 'onMagnetMouseDown',\n    [`dragstart   .${prefixCls}-cell image`]: 'onImageDragStart',\n    [`mousedown   .${prefixCls}-edge .${prefixCls}-edge-label`]: 'onLabelMouseDown',\n    [`touchstart  .${prefixCls}-edge .${prefixCls}-edge-label`]: 'onLabelMouseDown'\n  };\n  GraphView.documentEvents = {\n    mousemove: 'onMouseMove',\n    touchmove: 'onMouseMove',\n    mouseup: 'onMouseUp',\n    touchend: 'onMouseUp',\n    touchcancel: 'onMouseUp'\n  };\n})(GraphView || (GraphView = {}));","map":null,"metadata":{},"sourceType":"module"}