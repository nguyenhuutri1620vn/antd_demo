{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { singleton, Contribution, contrib } from 'mana-syringe';\nimport { DisposableCollection } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { initHooks, IHookService, IHookContribution } from './interface';\nlet HookRegistry = class HookRegistry {\n  constructor() {\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** hooks */\n\n    this.hookProvider = () => this.hooks;\n    /** 注册hook插件 */\n\n\n    this.registerHook = fn => {\n      return fn(this.hooks);\n    };\n    /** 注册hook  */\n\n\n    this.registerHookHub = (hookName, hook) => {\n      this.hooks[hookName] = hook;\n      return {\n        dispose: () => {\n          delete this.hooks[hookName];\n        }\n      };\n    };\n    /** app启动时，收集hook扩展点的注册项 */\n\n\n    this.onStart = () => __awaiter(this, void 0, void 0, function* () {\n      const contributions = this.contributionProvider.getContributions();\n\n      for (const contribution of contributions) {\n        contribution.registerHookHub(this);\n      }\n\n      for (const contribution of contributions) {\n        contribution.registerHook(this.hooks);\n      }\n    });\n\n    this.hooks = initHooks();\n  }\n  /** app的停止逻辑 */\n\n\n  onStop() {\n    this.toDispose.dispose();\n  }\n\n};\n\n__decorate([contrib(IHookContribution), __metadata(\"design:type\", Object)], HookRegistry.prototype, \"contributionProvider\", void 0);\n\nHookRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IHookService]\n}), __metadata(\"design:paramtypes\", [])], HookRegistry);\nexport { HookRegistry };","map":null,"metadata":{},"sourceType":"module"}