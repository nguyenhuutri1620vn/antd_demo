{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n/**\n * @fileOverview the base class of Coordinate\n * @author sima.zhang\n */\n\nvar mat3_1 = require(\"./util/mat3\");\n\nvar vec3 = require(\"@antv/gl-matrix/lib/gl-matrix/vec3\");\n\nvar Coord =\n/** @class */\nfunction () {\n  function Coord(cfg) {\n    if (cfg === void 0) {\n      cfg = {};\n    }\n\n    this.matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    this.isTransposed = false;\n    Object.assign(this, cfg);\n    this.init();\n  }\n\n  Coord.prototype.init = function () {\n    var start = this.start;\n    var end = this.end;\n    var center = {\n      x: (start.x + end.x) / 2,\n      y: (start.y + end.y) / 2\n    };\n    this.center = center;\n    this.width = Math.abs(end.x - start.x);\n    this.height = Math.abs(end.y - start.y);\n  };\n\n  Coord.prototype._swapDim = function (dim) {\n    var dimRange = this[dim];\n\n    if (dimRange) {\n      var tmp = dimRange.start;\n      dimRange.start = dimRange.end;\n      dimRange.end = tmp;\n    }\n  };\n\n  Coord.prototype.getCenter = function () {\n    return this.center;\n  };\n\n  Coord.prototype.getWidth = function () {\n    return this.width;\n  };\n\n  Coord.prototype.getHeight = function () {\n    return this.height;\n  };\n\n  Coord.prototype.convertDim = function (percent, dim) {\n    var _a = this[dim],\n        start = _a.start,\n        end = _a.end;\n    return start + percent * (end - start);\n  };\n\n  Coord.prototype.invertDim = function (value, dim) {\n    var _a = this[dim],\n        start = _a.start,\n        end = _a.end;\n    return (value - start) / (end - start);\n  };\n  /**\n   * 将归一化的坐标点数据转换为画布坐标\n   * @override\n   * @param  {Object} point 归一化的坐标点\n   * @return {Object}       返回画布坐标\n   */\n\n\n  Coord.prototype.convertPoint = function (point) {\n    return point;\n  };\n  /**\n   * 将画布坐标转换为归一化的坐标点数据\n   * @override\n   * @param  {Object} PointType 画布坐标点数据\n   * @return {Object}       归一化后的数据点\n   */\n\n\n  Coord.prototype.invertPoint = function (point) {\n    return point;\n  };\n  /**\n   * 将坐标点进行矩阵变换\n   * @param  {Number} x   对应 x 轴画布坐标\n   * @param  {Number} y   对应 y 轴画布坐标\n   * @param  {Number} tag 默认为 0，可取值 0, 1\n   * @return {Array}     返回变换后的三阶向量 [x, y, z]\n   */\n\n\n  Coord.prototype.applyMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n\n    var matrix = this.matrix;\n    var vector = [x, y, tag];\n    vec3.transformMat3(vector, vector, matrix);\n    return vector;\n  };\n  /**\n   * 将坐标点进行矩阵逆变换\n   * @param  {Number} x   对应 x 轴画布坐标\n   * @param  {Number} y   对应 y 轴画布坐标\n   * @param  {Number} tag 默认为 0，可取值 0, 1\n   * @return {Array}     返回矩阵逆变换后的三阶向量 [x, y, z]\n   */\n\n\n  Coord.prototype.invertMatrix = function (x, y, tag) {\n    if (tag === void 0) {\n      tag = 0;\n    }\n\n    var matrix = this.matrix;\n    var inversedMatrix = mat3_1[\"default\"].invert([], matrix);\n    var vector = [x, y, tag];\n    vec3.transformMat3(vector, vector, inversedMatrix);\n    return vector;\n  };\n  /**\n   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\n   * @param  {Object} point 归一化的坐标点\n   * @return {Object}       返回进行矩阵变换后的画布坐标\n   */\n\n\n  Coord.prototype.convert = function (point) {\n    var _a = this.convertPoint(point),\n        x = _a.x,\n        y = _a.y;\n\n    var vector = this.applyMatrix(x, y, 1);\n    return {\n      x: vector[0],\n      y: vector[1]\n    };\n  };\n  /**\n   * 将进行过矩阵变换画布坐标转换为归一化坐标\n   * @param  {Object} point 画布坐标\n   * @return {Object}       返回归一化的坐标点\n   */\n\n\n  Coord.prototype.invert = function (point) {\n    var vector = this.invertMatrix(point.x, point.y, 1);\n    return this.invertPoint({\n      x: vector[0],\n      y: vector[1]\n    });\n  };\n  /**\n   * 坐标系旋转变换\n   * @param  {Number} radian 旋转弧度\n   * @return {Object}        返回坐标系对象\n   */\n\n\n  Coord.prototype.rotate = function (radian) {\n    var matrix = this.matrix;\n    var center = this.center;\n    mat3_1[\"default\"].translate(matrix, matrix, [-center.x, -center.y]);\n    mat3_1[\"default\"].rotate(matrix, matrix, radian);\n    mat3_1[\"default\"].translate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\n   * 坐标系反射变换\n   * @param  {String} dim 反射维度\n   * @return {Object}     返回坐标系对象\n   */\n\n\n  Coord.prototype.reflect = function (dim) {\n    switch (dim) {\n      case 'x':\n        this._swapDim('x');\n\n        break;\n\n      case 'y':\n        this._swapDim('y');\n\n        break;\n\n      default:\n        this._swapDim('y');\n\n    }\n\n    return this;\n  };\n  /**\n   * 坐标系比例变换\n   * @param  {Number} s1 x 方向缩放比例\n   * @param  {Number} s2 y 方向缩放比例\n   * @return {Object}    返回坐标系对象\n   */\n\n\n  Coord.prototype.scale = function (s1, s2) {\n    var matrix = this.matrix;\n    var center = this.center;\n    mat3_1[\"default\"].translate(matrix, matrix, [-center.x, -center.y]);\n    mat3_1[\"default\"].scale(matrix, matrix, [s1, s2]);\n    mat3_1[\"default\"].translate(matrix, matrix, [center.x, center.y]);\n    return this;\n  };\n  /**\n   * 坐标系平移变换\n   * @param  {Number} x x 方向平移像素\n   * @param  {Number} y y 方向平移像素\n   * @return {Object}   返回坐标系对象\n   */\n\n\n  Coord.prototype.translate = function (x, y) {\n    var matrix = this.matrix;\n    mat3_1[\"default\"].translate(matrix, matrix, [x, y]);\n    return this;\n  };\n  /**\n   * 将坐标系 x y 两个轴进行转置\n   * @return {Object} 返回坐标系对象\n   */\n\n\n  Coord.prototype.transpose = function () {\n    this.isTransposed = !this.isTransposed;\n    return this;\n  };\n\n  return Coord;\n}();\n\nexports[\"default\"] = Coord;","map":null,"metadata":{},"sourceType":"script"}