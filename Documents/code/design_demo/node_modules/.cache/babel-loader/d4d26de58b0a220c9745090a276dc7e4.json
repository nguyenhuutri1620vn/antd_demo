{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport AppContext from '../../../../context';\nimport { FormWrapper } from '../../form-wrapper';\nimport { InputFiled, ColorPicker, Position, InputNumberFiled, Size } from './fields';\nimport { prefix } from './constants';\n\nvar GroupComponent = function (props) {\n  var config = props.config,\n      _a = props.plugin,\n      plugin = _a === void 0 ? {} : _a;\n  var updateGroup = plugin.updateGroup;\n  var NodeConfig = useContext(AppContext).theme.NodeConfig;\n\n  var _b = useState(__assign(__assign({}, NodeConfig.normal), config)),\n      groupConfig = _b[0],\n      setGroupConfig = _b[1];\n\n  var onGroupConfigChange = function (key, value) {\n    var _a, _b;\n\n    setGroupConfig(__assign(__assign({}, groupConfig), (_a = {}, _a[key] = value, _a)));\n    updateGroup((_b = {}, _b[key] = value, _b));\n  };\n\n  useEffect(function () {\n    setGroupConfig(__assign(__assign({}, NodeConfig.normal), config));\n  }, [config]);\n  return React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"-panel-body\")\n  }, React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"-panel-group\")\n  }, React.createElement(\"h5\", null, \"\\u5185\\u5BB9\"), React.createElement(InputFiled, {\n    label: \"\\u6807\\u9898\",\n    value: groupConfig.label,\n    onChange: function (value) {\n      onGroupConfigChange('label', value);\n    }\n  })), React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"-panel-group\")\n  }, React.createElement(\"h5\", null, \"\\u6837\\u5F0F\"), React.createElement(Position, {\n    x: groupConfig.x,\n    y: groupConfig.y,\n    onChange: function (key, value) {\n      onGroupConfigChange(key, value);\n    }\n  }), React.createElement(Size, {\n    width: groupConfig.width,\n    height: groupConfig.height,\n    onChange: function (key, value) {\n      onGroupConfigChange(key, value);\n    }\n  }), React.createElement(ColorPicker, {\n    label: \"\\u586B\\u5145\",\n    value: groupConfig.fill,\n    onChange: function (value) {\n      onGroupConfigChange('fill', value);\n    }\n  }), React.createElement(ColorPicker, {\n    label: \"\\u8FB9\\u6846\",\n    value: groupConfig.stroke,\n    onChange: function (value) {\n      onGroupConfigChange('stroke', value);\n    }\n  }), React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"-node-text-style\")\n  }, React.createElement(InputNumberFiled, {\n    label: \"\\u5B57\\u53F7\",\n    value: groupConfig.fontSize,\n    width: 68,\n    onChange: function (value) {\n      onGroupConfigChange('fontSize', value);\n    }\n  }), React.createElement(ColorPicker, {\n    value: groupConfig.fontFill,\n    onChange: function (value) {\n      onGroupConfigChange('fontFill', value);\n    }\n  }))));\n};\n\nexport var GroupService = function (props) {\n  return React.createElement(FormWrapper, __assign({}, props), function (config, plugin) {\n    return React.createElement(GroupComponent, __assign({}, props, {\n      plugin: plugin,\n      config: config\n    }));\n  });\n};","map":null,"metadata":{},"sourceType":"module"}