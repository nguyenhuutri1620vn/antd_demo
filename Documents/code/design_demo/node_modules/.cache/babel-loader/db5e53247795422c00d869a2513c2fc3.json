{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport DOM from '../utils/dom';\nimport { Event } from './events/event';\n\nvar BoxZoomHandler = function () {\n  function BoxZoomHandler(map, options) {\n    _classCallCheck(this, BoxZoomHandler);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"el\", void 0);\n\n    _defineProperty(this, \"container\", void 0);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"active\", void 0);\n\n    _defineProperty(this, \"startPos\", void 0);\n\n    _defineProperty(this, \"lastPos\", void 0);\n\n    _defineProperty(this, \"box\", void 0);\n\n    _defineProperty(this, \"clickTolerance\", void 0);\n\n    this.map = map;\n    this.el = map.getCanvasContainer();\n    this.container = map.getContainer();\n    this.clickTolerance = options.clickTolerance || 1;\n  }\n\n  _createClass(BoxZoomHandler, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.enabled;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return !!this.active;\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      if (this.isEnabled()) {\n        return;\n      }\n\n      this.enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      if (!this.isEnabled()) {\n        return;\n      }\n\n      this.enabled = false;\n    }\n  }, {\n    key: \"mousedown\",\n    value: function mousedown(e, point) {\n      if (!this.isEnabled()) {\n        return;\n      }\n\n      if (!(e.shiftKey && e.button === 0)) {\n        return;\n      }\n\n      DOM.disableDrag();\n      this.startPos = this.lastPos = point;\n      this.active = true;\n    }\n  }, {\n    key: \"mousemoveWindow\",\n    value: function mousemoveWindow(e, point) {\n      if (!this.active) {\n        return;\n      }\n\n      var pos = point;\n\n      if (this.lastPos.equals(pos) || !this.box && pos.dist(this.startPos) < this.clickTolerance) {\n        return;\n      }\n\n      var p0 = this.startPos;\n      this.lastPos = pos;\n\n      if (!this.box) {\n        this.box = DOM.create('div', 'l7-boxzoom', this.container);\n        this.container.classList.add('l7-crosshair');\n        this.fireEvent('boxzoomstart', e);\n      }\n\n      var minX = Math.min(p0.x, pos.x);\n      var maxX = Math.max(p0.x, pos.x);\n      var minY = Math.min(p0.y, pos.y);\n      var maxY = Math.max(p0.y, pos.y);\n      DOM.setTransform(this.box, \"translate(\".concat(minX, \"px,\").concat(minY, \"px)\"));\n\n      if (this.box) {\n        this.box.style.width = \"\".concat(maxX - minX, \"px\");\n        this.box.style.height = \"\".concat(maxY - minY, \"px\");\n      }\n    }\n  }, {\n    key: \"mouseupWindow\",\n    value: function mouseupWindow(e, point) {\n      var _this = this;\n\n      if (!this.active) {\n        return;\n      }\n\n      if (e.button !== 0) {\n        return;\n      }\n\n      var p0 = this.startPos;\n      var p1 = point;\n      this.reset();\n      DOM.suppressClick();\n\n      if (p0.x === p1.x && p0.y === p1.y) {\n        this.fireEvent('boxzoomcancel', e);\n      } else {\n        this.map.emit('boxzoomend', new Event('boxzoomend', {\n          originalEvent: e\n        }));\n        return {\n          cameraAnimation: function cameraAnimation(map) {\n            return map.fitScreenCoordinates(p0, p1, _this.map.getBearing(), {\n              linear: true\n            });\n          }\n        };\n      }\n    }\n  }, {\n    key: \"keydown\",\n    value: function keydown(e) {\n      if (!this.active) {\n        return;\n      }\n\n      if (e.keyCode === 27) {\n        this.reset();\n        this.fireEvent('boxzoomcancel', e);\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.active = false;\n      this.container.classList.remove('l7-crosshair');\n\n      if (this.box) {\n        DOM.remove(this.box);\n        this.box = null;\n      }\n\n      DOM.enableDrag();\n      delete this.startPos;\n      delete this.lastPos;\n    }\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(type, e) {\n      return this.map.emit(type, new Event(type, {\n        originalEvent: e\n      }));\n    }\n  }]);\n\n  return BoxZoomHandler;\n}();\n\nexport default BoxZoomHandler;","map":null,"metadata":{},"sourceType":"module"}