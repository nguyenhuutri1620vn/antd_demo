{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { cellsToJson } from '../../common/graph-utils';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nexport var NsGraphCopySelection;\n\n(function (NsGraphCopySelection) {\n  /** Command: 用于注册named factory */\n  NsGraphCopySelection.command = XFlowGraphCommands.GRAPH_COPY;\n  /** hookName */\n\n  NsGraphCopySelection.hookKey = 'graphCopySelection';\n})(NsGraphCopySelection || (NsGraphCopySelection = {}));\n\nlet GraphCopySelectionCommand =\n/** 创建节点命令 */\nclass GraphCopySelectionCommand {\n  constructor() {\n    this.parseCells = cells => {\n      // if groupNode add its group children\n      cells.forEach(cell => {\n        const data = cell.getData();\n\n        if (cell.isNode() && data.isGroup) {\n          const children = cell.getChildren();\n          children.forEach(child => {\n            cells.push(child);\n          });\n        }\n      }); // filter edges target not in selections\n\n      const nodeIds = cells.filter(cell => cell.isNode()).map(cell => cell.id);\n      const map = cells.reduce((acc, cell) => {\n        if (cell.isEdge()) {\n          const source = cell.getSourceCellId();\n          const target = cell.getTargetCellId();\n\n          if (source && target) {\n            if (nodeIds.includes(source) && nodeIds.includes(target)) {\n              acc.set(cell.id, cell);\n            }\n          }\n        } else {\n          acc.set(cell.id, cell);\n        }\n\n        return acc;\n      }, new Map());\n      const uniqeList = Array.from(map.values());\n      return cellsToJson(uniqeList);\n    };\n    /** 执行Cmd */\n\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.graphCopySelection.call(args, () => __awaiter(this, void 0, void 0, function* () {\n        const graph = yield ctx.getX6Graph();\n        const cells = graph.getSelectedCells(); // 处理 Group cells/过滤无效的edges\n\n        const jsonObject = this.parseCells(cells);\n        const oldJsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY); // 写cache\n\n        window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(jsonObject)); // undo 写cache\n\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          window.localStorage.setItem(LOCAL_STORAGE_KEY, oldJsonString);\n        })));\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphCopySelectionCommand.prototype, \"contextProvider\", void 0);\n\nGraphCopySelectionCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphCopySelection.command.id\n  }\n})\n/** 创建节点命令 */\n], GraphCopySelectionCommand);\nexport { GraphCopySelectionCommand };","map":null,"metadata":{},"sourceType":"module"}