{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ObjectExt } from '../../util';\nimport { Base } from '../base';\nexport function getMarkup(tagName) {\n  let noText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return `<g class=\"rotatable\"><g class=\"scalable\"><${tagName}/></g>${noText ? '' : '<text/>'}</g>`;\n}\nexport function getName(name) {\n  return `basic.${name}`;\n}\nexport function getImageUrlHook() {\n  let attrName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'xlink:href';\n\n  const hook = metadata => {\n    const {\n      imageUrl,\n      imageWidth,\n      imageHeight\n    } = metadata,\n          others = __rest(metadata, [\"imageUrl\", \"imageWidth\", \"imageHeight\"]);\n\n    if (imageUrl != null || imageWidth != null || imageHeight != null) {\n      const apply = () => {\n        if (others.attrs) {\n          const image = others.attrs.image;\n\n          if (imageUrl != null) {\n            image[attrName] = imageUrl;\n          }\n\n          if (imageWidth != null) {\n            image.width = imageWidth;\n          }\n\n          if (imageHeight != null) {\n            image.height = imageHeight;\n          }\n\n          others.attrs.image = image;\n        }\n      };\n\n      if (others.attrs) {\n        if (others.attrs.image == null) {\n          others.attrs.image = {};\n        }\n\n        apply();\n      } else {\n        others.attrs = {\n          image: {}\n        };\n        apply();\n      }\n    }\n\n    return others;\n  };\n\n  return hook;\n}\nexport function createShape(shape, config) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const name = getName(shape);\n  const defaults = {\n    constructorName: name,\n    attrs: {\n      '.': {\n        fill: '#ffffff',\n        stroke: 'none'\n      },\n      [shape]: {\n        fill: '#ffffff',\n        stroke: '#000000'\n      }\n    }\n  };\n\n  if (!options.ignoreMarkup) {\n    defaults.markup = getMarkup(shape, options.noText === true);\n  }\n\n  const base = options.parent || Base;\n  return base.define(ObjectExt.merge(defaults, config, {\n    shape: name\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}