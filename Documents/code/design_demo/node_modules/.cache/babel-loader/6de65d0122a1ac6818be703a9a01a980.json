{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { TYPES } from '@antv/l7-core';\nimport { anchorTranslate, anchorType, applyAnchorClass, bindAll, DOM } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\n\nvar Marker = function (_EventEmitter) {\n  _inherits(Marker, _EventEmitter);\n\n  var _super = _createSuper(Marker);\n\n  function Marker(option) {\n    var _this;\n\n    _classCallCheck(this, Marker);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"markerOption\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"defaultMarker\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"popup\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"mapsService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"sceneSerive\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lngLat\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scene\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"added\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"eventHandle\", function (e) {\n      _this.emit(e.type, {\n        target: e,\n        data: _this.markerOption.extData,\n        lngLat: _this.lngLat\n      });\n    });\n\n    _this.markerOption = _objectSpread(_objectSpread({}, _this.getDefault()), option);\n    bindAll(['update', 'onMove', 'onUp', 'addDragHandler', 'onMapClick'], _assertThisInitialized(_this));\n\n    _this.init();\n\n    return _this;\n  }\n\n  _createClass(Marker, [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      return {\n        element: undefined,\n        anchor: anchorType.BOTTOM,\n        offsets: [0, 0],\n        color: '#5B8FF9',\n        draggable: false\n      };\n    }\n  }, {\n    key: \"addTo\",\n    value: function addTo(scene) {\n      this.scene = scene;\n      this.mapsService = scene.get(TYPES.IMapService);\n      this.sceneSerive = scene.get(TYPES.ISceneService);\n      var _this$markerOption = this.markerOption,\n          element = _this$markerOption.element,\n          draggable = _this$markerOption.draggable;\n      this.mapsService.getMarkerContainer().appendChild(element);\n      this.registerMarkerEvent(element);\n      this.mapsService.on('camerachange', this.update);\n      this.mapsService.on('viewchange', this.update);\n      this.update();\n      this.added = true;\n      this.emit('added');\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.mapsService) {\n        this.mapsService.off('click', this.onMapClick);\n        this.mapsService.off('move', this.update);\n        this.mapsService.off('moveend', this.update);\n        this.mapsService.off('mousedown', this.addDragHandler);\n        this.mapsService.off('touchstart', this.addDragHandler);\n        this.mapsService.off('mouseup', this.onUp);\n        this.mapsService.off('touchend', this.onUp);\n      }\n\n      this.unRegisterMarkerEvent();\n      this.removeAllListeners();\n      var element = this.markerOption.element;\n\n      if (element) {\n        DOM.remove(element);\n      }\n\n      if (this.popup) {\n        this.popup.remove();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setLnglat\",\n    value: function setLnglat(lngLat) {\n      this.lngLat = lngLat;\n\n      if (Array.isArray(lngLat)) {\n        this.lngLat = {\n          lng: lngLat[0],\n          lat: lngLat[1]\n        };\n      }\n\n      if (this.popup) {\n        this.popup.setLnglat(this.lngLat);\n      }\n\n      this.update();\n      return this;\n    }\n  }, {\n    key: \"getLnglat\",\n    value: function getLnglat() {\n      return this.lngLat;\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement() {\n      return this.markerOption.element;\n    }\n  }, {\n    key: \"setElement\",\n    value: function setElement(el) {\n      var _this2 = this;\n\n      if (!this.added) {\n        this.once('added', function () {\n          _this2.setElement(el);\n        });\n        return this;\n      }\n\n      var element = this.markerOption.element;\n\n      if (element) {\n        DOM.remove(element);\n      }\n\n      this.markerOption.element = el;\n      this.init();\n      this.mapsService.getMarkerContainer().appendChild(el);\n      this.registerMarkerEvent(el);\n      this.update();\n      return this;\n    }\n  }, {\n    key: \"openPopup\",\n    value: function openPopup() {\n      var _this3 = this;\n\n      if (!this.added) {\n        this.once('added', function () {\n          _this3.openPopup();\n        });\n        return this;\n      }\n\n      var popup = this.popup;\n\n      if (!popup) {\n        return this;\n      }\n\n      if (!popup.isOpen()) {\n        popup.addTo(this.scene);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"closePopup\",\n    value: function closePopup() {\n      var _this4 = this;\n\n      if (!this.added) {\n        this.once('added', function () {\n          _this4.closePopup();\n        });\n      }\n\n      var popup = this.popup;\n\n      if (popup) {\n        popup.remove();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"setPopup\",\n    value: function setPopup(popup) {\n      this.popup = popup;\n\n      if (this.lngLat) {\n        this.popup.setLnglat(this.lngLat);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"togglePopup\",\n    value: function togglePopup() {\n      var popup = this.popup;\n\n      if (!popup) {\n        return this;\n      } else if (popup.isOpen()) {\n        popup.remove();\n      } else {\n        popup.addTo(this.scene);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getPopup\",\n    value: function getPopup() {\n      return this.popup;\n    }\n  }, {\n    key: \"getOffset\",\n    value: function getOffset() {\n      return this.markerOption.offsets;\n    }\n  }, {\n    key: \"setDraggable\",\n    value: function setDraggable(draggable) {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"isDraggable\",\n    value: function isDraggable() {\n      return this.markerOption.draggable;\n    }\n  }, {\n    key: \"getExtData\",\n    value: function getExtData() {\n      return this.markerOption.extData;\n    }\n  }, {\n    key: \"setExtData\",\n    value: function setExtData(data) {\n      this.markerOption.extData = data;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (!this.mapsService) {\n        return;\n      }\n\n      var _this$markerOption2 = this.markerOption,\n          element = _this$markerOption2.element,\n          anchor = _this$markerOption2.anchor;\n      this.updatePosition();\n      DOM.setTransform(element, \"\".concat(anchorTranslate[anchor]));\n    }\n  }, {\n    key: \"onMapClick\",\n    value: function onMapClick(e) {\n      var element = this.markerOption.element;\n\n      if (this.popup && element) {\n        this.togglePopup();\n      }\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (!this.mapsService) {\n        return;\n      }\n\n      var _this$markerOption3 = this.markerOption,\n          element = _this$markerOption3.element,\n          offsets = _this$markerOption3.offsets;\n      var _this$lngLat = this.lngLat,\n          lng = _this$lngLat.lng,\n          lat = _this$lngLat.lat;\n      var bounds = this.mapsService.getBounds();\n      var pos = this.mapsService.lngLatToContainer([lng, lat]);\n\n      if (element) {\n        element.style.display = 'block';\n        element.style.whiteSpace = 'nowrap';\n        var container = this.mapsService.getContainer();\n        var containerWidth = 0;\n        var containerHeight = 0;\n\n        if (container) {\n          containerWidth = container.scrollWidth;\n          containerHeight = container.scrollHeight;\n        }\n\n        if (Math.abs(bounds[0][0]) > 180 || Math.abs(bounds[1][0]) > 180) {\n          if (pos.x > containerWidth) {\n            var newPos = this.mapsService.lngLatToContainer([lng - 360, lat]);\n            pos.x = newPos.x;\n          }\n\n          if (pos.x < 0) {\n            var _newPos = this.mapsService.lngLatToContainer([lng + 360, lat]);\n\n            pos.x = _newPos.x;\n          }\n        }\n\n        if (pos.x > containerWidth || pos.x < 0 || pos.y > containerHeight || pos.y < 0) {\n          element.style.display = 'none';\n        }\n\n        element.style.left = pos.x + offsets[0] + 'px';\n        element.style.top = pos.y - offsets[1] + 'px';\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this5 = this;\n\n      var element = this.markerOption.element;\n      var _this$markerOption4 = this.markerOption,\n          color = _this$markerOption4.color,\n          anchor = _this$markerOption4.anchor;\n\n      if (!element) {\n        this.defaultMarker = true;\n        element = DOM.create('div');\n        this.markerOption.element = element;\n        var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        svg.setAttributeNS(null, 'display', 'block');\n        svg.setAttributeNS(null, 'height', '48px');\n        svg.setAttributeNS(null, 'width', '48px');\n        svg.setAttributeNS(null, 'viewBox', '0 0 1024 1024');\n        var path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n        path.setAttributeNS(null, 'd', 'M512 490.666667C453.12 490.666667 405.333333 442.88 405.333333 384 405.333333 325.12 453.12 277.333333 512 277.333333 570.88 277.333333 618.666667 325.12 618.666667 384 618.666667 442.88 570.88 490.666667 512 490.666667M512 85.333333C346.88 85.333333 213.333333 218.88 213.333333 384 213.333333 608 512 938.666667 512 938.666667 512 938.666667 810.666667 608 810.666667 384 810.666667 218.88 677.12 85.333333 512 85.333333Z');\n        path.setAttributeNS(null, 'fill', color);\n        svg.appendChild(path);\n        element.appendChild(svg);\n      }\n\n      DOM.addClass(element, 'l7-marker');\n      Object.keys(this.markerOption.style || {}).forEach(function (key) {\n        var _this5$markerOption, _this5$markerOption2;\n\n        var value = ((_this5$markerOption = _this5.markerOption) === null || _this5$markerOption === void 0 ? void 0 : _this5$markerOption.style) && ((_this5$markerOption2 = _this5.markerOption) === null || _this5$markerOption2 === void 0 ? void 0 : _this5$markerOption2.style[key]);\n\n        if (element) {\n          element.style[key] = value;\n        }\n      });\n      element.addEventListener('click', function (e) {\n        _this5.onMapClick(e);\n      });\n      element.addEventListener('click', this.eventHandle);\n      applyAnchorClass(element, anchor, 'marker');\n    }\n  }, {\n    key: \"registerMarkerEvent\",\n    value: function registerMarkerEvent(element) {\n      element.addEventListener('mousemove', this.eventHandle);\n      element.addEventListener('click', this.eventHandle);\n      element.addEventListener('mousedown', this.eventHandle);\n      element.addEventListener('mouseup', this.eventHandle);\n      element.addEventListener('dblclick', this.eventHandle);\n      element.addEventListener('contextmenu', this.eventHandle);\n      element.addEventListener('mouseover', this.eventHandle);\n      element.addEventListener('mouseout', this.eventHandle);\n    }\n  }, {\n    key: \"unRegisterMarkerEvent\",\n    value: function unRegisterMarkerEvent() {\n      var element = this.getElement();\n      element.removeEventListener('mousemove', this.eventHandle);\n      element.removeEventListener('click', this.eventHandle);\n      element.removeEventListener('mousedown', this.eventHandle);\n      element.removeEventListener('mouseup', this.eventHandle);\n      element.removeEventListener('dblclick', this.eventHandle);\n      element.removeEventListener('contextmenu', this.eventHandle);\n      element.removeEventListener('mouseover', this.eventHandle);\n      element.removeEventListener('mouseout', this.eventHandle);\n    }\n  }, {\n    key: \"addDragHandler\",\n    value: function addDragHandler(e) {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"onUp\",\n    value: function onUp(e) {\n      throw new Error('Method not implemented.');\n    }\n  }]);\n\n  return Marker;\n}(EventEmitter);\n\nexport { Marker as default };","map":null,"metadata":{},"sourceType":"module"}