{"ast":null,"code":"/*!\n * jQuery Mousewheel 3.1.13\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node/CommonJS style for Browserify\n    module.exports = factory;\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n})(function ($) {\n  var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],\n      toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],\n      slice = Array.prototype.slice,\n      nullLowestDeltaTimeout,\n      lowestDelta;\n\n  if ($.event.fixHooks) {\n    for (var i = toFix.length; i;) {\n      $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;\n    }\n  }\n\n  var special = $.event.special.mousewheel = {\n    version: '3.1.12',\n    setup: function () {\n      if (this.addEventListener) {\n        for (var i = toBind.length; i;) {\n          this.addEventListener(toBind[--i], handler, false);\n        }\n      } else {\n        this.onmousewheel = handler;\n      } // Store the line height and page height for this particular element\n\n\n      $.data(this, 'mousewheel-line-height', special.getLineHeight(this));\n      $.data(this, 'mousewheel-page-height', special.getPageHeight(this));\n    },\n    teardown: function () {\n      if (this.removeEventListener) {\n        for (var i = toBind.length; i;) {\n          this.removeEventListener(toBind[--i], handler, false);\n        }\n      } else {\n        this.onmousewheel = null;\n      } // Clean up the data we added to the element\n\n\n      $.removeData(this, 'mousewheel-line-height');\n      $.removeData(this, 'mousewheel-page-height');\n    },\n    getLineHeight: function (elem) {\n      var $elem = $(elem),\n          $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();\n\n      if (!$parent.length) {\n        $parent = $('body');\n      }\n\n      return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;\n    },\n    getPageHeight: function (elem) {\n      return $(elem).height();\n    },\n    settings: {\n      adjustOldDeltas: true,\n      // see shouldAdjustOldDeltas() below\n      normalizeOffset: true // calls getBoundingClientRect for each event\n\n    }\n  };\n  $.fn.extend({\n    mousewheel: function (fn) {\n      return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');\n    },\n    unmousewheel: function (fn) {\n      return this.unbind('mousewheel', fn);\n    }\n  });\n\n  function handler(event) {\n    var orgEvent = event || window.event,\n        args = slice.call(arguments, 1),\n        delta = 0,\n        deltaX = 0,\n        deltaY = 0,\n        absDelta = 0,\n        offsetX = 0,\n        offsetY = 0;\n    event = $.event.fix(orgEvent);\n    event.type = 'mousewheel'; // Old school scrollwheel delta\n\n    if ('detail' in orgEvent) {\n      deltaY = orgEvent.detail * -1;\n    }\n\n    if ('wheelDelta' in orgEvent) {\n      deltaY = orgEvent.wheelDelta;\n    }\n\n    if ('wheelDeltaY' in orgEvent) {\n      deltaY = orgEvent.wheelDeltaY;\n    }\n\n    if ('wheelDeltaX' in orgEvent) {\n      deltaX = orgEvent.wheelDeltaX * -1;\n    } // Firefox < 17 horizontal scrolling related to DOMMouseScroll event\n\n\n    if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {\n      deltaX = deltaY * -1;\n      deltaY = 0;\n    } // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy\n\n\n    delta = deltaY === 0 ? deltaX : deltaY; // New school wheel delta (wheel event)\n\n    if ('deltaY' in orgEvent) {\n      deltaY = orgEvent.deltaY * -1;\n      delta = deltaY;\n    }\n\n    if ('deltaX' in orgEvent) {\n      deltaX = orgEvent.deltaX;\n\n      if (deltaY === 0) {\n        delta = deltaX * -1;\n      }\n    } // No change actually happened, no reason to go any further\n\n\n    if (deltaY === 0 && deltaX === 0) {\n      return;\n    } // Need to convert lines and pages to pixels if we aren't already in pixels\n    // There are three delta modes:\n    //   * deltaMode 0 is by pixels, nothing to do\n    //   * deltaMode 1 is by lines\n    //   * deltaMode 2 is by pages\n\n\n    if (orgEvent.deltaMode === 1) {\n      var lineHeight = $.data(this, 'mousewheel-line-height');\n      delta *= lineHeight;\n      deltaY *= lineHeight;\n      deltaX *= lineHeight;\n    } else if (orgEvent.deltaMode === 2) {\n      var pageHeight = $.data(this, 'mousewheel-page-height');\n      delta *= pageHeight;\n      deltaY *= pageHeight;\n      deltaX *= pageHeight;\n    } // Store lowest absolute delta to normalize the delta values\n\n\n    absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));\n\n    if (!lowestDelta || absDelta < lowestDelta) {\n      lowestDelta = absDelta; // Adjust older deltas if necessary\n\n      if (shouldAdjustOldDeltas(orgEvent, absDelta)) {\n        lowestDelta /= 40;\n      }\n    } // Adjust older deltas if necessary\n\n\n    if (shouldAdjustOldDeltas(orgEvent, absDelta)) {\n      // Divide all the things by 40!\n      delta /= 40;\n      deltaX /= 40;\n      deltaY /= 40;\n    } // Get a whole, normalized value for the deltas\n\n\n    delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);\n    deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);\n    deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta); // Normalise offsetX and offsetY properties\n\n    if (special.settings.normalizeOffset && this.getBoundingClientRect) {\n      var boundingRect = this.getBoundingClientRect();\n      offsetX = event.clientX - boundingRect.left;\n      offsetY = event.clientY - boundingRect.top;\n    } // Add information to the event object\n\n\n    event.deltaX = deltaX;\n    event.deltaY = deltaY;\n    event.deltaFactor = lowestDelta;\n    event.offsetX = offsetX;\n    event.offsetY = offsetY; // Go ahead and set deltaMode to 0 since we converted to pixels\n    // Although this is a little odd since we overwrite the deltaX/Y\n    // properties with normalized deltas.\n\n    event.deltaMode = 0; // Add event and delta to the front of the arguments\n\n    args.unshift(event, delta, deltaX, deltaY); // Clearout lowestDelta after sometime to better\n    // handle multiple device types that give different\n    // a different lowestDelta\n    // Ex: trackpad = 3 and mouse wheel = 120\n\n    if (nullLowestDeltaTimeout) {\n      clearTimeout(nullLowestDeltaTimeout);\n    }\n\n    nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);\n    return ($.event.dispatch || $.event.handle).apply(this, args);\n  }\n\n  function nullLowestDelta() {\n    lowestDelta = null;\n  }\n\n  function shouldAdjustOldDeltas(orgEvent, absDelta) {\n    // If this is an older event and the delta is divisable by 120,\n    // then we are assuming that the browser is treating this as an\n    // older mouse wheel event and that we should divide the deltas\n    // by 40 to try and get a more usable deltaFactor.\n    // Side note, this actually impacts the reported scroll distance\n    // in older browsers and can cause scrolling to be slower than native.\n    // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.\n    return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}