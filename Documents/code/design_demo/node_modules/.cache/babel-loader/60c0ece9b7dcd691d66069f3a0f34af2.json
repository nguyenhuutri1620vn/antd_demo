{"ast":null,"code":"const parentDummyChains = g => {\n  var _a;\n\n  const postorderNums = postorder(g);\n  (_a = g.graph().dummyChains) === null || _a === void 0 ? void 0 : _a.forEach(v => {\n    var _a, _b;\n\n    let node = g.node(v);\n    const edgeObj = node.edgeObj;\n    if (!edgeObj) return;\n    const pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    const path = pathData.path;\n    const lca = pathData.lca;\n    let pathIdx = 0;\n    let pathV = path[pathIdx];\n    let ascending = true;\n\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n\n      if (!ascending) {\n        while (pathIdx < path.length - 1 && ((_a = g.node(pathV = path[pathIdx + 1])) === null || _a === void 0 ? void 0 : _a.minRank) <= node.rank) {\n          pathIdx++;\n        }\n\n        pathV = path[pathIdx];\n      }\n\n      g.setParent(v, pathV); // tslint:disable-next-line\n\n      v = (_b = g.successors(v)) === null || _b === void 0 ? void 0 : _b[0];\n    }\n  });\n}; // Find a path from v to w through the lowest common ancestor (LCA). Return the\n// full path and the LCA.\n\n\nconst findPath = (g, postorderNums, v, w) => {\n  const vPath = [];\n  const wPath = [];\n  const low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  const lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  let parent;\n  let lca; // Traverse up from v to find the LCA\n\n  parent = v;\n\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n\n  lca = parent; // Traverse from w to LCA\n\n  parent = w;\n\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n\n  return {\n    lca,\n    path: vPath.concat(wPath.reverse())\n  };\n};\n\nconst postorder = g => {\n  var _a;\n\n  const result = {};\n  let lim = 0;\n\n  const dfs = v => {\n    var _a;\n\n    const low = lim;\n    (_a = g.children(v)) === null || _a === void 0 ? void 0 : _a.forEach(dfs);\n    result[v] = {\n      low,\n      lim: lim++\n    };\n  };\n\n  (_a = g.children()) === null || _a === void 0 ? void 0 : _a.forEach(dfs);\n  return result;\n};\n\nexport default parentDummyChains;","map":null,"metadata":{},"sourceType":"module"}