{"ast":null,"code":"import { NumberExt } from '../../util';\nimport { Point } from '../../geometry'; // `x-align` when set to `middle` causes centering of the subelement around its new x coordinate.\n// `x-align` when set to `right` uses the x coordinate as referenced to the right of the bbox.\n\nexport const xAlign = {\n  offset: offsetWrapper('x', 'width', 'right')\n}; // `y-align` when set to `middle` causes centering of the subelement around its new y coordinate.\n// `y-align` when set to `bottom` uses the y coordinate as referenced to the bottom of the bbox.\n\nexport const yAlign = {\n  offset: offsetWrapper('y', 'height', 'bottom')\n};\nexport const resetOffset = {\n  offset(val, _ref) {\n    let {\n      refBBox\n    } = _ref;\n    return val ? {\n      x: -refBBox.x,\n      y: -refBBox.y\n    } : {\n      x: 0,\n      y: 0\n    };\n  }\n\n};\n\nfunction offsetWrapper(axis, dimension, corner) {\n  return (value, _ref2) => {\n    let {\n      refBBox\n    } = _ref2;\n    const point = new Point();\n    let delta;\n\n    if (value === 'middle') {\n      delta = refBBox[dimension] / 2;\n    } else if (value === corner) {\n      delta = refBBox[dimension];\n    } else if (typeof value === 'number' && Number.isFinite(value)) {\n      delta = value > -1 && value < 1 ? -refBBox[dimension] * value : -value;\n    } else if (NumberExt.isPercentage(value)) {\n      delta = refBBox[dimension] * parseFloat(value) / 100;\n    } else {\n      delta = 0;\n    }\n\n    point[axis] = -(refBBox[axis] + delta);\n    return point;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}