{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nexport var NsHighlightEdge;\n\n(function (NsHighlightEdge) {\n  NsHighlightEdge.command = XFlowEdgeCommands.HIGHLIGHT_EDGE;\n  NsHighlightEdge.hookKey = 'highlightEdge';\n})(NsHighlightEdge || (NsHighlightEdge = {}));\n\nlet HighlightEdgeCommand =\n/** 连线高亮 */\nclass HighlightEdgeCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.highlightEdge.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        var _a, _b;\n\n        const x6Graph = yield this.ctx.getX6Graph();\n        const {\n          edgeId,\n          strokeColor,\n          strokeWidth\n        } = handlerArgs;\n        const allEdges = x6Graph.getEdges();\n        /** 需要高亮的连线 */\n\n        const highlightEdge = allEdges.find(edge => edge.id === edgeId);\n        /** 不需要高亮的连线 */\n\n        const otherEdges = allEdges.filter(edge => edge.id !== edgeId);\n\n        if (!highlightEdge) {\n          console.error(edgeId, 'this edgeId is not exist');\n        } else {\n          const oldAttr = highlightEdge.getAttrs();\n\n          if (((_a = oldAttr === null || oldAttr === void 0 ? void 0 : oldAttr.line) === null || _a === void 0 ? void 0 : _a.stroke) === strokeColor && ((_b = oldAttr === null || oldAttr === void 0 ? void 0 : oldAttr.line) === null || _b === void 0 ? void 0 : _b.strokeWidth) === strokeWidth) {\n            /** 连线已经高亮, 不需要重复操作 */\n          } else {\n            /** 高亮选中的连线 */\n            highlightEdge === null || highlightEdge === void 0 ? void 0 : highlightEdge.setAttrs({\n              line: {\n                stroke: strokeColor,\n                strokeWidth: strokeWidth || 2\n              }\n            });\n            /** 其余连线取消高亮状态 */\n\n            otherEdges.forEach(edge => {\n              edge.setAttrs({\n                line: oldAttr === null || oldAttr === void 0 ? void 0 : oldAttr.line\n              });\n            });\n            /** 高亮的连线默认前置在画布最前方 */\n\n            handlerArgs.commandService.executeCommand(XFlowEdgeCommands.FRONT_EDGE.id, {\n              edgeId\n            });\n          }\n        }\n\n        return {};\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], HighlightEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], HighlightEdgeCommand.prototype, \"init\", null);\n\nHighlightEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsHighlightEdge.command.id\n  }\n})\n/** 连线高亮 */\n], HighlightEdgeCommand);\nexport { HighlightEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}