{"ast":null,"code":"import React from 'react';\nimport classNames from 'classnames';\nimport { Tooltip } from 'antd';\nimport 'antd/es/tooltip/style/index.css';\nimport { Menu } from '../menu';\nimport { Dropdown } from '../dropdown';\nimport { ToolbarContext } from './context';\n\nclass ToolbarItemInner extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.handleClick = () => {\n      this.processClick();\n    };\n\n    this.handleDropdownItemClick = name => {\n      this.processClick(name, false);\n    };\n  }\n\n  processClick() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.name;\n    let dropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.dropdown;\n\n    if (!this.props.disabled && !dropdown) {\n      if (name) {\n        this.props.context.onClick(name);\n      }\n\n      if (this.props.onClick) {\n        this.props.onClick(name);\n      }\n    }\n  }\n\n  renderButton() {\n    const {\n      className,\n      hidden,\n      disabled,\n      active,\n      icon,\n      text,\n      dropdown,\n      dropdownArrow,\n      tooltip,\n      tooltipProps,\n      tooltipAsTitle,\n      children\n    } = this.props;\n    const {\n      prefixCls\n    } = this.props.context;\n    const baseCls = `${prefixCls}-item`;\n    const props = {\n      onClick: this.handleClick,\n      className: classNames(baseCls, {\n        [`${baseCls}-hidden`]: hidden,\n        [`${baseCls}-active`]: active,\n        [`${baseCls}-disabled`]: disabled,\n        [`${baseCls}-dropdown`]: dropdown\n      }, className)\n    };\n\n    if (tooltip && tooltipAsTitle) {\n      props.title = tooltip;\n    }\n\n    const button = React.createElement(\"button\", Object.assign({\n      type: \"button\"\n    }, props), icon && React.isValidElement(icon) && React.createElement(\"span\", {\n      className: `${baseCls}-icon`\n    }, icon), (text || children) && React.createElement(\"span\", {\n      className: `${baseCls}-text`\n    }, text || children), dropdown && dropdownArrow && React.createElement(\"span\", {\n      className: `${baseCls}-dropdown-arrow`\n    }));\n\n    if (tooltip && !tooltipAsTitle && !disabled) {\n      return React.createElement(Tooltip, Object.assign({\n        title: tooltip,\n        placement: \"bottom\",\n        mouseEnterDelay: 0,\n        mouseLeaveDelay: 0\n      }, tooltipProps), button);\n    }\n\n    return button;\n  }\n\n  render() {\n    const {\n      dropdown,\n      dropdownProps,\n      disabled\n    } = this.props;\n    const content = this.renderButton();\n\n    if (dropdown != null && !disabled) {\n      const overlay = React.createElement(\"div\", null, dropdown.type === Menu ? React.cloneElement(dropdown, {\n        onClick: this.handleDropdownItemClick\n      }) : dropdown);\n      const props = Object.assign(Object.assign({\n        trigger: ['click']\n      }, dropdownProps), {\n        disabled,\n        overlay\n      });\n      return React.createElement(Dropdown, Object.assign({}, props), content);\n    }\n\n    return content;\n  }\n\n}\n\nexport const ToolbarItem = props => React.createElement(ToolbarContext.Consumer, null, context => React.createElement(ToolbarItemInner, Object.assign({\n  context: context\n}, props)));\nToolbarItem.defaultProps = {\n  dropdownArrow: true\n};","map":null,"metadata":{},"sourceType":"module"}