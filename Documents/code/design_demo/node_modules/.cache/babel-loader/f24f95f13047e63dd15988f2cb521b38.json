{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { $document } from '../document';\nimport { Event } from '../Event';\nimport { getCanvas } from '../register';\n\nvar PointerEvent = function (_Event) {\n  _inherits(PointerEvent, _Event);\n\n  var _super = _createSuper(PointerEvent);\n\n  function PointerEvent(type) {\n    var _this;\n\n    _classCallCheck(this, PointerEvent);\n\n    _this = _super.call(this, type);\n\n    _defineProperty(_assertThisInitialized(_this), \"buttons\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"which\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pointerId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"bubbles\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"button\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"width\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"height\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pressure\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isPrimary\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pointerType\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"altKey\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"ctrlKey\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"metaKey\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"shiftKey\", void 0);\n\n    _this.target = getCanvas();\n    _this.currentTarget = getCanvas();\n    return _this;\n  }\n\n  return _createClass(PointerEvent);\n}(Event);\n\nvar CLONE_PROPS = ['bubbles', 'cancelable', 'view', 'detail', 'screenX', 'screenY', 'clientX', 'clientY', 'ctrlKey', 'altKey', 'shiftKey', 'metaKey', 'button', 'relatedTarget', 'pointerId', 'width', 'height', 'pressure', 'tiltX', 'tiltY', 'pointerType', 'hwTimestamp', 'isPrimary', 'pageX', 'pageY', 'timeStamp'];\nvar CLONE_DEFAULTS = [false, false, null, null, 0, 0, 0, 0, false, false, false, false, 0, null, 0, 0, 0, 0, 0, 0, 0, '', 0, false, 0, 0, 0];\nvar POINTER_TYPE = 'touch';\n\nfunction touchToPointer(type, touch, rawEvent) {\n  var e = new PointerEvent(type);\n\n  for (var i = 0; i < CLONE_PROPS.length; i++) {\n    var p = CLONE_PROPS[i];\n    e[p] = touch[p] || CLONE_DEFAULTS[i];\n  }\n\n  e.type = type;\n  e.target = getCanvas();\n  e.currentTarget = getCanvas();\n  e.buttons = typeToButtons(type);\n  e.which = e.buttons;\n  e.pointerId = (touch.identifier || 0) + 2;\n  e.bubbles = true;\n  e.cancelable = true;\n  e.button = 0;\n  e.width = (touch.radiusX || 0.5) * 2;\n  e.height = (touch.radiusY || 0.5) * 2;\n  e.pressure = touch.force || 0.5;\n  e.isPrimary = isPrimaryPointer(touch);\n  e.pointerType = POINTER_TYPE;\n  e.altKey = rawEvent.altKey;\n  e.ctrlKey = rawEvent.ctrlKey;\n  e.metaKey = rawEvent.metaKey;\n  e.shiftKey = rawEvent.shiftKey;\n\n  if (rawEvent.preventDefault) {\n    e.preventDefault = function () {\n      rawEvent.preventDefault();\n    };\n  }\n\n  return e;\n}\n\nfunction typeToButtons(type) {\n  var ret = 0;\n\n  if (type === 'touchstart' || type === 'touchmove' || type === 'pointerdown' || type === 'pointermove') {\n    ret = 1;\n  }\n\n  return ret;\n}\n\nvar firstPointer = null;\n\nfunction isPrimaryPointer(touch) {\n  return firstPointer === touch.identifier;\n}\n\nfunction setPrimaryPointer(touch) {\n  if (firstPointer === null) {\n    firstPointer = touch.identifier;\n  }\n}\n\nfunction removePrimaryPointer(touch) {\n  if (firstPointer === touch.identifier) {\n    firstPointer = null;\n  }\n}\n\nfunction eventHandlerFactory(type) {\n  return function (rawEvent) {\n    var changedTouches = rawEvent.changedTouches;\n\n    for (var i = 0; i < changedTouches.length; i++) {\n      var touch = changedTouches[i];\n\n      if (i === 0 && type === 'pointerdown') {\n        setPrimaryPointer(touch);\n      } else if (type === 'pointerup' || type === 'pointercancel') {\n        removePrimaryPointer(touch);\n      }\n\n      var event = touchToPointer(type, touch, rawEvent);\n      $document.dispatchEvent(event);\n    }\n  };\n}\n\nvar dispatchPointerDown = eventHandlerFactory('pointerdown');\nvar dispatchPointerMove = eventHandlerFactory('pointermove');\nvar dispatchPointerUp = eventHandlerFactory('pointerup');\nexport { dispatchPointerDown, dispatchPointerMove, dispatchPointerUp };","map":null,"metadata":{},"sourceType":"module"}