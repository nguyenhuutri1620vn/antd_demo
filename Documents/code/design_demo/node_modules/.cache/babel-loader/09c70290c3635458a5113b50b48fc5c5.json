{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Dom } from '../../util';\nimport { Point } from '../../geometry';\nimport { ToolsView } from '../../view/tool';\n\nclass Arrowhead extends ToolsView.ToolItem {\n  get type() {\n    return this.options.type;\n  }\n\n  get ratio() {\n    return this.options.ratio;\n  }\n\n  init() {\n    if (this.options.attrs) {\n      const _a = this.options.attrs,\n            {\n        class: className\n      } = _a,\n            attrs = __rest(_a, [\"class\"]);\n\n      this.setAttrs(attrs, this.container);\n\n      if (className) {\n        Dom.addClass(this.container, className);\n      }\n    }\n  }\n\n  onRender() {\n    Dom.addClass(this.container, this.prefixClassName(`edge-tool-${this.type}-arrowhead`));\n    this.update();\n  }\n\n  update() {\n    const ratio = this.ratio;\n    const edgeView = this.cellView;\n    const tangent = edgeView.getTangentAtRatio(ratio);\n    const position = tangent ? tangent.start : edgeView.getPointAtRatio(ratio);\n    const angle = tangent && tangent.vector().vectorAngle(new Point(1, 0)) || 0;\n\n    if (!position) {\n      return this;\n    }\n\n    const matrix = Dom.createSVGMatrix().translate(position.x, position.y).rotate(angle);\n    Dom.transform(this.container, matrix, {\n      absolute: true\n    });\n    return this;\n  }\n\n  onMouseDown(evt) {\n    if (this.guard(evt)) {\n      return;\n    }\n\n    evt.stopPropagation();\n    evt.preventDefault();\n    const edgeView = this.cellView;\n\n    if (edgeView.can('arrowheadMovable')) {\n      edgeView.cell.startBatch('move-arrowhead', {\n        ui: true,\n        toolId: this.cid\n      });\n      const coords = this.graph.snapToGrid(evt.clientX, evt.clientY);\n      const data = edgeView.prepareArrowheadDragging(this.type, {\n        x: coords.x,\n        y: coords.y,\n        options: {\n          toolId: this.cid\n        }\n      });\n      this.cellView.setEventData(evt, data);\n      this.delegateDocumentEvents(this.options.documentEvents, evt.data);\n      edgeView.graph.view.undelegateEvents();\n      this.container.style.pointerEvents = 'none';\n    }\n\n    this.focus();\n  }\n\n  onMouseMove(evt) {\n    const e = this.normalizeEvent(evt);\n    const coords = this.graph.snapToGrid(e.clientX, e.clientY);\n    this.cellView.onMouseMove(e, coords.x, coords.y);\n    this.update();\n  }\n\n  onMouseUp(evt) {\n    this.undelegateDocumentEvents();\n    const e = this.normalizeEvent(evt);\n    const edgeView = this.cellView;\n    const coords = this.graph.snapToGrid(e.clientX, e.clientY);\n    edgeView.onMouseUp(e, coords.x, coords.y);\n    this.graph.view.delegateEvents();\n    this.blur();\n    this.container.style.pointerEvents = '';\n    edgeView.cell.stopBatch('move-arrowhead', {\n      ui: true,\n      toolId: this.cid\n    });\n  }\n\n}\n\n(function (Arrowhead) {\n  Arrowhead.config({\n    tagName: 'path',\n    isSVGElement: true,\n    events: {\n      mousedown: 'onMouseDown',\n      touchstart: 'onMouseDown'\n    },\n    documentEvents: {\n      mousemove: 'onMouseMove',\n      touchmove: 'onMouseMove',\n      mouseup: 'onMouseUp',\n      touchend: 'onMouseUp',\n      touchcancel: 'onMouseUp'\n    }\n  });\n})(Arrowhead || (Arrowhead = {}));\n\nexport const SourceArrowhead = Arrowhead.define({\n  name: 'source-arrowhead',\n  type: 'source',\n  ratio: 0,\n  attrs: {\n    d: 'M 10 -8 -10 0 10 8 Z',\n    fill: '#333',\n    stroke: '#fff',\n    'stroke-width': 2,\n    cursor: 'move'\n  }\n});\nexport const TargetArrowhead = Arrowhead.define({\n  name: 'target-arrowhead',\n  type: 'target',\n  ratio: 1,\n  attrs: {\n    d: 'M -10 -8 10 0 -10 8 Z',\n    fill: '#333',\n    stroke: '#fff',\n    'stroke-width': 2,\n    cursor: 'move'\n  }\n});","map":null,"metadata":{},"sourceType":"module"}