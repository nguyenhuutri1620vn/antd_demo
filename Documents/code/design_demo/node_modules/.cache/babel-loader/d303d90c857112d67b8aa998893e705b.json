{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport BaseLayer from '../core/BaseLayer';\nimport EarthAtomSphereModel from './models/atmosphere';\nimport BaseEarthModel from './models/base';\nimport EarthBloomSphereModel from './models/bloomsphere';\nvar EarthModels = {\n  base: BaseEarthModel,\n  atomSphere: EarthAtomSphereModel,\n  bloomSphere: EarthBloomSphereModel\n};\nvar earthLayerTypes = ['base', 'atomSphere', 'bloomSphere'];\n\nvar EarthLayer = function (_BaseLayer) {\n  _inherits(EarthLayer, _BaseLayer);\n\n  var _super = _createSuper(EarthLayer);\n\n  function EarthLayer() {\n    var _this;\n\n    _classCallCheck(this, EarthLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'EarthLayer');\n\n    return _this;\n  }\n\n  _createClass(EarthLayer, [{\n    key: \"buildModels\",\n    value: function buildModels() {\n      var shape = this.getModelType();\n      this.layerModel = new EarthModels[shape](this);\n      this.models = this.layerModel.initModels();\n    }\n  }, {\n    key: \"setEarthTime\",\n    value: function setEarthTime(time) {\n      if (this.layerModel && this.layerModel.setEarthTime) {\n        this.layerModel.setEarthTime(time);\n      } else {\n        console.error('请在 scene loaded 之后执行该方法！');\n      }\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      var _shapeAttribute$scale;\n\n      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n      var shape = (shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field) || 'base';\n\n      if (earthLayerTypes.indexOf(shape) < 0) {\n        shape = 'base';\n      }\n\n      return shape;\n    }\n  }]);\n\n  return EarthLayer;\n}(BaseLayer);\n\nexport { EarthLayer as default };","map":null,"metadata":{},"sourceType":"module"}