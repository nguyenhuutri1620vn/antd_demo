{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _merge from \"lodash/merge\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { EventEmitter } from 'eventemitter3';\nimport LngLat from './geo/lng_lat';\nimport LngLatBounds from './geo/lng_lat_bounds';\nimport Point from './geo/point';\nimport Transform from './geo/transform';\nimport { Event } from './handler/events/event';\nimport { clamp, ease as defaultEasing, interpolate, now, pick, prefersReducedMotion, wrap } from './util';\n\nvar Camera = function (_EventEmitter) {\n  _inherits(Camera, _EventEmitter);\n\n  var _super = _createSuper(Camera);\n\n  function Camera(options) {\n    var _this;\n\n    _classCallCheck(this, Camera);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"transform\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"options\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"moving\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"zooming\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"rotating\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"pitching\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"padding\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"bearingSnap\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeEndTimeoutID\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeStart\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeOptions\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onEaseFrame\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onEaseEnd\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"easeFrameId\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"renderFrameCallback\", function () {\n      var t = Math.min((now() - _this.easeStart) / _this.easeOptions.duration, 1);\n\n      _this.onEaseFrame(_this.easeOptions.easing(t));\n\n      if (t < 1) {\n        _this.easeFrameId = _this.requestRenderFrame(_this.renderFrameCallback);\n      } else {\n        _this.stop();\n      }\n    });\n\n    _this.options = options;\n    var minZoom = options.minZoom,\n        maxZoom = options.maxZoom,\n        minPitch = options.minPitch,\n        maxPitch = options.maxPitch,\n        renderWorldCopies = options.renderWorldCopies;\n    _this.moving = false;\n    _this.zooming = false;\n    _this.bearingSnap = options.bearingSnap;\n    _this.transform = new Transform(minZoom, maxZoom, minPitch, maxPitch, renderWorldCopies);\n    return _this;\n  }\n\n  _createClass(Camera, [{\n    key: \"requestRenderFrame\",\n    value: function requestRenderFrame(cb) {\n      return 0;\n    }\n  }, {\n    key: \"cancelRenderFrame\",\n    value: function cancelRenderFrame(_) {\n      return;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var _this$transform$cente = this.transform.center,\n          lng = _this$transform$cente.lng,\n          lat = _this$transform$cente.lat;\n      return new LngLat(lng, lat);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.transform.zoom;\n    }\n  }, {\n    key: \"getPitch\",\n    value: function getPitch() {\n      return this.transform.pitch;\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(center, eventData) {\n      return this.jumpTo({\n        center: center\n      }, eventData);\n    }\n  }, {\n    key: \"setPitch\",\n    value: function setPitch(pitch, eventData) {\n      this.jumpTo({\n        pitch: pitch\n      }, eventData);\n      return this;\n    }\n  }, {\n    key: \"getBearing\",\n    value: function getBearing() {\n      return this.transform.bearing;\n    }\n  }, {\n    key: \"panTo\",\n    value: function panTo(lnglat, options, eventData) {\n      return this.easeTo(_merge({\n        center: lnglat\n      }, options), eventData);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut(options, eventData) {\n      this.zoomTo(this.getZoom() - 1, options, eventData);\n      return this;\n    }\n  }, {\n    key: \"setBearing\",\n    value: function setBearing(bearing, eventData) {\n      this.jumpTo({\n        bearing: bearing\n      }, eventData);\n      return this;\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom, eventData) {\n      this.jumpTo({\n        zoom: zoom\n      }, eventData);\n      return this;\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn(options, eventData) {\n      this.zoomTo(this.getZoom() + 1, options, eventData);\n      return this;\n    }\n  }, {\n    key: \"zoomTo\",\n    value: function zoomTo(zoom, options, eventData) {\n      return this.easeTo(_merge({\n        zoom: zoom\n      }, options), eventData);\n    }\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      return this.transform.padding;\n    }\n  }, {\n    key: \"setPadding\",\n    value: function setPadding(padding, eventData) {\n      this.jumpTo({\n        padding: padding\n      }, eventData);\n      return this;\n    }\n  }, {\n    key: \"rotateTo\",\n    value: function rotateTo(bearing, options, eventData) {\n      return this.easeTo(_merge({\n        bearing: bearing\n      }, options), eventData);\n    }\n  }, {\n    key: \"resetNorth\",\n    value: function resetNorth(options, eventData) {\n      this.rotateTo(0, _merge({\n        duration: 1000\n      }, options), eventData);\n      return this;\n    }\n  }, {\n    key: \"resetNorthPitch\",\n    value: function resetNorthPitch(options, eventData) {\n      this.easeTo(_merge({\n        bearing: 0,\n        pitch: 0,\n        duration: 1000\n      }, options), eventData);\n      return this;\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds, options, eventData) {\n      return this.fitInternal(this.cameraForBounds(bounds, options), options, eventData);\n    }\n  }, {\n    key: \"cameraForBounds\",\n    value: function cameraForBounds(bounds, options) {\n      bounds = LngLatBounds.convert(bounds);\n      return this.cameraForBoxAndBearing(bounds.getNorthWest(), bounds.getSouthEast(), 0, options);\n    }\n  }, {\n    key: \"snapToNorth\",\n    value: function snapToNorth(options, eventData) {\n      if (Math.abs(this.getBearing()) < this.bearingSnap) {\n        return this.resetNorth(options, eventData);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"jumpTo\",\n    value: function jumpTo() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var eventData = arguments.length > 1 ? arguments[1] : undefined;\n      this.stop();\n      var tr = this.transform;\n      var zoomChanged = false;\n      var bearingChanged = false;\n      var pitchChanged = false;\n\n      if (options.zoom && tr.zoom !== +options.zoom) {\n        zoomChanged = true;\n        tr.zoom = +options.zoom;\n      }\n\n      if (options.center !== undefined) {\n        tr.center = LngLat.convert(options.center);\n      }\n\n      if (options.bearing && tr.bearing !== +options.bearing) {\n        bearingChanged = true;\n        tr.bearing = +options.bearing;\n      }\n\n      if (options.pitch && tr.pitch !== +options.pitch) {\n        pitchChanged = true;\n        tr.pitch = +options.pitch;\n      }\n\n      if (options.padding != null && !tr.isPaddingEqual(options.padding)) {\n        tr.padding = options.padding;\n      }\n\n      this.emit('movestart', new Event('movestart', eventData));\n      this.emit('move', new Event('move', eventData));\n\n      if (zoomChanged) {\n        this.emit('zoomstart', new Event('zoomstart', eventData));\n        this.emit('zoom', new Event('zoom', eventData));\n        this.emit('zoomend', new Event('zoomend', eventData));\n      }\n\n      if (bearingChanged) {\n        this.emit('rotatestart', new Event('rotatestart', eventData));\n        this.emit('rotate', new Event('rotate', eventData));\n        this.emit('rotateend', new Event('rotateend', eventData));\n      }\n\n      if (pitchChanged) {\n        this.emit('pitchstart', new Event('pitchstart', eventData));\n        this.emit('pitch', new Event('pitch', eventData));\n        this.emit('pitchend', new Event('pitchend', eventData));\n      }\n\n      return this.emit('moveend', new Event('moveend', eventData));\n    }\n  }, {\n    key: \"easeTo\",\n    value: function easeTo() {\n      var _this2 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var eventData = arguments.length > 1 ? arguments[1] : undefined;\n      options = _merge({\n        offset: [0, 0],\n        duration: 500,\n        easing: defaultEasing\n      }, options);\n\n      if (options.animate === false || !options.essential && prefersReducedMotion()) {\n        options.duration = 0;\n      }\n\n      var tr = this.transform;\n      var startZoom = this.getZoom();\n      var startBearing = this.getBearing();\n      var startPitch = this.getPitch();\n      var startPadding = this.getPadding();\n      var zoom = options.zoom ? +options.zoom : startZoom;\n      var bearing = options.bearing ? this.normalizeBearing(options.bearing, startBearing) : startBearing;\n      var pitch = options.pitch ? +options.pitch : startPitch;\n      var padding = options.padding ? options.padding : tr.padding;\n      var offsetAsPoint = Point.convert(options.offset);\n      var pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n      var locationAtOffset = tr.pointLocation(pointAtOffset);\n      var center = LngLat.convert(options.center || locationAtOffset);\n      this.normalizeCenter(center);\n      var from = tr.project(locationAtOffset);\n      var delta = tr.project(center).sub(from);\n      var finalScale = tr.zoomScale(zoom - startZoom);\n      var around;\n      var aroundPoint;\n\n      if (options.around) {\n        around = LngLat.convert(options.around);\n        aroundPoint = tr.locationPoint(around);\n      }\n\n      var currently = {\n        moving: this.moving,\n        zooming: this.zooming,\n        rotating: this.rotating,\n        pitching: this.pitching\n      };\n      this.zooming = this.zooming || zoom !== startZoom;\n      this.rotating = this.rotating || startBearing !== bearing;\n      this.pitching = this.pitching || pitch !== startPitch;\n      this.padding = !tr.isPaddingEqual(padding);\n      this.easeId = options.easeId;\n      this.prepareEase(eventData, options.noMoveStart, currently);\n      clearTimeout(this.easeEndTimeoutID);\n      this.ease(function (k) {\n        if (_this2.zooming) {\n          tr.zoom = interpolate(startZoom, zoom, k);\n        }\n\n        if (_this2.rotating) {\n          tr.bearing = interpolate(startBearing, bearing, k);\n        }\n\n        if (_this2.pitching) {\n          tr.pitch = interpolate(startPitch, pitch, k);\n        }\n\n        if (_this2.padding) {\n          tr.interpolatePadding(startPadding, padding, k);\n          pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n        }\n\n        if (around) {\n          tr.setLocationAtPoint(around, aroundPoint);\n        } else {\n          var scale = tr.zoomScale(tr.zoom - startZoom);\n          var base = zoom > startZoom ? Math.min(2, finalScale) : Math.max(0.5, finalScale);\n          var speedup = Math.pow(base, 1 - k);\n          var newCenter = tr.unproject(from.add(delta.mult(k * speedup)).mult(scale));\n          tr.setLocationAtPoint(tr.renderWorldCopies ? newCenter.wrap() : newCenter, pointAtOffset);\n        }\n\n        _this2.fireMoveEvents(eventData);\n      }, function (interruptingEaseId) {\n        _this2.afterEase(eventData, interruptingEaseId);\n      }, options);\n      return this;\n    }\n  }, {\n    key: \"flyTo\",\n    value: function flyTo() {\n      var _this3 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var eventData = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (!options.essential && prefersReducedMotion()) {\n        var coercedOptions = pick(options, ['center', 'zoom', 'bearing', 'pitch', 'around']);\n        return this.jumpTo(coercedOptions, eventData);\n      }\n\n      this.stop();\n      options = _merge({\n        offset: [0, 0],\n        speed: 1.2,\n        curve: 1.42,\n        easing: defaultEasing\n      }, options);\n      var tr = this.transform;\n      var startZoom = this.getZoom();\n      var startBearing = this.getBearing();\n      var startPitch = this.getPitch();\n      var startPadding = this.getPadding();\n      var zoom = options.zoom ? clamp(+options.zoom, tr.minZoom, tr.maxZoom) : startZoom;\n      var bearing = options.bearing ? this.normalizeBearing(options.bearing, startBearing) : startBearing;\n      var pitch = options.pitch ? +options.pitch : startPitch;\n      var padding = 'padding' in options ? options.padding : tr.padding;\n      var scale = tr.zoomScale(zoom - startZoom);\n      var offsetAsPoint = Point.convert(options.offset);\n      var pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n      var locationAtOffset = tr.pointLocation(pointAtOffset);\n      var center = LngLat.convert(options.center || locationAtOffset);\n      this.normalizeCenter(center);\n      var from = tr.project(locationAtOffset);\n      var delta = tr.project(center).sub(from);\n      var rho = options.curve;\n      var w0 = Math.max(tr.width, tr.height);\n      var w1 = w0 / scale;\n      var u1 = delta.mag();\n\n      if ('minZoom' in options) {\n        var minZoom = clamp(Math.min(options.minZoom, startZoom, zoom), tr.minZoom, tr.maxZoom);\n        var wMax = w0 / tr.zoomScale(minZoom - startZoom);\n        rho = Math.sqrt(wMax / u1 * 2);\n      }\n\n      var rho2 = rho * rho;\n\n      function r(i) {\n        var b = (w1 * w1 - w0 * w0 + (i ? -1 : 1) * rho2 * rho2 * u1 * u1) / (2 * (i ? w1 : w0) * rho2 * u1);\n        return Math.log(Math.sqrt(b * b + 1) - b);\n      }\n\n      function sinh(n) {\n        return (Math.exp(n) - Math.exp(-n)) / 2;\n      }\n\n      function cosh(n) {\n        return (Math.exp(n) + Math.exp(-n)) / 2;\n      }\n\n      function tanh(n) {\n        return sinh(n) / cosh(n);\n      }\n\n      var r0 = r(0);\n\n      var w = function w(s) {\n        return cosh(r0) / cosh(r0 + rho * s);\n      };\n\n      var u = function u(s) {\n        return w0 * ((cosh(r0) * tanh(r0 + rho * s) - sinh(r0)) / rho2) / u1;\n      };\n\n      var S = (r(1) - r0) / rho;\n\n      if (Math.abs(u1) < 0.000001 || !isFinite(S)) {\n        if (Math.abs(w0 - w1) < 0.000001) {\n          return this.easeTo(options, eventData);\n        }\n\n        var k = w1 < w0 ? -1 : 1;\n        S = Math.abs(Math.log(w1 / w0)) / rho;\n\n        u = function u() {\n          return 0;\n        };\n\n        w = function w(s) {\n          return Math.exp(k * rho * s);\n        };\n      }\n\n      if ('duration' in options) {\n        options.duration = +options.duration;\n      } else {\n        var V = 'screenSpeed' in options ? +options.screenSpeed / rho : +options.speed;\n        options.duration = 1000 * S / V;\n      }\n\n      if (options.maxDuration && options.duration > options.maxDuration) {\n        options.duration = 0;\n      }\n\n      this.zooming = true;\n      this.rotating = startBearing !== bearing;\n      this.pitching = pitch !== startPitch;\n      this.padding = !tr.isPaddingEqual(padding);\n      this.prepareEase(eventData, false);\n      this.ease(function (k) {\n        var s = k * S;\n        var easeScale = 1 / w(s);\n        tr.zoom = k === 1 ? zoom : startZoom + tr.scaleZoom(easeScale);\n\n        if (_this3.rotating) {\n          tr.bearing = interpolate(startBearing, bearing, k);\n        }\n\n        if (_this3.pitching) {\n          tr.pitch = interpolate(startPitch, pitch, k);\n        }\n\n        if (_this3.padding) {\n          tr.interpolatePadding(startPadding, padding, k);\n          pointAtOffset = tr.centerPoint.add(offsetAsPoint);\n        }\n\n        var newCenter = k === 1 ? center : tr.unproject(from.add(delta.mult(u(s))).mult(easeScale));\n        tr.setLocationAtPoint(tr.renderWorldCopies ? newCenter.wrap() : newCenter, pointAtOffset);\n\n        _this3.fireMoveEvents(eventData);\n      }, function () {\n        return _this3.afterEase(eventData);\n      }, options);\n      return this;\n    }\n  }, {\n    key: \"fitScreenCoordinates\",\n    value: function fitScreenCoordinates(p0, p1, bearing, options, eventData) {\n      return this.fitInternal(this.cameraForBoxAndBearing(this.transform.pointLocation(Point.convert(p0)), this.transform.pointLocation(Point.convert(p1)), bearing, options), options, eventData);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(allowGestures, easeId) {\n      if (this.easeFrameId) {\n        this.cancelRenderFrame(this.easeFrameId);\n        delete this.easeFrameId;\n        delete this.onEaseFrame;\n      }\n\n      if (this.onEaseEnd) {\n        var onEaseEnd = this.onEaseEnd;\n        delete this.onEaseEnd;\n        onEaseEnd.call(this, easeId);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"normalizeBearing\",\n    value: function normalizeBearing(bearing, currentBearing) {\n      bearing = wrap(bearing, -180, 180);\n      var diff = Math.abs(bearing - currentBearing);\n\n      if (Math.abs(bearing - 360 - currentBearing) < diff) {\n        bearing -= 360;\n      }\n\n      if (Math.abs(bearing + 360 - currentBearing) < diff) {\n        bearing += 360;\n      }\n\n      return bearing;\n    }\n  }, {\n    key: \"normalizeCenter\",\n    value: function normalizeCenter(center) {\n      var tr = this.transform;\n\n      if (!tr.renderWorldCopies || tr.lngRange) {\n        return;\n      }\n\n      var delta = center.lng - tr.center.lng;\n      center.lng += delta > 180 ? -360 : delta < -180 ? 360 : 0;\n    }\n  }, {\n    key: \"fireMoveEvents\",\n    value: function fireMoveEvents(eventData) {\n      this.emit('move', new Event('move', eventData));\n\n      if (this.zooming) {\n        this.emit('zoom', new Event('zoom', eventData));\n      }\n\n      if (this.rotating) {\n        this.emit('rotate', new Event('rotate', eventData));\n      }\n\n      if (this.pitching) {\n        this.emit('rotate', new Event('pitch', eventData));\n      }\n    }\n  }, {\n    key: \"prepareEase\",\n    value: function prepareEase(eventData) {\n      var noMoveStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var currently = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      this.moving = true;\n\n      if (!noMoveStart && !currently.moving) {\n        this.emit('movestart', new Event('movestart', eventData));\n      }\n\n      if (this.zooming && !currently.zooming) {\n        this.emit('zoomstart', new Event('zoomstart', eventData));\n      }\n\n      if (this.rotating && !currently.rotating) {\n        this.emit('rotatestart', new Event('rotatestart', eventData));\n      }\n\n      if (this.pitching && !currently.pitching) {\n        this.emit('pitchstart', new Event('pitchstart', eventData));\n      }\n    }\n  }, {\n    key: \"afterEase\",\n    value: function afterEase(eventData, easeId) {\n      if (this.easeId && easeId && this.easeId === easeId) {\n        return;\n      }\n\n      delete this.easeId;\n      var wasZooming = this.zooming;\n      var wasRotating = this.rotating;\n      var wasPitching = this.pitching;\n      this.moving = false;\n      this.zooming = false;\n      this.rotating = false;\n      this.pitching = false;\n      this.padding = false;\n\n      if (wasZooming) {\n        this.emit('zoomend', new Event('zoomend', eventData));\n      }\n\n      if (wasRotating) {\n        this.emit('rotateend', new Event('rotateend', eventData));\n      }\n\n      if (wasPitching) {\n        this.emit('pitchend', new Event('pitchend', eventData));\n      }\n\n      this.emit('moveend', new Event('moveend', eventData));\n    }\n  }, {\n    key: \"ease\",\n    value: function ease(frame, finish, options) {\n      if (options.animate === false || options.duration === 0) {\n        frame(1);\n        finish();\n      } else {\n        this.easeStart = now();\n        this.easeOptions = options;\n        this.onEaseFrame = frame;\n        this.onEaseEnd = finish;\n        this.easeFrameId = this.requestRenderFrame(this.renderFrameCallback);\n      }\n    }\n  }, {\n    key: \"cameraForBoxAndBearing\",\n    value: function cameraForBoxAndBearing(p0, p1, bearing, options) {\n      var defaultPadding = {\n        top: 0,\n        bottom: 0,\n        right: 0,\n        left: 0\n      };\n      options = _merge({\n        padding: defaultPadding,\n        offset: [0, 0],\n        maxZoom: this.transform.maxZoom\n      }, options);\n\n      if (typeof options.padding === 'number') {\n        var p = options.padding;\n        options.padding = {\n          top: p,\n          bottom: p,\n          right: p,\n          left: p\n        };\n      }\n\n      options.padding = _merge(defaultPadding, options.padding);\n      var tr = this.transform;\n      var edgePadding = tr.padding;\n      var p0world = tr.project(LngLat.convert(p0));\n      var p1world = tr.project(LngLat.convert(p1));\n      var p0rotated = p0world.rotate(-bearing * Math.PI / 180);\n      var p1rotated = p1world.rotate(-bearing * Math.PI / 180);\n      var upperRight = new Point(Math.max(p0rotated.x, p1rotated.x), Math.max(p0rotated.y, p1rotated.y));\n      var lowerLeft = new Point(Math.min(p0rotated.x, p1rotated.x), Math.min(p0rotated.y, p1rotated.y));\n      var size = upperRight.sub(lowerLeft);\n      var scaleX = (tr.width - (edgePadding.left + edgePadding.right + options.padding.left + options.padding.right)) / size.x;\n      var scaleY = (tr.height - (edgePadding.top + edgePadding.bottom + options.padding.top + options.padding.bottom)) / size.y;\n\n      if (scaleY < 0 || scaleX < 0) {\n        return;\n      }\n\n      var zoom = Math.min(tr.scaleZoom(tr.scale * Math.min(scaleX, scaleY)), options.maxZoom);\n      var offset = Point.convert(options.offset);\n      var paddingOffsetX = (options.padding.left - options.padding.right) / 2;\n      var paddingOffsetY = (options.padding.top - options.padding.bottom) / 2;\n      var offsetAtInitialZoom = new Point(offset.x + paddingOffsetX, offset.y + paddingOffsetY);\n      var offsetAtFinalZoom = offsetAtInitialZoom.mult(tr.scale / tr.zoomScale(zoom));\n      var center = tr.unproject(p0world.add(p1world).div(2).sub(offsetAtFinalZoom));\n      return {\n        center: center,\n        zoom: zoom,\n        bearing: bearing\n      };\n    }\n  }, {\n    key: \"fitInternal\",\n    value: function fitInternal(calculatedOptions, options, eventData) {\n      if (!calculatedOptions) {\n        return this;\n      }\n\n      options = _merge(calculatedOptions, options);\n      delete options.padding;\n      return options.linear ? this.easeTo(options, eventData) : this.flyTo(options, eventData);\n    }\n  }]);\n\n  return Camera;\n}(EventEmitter);\n\nexport { Camera as default };","map":null,"metadata":{},"sourceType":"module"}