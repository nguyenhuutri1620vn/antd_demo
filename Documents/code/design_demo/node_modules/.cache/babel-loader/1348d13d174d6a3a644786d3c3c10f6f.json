{"ast":null,"code":"import { clone, sortBy, valuesOfKey, getRange, each, hasKey, groupBy, isEmpty } from '@antv/util'; // 进行转换得到值所在的 range\n\nfunction getBinKey(value, binWidth, binNumber) {\n  // 做一点特殊处理\n  if (binNumber === 1) {\n    return [0, binWidth];\n  }\n\n  var index = Math.floor(value / binWidth);\n  return [binWidth * index, binWidth * (index + 1)];\n} // 默认 sturges 转换\n\n\nfunction sturges(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n/**\n * 对数据进行百分比化\n * @param data\n * @param binField\n * @param binWidth\n * @param binNumber\n * @param stackField\n */\n\n\nexport function binHistogram(data, binField, binWidth, binNumber, stackField) {\n  var originData_copy = clone(data); // 根据 binField 对源数据进行排序\n\n  sortBy(originData_copy, binField); // 获取源数据 binField 的 range\n\n  var values = valuesOfKey(originData_copy, binField);\n  var range = getRange(values);\n  var rangeWidth = range.max - range.min; // 计算分箱，直方图分箱的计算基于 binWidth，如配置了 binNumber 则将其转为 binWidth 进行计算\n\n  var _binWidth = binWidth;\n\n  if (!binWidth && binNumber) {\n    _binWidth = binNumber > 1 ? rangeWidth / (binNumber - 1) : range.max;\n  } // 当 binWidth 和 binNumber 都没有指定的情况，采用 Sturges formula 自动生成 binWidth\n\n\n  if (!binWidth && !binNumber) {\n    var _defaultBinNumber = sturges(values);\n\n    _binWidth = rangeWidth / _defaultBinNumber;\n  } // 构建 key - StatisticData 结构\n\n\n  var bins = {};\n  var groups = groupBy(originData_copy, stackField); // 判断分组是否为空，如果为空，说明没有 stackField 字段\n\n  if (isEmpty(groups)) {\n    each(originData_copy, function (data) {\n      var value = data[binField];\n      var bin = getBinKey(value, _binWidth, binNumber);\n      var binKey = bin[0] + \"-\" + bin[1];\n\n      if (!hasKey(bins, binKey)) {\n        bins[binKey] = {\n          range: bin,\n          count: 0\n        };\n      }\n\n      bins[binKey].count += 1;\n    });\n  } else {\n    Object.keys(groups).forEach(function (groupKey) {\n      each(groups[groupKey], function (data) {\n        var value = data[binField];\n        var bin = getBinKey(value, _binWidth, binNumber);\n        var binKey = bin[0] + \"-\" + bin[1];\n        var groupKeyBinKey = binKey + \"-\" + groupKey;\n\n        if (!hasKey(bins, groupKeyBinKey)) {\n          bins[groupKeyBinKey] = {\n            range: bin,\n            count: 0\n          };\n          bins[groupKeyBinKey][stackField] = groupKey;\n        }\n\n        bins[groupKeyBinKey].count += 1;\n      });\n    });\n  } // 将分箱数据转换为 plotData 才是图表所需要的\n\n\n  var plotData = [];\n  each(bins, function (bin) {\n    plotData.push(bin);\n  });\n  return plotData;\n}","map":null,"metadata":{},"sourceType":"module"}