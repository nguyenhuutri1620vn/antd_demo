{"ast":null,"code":"import React from 'react';\nimport { Disposable } from '../../common/disposable';\nimport { uuidv4 } from '../../common/uuid';\n/** 保存组件上的配置 */\n\nexport class ExtensionRegistry {\n  constructor() {\n    this.extensions = [];\n    this.containerClassNames = new Set();\n\n    this.addCoreModule = extension => {\n      // core module 添加在前面\n      this.extensions.unshift(extension);\n      return Disposable.create(() => {\n        this.removeExtension(extension);\n      });\n    };\n\n    this.addExtension = extension => {\n      this.extensions.push(extension);\n      return Disposable.create(() => {\n        this.removeExtension(extension);\n      });\n    };\n\n    this.removeExtension = extension => {\n      const idx = this.extensions.indexOf(extension);\n\n      if (idx > -1) {\n        this.extensions.splice(idx, 1);\n      }\n    };\n\n    this.getInstaceId = () => {\n      return this.instanceId;\n    };\n\n    this.addContainerClassNames = clz => {\n      return this.containerClassNames.add(clz);\n    };\n\n    this.getContainerClassNames = () => {\n      return Array.from(this.containerClassNames);\n    };\n\n    this.getAllExtensions = () => {\n      return this.extensions;\n    };\n\n    this.getAllExtensionConfigs = () => {\n      return this.extensions.map(i => i.config);\n    };\n\n    this.instanceId = uuidv4();\n  }\n\n  has(name) {\n    return this.extensions.some(ext => ext.config.CONFIG_TYPE === name);\n  }\n\n}\n/** 获取Xflow extension，用于收集React组件的配置 */\n\nexport const createExtensionRegistry = () => {\n  /* eslint-disable-next-line react-hooks/rules-of-hooks */\n  const registry = React.useMemo(() => {\n    return new ExtensionRegistry();\n  }, []);\n  return registry;\n};","map":null,"metadata":{},"sourceType":"module"}