{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport LngLat from './lng_lat';\n\nvar LngLatBounds = function () {\n  function LngLatBounds(sw, ne) {\n    _classCallCheck(this, LngLatBounds);\n\n    _defineProperty(this, \"ne\", void 0);\n\n    _defineProperty(this, \"sw\", void 0);\n\n    if (!sw) {} else if (ne) {\n      this.setSouthWest(sw).setNorthEast(ne);\n    } else if (sw.length === 4) {\n      this.setSouthWest([sw[0], sw[1]]).setNorthEast([sw[2], sw[3]]);\n    } else {\n      this.setSouthWest(sw[0]).setNorthEast(sw[1]);\n    }\n  }\n\n  _createClass(LngLatBounds, [{\n    key: \"setNorthEast\",\n    value: function setNorthEast(ne) {\n      this.ne = ne instanceof LngLat ? new LngLat(ne.lng, ne.lat) : LngLat.convert(ne);\n      return this;\n    }\n  }, {\n    key: \"setSouthWest\",\n    value: function setSouthWest(sw) {\n      this.sw = sw instanceof LngLat ? new LngLat(sw.lng, sw.lat) : LngLat.convert(sw);\n      return this;\n    }\n  }, {\n    key: \"extend\",\n    value: function extend(obj) {\n      var sw = this.sw;\n      var ne = this.ne;\n      var sw2;\n      var ne2;\n\n      if (obj instanceof LngLat) {\n        sw2 = obj;\n        ne2 = obj;\n      } else if (obj instanceof LngLatBounds) {\n        sw2 = obj.sw;\n        ne2 = obj.ne;\n\n        if (!sw2 || !ne2) {\n          return this;\n        }\n      } else {\n        if (Array.isArray(obj)) {\n          if (obj.length === 4 || obj.every(Array.isArray)) {\n            var lngLatBoundsObj = obj;\n            return this.extend(LngLatBounds.convert(lngLatBoundsObj));\n          } else {\n            var lngLatObj = obj;\n            return this.extend(LngLat.convert(lngLatObj));\n          }\n        }\n\n        return this;\n      }\n\n      if (!sw && !ne) {\n        this.sw = new LngLat(sw2.lng, sw2.lat);\n        this.ne = new LngLat(ne2.lng, ne2.lat);\n      } else {\n        sw.lng = Math.min(sw2.lng, sw.lng);\n        sw.lat = Math.min(sw2.lat, sw.lat);\n        ne.lng = Math.max(ne2.lng, ne.lng);\n        ne.lat = Math.max(ne2.lat, ne.lat);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return new LngLat((this.sw.lng + this.ne.lng) / 2, (this.sw.lat + this.ne.lat) / 2);\n    }\n  }, {\n    key: \"getSouthWest\",\n    value: function getSouthWest() {\n      return this.sw;\n    }\n  }, {\n    key: \"getNorthEast\",\n    value: function getNorthEast() {\n      return this.ne;\n    }\n  }, {\n    key: \"getNorthWest\",\n    value: function getNorthWest() {\n      return new LngLat(this.getWest(), this.getNorth());\n    }\n  }, {\n    key: \"getSouthEast\",\n    value: function getSouthEast() {\n      return new LngLat(this.getEast(), this.getSouth());\n    }\n  }, {\n    key: \"getWest\",\n    value: function getWest() {\n      return this.sw.lng;\n    }\n  }, {\n    key: \"getSouth\",\n    value: function getSouth() {\n      return this.sw.lat;\n    }\n  }, {\n    key: \"getEast\",\n    value: function getEast() {\n      return this.ne.lng;\n    }\n  }, {\n    key: \"getNorth\",\n    value: function getNorth() {\n      return this.ne.lat;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return [this.sw.toArray(), this.ne.toArray()];\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"LngLatBounds(\".concat(this.sw.toString(), \", \").concat(this.ne.toString(), \")\");\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !(this.sw && this.ne);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(lnglat) {\n      var _LngLat$convert = LngLat.convert(lnglat),\n          lng = _LngLat$convert.lng,\n          lat = _LngLat$convert.lat;\n\n      var containsLatitude = this.sw.lat <= lat && lat <= this.ne.lat;\n      var containsLongitude = this.sw.lng <= lng && lng <= this.ne.lng;\n\n      if (this.sw.lng > this.ne.lng) {\n        containsLongitude = this.sw.lng >= lng && lng >= this.ne.lng;\n      }\n\n      return containsLatitude && containsLongitude;\n    }\n  }], [{\n    key: \"convert\",\n    value: function convert(input) {\n      if (input instanceof LngLatBounds) {\n        return input;\n      }\n\n      return new LngLatBounds(input);\n    }\n  }]);\n\n  return LngLatBounds;\n}();\n\nexport { LngLatBounds as default };","map":null,"metadata":{},"sourceType":"module"}