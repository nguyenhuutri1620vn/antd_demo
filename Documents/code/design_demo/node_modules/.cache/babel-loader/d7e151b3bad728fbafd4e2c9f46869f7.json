{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { MODELS } from '../../model-service';\nimport { XFlowGraphCommands } from '../constant';\nexport var NsGraphToggleMultiSelect;\n\n(function (NsGraphToggleMultiSelect) {\n  /** Command: 用于注册named factory */\n  NsGraphToggleMultiSelect.command = XFlowGraphCommands.GRAPH_TOGGLE_MULTI_SELECT;\n  /** hookName */\n\n  NsGraphToggleMultiSelect.hookKey = 'toggleMultiSelect';\n})(NsGraphToggleMultiSelect || (NsGraphToggleMultiSelect = {}));\n\nlet GraphToggleMultiSelectCommand =\n/** 画布缩放命令 */\nclass GraphToggleMultiSelectCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.toggleMultiSelect.call(\n      /** 执行hooks pipeline处理args */\n      args,\n      /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const config = yield this.ctx.getGraphConfig();\n        const {\n          isEnable,\n          modelService\n        } = handlerArgs;\n        const graphEnableMultiSelectModel = yield MODELS.GRAPH_ENABLE_MULTI_SELECT.getModel(modelService);\n        const needEnableRubberBand = typeof isEnable === 'boolean' ? isEnable : !x6Graph.isRubberbandEnabled();\n\n        if (needEnableRubberBand) {\n          x6Graph.enableRubberband();\n\n          if (x6Graph.scroller && x6Graph.scroller.widget) {\n            x6Graph.scroller.disablePanning();\n          } else {\n            x6Graph.disablePanning();\n          }\n\n          config.graphContainer.style.cursor = 'crosshair';\n        } else {\n          x6Graph.disableRubberband();\n\n          if (x6Graph.scroller && x6Graph.scroller.widget) {\n            x6Graph.scroller.enablePanning();\n          } else {\n            x6Graph.enablePanning();\n          }\n\n          config.graphContainer.style.cursor = 'grab';\n        }\n\n        graphEnableMultiSelectModel.setValue({\n          isEnable: needEnableRubberBand\n        });\n        return {\n          isEnable: needEnableRubberBand\n        };\n      }),\n      /** execute command 时创建的hook */\n      runtimeHook);\n      /** 设置结果 */\n\n      this.ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n  /** isUndoable */\n\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphToggleMultiSelectCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphToggleMultiSelectCommand.prototype, \"init\", null);\n\nGraphToggleMultiSelectCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphToggleMultiSelect.command.id\n  }\n})\n/** 画布缩放命令 */\n], GraphToggleMultiSelectCommand);\nexport { GraphToggleMultiSelectCommand };","map":null,"metadata":{},"sourceType":"module"}