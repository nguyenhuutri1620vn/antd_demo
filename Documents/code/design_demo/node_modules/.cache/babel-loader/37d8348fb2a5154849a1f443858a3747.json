{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { lazyInject, TYPES } from '@antv/l7-core';\nvar BaseMapWrapper = (_dec = lazyInject(TYPES.IGlobalConfigService), (_class = function () {\n  function BaseMapWrapper(config) {\n    _classCallCheck(this, BaseMapWrapper);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    _defineProperty(this, \"config\", void 0);\n\n    this.config = config;\n  }\n\n  _createClass(BaseMapWrapper, [{\n    key: \"setContainer\",\n    value: function setContainer(sceneContainer, id, canvas, hasBaseMap) {\n      sceneContainer.bind(TYPES.MapConfig).toConstantValue(_objectSpread(_objectSpread({}, this.config), {}, {\n        id: id,\n        canvas: canvas,\n        hasBaseMap: hasBaseMap\n      }));\n      sceneContainer.bind(TYPES.IMapService).to(this.getServiceConstructor()).inSingletonScope();\n    }\n  }, {\n    key: \"getServiceConstructor\",\n    value: function getServiceConstructor() {\n      throw new Error('Method not implemented.');\n    }\n  }]);\n\n  return BaseMapWrapper;\n}(), _descriptor = _applyDecoratedDescriptor(_class.prototype, \"configService\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class));\nexport { BaseMapWrapper as default };","map":null,"metadata":{},"sourceType":"module"}