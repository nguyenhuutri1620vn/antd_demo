{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix, clone, debounce } from '@antv/util';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected',\n      enableOptimize: false,\n      enableDebounce: false,\n      enableStack: true\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas',\n      'touchstart': 'onTouchStart',\n      'touchmove': 'onTouchMove',\n      'touchend': 'onDragEnd'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n  onTouchStart: function onTouchStart(e) {\n    if (!e.item) return;\n    var self = this;\n\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n\n      if (event1 && event2) {\n        return;\n      }\n\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n\n    self.onDragStart(e);\n  },\n  onTouchMove: function onTouchMove(e) {\n    var self = this;\n\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n\n      if (event1 && event2) {\n        self.onDragEnd(e);\n        return;\n      }\n\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n\n    self.onDrag(e);\n  },\n\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    this.currentShouldEnd = true;\n\n    if (!this.shouldBegin.call(this, evt)) {\n      return;\n    }\n\n    var item = evt.item;\n\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    } // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n\n\n    var group = item.getContainer();\n    group.set('capture', false);\n    if (!this.cachedCaptureItems) this.cachedCaptureItems = [];\n    this.cachedCaptureItems.push(item); // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n\n    var target = evt.target;\n\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n\n    var graph = this.graph;\n    this.targets = []; // 将节点拖入到指定的 Combo\n\n    this.targetCombo = null; // 获取所有选中的元素\n\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id'); // 当前拖动的节点是否是选中的节点\n\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    }); // 只拖动当前节点\n\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n\n    var beforeDragNodes = [];\n    this.targets.forEach(function (t) {\n      beforeDragNodes.push(clone(t.getModel()));\n    });\n    this.set('beforeDragNodes', beforeDragNodes);\n    this.hidenEdge = {};\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return;\n          _this.hidenEdge[edge.getID()] = true;\n          edge.hide();\n        });\n      });\n    }\n\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.shouldUpdate.call(this, evt)) {\n      return;\n    }\n\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge')\n      });else this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    var _this = this;\n\n    var _a;\n\n    if (!this.origin) {\n      return;\n    } // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n\n\n    (_a = this.cachedCaptureItems) === null || _a === void 0 ? void 0 : _a.forEach(function (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    });\n    this.cachedCaptureItems = [];\n\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n\n    if (this.get('updateEdge') && this.enableOptimize && !this.enableDelegate) {\n      this.targets.forEach(function (node) {\n        var edges = node.getEdges();\n        edges.forEach(function (edge) {\n          if (_this.hidenEdge[edge.getID()]) edge.show();\n          edge.refresh();\n        });\n      });\n    }\n\n    this.hidenEdge = {};\n    var graph = this.graph; // 拖动结束后，入栈\n\n    if (graph.get('enabledStack') && this.enableStack) {\n      var stackData_1 = {\n        before: {\n          nodes: [],\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.get('beforeDragNodes').forEach(function (model) {\n        stackData_1.before.nodes.push({\n          id: model.id,\n          x: model.x,\n          y: model.y\n        });\n      });\n      this.targets.forEach(function (target) {\n        var targetModel = target.getModel();\n        stackData_1.after.nodes.push({\n          id: targetModel.id,\n          x: targetModel.x,\n          y: targetModel.y\n        });\n      });\n      graph.pushStack('update', clone(stackData_1));\n    } // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, item); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd || !this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n\n    this.targetCombo = item; // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    } // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, undefined); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.targets || this.targets.length === 0 || !this.currentShouldEnd) return;\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n    var newParentCombo = comboId ? graph.findById(comboId) : undefined;\n    this.currentShouldEnd = this.shouldEnd.call(this, evt, newParentCombo); // 若不允许结束，则将节点位置设置回初识位置。后面的逻辑仍需要执行\n\n    this.updatePositions(evt, !this.currentShouldEnd);\n    if (!this.currentShouldEnd) return;\n\n    if (this.onlyChangeComboSize) {\n      graph.updateCombos();\n    } else if (comboId) {\n      var combo = graph.findById(comboId);\n\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    } // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt, restore) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return; // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n\n    if (this.get('enableDelegate')) {\n      if (this.enableDebounce) this.debounceUpdate({\n        targets: this.targets,\n        graph: this.graph,\n        point: this.point,\n        origin: this.origin,\n        evt: evt,\n        updateEdge: this.get('updateEdge'),\n        updateFunc: this.update\n      });else if (!restore) this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    } else this.targets.map(function (node) {\n      return _this.update(node, evt, restore);\n    });\n  },\n\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt, restore) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n\n    if (restore) {\n      x += origin.x - evt.x;\n      y += origin.y - evt.y;\n    }\n\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n\n  /**\n   * 限流更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  debounceUpdate: debounce(function (event) {\n    var targets = event.targets,\n        graph = event.graph,\n        point = event.point,\n        origin = event.origin,\n        evt = event.evt,\n        updateEdge = event.updateEdge,\n        updateFunc = event.updateFunc;\n    targets.map(function (item) {\n      var model = item.get('model');\n      var nodeId = item.get('id');\n\n      if (!point[nodeId]) {\n        point[nodeId] = {\n          x: model.x || 0,\n          y: model.y || 0\n        };\n      }\n\n      var x = evt.x - origin.x + point[nodeId].x;\n      var y = evt.y - origin.y + point[nodeId].y;\n      var pos = {\n        x: x,\n        y: y\n      };\n\n      if (updateEdge) {\n        graph.updateItem(item, pos, false);\n      } else {\n        item.updatePosition(pos);\n      }\n    });\n  }, 50, true),\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e) {\n    var graph = this.graph;\n\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      var _a = this.calculationGroupPosition(e),\n          cx = _a.x,\n          cy = _a.y,\n          width = _a.width,\n          height = _a.height,\n          minX = _a.minX,\n          minY = _a.minY;\n\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      }; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegate = this.delegateRect;\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = e.x - this.origin.x + this.originPoint.minX;\n      var clientY = e.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var nodes = this.targets;\n\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"module"}