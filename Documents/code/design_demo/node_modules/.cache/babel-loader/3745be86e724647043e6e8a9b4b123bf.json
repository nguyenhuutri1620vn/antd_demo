{"ast":null,"code":"/*\n * Simple doubly linked list implementation derived from Cormen, et al.,\n * \"Introduction to Algorithms\".\n */\nconst unlink = entry => {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n};\n\nconst filterOutLinks = (k, v) => {\n  if (k !== \"_next\" && k !== \"_prev\") {\n    return v;\n  }\n};\n\nclass List {\n  constructor() {\n    const sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this.isentinel = sentinel;\n  }\n\n  dequeue() {\n    const sentinel = this.isentinel;\n    const entry = sentinel._prev;\n\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n\n  enqueue() {\n    const sentinel = this.isentinel;\n    const entry = sentinel._prev;\n\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n\n  toString() {\n    const strs = [];\n    const sentinel = this.isentinel;\n    let curr = sentinel._prev;\n\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n\n    return `[${strs.join(\", \")}]`;\n  }\n\n}\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}