{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { FlowchartFormWrapper } from '../../form-wrapper';\nimport { ColorPicker, InputNumberFiled, InputFiled, SelectField } from './fields';\nimport { PREFIX, DefaultEdgeConfig, ArrowStrokeMaps, ArrowMaps } from './constants';\n\nconst EdgeComponent = props => {\n  const {\n    config,\n    plugin = {}\n  } = props;\n  const {\n    updateEdge\n  } = plugin;\n  const [edgeConfig, setEdgeConfig] = useState(Object.assign(Object.assign({}, DefaultEdgeConfig), config));\n  useEffect(() => {\n    setEdgeConfig(Object.assign(Object.assign({}, DefaultEdgeConfig), config));\n  }, [config]);\n\n  const getAttrs = function (key) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'line';\n\n    var _a;\n\n    const {\n      attrs = {}\n    } = edgeConfig;\n    return (_a = attrs[type]) === null || _a === void 0 ? void 0 : _a[key];\n  };\n\n  const getArrowValue = () => {\n    var _a, _b, _c, _d, _e;\n\n    const {\n      attrs = {}\n    } = edgeConfig;\n    const {\n      line = {}\n    } = attrs;\n\n    if (((_a = line.sourceMarker) === null || _a === void 0 ? void 0 : _a.name) && ((_b = line.targetMarker) === null || _b === void 0 ? void 0 : _b.name)) {\n      return 'all';\n    }\n\n    if (!((_c = line.sourceMarker) === null || _c === void 0 ? void 0 : _c.name) && !((_d = line.targetMarker) === null || _d === void 0 ? void 0 : _d.name)) {\n      return 'none';\n    }\n\n    if ((_e = line.sourceMarker) === null || _e === void 0 ? void 0 : _e.name) {\n      return 'source';\n    }\n\n    return 'target';\n  };\n\n  const getSrokeDashValue = () => {\n    const {\n      attrs = {}\n    } = edgeConfig;\n    const {\n      line = {}\n    } = attrs;\n    return line.strokeDasharray ? 'dash' : 'solid';\n  };\n\n  const onEdgeConfigChange = function (key, value) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'line';\n\n    var _a, _b;\n    /** 全量更新，简化逻辑 */\n\n\n    if (key === 'arrow') {\n      setEdgeConfig(Object.assign(Object.assign({}, edgeConfig), {\n        attrs: Object.assign(Object.assign({}, edgeConfig.attrs), {\n          [type]: Object.assign(Object.assign({}, (_a = edgeConfig.attrs) === null || _a === void 0 ? void 0 : _a[type]), value)\n        })\n      }));\n    } else {\n      setEdgeConfig(Object.assign(Object.assign({}, edgeConfig), {\n        [key]: value,\n        attrs: Object.assign(Object.assign({}, edgeConfig.attrs), {\n          [type]: Object.assign(Object.assign({}, (_b = edgeConfig.attrs) === null || _b === void 0 ? void 0 : _b[type]), {\n            [key]: value\n          })\n        })\n      }));\n    }\n\n    updateEdge({\n      [key]: value\n    }, type, key === 'arrow' ? 'arrow' : '');\n  };\n\n  return React.createElement(\"div\", {\n    className: `${PREFIX}-panel-body`\n  }, React.createElement(\"div\", {\n    className: `${PREFIX}-panel-group`\n  }, React.createElement(\"h5\", null, \"\\u5185\\u5BB9\"), React.createElement(InputFiled, {\n    label: \"\\u6807\\u7B7E\",\n    value: edgeConfig.label,\n    onChange: value => {\n      onEdgeConfigChange('label', value);\n    }\n  })), React.createElement(\"h5\", {\n    style: {\n      marginBottom: 12\n    }\n  }, \"\\u6837\\u5F0F\"), React.createElement(\"div\", {\n    className: `${PREFIX}-panel-group`,\n    style: {\n      marginBottom: 0\n    }\n  }, React.createElement(\"h5\", null, \"\\u7EBF\"), React.createElement(SelectField, {\n    label: \"\\u7BAD\\u5934\",\n    value: getArrowValue(),\n    width: \"100%\",\n    options: [{\n      label: '正向',\n      value: 'target'\n    }, {\n      label: '逆向',\n      value: 'source'\n    }, {\n      label: '双向',\n      value: 'all'\n    }, {\n      label: '无',\n      value: 'none'\n    }],\n    onChange: value => {\n      onEdgeConfigChange('arrow', ArrowMaps[value], 'line');\n    }\n  }), React.createElement(\"div\", {\n    className: `${PREFIX}-edge-stroke-style`\n  }, React.createElement(SelectField, {\n    label: \"\\u7EBF\\u5F62\",\n    width: 68,\n    value: getSrokeDashValue(),\n    options: [{\n      label: '实线',\n      value: 'solid'\n    }, {\n      label: '虚线',\n      value: 'dash'\n    }],\n    onChange: value => {\n      onEdgeConfigChange('strokeDasharray', ArrowStrokeMaps[value], 'line');\n    }\n  }), React.createElement(InputNumberFiled, {\n    value: getAttrs('strokeWidth'),\n    min: 1,\n    onChange: value => {\n      onEdgeConfigChange('strokeWidth', value, 'line');\n    }\n  })), React.createElement(ColorPicker, {\n    label: \"\\u8FB9\\u6846\",\n    value: getAttrs('stroke'),\n    onChange: value => {\n      onEdgeConfigChange('stroke', value, 'line');\n    }\n  })), React.createElement(\"div\", {\n    className: `${PREFIX}-panel-group`\n  }, React.createElement(\"h5\", null, \"\\u6807\\u7B7E\"), React.createElement(\"div\", {\n    className: `${PREFIX}-edge-text-style`\n  }, React.createElement(InputNumberFiled, {\n    label: \"\\u5B57\\u53F7\",\n    min: 10,\n    width: 68,\n    value: getAttrs('fontSize', 'text') || 12,\n    onChange: value => {\n      onEdgeConfigChange('fontSize', value, 'text');\n    }\n  }), React.createElement(ColorPicker, {\n    value: getAttrs('fill', 'text') || '#000',\n    onChange: value => {\n      onEdgeConfigChange('fill', value, 'text');\n    }\n  }))));\n};\n\nexport const EdgeService = props => {\n  return React.createElement(FlowchartFormWrapper, Object.assign({}, props, {\n    type: \"edge\"\n  }), (config, plugin) => React.createElement(EdgeComponent, Object.assign({}, props, {\n    plugin: plugin,\n    config: config\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}