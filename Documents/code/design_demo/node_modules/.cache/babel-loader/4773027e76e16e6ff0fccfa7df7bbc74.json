{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as glUtils from './utils';\nimport { drawFrag, drawVert, fullScreenFrag, fullScreenVert, updateFrag, updateVert } from './windShader';\n\nfunction getColorRamp(colors) {\n  var canvas = document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  canvas.width = 256;\n  canvas.height = 1;\n  var gradient = ctx.createLinearGradient(0, 0, 256, 0);\n\n  for (var _i = 0, _Object$keys = Object.keys(colors); _i < _Object$keys.length; _i++) {\n    var stop = _Object$keys[_i];\n    gradient.addColorStop(+stop, colors[+stop]);\n  }\n\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, 256, 1);\n  canvas = null;\n  return new Uint8Array(ctx.getImageData(0, 0, 256, 1).data);\n}\n\nfunction bindAttribute(gl, buffer, attribute, numComponents) {\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n  gl.enableVertexAttribArray(attribute);\n  gl.vertexAttribPointer(attribute, numComponents, gl.FLOAT, false, 0, 0);\n}\n\nfunction bindFramebuffer(gl, framebuffer, texture) {\n  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n  if (texture) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  }\n}\n\nexport var Wind = function () {\n  function Wind(options) {\n    _classCallCheck(this, Wind);\n\n    _defineProperty(this, \"width\", 512);\n\n    _defineProperty(this, \"height\", 512);\n\n    _defineProperty(this, \"pixels\", void 0);\n\n    _defineProperty(this, \"fadeOpacity\", void 0);\n\n    _defineProperty(this, \"speedFactor\", void 0);\n\n    _defineProperty(this, \"dropRate\", void 0);\n\n    _defineProperty(this, \"dropRateBump\", void 0);\n\n    _defineProperty(this, \"gl\", void 0);\n\n    _defineProperty(this, \"drawProgram\", void 0);\n\n    _defineProperty(this, \"fullScreenProgram\", void 0);\n\n    _defineProperty(this, \"updateProgram\", void 0);\n\n    _defineProperty(this, \"rampColors\", void 0);\n\n    _defineProperty(this, \"numParticles\", 65536);\n\n    _defineProperty(this, \"numParticlesSize\", void 0);\n\n    _defineProperty(this, \"particleStateResolution\", void 0);\n\n    _defineProperty(this, \"quadBuffer\", void 0);\n\n    _defineProperty(this, \"particleIndexBuffer\", void 0);\n\n    _defineProperty(this, \"framebuffer\", void 0);\n\n    _defineProperty(this, \"colorRampTexture\", void 0);\n\n    _defineProperty(this, \"backgroundTexture\", void 0);\n\n    _defineProperty(this, \"screenTexture\", void 0);\n\n    _defineProperty(this, \"particleStateTexture0\", void 0);\n\n    _defineProperty(this, \"particleStateTexture1\", void 0);\n\n    _defineProperty(this, \"windTexture\", void 0);\n\n    _defineProperty(this, \"windData\", void 0);\n\n    this.gl = options.glContext;\n    this.width = options.imageWidth;\n    this.height = options.imageHeight;\n    this.fadeOpacity = options.fadeOpacity;\n    this.speedFactor = options.speedFactor;\n    this.dropRate = options.dropRate;\n    this.dropRateBump = options.dropRateBump;\n    this.rampColors = options.rampColors;\n    this.init();\n  }\n\n  _createClass(Wind, [{\n    key: \"init\",\n    value: function init() {\n      var gl = this.gl;\n      this.fadeOpacity = 0.996;\n      this.speedFactor = 0.25;\n      this.dropRate = 0.003;\n      this.dropRateBump = 0.01;\n      this.drawProgram = glUtils.createProgram(gl, drawVert, drawFrag);\n      this.fullScreenProgram = glUtils.createProgram(gl, fullScreenVert, fullScreenFrag);\n      this.updateProgram = glUtils.createProgram(gl, updateVert, updateFrag);\n      this.quadBuffer = glUtils.createBuffer(gl, new Float32Array([0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]));\n      this.framebuffer = gl.createFramebuffer();\n      this.colorRampTexture = glUtils.createTexture(this.gl, this.gl.LINEAR, getColorRamp(this.rampColors), 16, 16);\n      var emptyPixels = new Uint8Array(this.width * this.height * 4);\n      this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n      this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, this.width, this.height);\n      var particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n      this.numParticlesSize = particleRes * particleRes;\n      var particleState = new Uint8Array(this.numParticlesSize * 4);\n\n      for (var i = 0; i < particleState.length; i++) {\n        particleState[i] = Math.floor(Math.random() * 256);\n      }\n\n      this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n      var particleIndices = new Float32Array(this.numParticlesSize);\n\n      for (var i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n        particleIndices[i$1] = i$1;\n      }\n\n      this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n    }\n  }, {\n    key: \"setWind\",\n    value: function setWind(windData) {\n      this.windData = windData;\n      this.windTexture = glUtils.createDataTexture(this.gl, this.gl.LINEAR, windData.image);\n    }\n  }, {\n    key: \"updateParticelNum\",\n    value: function updateParticelNum(num) {\n      var gl = this.gl;\n\n      if (num !== this.numParticles) {\n        this.numParticles = num;\n        var particleRes = this.particleStateResolution = Math.ceil(Math.sqrt(this.numParticles));\n        this.numParticlesSize = particleRes * particleRes;\n        var particleState = new Uint8Array(this.numParticlesSize * 4);\n\n        for (var i = 0; i < particleState.length; i++) {\n          particleState[i] = Math.floor(Math.random() * 256);\n        }\n\n        this.particleStateTexture0 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n        this.particleStateTexture1 = glUtils.createTexture(gl, gl.NEAREST, particleState, particleRes, particleRes);\n        var particleIndices = new Float32Array(this.numParticlesSize);\n\n        for (var i$1 = 0; i$1 < this.numParticlesSize; i$1++) {\n          particleIndices[i$1] = i$1;\n        }\n\n        this.particleIndexBuffer = glUtils.createBuffer(gl, particleIndices);\n      }\n    }\n  }, {\n    key: \"updateWindDir\",\n    value: function updateWindDir(uMin, uMax, vMin, vMax) {\n      this.windData.uMin = uMin;\n      this.windData.uMax = uMax;\n      this.windData.vMin = vMin;\n      this.windData.vMax = vMax;\n    }\n  }, {\n    key: \"updateColorRampTexture\",\n    value: function updateColorRampTexture(rampColors) {\n      if (this.isColorChanged(rampColors)) {\n        this.rampColors = rampColors;\n        var gl = this.gl;\n        gl.deleteTexture(this.colorRampTexture);\n        this.colorRampTexture = glUtils.createTexture(gl, gl.LINEAR, getColorRamp(rampColors), 16, 16);\n      }\n    }\n  }, {\n    key: \"isColorChanged\",\n    value: function isColorChanged(rampColors) {\n      var keys = Object.keys(rampColors);\n\n      for (var _i2 = 0, _keys = keys; _i2 < _keys.length; _i2++) {\n        var item = _keys[_i2];\n\n        var _key = Number(item);\n\n        if (!this.rampColors[_key]) {\n          return true;\n        }\n\n        if (this.rampColors[_key] && this.rampColors[_key] !== rampColors[_key]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"reSize\",\n    value: function reSize(width, height) {\n      if (width !== this.width || height !== this.height) {\n        var gl = this.gl;\n        gl.deleteTexture(this.backgroundTexture);\n        gl.deleteTexture(this.screenTexture);\n        this.width = width;\n        this.height = height;\n        var emptyPixels = new Uint8Array(width * height * 4);\n        this.backgroundTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n        this.screenTexture = glUtils.createTexture(gl, gl.NEAREST, emptyPixels, width, height);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var _this$windData;\n\n      if ((_this$windData = this.windData) !== null && _this$windData !== void 0 && _this$windData.image) {\n        var gl = this.gl;\n        glUtils.bindTexture(gl, this.windTexture, 0);\n        glUtils.bindTexture(gl, this.particleStateTexture0, 1);\n        this.drawScreen();\n        this.updateParticles();\n        return {\n          d: this.pixels,\n          w: this.width,\n          h: this.height\n        };\n      } else {\n        return {\n          d: new Uint8Array([0, 0, 0, 0]),\n          w: 1,\n          h: 1\n        };\n      }\n    }\n  }, {\n    key: \"drawScreen\",\n    value: function drawScreen() {\n      var gl = this.gl;\n      bindFramebuffer(gl, this.framebuffer, this.screenTexture);\n      gl.viewport(0, 0, this.width, this.height);\n      this.drawFullTexture(this.backgroundTexture, this.fadeOpacity);\n      this.drawParticles();\n      gl.disable(gl.BLEND);\n      this.pixels = new Uint8Array(4 * this.width * this.height);\n      gl.readPixels(0, 0, this.width, this.height, gl.RGBA, gl.UNSIGNED_BYTE, this.pixels);\n      bindFramebuffer(gl, null, null);\n      gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n      var temp = this.backgroundTexture;\n      this.backgroundTexture = this.screenTexture;\n      this.screenTexture = temp;\n    }\n  }, {\n    key: \"drawFullTexture\",\n    value: function drawFullTexture(texture, opacity) {\n      var gl = this.gl;\n      var program = this.fullScreenProgram;\n      gl.useProgram(program);\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.quadBuffer);\n      gl.vertexAttribPointer(program.a_pos, 2, gl.FLOAT, false, 0, 0);\n      gl.enableVertexAttribArray(program.a_pos);\n      gl.bindBuffer(gl.ARRAY_BUFFER, null);\n      glUtils.bindTexture(gl, texture, 2);\n      gl.uniform1i(program.u_screen, 2);\n      gl.uniform1f(program.u_opacity, opacity);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n    }\n  }, {\n    key: \"drawParticles\",\n    value: function drawParticles() {\n      var gl = this.gl;\n      var program = this.drawProgram;\n      gl.useProgram(program);\n      bindAttribute(gl, this.particleIndexBuffer, program.a_index, 1);\n      glUtils.bindTexture(gl, this.colorRampTexture, 2);\n      gl.uniform1i(program.u_wind, 0);\n      gl.uniform1i(program.u_particles, 1);\n      gl.uniform1i(program.u_color_ramp, 2);\n      gl.uniform1f(program.u_particles_res, this.particleStateResolution);\n      gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n      gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n      gl.drawArrays(gl.POINTS, 0, this.numParticlesSize);\n    }\n  }, {\n    key: \"updateParticles\",\n    value: function updateParticles() {\n      var gl = this.gl;\n      bindFramebuffer(gl, this.framebuffer, this.particleStateTexture1);\n      gl.viewport(0, 0, this.particleStateResolution, this.particleStateResolution);\n      var program = this.updateProgram;\n      gl.useProgram(program);\n      bindAttribute(gl, this.quadBuffer, program.a_pos, 2);\n      gl.uniform1i(program.u_wind, 0);\n      gl.uniform1i(program.u_particles, 1);\n      gl.uniform1f(program.u_rand_seed, Math.random());\n      gl.uniform2f(program.u_wind_res, this.windData.image.width * 2, this.windData.image.height * 2);\n      gl.uniform2f(program.u_wind_min, this.windData.uMin, this.windData.vMin);\n      gl.uniform2f(program.u_wind_max, this.windData.uMax, this.windData.vMax);\n      gl.uniform1f(program.u_speed_factor, this.speedFactor);\n      gl.uniform1f(program.u_drop_rate, this.dropRate);\n      gl.uniform1f(program.u_drop_rate_bump, this.dropRateBump);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      var temp = this.particleStateTexture0;\n      this.particleStateTexture0 = this.particleStateTexture1;\n      this.particleStateTexture1 = temp;\n      bindFramebuffer(gl, null, null);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.gl.deleteBuffer(this.quadBuffer);\n      this.gl.deleteBuffer(this.particleIndexBuffer);\n      this.gl.deleteFramebuffer(this.framebuffer);\n      this.gl.deleteShader(this.drawProgram.vertexShader);\n      this.gl.deleteShader(this.drawProgram.fragmentShader);\n      this.gl.deleteProgram(this.drawProgram);\n      this.gl.deleteShader(this.fullScreenProgram.vertexShader);\n      this.gl.deleteShader(this.fullScreenProgram.fragmentShader);\n      this.gl.deleteProgram(this.fullScreenProgram);\n      this.gl.deleteShader(this.updateProgram.vertexShader);\n      this.gl.deleteShader(this.updateProgram.fragmentShader);\n      this.gl.deleteProgram(this.updateProgram);\n      this.gl.deleteTexture(this.colorRampTexture);\n      this.gl.deleteTexture(this.backgroundTexture);\n      this.gl.deleteTexture(this.screenTexture);\n      this.gl.deleteTexture(this.particleStateTexture0);\n      this.gl.deleteTexture(this.particleStateTexture1);\n      this.gl.deleteTexture(this.windTexture);\n    }\n  }]);\n\n  return Wind;\n}();","map":null,"metadata":{},"sourceType":"module"}