{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { HookHub } from '@antv/xflow-hook';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands } from '../constant';\n/** 从服务端获取画布数据命令 */\n\nexport var NsGraphLoadData;\n\n(function (NsGraphLoadData) {\n  /** Command: 用于注册named factory */\n  NsGraphLoadData.command = XFlowGraphCommands.LOAD_DATA;\n  /** hookName */\n\n  NsGraphLoadData.hookKey = 'loadData';\n\n  NsGraphLoadData.createHook = () => {\n    return new HookHub();\n  };\n})(NsGraphLoadData || (NsGraphLoadData = {}));\n\nlet GraphLoadDataCommand =\n/** 画布数据获取命令 */\nclass GraphLoadDataCommand {\n  constructor() {\n    /** 执行cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.loadData.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          loadDataService\n        } = handlerArgs;\n        const graphMeta = yield this.ctx.getGraphMeta();\n        const graphData = yield loadDataService(graphMeta);\n        return {\n          graphData\n        };\n      }), runtimeHook);\n      /** 设置结果 */\n\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphLoadDataCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphLoadDataCommand.prototype, \"init\", null);\n\nGraphLoadDataCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphLoadData.command.id\n  }\n})\n/** 画布数据获取命令 */\n], GraphLoadDataCommand);\nexport { GraphLoadDataCommand };","map":null,"metadata":{},"sourceType":"module"}