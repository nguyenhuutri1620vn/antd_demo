{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { each, isNil, isObject } from '@antv/util';\nimport { AXIS_META_CONFIG_KEYS } from '../constant';\nimport { pick, deepAssign } from '../utils';\n/**\n * 通用 legend 配置, 适用于带 colorField 或 seriesField 的图表\n * @param params\n */\n\nexport function legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField,\n      seriesField = options.seriesField;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField || seriesField) {\n    chart.legend(colorField || seriesField, legend);\n  }\n\n  return params;\n}\n/**\n * 通用 tooltip 配置\n * @param params\n */\n\nexport function tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n\n  if (tooltip !== undefined) {\n    chart.tooltip(tooltip);\n  }\n\n  return params;\n}\n/**\n * Interaction 配置\n * @param params\n */\n\nexport function interaction(params) {\n  var chart = params.chart,\n      options = params.options;\n  var interactions = options.interactions;\n  each(interactions, function (i) {\n    if (i.enable === false) {\n      chart.removeInteraction(i.type);\n    } else {\n      chart.interaction(i.type, i.cfg || {});\n    }\n  });\n  return params;\n}\n/**\n * 动画\n * @param params\n */\n\nexport function animation(params) {\n  var chart = params.chart,\n      options = params.options;\n  var animation = options.animation; // 同时设置整个 view 动画选项\n\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  } // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n\n\n  each(chart.geometries, function (g) {\n    g.animate(animation);\n  });\n  return params;\n}\n/**\n * 设置全局主题配置\n * @param params\n */\n\nexport function theme(params) {\n  var chart = params.chart,\n      options = params.options;\n  var theme = options.theme; // 存在主题才设置主题\n\n  if (theme) {\n    chart.theme(theme);\n  }\n\n  return params;\n}\n/**\n * 状态 state 配置\n * @param params\n */\n\nexport function state(params) {\n  var chart = params.chart,\n      options = params.options;\n  var state = options.state;\n\n  if (state) {\n    each(chart.geometries, function (geometry) {\n      geometry.state(state);\n    });\n  }\n\n  return params;\n}\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\n\nexport function slider(params) {\n  var chart = params.chart,\n      options = params.options;\n  var slider = options.slider;\n  chart.option('slider', slider);\n  return params;\n}\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\n\nexport function scrollbar(params) {\n  var chart = params.chart,\n      options = params.options;\n  var scrollbar = options.scrollbar;\n  chart.option('scrollbar', scrollbar);\n  return params;\n}\n/**\n * scale 的 adaptor\n * @param axes\n */\n\nexport function scale(axes, meta) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options; // 1. 轴配置中的 scale 信息\n\n    var scales = {};\n    each(axes, function (axis, field) {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    }); // 2. meta 直接是 scale 的信息\n\n    scales = deepAssign({}, meta, options.meta, scales);\n    chart.scale(scales);\n    return params;\n  };\n}\n/**\n * annotation 配置\n * @param params\n */\n\nexport function annotation(annotationOptions) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options;\n    var annotationController = chart.getController('annotation');\n    /** 自定义 annotation */\n\n    each(__spreadArrays(options.annotations || [], annotationOptions || []), function (annotationOption) {\n      // @ts-ignore\n      annotationController.annotation(annotationOption);\n    });\n    return params;\n  };\n}\n/**\n * 自动设置 limitInPlot\n * @param params\n */\n\nexport function limitInPlot(params) {\n  var chart = params.chart,\n      options = params.options;\n  var yAxis = options.yAxis,\n      limitInPlot = options.limitInPlot;\n  var value = limitInPlot; // 用户没有设置 limitInPlot，则自动根据 yAxis 是否有 min/max 来设置 limitInPlot\n\n  if (isObject(yAxis) && isNil(limitInPlot)) {\n    if (Object.values(pick(yAxis, ['min', 'max', 'minLimit', 'maxLimit'])).some(function (value) {\n      return !isNil(value);\n    })) {\n      value = true;\n    } else {\n      value = false;\n    }\n  }\n\n  chart.limitInPlot = value;\n  return params;\n}\nexport { pattern } from './pattern';","map":null,"metadata":{},"sourceType":"module"}