{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport React from 'react';\nimport { XFlowModelCommands, Disposable, MODELS, useXFlowApp, DisposableCollection, createComponentModel } from '@antv/xflow';\nexport var NsJsonSchemaFormModel;\n\n(function (NsJsonSchemaFormModel) {\n  var _this = this;\n\n  NsJsonSchemaFormModel.id = 'XFLOW_JSON_SCHEMA_FORM';\n\n  NsJsonSchemaFormModel.useModel = function (model) {\n    return __awaiter(_this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , model.awaitModel(NsJsonSchemaFormModel.id)];\n      });\n    });\n  };\n})(NsJsonSchemaFormModel || (NsJsonSchemaFormModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\n\n\nexport var executeJsonSchemaFormCommand = function (cmds, updateModel) {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: function (modelService) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , NsJsonSchemaFormModel.useModel(modelService)];\n        });\n      });\n    },\n    updateModel: updateModel\n  });\n};\nexport var useJsonSchemaFormModel = function (props) {\n  var app = useXFlowApp();\n  var commandService = app.commandService,\n      modelService = app.modelService;\n  var formSchemaService = props.formSchemaService;\n\n  var _a = createComponentModel({\n    schema: {\n      tabs: []\n    },\n    targetType: null,\n    targetData: null,\n    targetCell: null,\n    loading: false\n  }),\n      state = _a[0],\n      setState = _a[1],\n      model = _a[2],\n      isModelReady = _a[3];\n  /** 注册全局的model */\n\n\n  React.useEffect(function () {\n    if (!app || !app.modelService) {\n      return null;\n    }\n\n    var toDispose = new DisposableCollection();\n    var deferredModel = app.modelService.findDeferredModel(NsJsonSchemaFormModel.id);\n\n    if (!deferredModel) {\n      var d = app.modelService.registerModel({\n        id: NsJsonSchemaFormModel.id,\n        modelFactory: function () {\n          return model;\n        },\n\n        /** 监听SELECTED_CELL的变化 */\n        watchChange: function (self, modelSerccie) {\n          return __awaiter(void 0, void 0, void 0, function () {\n            var selectedCellModel, nodeDisposable;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , MODELS.SELECTED_CELL.getModel(modelSerccie)];\n\n                case 1:\n                  selectedCellModel = _a.sent();\n                  nodeDisposable = selectedCellModel.watch(function (cell) {\n                    return __awaiter(void 0, void 0, void 0, function () {\n                      var updateState, getCellType, targetCellType;\n                      return __generator(this, function (_a) {\n                        switch (_a.label) {\n                          case 0:\n                            updateState = function (targetCell, type) {\n                              return __awaiter(void 0, void 0, void 0, function () {\n                                var targetData, schema;\n                                return __generator(this, function (_a) {\n                                  switch (_a.label) {\n                                    case 0:\n                                      self.setValue(function (m) {\n                                        m.loading = true;\n                                      });\n                                      targetData = targetCell ? targetCell.getData() : null;\n                                      return [4\n                                      /*yield*/\n                                      , formSchemaService({\n                                        commandService: commandService,\n                                        modelService: modelService,\n                                        targetData: targetData,\n                                        cell: targetCell,\n                                        targetType: type\n                                      })];\n\n                                    case 1:\n                                      schema = _a.sent();\n                                      self.setValue({\n                                        loading: false,\n                                        schema: schema,\n                                        targetType: type,\n                                        targetCell: targetCell,\n                                        targetData: targetData\n                                      });\n                                      return [2\n                                      /*return*/\n                                      ];\n                                  }\n                                });\n                              });\n                            };\n\n                            getCellType = function (targetCell) {\n                              if (!targetCell) {\n                                return 'canvas';\n                              } else if (targetCell.isGroup && targetCell.isGroup()) {\n                                return 'group';\n                              } else if (targetCell.isNode && targetCell.isNode()) {\n                                return 'node';\n                              } else if (targetCell.isEdge && targetCell.isEdge()) {\n                                return 'edge';\n                              } else {\n                                return 'canvas';\n                              }\n                            };\n\n                            targetCellType = getCellType(cell);\n                            if (!(props.targetType || ['node', 'canvas']).includes(targetCellType)) return [3\n                            /*break*/\n                            , 2];\n                            return [4\n                            /*yield*/\n                            , updateState(cell, targetCellType)];\n\n                          case 1:\n                            _a.sent();\n\n                            _a.label = 2;\n\n                          case 2:\n                            return [2\n                            /*return*/\n                            ];\n                        }\n                      });\n                    });\n                  });\n                  return [2\n                  /*return*/\n                  , Disposable.create(function () {\n                    nodeDisposable.dispose();\n                    toDispose.push(nodeDisposable);\n                  })];\n              }\n            });\n          });\n        }\n      });\n      toDispose.push(d);\n    }\n\n    return function () {\n      toDispose.dispose();\n    };\n    /* eslint-disable-next-line  */\n  }, []);\n  return {\n    commandService: commandService,\n    modelService: modelService,\n    state: state,\n    setState: setState,\n    model: model,\n    isModelReady: isModelReady\n  };\n};","map":null,"metadata":{},"sourceType":"module"}