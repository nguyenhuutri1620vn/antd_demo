{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { useXFlowApp, DisposableCollection, createComponentModel } from '@antv/xflow-core';\nimport { XFlowModelCommands, Disposable, MODELS } from '@antv/xflow-core';\nexport var NsJsonSchemaFormModel;\n\n(function (NsJsonSchemaFormModel) {\n  NsJsonSchemaFormModel.id = 'XFLOW_JSON_SCHEMA_FORM';\n\n  NsJsonSchemaFormModel.useModel = model => __awaiter(this, void 0, void 0, function* () {\n    return model.awaitModel(NsJsonSchemaFormModel.id);\n  });\n})(NsJsonSchemaFormModel || (NsJsonSchemaFormModel = {}));\n/** 方便其他组件执行Command改变Panel内部状态 */\n\n\nexport const executeJsonSchemaFormCommand = (cmds, updateModel) => {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: modelService => __awaiter(void 0, void 0, void 0, function* () {\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      return NsJsonSchemaFormModel.useModel(modelService);\n    }),\n    updateModel: updateModel\n  });\n};\nexport const useJsonSchemaFormModel = props => {\n  const app = useXFlowApp();\n  const {\n    commandService,\n    modelService,\n    getGraphInstance\n  } = app;\n  const {\n    formSchemaService\n  } = props;\n  const [state, setState, model, isModelReady] = createComponentModel({\n    schema: {\n      tabs: []\n    },\n    targetType: null,\n    targetData: null,\n    targetCell: null,\n    loading: false\n  });\n  /** 注册全局的model */\n\n  React.useEffect(() => {\n    if (!app || !app.modelService) {\n      return;\n    }\n\n    const toDispose = new DisposableCollection();\n    const deferredModel = app.modelService.findDeferredModel(NsJsonSchemaFormModel.id);\n\n    if (!deferredModel) {\n      const d = app.modelService.registerModel({\n        id: NsJsonSchemaFormModel.id,\n        modelFactory: () => model,\n\n        /** 监听SELECTED_CELL的变化 */\n        watchChange: (self, modelSerccie) => __awaiter(void 0, void 0, void 0, function* () {\n          const selectedCellModel = yield MODELS.SELECTED_CELL.getModel(modelSerccie);\n          const nodeDisposable = selectedCellModel.watch(cell => __awaiter(void 0, void 0, void 0, function* () {\n            const updateState = (targetCell, type) => __awaiter(void 0, void 0, void 0, function* () {\n              self.setValue(m => {\n                m.loading = true;\n                m.schema = {\n                  tabs: []\n                };\n                m.targetType = null;\n                m.targetData = null;\n                m.targetCell = null;\n              });\n              const targetData = targetCell ? targetCell.getData() : null;\n\n              if (!formSchemaService) {\n                return;\n              }\n\n              const graph = yield getGraphInstance();\n              const schema = yield formSchemaService({\n                commandService,\n                modelService,\n                targetData,\n                cell: targetCell,\n                targetType: type,\n                graph\n              });\n              self.setValue({\n                loading: false,\n                schema: schema,\n                targetType: type,\n                targetCell: targetCell,\n                targetData: targetData\n              });\n            });\n\n            const getCellType = targetCell => {\n              if (!targetCell) {\n                return 'canvas';\n              } else if (targetCell.isNode && targetCell.isNode() && targetCell.getProp('isGroup')) {\n                return 'group';\n              } else if (targetCell.isNode && targetCell.isNode()) {\n                return 'node';\n              } else if (targetCell.isEdge && targetCell.isEdge()) {\n                return 'edge';\n              } else {\n                return 'canvas';\n              }\n            };\n\n            const targetCellType = getCellType(cell);\n\n            if ((props.targetType || ['node', 'canvas']).includes(targetCellType)) {\n              yield updateState(cell, targetCellType);\n            }\n          }));\n          return Disposable.create(() => {\n            nodeDisposable.dispose();\n            toDispose.push(nodeDisposable);\n          });\n        })\n      });\n      toDispose.push(d);\n    }\n\n    return () => {\n      toDispose.dispose();\n    };\n    /* eslint-disable-next-line  */\n  }, []);\n  return {\n    commandService,\n    modelService,\n    state,\n    setState,\n    model,\n    isModelReady\n  };\n};","map":null,"metadata":{},"sourceType":"module"}