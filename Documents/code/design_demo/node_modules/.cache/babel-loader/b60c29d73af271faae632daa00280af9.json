{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport rewind from '@mapbox/geojson-rewind';\nexport default function json(data, cfg) {\n  var x = cfg.x,\n      y = cfg.y,\n      x1 = cfg.x1,\n      y1 = cfg.y1,\n      coordinates = cfg.coordinates;\n  var resultData = [];\n  data.forEach(function (col, featureIndex) {\n    var coords = [];\n\n    if (x && y) {\n      coords = [parseFloat(col[x]), parseFloat(col[y])];\n    }\n\n    if (x && y && x1 && y1) {\n      var from = [parseFloat(col[x]), parseFloat(col[y])];\n      var to = [parseFloat(col[x1]), parseFloat(col[y1])];\n      coords = [from, to];\n    }\n\n    if (coordinates) {\n      var type = 'Polygon';\n\n      if (!Array.isArray(coordinates[0])) {\n        type = 'Point';\n      }\n\n      if (Array.isArray(coordinates[0]) && !Array.isArray(coordinates[0][0])) {\n        type = 'LineString';\n      }\n\n      var geometry = {\n        type: type,\n        coordinates: _toConsumableArray(col[coordinates])\n      };\n      rewind(geometry, true);\n      coords = geometry.coordinates;\n    }\n\n    var dataItem = _objectSpread(_objectSpread({}, col), {}, {\n      _id: featureIndex,\n      coordinates: coords\n    });\n\n    resultData.push(dataItem);\n  });\n  return {\n    dataArray: resultData\n  };\n}\nexport var defaultData = [{\n  lng1: 100,\n  lat1: 30.0,\n  lng2: 130,\n  lat2: 30\n}];\nexport var defaultParser = {\n  parser: {\n    type: 'json',\n    x: 'lng1',\n    y: 'lat1',\n    x1: 'lng2',\n    y1: 'lat2'\n  }\n};","map":null,"metadata":{},"sourceType":"module"}