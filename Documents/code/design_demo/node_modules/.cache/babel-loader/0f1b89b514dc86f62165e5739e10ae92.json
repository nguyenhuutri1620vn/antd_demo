{"ast":null,"code":"import { Point } from '../../geometry';\n\nfunction toPercentage(value, max) {\n  if (max === 0) {\n    return '0%';\n  }\n\n  return `${Math.round(value / max * 100)}%`;\n}\n\nfunction pin(relative) {\n  const strategy = (terminal, view, magnet, coords) => {\n    return view.isEdgeElement(magnet) ? pinEdgeTerminal(relative, terminal, view, magnet, coords) : pinNodeTerminal(relative, terminal, view, magnet, coords);\n  };\n\n  return strategy;\n}\n\nfunction pinNodeTerminal(relative, data, view, magnet, coords) {\n  const node = view.cell;\n  const angle = node.getAngle();\n  const bbox = view.getUnrotatedBBoxOfElement(magnet);\n  const center = node.getBBox().getCenter();\n  const pos = Point.create(coords).rotate(angle, center);\n  let dx = pos.x - bbox.x;\n  let dy = pos.y - bbox.y;\n\n  if (relative) {\n    dx = toPercentage(dx, bbox.width);\n    dy = toPercentage(dy, bbox.height);\n  }\n\n  data.anchor = {\n    name: 'topLeft',\n    args: {\n      dx,\n      dy,\n      rotate: true\n    }\n  };\n  return data;\n}\n\nfunction pinEdgeTerminal(relative, end, view, magnet, coords) {\n  const connection = view.getConnection();\n\n  if (!connection) {\n    return end;\n  }\n\n  const length = connection.closestPointLength(coords);\n\n  if (relative) {\n    const totalLength = connection.length();\n    end.anchor = {\n      name: 'ratio',\n      args: {\n        ratio: length / totalLength\n      }\n    };\n  } else {\n    end.anchor = {\n      name: 'length',\n      args: {\n        length\n      }\n    };\n  }\n\n  return end;\n}\n\nexport const pinRelative = pin(true);\nexport const pinAbsolute = pin(false);","map":null,"metadata":{},"sourceType":"module"}