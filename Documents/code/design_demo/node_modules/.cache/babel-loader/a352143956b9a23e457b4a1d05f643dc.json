{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { mat3, vec3 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../identifier';\nimport { Mask } from '../../shape/Frustum';\nimport { getRotationScale } from '../../utils/math';\nexport var MeshSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MeshComponentManager), _dec3 = inject(IDENTIFIER.CullableComponentManager), _dec4 = inject(IDENTIFIER.GeometryComponentManager), _dec5 = inject(IDENTIFIER.HierarchyComponentManager), _dec6 = inject(IDENTIFIER.TransformComponentManager), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function MeshSystem() {\n    _classCallCheck(this, MeshSystem);\n\n    _initializerDefineProperty(this, \"mesh\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"cullable\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"geometry\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"hierarchy\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"transform\", _descriptor5, this);\n\n    this.planes = void 0;\n  }\n\n  _createClass(MeshSystem, [{\n    key: \"setFrustumPlanes\",\n    value: function setFrustumPlanes(planes) {\n      this.planes = planes;\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(views) {\n        var _iterator, _step, view, scene, camera, _iterator2, _step2, entity, component, hierarchyComponent, cullableComponent, geometryComponent, meshTransform, worldTransform, _geometryComponent$aa, center, halfExtents, transformedCenter, rotationScale, transformedHalfExtents, parentCullableComponent;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(views);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    view = _step.value;\n                    scene = view.getScene();\n                    camera = view.getCamera(); // get VP matrix from camera\n\n                    _iterator2 = _createForOfIteratorHelper(scene.getEntities());\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        entity = _step2.value;\n                        component = this.mesh.getComponentByEntity(entity);\n\n                        if (component) {\n                          hierarchyComponent = this.hierarchy.getComponentByEntity(entity);\n                          cullableComponent = this.cullable.getComponentByEntity(entity);\n                          geometryComponent = component.geometry;\n                          meshTransform = this.transform.getComponentByEntity(entity); // update mesh.aabb\n\n                          if (geometryComponent && geometryComponent.aabb && meshTransform && component.aabbDirty) {\n                            worldTransform = meshTransform.worldTransform; // apply transform to geometry.aabb\n\n                            _geometryComponent$aa = geometryComponent.aabb, center = _geometryComponent$aa.center, halfExtents = _geometryComponent$aa.halfExtents;\n                            transformedCenter = vec3.transformMat4(vec3.create(), center, worldTransform);\n                            rotationScale = getRotationScale(worldTransform, mat3.create());\n                            transformedHalfExtents = vec3.transformMat3(vec3.create(), halfExtents, rotationScale);\n                            component.aabb.update(transformedCenter, transformedHalfExtents);\n                            component.aabbDirty = false;\n                          } // culling\n\n\n                          if (cullableComponent && geometryComponent) {\n                            parentCullableComponent = this.cullable.getComponentByEntity((hierarchyComponent === null || hierarchyComponent === void 0 ? void 0 : hierarchyComponent.parentID) || -1);\n                            cullableComponent.visibilityPlaneMask = this.computeVisibilityWithPlaneMask(component.aabb, (parentCullableComponent === null || parentCullableComponent === void 0 ? void 0 : parentCullableComponent.visibilityPlaneMask) || Mask.INDETERMINATE, this.planes || camera.getFrustum().planes);\n                            cullableComponent.visible = cullableComponent.visibilityPlaneMask !== Mask.OUTSIDE;\n                          }\n                        }\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.cullable.clear();\n      this.mesh.clear();\n    }\n    /**\n     *\n     * @see「Optimized View Frustum Culling Algorithms for Bounding Boxes」\n     * @see https://github.com/antvis/GWebGPUEngine/issues/3\n     *\n     * * 基础相交测试 the basic intersection test\n     * * 标记 masking @see https://cesium.com/blog/2015/08/04/fast-hierarchical-culling/\n     * * TODO: 平面一致性测试 the plane-coherency test\n     * * TODO: 支持 mesh 指定自身的剔除策略，参考 Babylon.js @see https://doc.babylonjs.com/how_to/optimizing_your_scene#changing-mesh-culling-strategy\n     *\n     * @param aabb aabb\n     * @param parentPlaneMask mask of parent\n     * @param planes planes of frustum\n     */\n\n  }, {\n    key: \"computeVisibilityWithPlaneMask\",\n    value: function computeVisibilityWithPlaneMask(aabb, parentPlaneMask, planes) {\n      if (parentPlaneMask === Mask.OUTSIDE || parentPlaneMask === Mask.INSIDE) {\n        // 父节点完全位于视锥内或者外部，直接返回\n        return parentPlaneMask;\n      } // Start with MASK_INSIDE (all zeros) so that after the loop, the return value can be compared with MASK_INSIDE.\n      // (Because if there are fewer than 31 planes, the upper bits wont be changed.)\n\n\n      var mask = Mask.INSIDE;\n\n      for (var k = 0, len = planes.length; k < len; ++k) {\n        // For k greater than 31 (since 31 is the maximum number of INSIDE/INTERSECTING bits we can store), skip the optimization.\n        var flag = k < 31 ? 1 << k : 0;\n\n        if (k < 31 && (parentPlaneMask & flag) === 0) {\n          // 父节点处于当前面内部，可以跳过\n          continue;\n        } // 使用 p-vertex 和 n-vertex 加速，避免进行平面和 aabb 全部顶点的相交检测\n\n\n        var _planes$k = planes[k],\n            normal = _planes$k.normal,\n            distance = _planes$k.distance;\n\n        if (vec3.dot(normal, aabb.getNegativeFarPoint(planes[k])) + distance > 0) {\n          return Mask.OUTSIDE;\n        }\n\n        if (vec3.dot(normal, aabb.getPositiveFarPoint(planes[k])) + distance > 0) {\n          // 和当前面相交，对应位置为1，继续检测下一个面\n          mask |= flag;\n        }\n      }\n\n      return mask;\n    }\n  }]);\n\n  return MeshSystem;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"cullable\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"geometry\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"hierarchy\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, \"transform\", [_dec6], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":null,"metadata":{},"sourceType":"module"}