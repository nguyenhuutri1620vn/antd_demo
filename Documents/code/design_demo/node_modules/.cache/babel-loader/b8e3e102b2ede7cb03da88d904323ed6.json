{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../../identifier';\nimport { decodePickingColor } from '../../../utils/math';\nimport { RenderPass } from './RenderPass';\nvar PickingStage = {\n  NONE: 0.0,\n  ENCODE: 1.0,\n  HIGHLIGHT: 2.0\n};\n/**\n * color-based picking\n * @see https://threejsfundamentals.org/threejs/lessons/threejs-picking.html\n */\n\nexport var PixelPickingPass = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec3 = inject(IDENTIFIER.ResourcePool), _dec4 = inject(IDENTIFIER.RenderPassFactory), _dec5 = inject(IDENTIFIER.MeshComponentManager), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function () {\n  function PixelPickingPass() {\n    var _this = this;\n\n    _classCallCheck(this, PixelPickingPass);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"resourcePool\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"renderPassFactory\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"mesh\", _descriptor4, this);\n\n    this.pickingFBO = void 0;\n    this.views = void 0;\n    this.highlightEnabled = true;\n    this.highlightColor = [255, 0, 0, 255];\n    this.alreadyInRendering = false;\n\n    this.setup = function (fg, passNode, pass) {\n      var output = fg.createRenderTarget(passNode, 'picking fbo', {\n        width: 1,\n        height: 1\n      });\n      pass.data = {\n        output: passNode.write(fg, output)\n      }; // 防止被 FrameGraph 剔除\n\n      passNode.hasSideEffect = true;\n    };\n\n    this.execute = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fg, pass, views) {\n        var _iterator, _step, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this.views = views;\n\n                if (!_this.alreadyInRendering) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _iterator = _createForOfIteratorHelper(views);\n\n                try {\n                  _loop = function _loop() {\n                    var view = _step.value;\n\n                    var _view$getViewport = view.getViewport(),\n                        width = _view$getViewport.width,\n                        height = _view$getViewport.height; // throttled\n\n\n                    _this.alreadyInRendering = true; // 实例化资源\n\n                    var resourceNode = fg.getResourceNode(pass.data.output);\n                    _this.pickingFBO = _this.resourcePool.getOrCreateResource(resourceNode.resource); // TODO: only draw 1x1 quad, with offset camera\n\n                    _this.pickingFBO.resize({\n                      width: width,\n                      height: height\n                    });\n\n                    _this.engine.useFramebuffer(_this.pickingFBO, function () {\n                      _this.engine.clear({\n                        framebuffer: _this.pickingFBO,\n                        color: [0, 0, 0, 0],\n                        stencil: 0,\n                        depth: 1\n                      }); // 渲染\n\n\n                      var renderPass = _this.renderPassFactory(RenderPass.IDENTIFIER); // 修改所有\n\n\n                      var meshes = [];\n                      var scene = view.getScene();\n\n                      var _iterator2 = _createForOfIteratorHelper(scene.getEntities()),\n                          _step2;\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          var meshEntity = _step2.value;\n\n                          var mesh = _this.mesh.getComponentByEntity(meshEntity);\n\n                          var material = mesh.material;\n                          material.setUniform('u_PickingStage', PickingStage.ENCODE);\n                          meshes.push(mesh);\n                        } // @ts-ignore\n\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n\n                      renderPass.renderView(view);\n                      meshes.forEach(function (mesh) {\n                        var material = mesh.material;\n                        material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n                      });\n                      _this.alreadyInRendering = false;\n                    });\n                  };\n\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _loop();\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.pick = function (_ref2, view) {\n      var x = _ref2.x,\n          y = _ref2.y;\n      var _this$engine = _this.engine,\n          readPixels = _this$engine.readPixels,\n          useFramebuffer = _this$engine.useFramebuffer;\n\n      var _view$getViewport2 = view.getViewport(),\n          width = _view$getViewport2.width,\n          height = _view$getViewport2.height;\n\n      var xInDevicePixel = x * window.devicePixelRatio;\n      var yInDevicePixel = y * window.devicePixelRatio; // const xInDevicePixel = x;\n      // const yInDevicePixel = y;\n\n      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {\n        return;\n      }\n\n      var pickedColors;\n      var pickedFeatureIdx;\n      useFramebuffer(_this.pickingFBO, function () {\n        // avoid realloc\n        pickedColors = readPixels({\n          x: Math.round(xInDevicePixel),\n          // 视口坐标系原点在左上，而 WebGL 在左下，需要翻转 Y 轴\n          y: Math.round(height - (y + 1) * window.devicePixelRatio),\n          // y: Math.round(height - (y + 1)),\n          width: 1,\n          height: 1,\n          data: new Uint8Array(1 * 1 * 4),\n          framebuffer: _this.pickingFBO\n        });\n\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          pickedFeatureIdx = decodePickingColor(pickedColors);\n\n          if (_this.highlightEnabled) {\n            // 高亮\n            _this.highlightPickedFeature(pickedColors, view);\n          }\n        }\n      });\n      return pickedFeatureIdx;\n    };\n  }\n\n  _createClass(PixelPickingPass, [{\n    key: \"enableHighlight\",\n    value: function enableHighlight(enabled) {\n      this.highlightEnabled = enabled;\n    }\n  }, {\n    key: \"setHighlightColor\",\n    value: function setHighlightColor(color) {\n      this.highlightColor = color;\n    }\n  }, {\n    key: \"highlightPickedFeature\",\n\n    /**\n     * highlight 如果直接修改选中 feature 的 buffer，存在两个问题：\n     * 1. 鼠标移走时无法恢复\n     * 2. 无法实现高亮颜色与原始原色的 alpha 混合\n     * 因此高亮还是放在 shader 中做比较好\n     */\n    value: function highlightPickedFeature(pickedColors, view) {\n      if (pickedColors) {\n        var _iterator3 = _createForOfIteratorHelper(view.getScene().getEntities()),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var meshEntity = _step3.value;\n            var mesh = this.mesh.getComponentByEntity(meshEntity);\n            var material = mesh.material;\n            material.setUniform('u_PickingStage', PickingStage.HIGHLIGHT);\n            material.setUniform('u_PickingColor', [pickedColors[0], pickedColors[1], pickedColors[2]]);\n            material.setUniform('u_HighlightColor', this.highlightColor);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n    }\n  }]);\n\n  return PixelPickingPass;\n}(), _class3.IDENTIFIER = 'PixelPicking Pass', _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"resourcePool\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"renderPassFactory\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"mesh\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":null,"metadata":{},"sourceType":"module"}