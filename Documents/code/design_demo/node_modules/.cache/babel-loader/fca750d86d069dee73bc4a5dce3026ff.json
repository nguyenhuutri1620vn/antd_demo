{"ast":null,"code":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\n\nfunction unwrapExports(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar isArrayLike_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = isArrayLike;\n\n  function isArrayLike(value) {\n    return value && typeof value.length === 'number' && value.length >= 0 && value.length % 1 === 0;\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(isArrayLike_1);\nvar initialParams = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (fn) {\n    return function\n      /*, callback*/\n    () {\n      var args = [],\n          len = arguments.length;\n\n      while (len--) args[len] = arguments[len];\n\n      var callback = args.pop();\n      return fn.call(this, args, callback);\n    };\n  };\n\n  module.exports = exports[\"default\"];\n});\nunwrapExports(initialParams);\nvar setImmediate_1 = createCommonjsModule(function (module, exports) {\n  /* istanbul ignore file */\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.fallback = fallback;\n  exports.wrap = wrap;\n  var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\n  var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\n  function fallback(fn) {\n    setTimeout(fn, 0);\n  }\n\n  function wrap(defer) {\n    return function (fn) {\n      var args = [],\n          len = arguments.length - 1;\n\n      while (len-- > 0) args[len] = arguments[len + 1];\n\n      return defer(function () {\n        return fn.apply(void 0, args);\n      });\n    };\n  }\n\n  var _defer;\n\n  if (hasSetImmediate) {\n    _defer = setImmediate;\n  } else if (hasNextTick) {\n    _defer = process.nextTick;\n  } else {\n    _defer = fallback;\n  }\n\n  exports.default = wrap(_defer);\n});\nunwrapExports(setImmediate_1);\nvar setImmediate_2 = setImmediate_1.fallback;\nvar setImmediate_3 = setImmediate_1.wrap;\nvar setImmediate_4 = setImmediate_1.hasSetImmediate;\nvar setImmediate_5 = setImmediate_1.hasNextTick;\nvar asyncify_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = asyncify;\n\n  var _initialParams2 = _interopRequireDefault(initialParams);\n\n  var _setImmediate2 = _interopRequireDefault(setImmediate_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  /**\n   * Take a sync function and make it async, passing its return value to a\n   * callback. This is useful for plugging sync functions into a waterfall,\n   * series, or other async functions. Any arguments passed to the generated\n   * function will be passed to the wrapped function (except for the final\n   * callback argument). Errors thrown will be passed to the callback.\n   *\n   * If the function passed to `asyncify` returns a Promise, that promises's\n   * resolved/rejected state will be used to call the callback, rather than simply\n   * the synchronous return value.\n   *\n   * This also means you can asyncify ES2017 `async` functions.\n   *\n   * @name asyncify\n   * @static\n   * @memberOf module:Utils\n   * @method\n   * @alias wrapSync\n   * @category Util\n   * @param {Function} func - The synchronous function, or Promise-returning\n   * function to convert to an {@link AsyncFunction}.\n   * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n   * invoked with `(args..., callback)`.\n   * @example\n   *\n   * // passing a regular synchronous function\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(JSON.parse),\n   *     function (data, next) {\n   *         // data is the result of parsing the text.\n   *         // If there was a parsing error, it would have been caught.\n   *     }\n   * ], callback);\n   *\n   * // passing a function returning a promise\n   * async.waterfall([\n   *     async.apply(fs.readFile, filename, \"utf8\"),\n   *     async.asyncify(function (contents) {\n   *         return db.model.create(contents);\n   *     }),\n   *     function (model, next) {\n   *         // `model` is the instantiated model object.\n   *         // If there was an error, this function would be skipped.\n   *     }\n   * ], callback);\n   *\n   * // es2017 example, though `asyncify` is not needed if your JS environment\n   * // supports async functions out of the box\n   * var q = async.queue(async.asyncify(async function(file) {\n   *     var intermediateStep = await processFile(file);\n   *     return await somePromise(intermediateStep)\n   * }));\n   *\n   * q.push(files);\n   */\n\n\n  function asyncify(func) {\n    if ((0, wrapAsync_1.isAsync)(func)) {\n      return function\n        /*, callback*/\n      () {\n        var args = [],\n            len = arguments.length;\n\n        while (len--) args[len] = arguments[len];\n\n        var callback = args.pop();\n        var promise = func.apply(this, args);\n        return handlePromise(promise, callback);\n      };\n    }\n\n    return (0, _initialParams2.default)(function (args, callback) {\n      var result;\n\n      try {\n        result = func.apply(this, args);\n      } catch (e) {\n        return callback(e);\n      } // if result is Promise object\n\n\n      if (result && typeof result.then === 'function') {\n        return handlePromise(result, callback);\n      } else {\n        callback(null, result);\n      }\n    });\n  }\n\n  function handlePromise(promise, callback) {\n    return promise.then(function (value) {\n      invokeCallback(callback, null, value);\n    }, function (err) {\n      invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n  }\n\n  function invokeCallback(callback, error, value) {\n    try {\n      callback(error, value);\n    } catch (err) {\n      (0, _setImmediate2.default)(function (e) {\n        throw e;\n      }, err);\n    }\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(asyncify_1);\nvar wrapAsync_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = undefined;\n\n  var _asyncify2 = _interopRequireDefault(asyncify_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n  }\n\n  function isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n  }\n\n  function isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n  }\n\n  function wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') {\n      throw new Error('expected a function');\n    }\n\n    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;\n  }\n\n  exports.default = wrapAsync;\n  exports.isAsync = isAsync;\n  exports.isAsyncGenerator = isAsyncGenerator;\n  exports.isAsyncIterable = isAsyncIterable;\n});\nunwrapExports(wrapAsync_1);\nvar wrapAsync_2 = wrapAsync_1.isAsyncIterable;\nvar wrapAsync_3 = wrapAsync_1.isAsyncGenerator;\nvar wrapAsync_4 = wrapAsync_1.isAsync;\nvar awaitify_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = awaitify; // conditionally promisify a function.\n  // only return a promise if a callback is omitted\n\n  function awaitify(asyncFn, arity) {\n    if (arity === void 0) arity = asyncFn.length;\n\n    if (!arity) {\n      throw new Error('arity is undefined');\n    }\n\n    function awaitable() {\n      var this$1 = this;\n      var args = [],\n          len = arguments.length;\n\n      while (len--) args[len] = arguments[len];\n\n      if (typeof args[arity - 1] === 'function') {\n        return asyncFn.apply(this, args);\n      }\n\n      return new Promise(function (resolve, reject) {\n        args[arity - 1] = function (err) {\n          var cbArgs = [],\n              len = arguments.length - 1;\n\n          while (len-- > 0) cbArgs[len] = arguments[len + 1];\n\n          if (err) {\n            return reject(err);\n          }\n\n          resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n        };\n\n        asyncFn.apply(this$1, args);\n      });\n    }\n\n    Object.defineProperty(awaitable, 'name', {\n      configurable: true,\n      // allows redefining\n      value: \"awaitable(\" + asyncFn.name + \")\"\n    });\n    return awaitable;\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(awaitify_1);\nvar parallel = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _isArrayLike2 = _interopRequireDefault(isArrayLike_1);\n\n  var _wrapAsync2 = _interopRequireDefault(wrapAsync_1);\n\n  var _awaitify2 = _interopRequireDefault(awaitify_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  exports.default = (0, _awaitify2.default)(function (eachfn, tasks, callback) {\n    var results = (0, _isArrayLike2.default)(tasks) ? [] : {};\n    eachfn(tasks, function (task, key, taskCb) {\n      (0, _wrapAsync2.default)(task)(function (err) {\n        var assign;\n        var result = [],\n            len = arguments.length - 1;\n\n        while (len-- > 0) result[len] = arguments[len + 1];\n\n        if (result.length < 2) {\n          assign = result, result = assign[0];\n        }\n\n        results[key] = result;\n        taskCb(err);\n      });\n    }, function (err) {\n      return callback(err, results);\n    });\n  }, 3);\n  module.exports = exports['default'];\n});\nunwrapExports(parallel);\nvar once_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = once;\n\n  function once(fn) {\n    function wrapper() {\n      var args = [],\n          len = arguments.length;\n\n      while (len--) args[len] = arguments[len];\n\n      if (fn === null) {\n        return;\n      }\n\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, args);\n    }\n\n    Object.assign(wrapper, fn);\n    return wrapper;\n  }\n\n  module.exports = exports[\"default\"];\n});\nunwrapExports(once_1);\nvar getIterator = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n  };\n\n  module.exports = exports[\"default\"];\n});\nunwrapExports(getIterator);\nvar iterator = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = createIterator;\n\n  var _isArrayLike2 = _interopRequireDefault(isArrayLike_1);\n\n  var _getIterator2 = _interopRequireDefault(getIterator);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n      return ++i < len ? {\n        value: coll[i],\n        key: i\n      } : null;\n    };\n  }\n\n  function createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n      var item = iterator.next();\n\n      if (item.done) {\n        return null;\n      }\n\n      i++;\n      return {\n        value: item.value,\n        key: i\n      };\n    };\n  }\n\n  function createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n      var key = okeys[++i];\n      return i < len ? {\n        value: obj[key],\n        key: key\n      } : null;\n    };\n  }\n\n  function createIterator(coll) {\n    if ((0, _isArrayLike2.default)(coll)) {\n      return createArrayIterator(coll);\n    }\n\n    var iterator = (0, _getIterator2.default)(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(iterator);\nvar onlyOnce_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = onlyOnce;\n\n  function onlyOnce(fn) {\n    return function () {\n      var args = [],\n          len = arguments.length;\n\n      while (len--) args[len] = arguments[len];\n\n      if (fn === null) {\n        throw new Error(\"Callback was already called.\");\n      }\n\n      var callFn = fn;\n      fn = null;\n      callFn.apply(this, args);\n    };\n  }\n\n  module.exports = exports[\"default\"];\n});\nunwrapExports(onlyOnce_1);\nvar breakLoop_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  }); // A temporary value used to identify if the loop should be broken.\n  // See #1064, #1293\n\n  var breakLoop = {};\n  exports.default = breakLoop;\n  module.exports = exports[\"default\"];\n});\nunwrapExports(breakLoop_1);\nvar asyncEachOfLimit_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = asyncEachOfLimit;\n\n  var _breakLoop2 = _interopRequireDefault(breakLoop_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  } // for async generators\n\n\n  function asyncEachOfLimit(generator, limit, iteratee, callback) {\n    var done = false;\n    var canceled = false;\n    var awaiting = false;\n    var running = 0;\n    var idx = 0;\n\n    function replenish() {\n      //console.log('replenish')\n      if (running >= limit || awaiting || done) {\n        return;\n      } //console.log('replenish awaiting')\n\n\n      awaiting = true;\n      generator.next().then(function (ref) {\n        var value = ref.value;\n        var iterDone = ref.done; //console.log('got value', value)\n\n        if (canceled || done) {\n          return;\n        }\n\n        awaiting = false;\n\n        if (iterDone) {\n          done = true;\n\n          if (running <= 0) {\n            //console.log('done nextCb')\n            callback(null);\n          }\n\n          return;\n        }\n\n        running++;\n        iteratee(value, idx, iterateeCallback);\n        idx++;\n        replenish();\n      }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n      //console.log('iterateeCallback')\n      running -= 1;\n\n      if (canceled) {\n        return;\n      }\n\n      if (err) {\n        return handleError(err);\n      }\n\n      if (err === false) {\n        done = true;\n        canceled = true;\n        return;\n      }\n\n      if (result === _breakLoop2.default || done && running <= 0) {\n        done = true; //console.log('done iterCb')\n\n        return callback(null);\n      }\n\n      replenish();\n    }\n\n    function handleError(err) {\n      if (canceled) {\n        return;\n      }\n\n      awaiting = false;\n      done = true;\n      callback(err);\n    }\n\n    replenish();\n  }\n\n  module.exports = exports['default'];\n});\nunwrapExports(asyncEachOfLimit_1);\nvar eachOfLimit = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _once2 = _interopRequireDefault(once_1);\n\n  var _iterator2 = _interopRequireDefault(iterator);\n\n  var _onlyOnce2 = _interopRequireDefault(onlyOnce_1);\n\n  var _asyncEachOfLimit2 = _interopRequireDefault(asyncEachOfLimit_1);\n\n  var _breakLoop2 = _interopRequireDefault(breakLoop_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  exports.default = function (limit) {\n    return function (obj, iteratee, callback) {\n      callback = (0, _once2.default)(callback);\n\n      if (limit <= 0) {\n        throw new RangeError('concurrency limit cannot be less than 1');\n      }\n\n      if (!obj) {\n        return callback(null);\n      }\n\n      if ((0, wrapAsync_1.isAsyncGenerator)(obj)) {\n        return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);\n      }\n\n      if ((0, wrapAsync_1.isAsyncIterable)(obj)) {\n        return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);\n      }\n\n      var nextElem = (0, _iterator2.default)(obj);\n      var done = false;\n      var canceled = false;\n      var running = 0;\n      var looping = false;\n\n      function iterateeCallback(err, value) {\n        if (canceled) {\n          return;\n        }\n\n        running -= 1;\n\n        if (err) {\n          done = true;\n          callback(err);\n        } else if (err === false) {\n          done = true;\n          canceled = true;\n        } else if (value === _breakLoop2.default || done && running <= 0) {\n          done = true;\n          return callback(null);\n        } else if (!looping) {\n          replenish();\n        }\n      }\n\n      function replenish() {\n        looping = true;\n\n        while (running < limit && !done) {\n          var elem = nextElem();\n\n          if (elem === null) {\n            done = true;\n\n            if (running <= 0) {\n              callback(null);\n            }\n\n            return;\n          }\n\n          running += 1;\n          iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));\n        }\n\n        looping = false;\n      }\n\n      replenish();\n    };\n  };\n\n  module.exports = exports['default'];\n});\nunwrapExports(eachOfLimit);\nvar eachOfLimit_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _eachOfLimit3 = _interopRequireDefault(eachOfLimit);\n\n  var _wrapAsync2 = _interopRequireDefault(wrapAsync_1);\n\n  var _awaitify2 = _interopRequireDefault(awaitify_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n   * time.\n   *\n   * @name eachOfLimit\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfLimit\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {number} limit - The maximum number of async operations at a time.\n   * @param {AsyncFunction} iteratee - An async function to apply to each\n   * item in `coll`. The `key` is the item's key, or index in the case of an\n   * array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n\n\n  function eachOfLimit$1(coll, limit, iteratee, callback) {\n    return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);\n  }\n\n  exports.default = (0, _awaitify2.default)(eachOfLimit$1, 4);\n  module.exports = exports['default'];\n});\nunwrapExports(eachOfLimit_1);\nvar eachOfSeries_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _eachOfLimit2 = _interopRequireDefault(eachOfLimit_1);\n\n  var _awaitify2 = _interopRequireDefault(awaitify_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  /**\n   * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n   *\n   * @name eachOfSeries\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @see [async.eachOf]{@link module:Collections.eachOf}\n   * @alias forEachOfSeries\n   * @category Collection\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - An async function to apply to each item in\n   * `coll`.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all `iteratee`\n   * functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   */\n\n\n  function eachOfSeries(coll, iteratee, callback) {\n    return (0, _eachOfLimit2.default)(coll, 1, iteratee, callback);\n  }\n\n  exports.default = (0, _awaitify2.default)(eachOfSeries, 3);\n  module.exports = exports['default'];\n});\nunwrapExports(eachOfSeries_1);\nvar series_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = series;\n\n  var _parallel3 = _interopRequireDefault(parallel);\n\n  var _eachOfSeries2 = _interopRequireDefault(eachOfSeries_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  /**\n   * Run the functions in the `tasks` collection in series, each one running once\n   * the previous function has completed. If any functions in the series pass an\n   * error to its callback, no more functions are run, and `callback` is\n   * immediately called with the value of the error. Otherwise, `callback`\n   * receives an array of results when `tasks` have completed.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function, and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   *  results from {@link async.series}.\n   *\n   * **Note** that while many implementations preserve the order of object\n   * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n   * explicitly states that\n   *\n   * > The mechanics and order of enumerating the properties is not specified.\n   *\n   * So if you rely on the order in which your series of functions are executed,\n   * and want this to work on all platforms, consider using an array.\n   *\n   * @name series\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n   * [async functions]{@link AsyncFunction} to run in series.\n   * Each function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This function gets a results array (or object)\n   * containing all the result arguments passed to the `task` callbacks. Invoked\n   * with (err, result).\n   * @return {Promise} a promise, if no callback is passed\n   * @example\n   * async.series([\n   *     function(callback) {\n   *         // do some stuff ...\n   *         callback(null, 'one');\n   *     },\n   *     function(callback) {\n   *         // do some more stuff ...\n   *         callback(null, 'two');\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // results is now equal to ['one', 'two']\n   * });\n   *\n   * async.series({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback){\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     // results is now equal to: {one: 1, two: 2}\n   * });\n   */\n\n\n  function series(tasks, callback) {\n    return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);\n  }\n\n  module.exports = exports['default'];\n});\nvar series = unwrapExports(series_1);\n\nvar SyncHook = function () {\n  function SyncHook() {\n    var arguments$1 = arguments;\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments$1[_i];\n    }\n\n    this.args = [];\n    this.tasks = [];\n  }\n\n  SyncHook.prototype.call = function () {\n    var arguments$1 = arguments;\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments$1[_i];\n    }\n\n    this.args = args;\n    return series(this.tasks);\n  };\n\n  SyncHook.prototype.tap = function (name, cb) {\n    var _this = this;\n\n    this.tasks.push(function (callback) {\n      cb.apply(void 0, __spread(_this.args));\n      callback(null, name);\n    });\n  };\n\n  return SyncHook;\n}();\n\nvar eachOf_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _isArrayLike2 = _interopRequireDefault(isArrayLike_1);\n\n  var _breakLoop2 = _interopRequireDefault(breakLoop_1);\n\n  var _eachOfLimit2 = _interopRequireDefault(eachOfLimit_1);\n\n  var _once2 = _interopRequireDefault(once_1);\n\n  var _onlyOnce2 = _interopRequireDefault(onlyOnce_1);\n\n  var _wrapAsync2 = _interopRequireDefault(wrapAsync_1);\n\n  var _awaitify2 = _interopRequireDefault(awaitify_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  } // eachOf implementation optimized for array-likes\n\n\n  function eachOfArrayLike(coll, iteratee, callback) {\n    callback = (0, _once2.default)(callback);\n    var index = 0,\n        completed = 0;\n    var length = coll.length;\n    var canceled = false;\n\n    if (length === 0) {\n      callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n      if (err === false) {\n        canceled = true;\n      }\n\n      if (canceled === true) {\n        return;\n      }\n\n      if (err) {\n        callback(err);\n      } else if (++completed === length || value === _breakLoop2.default) {\n        callback(null);\n      }\n    }\n\n    for (; index < length; index++) {\n      iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));\n    }\n  } // a generic version of eachOf which can handle array, object, and iterator cases.\n\n\n  function eachOfGeneric(coll, iteratee, callback) {\n    return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);\n  }\n  /**\n   * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n   * to the iteratee.\n   *\n   * @name eachOf\n   * @static\n   * @memberOf module:Collections\n   * @method\n   * @alias forEachOf\n   * @category Collection\n   * @see [async.each]{@link module:Collections.each}\n   * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n   * @param {AsyncFunction} iteratee - A function to apply to each\n   * item in `coll`.\n   * The `key` is the item's key, or index in the case of an array.\n   * Invoked with (item, key, callback).\n   * @param {Function} [callback] - A callback which is called when all\n   * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n   * @returns {Promise} a promise, if a callback is omitted\n   * @example\n   *\n   * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n   * var configs = {};\n   *\n   * async.forEachOf(obj, function (value, key, callback) {\n   *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n   *         if (err) return callback(err);\n   *         try {\n   *             configs[key] = JSON.parse(data);\n   *         } catch (e) {\n   *             return callback(e);\n   *         }\n   *         callback();\n   *     });\n   * }, function (err) {\n   *     if (err) console.error(err.message);\n   *     // configs is now a map of JSON data\n   *     doSomethingWith(configs);\n   * });\n   */\n\n\n  function eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);\n  }\n\n  exports.default = (0, _awaitify2.default)(eachOf, 3);\n  module.exports = exports['default'];\n});\nunwrapExports(eachOf_1);\nvar parallel_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = parallel$1;\n\n  var _eachOf2 = _interopRequireDefault(eachOf_1);\n\n  var _parallel3 = _interopRequireDefault(parallel);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  /**\n   * Run the `tasks` collection of functions in parallel, without waiting until\n   * the previous function has completed. If any of the functions pass an error to\n   * its callback, the main `callback` is immediately called with the value of the\n   * error. Once the `tasks` have completed, the results are passed to the final\n   * `callback` as an array.\n   *\n   * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n   * parallel execution of code.  If your tasks do not use any timers or perform\n   * any I/O, they will actually be executed in series.  Any synchronous setup\n   * sections for each task will happen one after the other.  JavaScript remains\n   * single-threaded.\n   *\n   * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n   * execution of other tasks when a task fails.\n   *\n   * It is also possible to use an object instead of an array. Each property will\n   * be run as a function and the results will be passed to the final `callback`\n   * as an object instead of an array. This can be a more readable way of handling\n   * results from {@link async.parallel}.\n   *\n   * @name parallel\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n   * [async functions]{@link AsyncFunction} to run.\n   * Each async function can complete with any number of optional `result` values.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed successfully. This function gets a results array\n   * (or object) containing all the result arguments passed to the task callbacks.\n   * Invoked with (err, results).\n   * @returns {Promise} a promise, if a callback is not passed\n   *\n   * @example\n   * async.parallel([\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'one');\n   *         }, 200);\n   *     },\n   *     function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 'two');\n   *         }, 100);\n   *     }\n   * ],\n   * // optional callback\n   * function(err, results) {\n   *     // the results array will equal ['one','two'] even though\n   *     // the second function had a shorter timeout.\n   * });\n   *\n   * // an example using an object instead of an array\n   * async.parallel({\n   *     one: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 1);\n   *         }, 200);\n   *     },\n   *     two: function(callback) {\n   *         setTimeout(function() {\n   *             callback(null, 2);\n   *         }, 100);\n   *     }\n   * }, function(err, results) {\n   *     // results is now equals to: {one: 1, two: 2}\n   * });\n   */\n\n\n  function parallel$1(tasks, callback) {\n    return (0, _parallel3.default)(_eachOf2.default, tasks, callback);\n  }\n\n  module.exports = exports['default'];\n});\nvar parallel$1 = unwrapExports(parallel_1);\n\nvar AsyncParallelHook = function () {\n  function AsyncParallelHook() {\n    var arguments$1 = arguments;\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments$1[_i];\n    }\n\n    this.tasks = [];\n  }\n\n  AsyncParallelHook.prototype.promise = function () {\n    var arguments$1 = arguments;\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments$1[_i];\n    }\n\n    return parallel$1(this.tasks);\n  };\n\n  AsyncParallelHook.prototype.tapPromise = function (name, cb) {\n    var _this = this;\n\n    this.tasks.push(function (callback) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4, cb()];\n\n            case 1:\n              _a.sent();\n\n              callback(null, name);\n              return [2];\n          }\n        });\n      });\n    });\n  };\n\n  return AsyncParallelHook;\n}();\n\nvar waterfall_1 = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _once2 = _interopRequireDefault(once_1);\n\n  var _onlyOnce2 = _interopRequireDefault(onlyOnce_1);\n\n  var _wrapAsync2 = _interopRequireDefault(wrapAsync_1);\n\n  var _awaitify2 = _interopRequireDefault(awaitify_1);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n  /**\n   * Runs the `tasks` array of functions in series, each passing their results to\n   * the next in the array. However, if any of the `tasks` pass an error to their\n   * own callback, the next function is not executed, and the main `callback` is\n   * immediately called with the error.\n   *\n   * @name waterfall\n   * @static\n   * @memberOf module:ControlFlow\n   * @method\n   * @category Control Flow\n   * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n   * to run.\n   * Each function should complete with any number of `result` values.\n   * The `result` values will be passed as arguments, in order, to the next task.\n   * @param {Function} [callback] - An optional callback to run once all the\n   * functions have completed. This will be passed the results of the last task's\n   * callback. Invoked with (err, [results]).\n   * @returns undefined\n   * @example\n   *\n   * async.waterfall([\n   *     function(callback) {\n   *         callback(null, 'one', 'two');\n   *     },\n   *     function(arg1, arg2, callback) {\n   *         // arg1 now equals 'one' and arg2 now equals 'two'\n   *         callback(null, 'three');\n   *     },\n   *     function(arg1, callback) {\n   *         // arg1 now equals 'three'\n   *         callback(null, 'done');\n   *     }\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   *\n   * // Or, with named functions:\n   * async.waterfall([\n   *     myFirstFunction,\n   *     mySecondFunction,\n   *     myLastFunction,\n   * ], function (err, result) {\n   *     // result now equals 'done'\n   * });\n   * function myFirstFunction(callback) {\n   *     callback(null, 'one', 'two');\n   * }\n   * function mySecondFunction(arg1, arg2, callback) {\n   *     // arg1 now equals 'one' and arg2 now equals 'two'\n   *     callback(null, 'three');\n   * }\n   * function myLastFunction(arg1, callback) {\n   *     // arg1 now equals 'three'\n   *     callback(null, 'done');\n   * }\n   */\n\n\n  function waterfall(tasks, callback) {\n    callback = (0, _once2.default)(callback);\n\n    if (!Array.isArray(tasks)) {\n      return callback(new Error('First argument to waterfall must be an array of functions'));\n    }\n\n    if (!tasks.length) {\n      return callback();\n    }\n\n    var taskIndex = 0;\n\n    function nextTask(args) {\n      var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);\n      task.apply(void 0, args.concat([(0, _onlyOnce2.default)(next)]));\n    }\n\n    function next(err) {\n      var args = [],\n          len = arguments.length - 1;\n\n      while (len-- > 0) args[len] = arguments[len + 1];\n\n      if (err === false) {\n        return;\n      }\n\n      if (err || taskIndex === tasks.length) {\n        return callback.apply(void 0, [err].concat(args));\n      }\n\n      nextTask(args);\n    }\n\n    nextTask([]);\n  }\n\n  exports.default = (0, _awaitify2.default)(waterfall);\n  module.exports = exports['default'];\n});\nvar waterfall = unwrapExports(waterfall_1);\n\nvar SyncWaterfallHook = function () {\n  function SyncWaterfallHook() {\n    var arguments$1 = arguments;\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments$1[_i];\n    }\n\n    this.tasks = [];\n  }\n\n  SyncWaterfallHook.prototype.call = function () {\n    var arguments$1 = arguments;\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments$1[_i];\n    }\n\n    return waterfall(this.tasks);\n  };\n\n  SyncWaterfallHook.prototype.tap = function (name, cb) {\n    if (this.tasks.length === 0) {\n      this.tasks.push(function (callback) {\n        var value = cb();\n        callback(value ? null : false, value);\n      });\n    } else {\n      this.tasks.push(function (arg, callback) {\n        var value = cb();\n        callback(value ? null : false, name);\n      });\n    }\n  };\n\n  return SyncWaterfallHook;\n}();\n\nvar SyncBailHook = function () {\n  function SyncBailHook() {\n    var arguments$1 = arguments;\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments$1[_i];\n    }\n\n    this.tasks = [];\n  }\n\n  SyncBailHook.prototype.call = function () {\n    var arguments$1 = arguments;\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments$1[_i];\n    }\n\n    return series(this.tasks);\n  };\n\n  SyncBailHook.prototype.tap = function (name, cb) {\n    this.tasks.push(function (callback) {\n      var err = cb();\n      callback(err, name);\n    });\n  };\n\n  return SyncBailHook;\n}();\n\nexport { AsyncParallelHook, SyncBailHook, SyncHook, SyncWaterfallHook };","map":null,"metadata":{},"sourceType":"module"}