{"ast":null,"code":"import { isString } from '@antv/util';\nimport { createDom, modifyCSS } from '@antv/dom-util';\nexport var BACKGROUND_STYLE = {\n  opacity: 0.5,\n  fill: '#000'\n};\nexport var ARROW_STYLE = {\n  opacity: 0.5,\n  fill: '#000',\n  r: 5\n};\nexport var TEXT_STYLE = {\n  fill: '#fff',\n  fontSize: 12\n};\n/**\n * 缩略趋势图\n */\n\nvar TimeBarTooltip =\n/** @class */\nfunction () {\n  function TimeBarTooltip(cfg) {\n    var _a = cfg.x,\n        x = _a === void 0 ? 0 : _a,\n        _b = cfg.y,\n        y = _b === void 0 ? 0 : _b,\n        container = cfg.container,\n        text = cfg.text,\n        _c = cfg.padding,\n        padding = _c === void 0 ? [4, 4, 4, 4] : _c,\n        _d = cfg.className,\n        className = _d === void 0 ? 'g6-component-timebar-tooltip' : _d,\n        _e = cfg.backgroundColor,\n        backgroundColor = _e === void 0 ? '#000' : _e,\n        _f = cfg.textColor,\n        textColor = _f === void 0 ? '#fff' : _f,\n        _g = cfg.opacity,\n        opacity = _g === void 0 ? 0.8 : _g,\n        _h = cfg.fontSize,\n        fontSize = _h === void 0 ? 12 : _h;\n    this.container = container;\n    this.className = className;\n    this.backgroundColor = backgroundColor;\n    this.textColor = textColor;\n    this.x = x;\n    this.y = y;\n    this.text = text;\n    this.padding = padding;\n    this.opacity = opacity;\n    this.fontSize = fontSize;\n    this.render();\n  }\n  /**\n   * 首次渲染\n   * @private\n   */\n\n\n  TimeBarTooltip.prototype.render = function () {\n    var self = this;\n    var className = self.className,\n        x = self.x,\n        y = self.y,\n        backgroundColor = self.backgroundColor,\n        textColor = self.textColor,\n        text = self.text,\n        padding = self.padding,\n        opacity = self.opacity,\n        fontSize = self.fontSize;\n    var parentNode = self.container;\n    var container = createDom(\"<div class='\".concat(className, \"' style=\\\"position: absolute; width: fit-content; height: fit-content; opacity: \").concat(opacity, \"\\\"></div>\"));\n\n    if (isString(parentNode)) {\n      parentNode = document.getElementById(parentNode);\n    }\n\n    parentNode.appendChild(container);\n    self.parentHeight = parentNode.offsetHeight;\n    self.parentWidth = parentNode.offsetWidth;\n    modifyCSS(container, {\n      visibility: 'hidden',\n      top: 0,\n      left: 0\n    });\n    var background = createDom(\"\\n      <div style='position: absolute; white-space:nowrap; background-color: \".concat(backgroundColor, \"; font-size: \").concat(fontSize, \"px; border-radius: 4px; width: fit-content; height: fit-content; color: \").concat(textColor, \"; padding: \").concat(padding[0], \"px \").concat(padding[1], \"px \").concat(padding[2], \"px \").concat(padding[3], \"px'></div>\"));\n    background.innerHTML = text;\n    container.appendChild(background);\n    self.backgroundDOM = background;\n    var arrow = createDom(\"<div style='position: absolute; width: 0px; height: 0px; border-left: 5px solid transparent; border-right: 5px solid transparent; border-top: 10px solid \".concat(backgroundColor, \"'></div>\"));\n    container.appendChild(arrow);\n    self.arrowDOM = arrow;\n    self.container = container;\n  };\n\n  TimeBarTooltip.prototype.show = function (cfg) {\n    var self = this;\n    var text = cfg.text,\n        x = cfg.x,\n        y = cfg.y,\n        clientX = cfg.clientX,\n        clientY = cfg.clientY;\n    self.backgroundDOM.innerHTML = text;\n    var backgroundWidth = self.backgroundDOM.offsetWidth;\n    var backgroundHeight = self.backgroundDOM.offsetHeight;\n    var arrowWidth = self.arrowDOM.offsetWidth;\n    var arrowHeight = self.arrowDOM.offsetHeight;\n    modifyCSS(self.container, {\n      top: \"\".concat(-backgroundHeight - arrowHeight, \"px\"),\n      left: \"\".concat(x, \"px\"),\n      visibility: 'visible'\n    });\n    modifyCSS(self.backgroundDOM, {\n      marginLeft: \"\".concat(-backgroundWidth / 2, \"px\")\n    });\n    modifyCSS(self.arrowDOM, {\n      marginLeft: \"\".concat(-arrowWidth / 2, \"px\"),\n      top: \"\".concat(backgroundHeight, \"px\")\n    });\n    var left = x - backgroundWidth / 2;\n    var right = x + backgroundWidth / 2;\n\n    if (left < 0) {\n      modifyCSS(self.backgroundDOM, {\n        marginLeft: \"\".concat(-backgroundWidth / 2 - left, \"px\")\n      });\n    } else if (right > self.parentWidth) {\n      modifyCSS(self.backgroundDOM, {\n        marginLeft: \"\".concat(-backgroundWidth / 2 - right + self.parentWidth + 12, \"px\")\n      });\n    }\n  };\n\n  TimeBarTooltip.prototype.hide = function () {\n    modifyCSS(this.container, {\n      top: 0,\n      left: 0,\n      visibility: 'hidden'\n    });\n  };\n\n  return TimeBarTooltip;\n}();\n\nexport default TimeBarTooltip;","map":null,"metadata":{},"sourceType":"module"}