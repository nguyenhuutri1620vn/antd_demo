{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { clamp, interpolate as _interpolate } from '../util';\nimport Point from './point';\n\nvar EdgeInsets = function () {\n  function EdgeInsets() {\n    var top = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var bottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, EdgeInsets);\n\n    _defineProperty(this, \"top\", void 0);\n\n    _defineProperty(this, \"bottom\", void 0);\n\n    _defineProperty(this, \"left\", void 0);\n\n    _defineProperty(this, \"right\", void 0);\n\n    if (isNaN(top) || top < 0 || isNaN(bottom) || bottom < 0 || isNaN(left) || left < 0 || isNaN(right) || right < 0) {\n      throw new Error('Invalid value for edge-insets, top, bottom, left and right must all be numbers');\n    }\n\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  _createClass(EdgeInsets, [{\n    key: \"interpolate\",\n    value: function interpolate(start, target, t) {\n      if (target.top != null && start.top != null) {\n        this.top = _interpolate(start.top, target.top, t);\n      }\n\n      if (target.bottom != null && start.bottom != null) {\n        this.bottom = _interpolate(start.bottom, target.bottom, t);\n      }\n\n      if (target.left != null && start.left != null) {\n        this.left = _interpolate(start.left, target.left, t);\n      }\n\n      if (target.right != null && start.right != null) {\n        this.right = _interpolate(start.right, target.right, t);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(width, height) {\n      var x = clamp((this.left + width - this.right) / 2, 0, width);\n      var y = clamp((this.top + height - this.bottom) / 2, 0, height);\n      return new Point(x, y);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.top === other.top && this.bottom === other.bottom && this.left === other.left && this.right === other.right;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new EdgeInsets(this.top, this.bottom, this.left, this.right);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        top: this.top,\n        bottom: this.bottom,\n        left: this.left,\n        right: this.right\n      };\n    }\n  }]);\n\n  return EdgeInsets;\n}();\n\nexport { EdgeInsets as default };","map":null,"metadata":{},"sourceType":"module"}