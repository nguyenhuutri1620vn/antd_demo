{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Choropleth = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar plot_1 = require(\"../../core/plot\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar constants_1 = require(\"./constants\");\n\nvar area_layer_1 = require(\"../../layers/area-layer\");\n\nvar text_layer_1 = require(\"../../layers/text-layer\");\n\nvar types_1 = require(\"../../types\");\n\nvar layer_group_1 = require(\"../../core/layer/layer-group\");\n\nvar layer_1 = require(\"./layer\");\n\nvar cache_1 = require(\"./cache\");\n\nvar helper_1 = require(\"./helper\");\n\nvar Choropleth =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(Choropleth, _super);\n\n  function Choropleth() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 图表类型\n     */\n\n\n    _this.type = plot_1.Plot.PlotType.Choropleth;\n    /**\n     * 国界数据\n     */\n\n    _this.chinaBoundaryData = {\n      type: 'FeatureCollection',\n      features: []\n    };\n    /**\n     * 当前行政数据数据\n     */\n\n    _this.currentDistrictData = {\n      type: 'FeatureCollection',\n      features: []\n    };\n    /**\n     * 数据钻取路径\n     */\n\n    _this.drillSteps = [];\n    /**\n     * 钻取行政栈数据\n     */\n\n    _this.drillStacks = [];\n    /**\n     * 向下钻取事件回调\n     */\n\n    _this.onDrillDownHander = function (event) {\n      var _a;\n\n      var _b = _this.options.drill,\n          steps = _b.steps,\n          onDown = _b.onDown;\n      var properties = (_a = event.feature) === null || _a === void 0 ? void 0 : _a.properties;\n      var adcode = properties.adcode; // 还没有开始钻取\n\n      if (!_this.drillStacks.length) {\n        var _c = _this.options.viewLevel,\n            level_1 = _c.level,\n            adcode_1 = _c.adcode,\n            _d = _c.granularity,\n            granularity_1 = _d === void 0 ? constants_1.DEFAULT_AREA_GRANULARITY[level_1] : _d;\n        var config = (0, helper_1.getDrillStepDefaultConfig)(_this.options);\n        _this.drillStacks = [{\n          level: level_1,\n          adcode: adcode_1,\n          granularity: granularity_1,\n          config: config\n        }];\n      } // 已经下钻到最后\n\n\n      if (_this.drillStacks.length === steps.length + 1) {\n        return;\n      } // 已开始下钻\n\n\n      var from = _this.drillStacks.slice(-1)[0];\n\n      var depth = _this.drillStacks.length - 1;\n      var _e = _this.drillSteps[depth],\n          level = _e.level,\n          _f = _e.granularity,\n          granularity = _f === void 0 ? constants_1.DEFAULT_AREA_GRANULARITY[level] : _f,\n          drillConfig = (0, tslib_1.__rest)(_e, [\"level\", \"granularity\"]);\n      var downParams = {\n        from: {\n          level: from.level,\n          adcode: from.adcode,\n          granularity: from.granularity\n        },\n        to: {\n          level: level,\n          adcode: adcode,\n          granularity: granularity,\n          properties: properties\n        }\n      };\n\n      var callback = function (config) {\n        if (config === void 0) {\n          config = {};\n        }\n\n        var view = {\n          level: level,\n          adcode: adcode,\n          granularity: granularity\n        };\n        var mergeConfig = (0, utils_1.deepAssign)({}, drillConfig, config);\n\n        _this.changeView(view, mergeConfig).then(function (drillData) {\n          if (drillData) {\n            _this.drillStacks.push(drillData);\n\n            _this.emit('drilldown', downParams);\n          }\n        });\n      };\n\n      if (onDown) {\n        onDown(downParams.from, downParams.to, callback);\n      } else {\n        callback();\n      }\n    };\n    /**\n     * 向上钻取事件回调\n     */\n\n\n    _this.onDrillUpHander = function () {\n      var onUp = _this.options.drill.onUp; // 已经上卷到最高层级\n\n      var isTopDrillStack = _this.drillStacks.length === 0 || _this.drillStacks.length === 1;\n\n      if (isTopDrillStack) {\n        return;\n      }\n\n      var lastIndex = _this.drillStacks.length - 1;\n      var from = _this.drillStacks[lastIndex];\n      var to = _this.drillStacks[lastIndex - 1];\n      var upParams = {\n        from: {\n          level: from.level,\n          adcode: from.adcode,\n          granularity: from.granularity\n        },\n        to: {\n          level: to.level,\n          adcode: to.adcode,\n          granularity: to.granularity\n        }\n      };\n\n      var callback = function (config) {\n        if (config === void 0) {\n          config = {};\n        }\n\n        var view = upParams.to;\n        var mergeConfig = (0, utils_1.deepAssign)({}, to.config, config);\n\n        _this.changeView(view, mergeConfig).then(function (drillData) {\n          if (drillData) {\n            _this.drillStacks.pop();\n\n            _this.emit('drillup', upParams);\n          }\n        });\n      };\n\n      if (onUp) {\n        onUp(upParams.from, upParams.to, callback);\n      } else {\n        callback();\n      }\n    };\n\n    return _this;\n  }\n  /**\n   * 初始化图层\n   */\n\n\n  Choropleth.prototype.initLayers = function () {\n    var _this = this;\n\n    this.getInitDistrictData().then(function () {\n      _this.source = _this.createSource();\n\n      _this.render();\n\n      _this.inited = true;\n    });\n  };\n  /**\n   * 渲染\n   */\n\n\n  Choropleth.prototype.render = function () {\n    console.time('l7plot choropleth render time');\n\n    if (this.inited) {\n      this.scene.setEnableRender(true);\n      this.scene.render();\n    } else {\n      var layerGroup = this.createLayers(this.source);\n      this.layerGroup = layerGroup;\n      this.onLayersLoaded();\n      layerGroup.addTo(this.scene);\n      this.initLayersEvent();\n    }\n\n    console.timeEnd('l7plot choropleth render time');\n  };\n  /**\n   * 更新: 更新配置且重新渲染\n   */\n\n\n  Choropleth.prototype.update = function (options) {\n    var _this = this;\n\n    var _a, _b, _c;\n\n    this.updateOption(options);\n\n    if (options.map && !(0, util_1.isEqual)(this.lastOptions.map, this.options.map)) {\n      this.updateMap(options.map);\n    } // 下钻路径发生更新\n\n\n    if (options.drill && options.drill.enabled !== false && !(0, util_1.isEqual)((_a = this.lastOptions.drill) === null || _a === void 0 ? void 0 : _a.steps, (_b = this.options.drill) === null || _b === void 0 ? void 0 : _b.steps)) {\n      this.drillReset();\n    }\n\n    this.scene.setEnableRender(false); // 行政级别及范围发生更新\n\n    if (options.viewLevel && !(0, util_1.isEqual)(this.lastOptions.viewLevel, this.options.viewLevel)) {\n      var geoData = (_c = options.source) === null || _c === void 0 ? void 0 : _c.joinBy.geoData;\n      console.time('l7plot choropleth update viewLevel time');\n      this.getDistrictData(geoData).then(function () {\n        var _a = _this.options.source,\n            data = _a.data,\n            sourceConfig = (0, tslib_1.__rest)(_a, [\"data\"]);\n\n        _this.changeData(data, sourceConfig);\n\n        _this.updateLayers(options);\n\n        _this.render();\n\n        _this.updateComponents();\n\n        console.timeEnd('l7plot choropleth update viewLevel time');\n\n        _this.emit('update');\n      });\n    } else {\n      if (options.source && !(0, util_1.isEqual)(this.lastOptions.source, this.options.source)) {\n        var _d = this.options.source,\n            data = _d.data,\n            sourceConfig = (0, tslib_1.__rest)(_d, [\"data\"]);\n        this.changeData(data, sourceConfig);\n      }\n\n      this.updateLayers(options);\n      this.render();\n      this.updateComponents();\n      this.emit('update');\n    }\n  };\n  /**\n   * 获取默认配置\n   */\n\n\n  Choropleth.prototype.getDefaultOptions = function () {\n    return Choropleth.DefaultOptions;\n  };\n  /**\n   * 解析 source 配置\n   */\n\n\n  Choropleth.prototype.parserSourceConfig = function (source) {\n    var joinData = source.data,\n        joinBy = source.joinBy,\n        sourceCFG = (0, tslib_1.__rest)(source, [\"data\", \"joinBy\"]);\n    var sourceField = joinBy.sourceField,\n        targetField = joinBy.geoField,\n        geoData = joinBy.geoData;\n    var data = geoData;\n    var config = {\n      type: 'join',\n      sourceField: sourceField,\n      targetField: targetField,\n      data: joinData\n    };\n\n    if (sourceCFG.transforms) {\n      sourceCFG.transforms.push(config);\n    } else {\n      sourceCFG.transforms = [config];\n    }\n\n    if (sourceCFG['parser']) {\n      delete sourceCFG['parser'];\n    }\n\n    return {\n      data: data,\n      sourceCFG: sourceCFG\n    };\n  };\n  /**\n   * 创建 source 实例\n   */\n\n\n  Choropleth.prototype.createSource = function () {\n    var _a = this.parserSourceConfig(this.options.source),\n        data = _a.data,\n        sourceCFG = _a.sourceCFG;\n\n    var source = new types_1.Source(data, sourceCFG);\n    return source;\n  };\n  /**\n   * 更新: 更新数据\n   */\n\n\n  Choropleth.prototype.changeData = function (data, cfg) {\n    console.time('l7plot choropleth update data time');\n    this.options.source = (0, utils_1.deepAssign)({}, this.options.source, (0, tslib_1.__assign)({\n      data: data\n    }, cfg));\n\n    var _a = this.parserSourceConfig(this.options.source),\n        geoData = _a.data,\n        sourceCFG = _a.sourceCFG;\n\n    this.source.setData(geoData, sourceCFG);\n    console.timeEnd('l7plot choropleth update data time'); // 更新 legend\n\n    if (this.options.legend) {\n      this.updateLegendControl(this.options.legend);\n    }\n\n    this.emit('change-data');\n  };\n  /**\n   * 创建图层\n   */\n\n\n  Choropleth.prototype.createLayers = function (source) {\n    this.fillAreaLayer = new area_layer_1.AreaLayer((0, tslib_1.__assign)({\n      name: 'fillAreaLayer',\n      source: source\n    }, (0, util_1.pick)(this.options, area_layer_1.AreaLayer.LayerOptionsKeys)));\n    var layerGroup = new layer_group_1.LayerGroup([this.fillAreaLayer]);\n\n    if (this.options.chinaBorder) {\n      var _a = this.createCountryBoundaryLayer(this.chinaBoundaryData, this.options),\n          chinaBoundaryLayer = _a.chinaBoundaryLayer,\n          chinaDisputeBoundaryLayer = _a.chinaDisputeBoundaryLayer;\n\n      this.chinaBoundaryLayer = chinaBoundaryLayer;\n      this.chinaDisputeBoundaryLayer = chinaDisputeBoundaryLayer;\n      layerGroup.addLayer(this.chinaBoundaryLayer);\n      layerGroup.addLayer(this.chinaDisputeBoundaryLayer);\n    }\n\n    if (this.options.label) {\n      this.labelLayer = this.createLabelLayer(source, this.options.label);\n      layerGroup.addLayer(this.labelLayer);\n    }\n\n    return layerGroup;\n  };\n  /**\n   * 创建中国国界线图层\n   */\n\n\n  Choropleth.prototype.createCountryBoundaryLayer = function (data, plotConfig) {\n    var _a = (0, layer_1.createCountryBoundaryLayer)(data, plotConfig),\n        chinaBoundaryLayer = _a.chinaBoundaryLayer,\n        chinaDisputeBoundaryLayer = _a.chinaDisputeBoundaryLayer;\n\n    return {\n      chinaBoundaryLayer: chinaBoundaryLayer,\n      chinaDisputeBoundaryLayer: chinaDisputeBoundaryLayer\n    };\n  };\n  /**\n   * 创建数据标签图层\n   */\n\n\n  Choropleth.prototype.createLabelLayer = function (source, label) {\n    var _this = this;\n\n    var data = source['originData'].features.map(function (_a) {\n      var properties = _a.properties;\n      return Object.assign({}, properties, {\n        centroid: properties['centroid'] || properties['center']\n      });\n    }).filter(function (_a) {\n      var centroid = _a.centroid;\n      return centroid;\n    });\n    var _a = this.options,\n        visible = _a.visible,\n        minZoom = _a.minZoom,\n        maxZoom = _a.maxZoom,\n        _b = _a.zIndex,\n        zIndex = _b === void 0 ? 0 : _b;\n    var textLayer = new text_layer_1.TextLayer((0, tslib_1.__assign)({\n      name: 'labelLayer',\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'centroid'\n        },\n        transforms: source.transforms\n      },\n      visible: visible,\n      minZoom: minZoom,\n      maxZoom: maxZoom,\n      zIndex: zIndex + 0.1\n    }, label));\n\n    var updateCallback = function () {\n      var data = _this.source['originData'].features.map(function (_a) {\n        var properties = _a.properties;\n        return properties;\n      }).filter(function (_a) {\n        var centroid = _a.centroid;\n        return centroid;\n      });\n\n      textLayer.layer.setData(data);\n    };\n\n    source.on('update', updateCallback);\n    textLayer.on('remove', function () {\n      source.off('update', updateCallback);\n    });\n    return textLayer;\n  };\n  /**\n   * 更新图层\n   */\n\n\n  Choropleth.prototype.updateLayers = function (options) {\n    var fillAreaLayerConfig = (0, util_1.pick)(options, area_layer_1.AreaLayer.LayerOptionsKeys);\n    this.fillAreaLayer.update(fillAreaLayerConfig);\n\n    if (options.chinaBorder) {\n      if (!this.chinaBoundaryLayer) {\n        var _a = this.createCountryBoundaryLayer(this.chinaBoundaryData, this.options),\n            chinaBoundaryLayer = _a.chinaBoundaryLayer,\n            chinaDisputeBoundaryLayer = _a.chinaDisputeBoundaryLayer;\n\n        this.chinaBoundaryLayer = chinaBoundaryLayer;\n        this.chinaDisputeBoundaryLayer = chinaDisputeBoundaryLayer;\n        this.layerGroup.addLayer(this.chinaBoundaryLayer);\n        this.layerGroup.addLayer(this.chinaDisputeBoundaryLayer);\n      } // todo 更新方法\n\n    } else if (options.chinaBorder === false) {\n      this.chinaBoundaryLayer && this.layerGroup.removeLayer(this.chinaBoundaryLayer);\n      this.chinaDisputeBoundaryLayer && this.layerGroup.removeLayer(this.chinaDisputeBoundaryLayer);\n    }\n\n    this.updateLabelLayer(this.source, options.label, this.options, this.labelLayer);\n  };\n  /**\n   * 初始化图层事件\n   */\n\n\n  Choropleth.prototype.initLayersEvent = function () {\n    this.initDrillEvent();\n  };\n  /**\n   * 初始化钻取事件\n   */\n\n\n  Choropleth.prototype.initDrillEvent = function () {\n    // 更新：取消上次绑定事件\n    if (this.lastOptions.drill) {\n      var _a = this.lastOptions.drill,\n          _b = _a.triggerUp,\n          triggerUp_1 = _b === void 0 ? 'unclick' : _b,\n          _c = _a.triggerDown,\n          triggerDown_1 = _c === void 0 ? 'click' : _c;\n      this.fillAreaLayer.off(triggerUp_1, this.onDrillUpHander);\n      this.fillAreaLayer.off(triggerDown_1, this.onDrillDownHander);\n    } // 没有下钻\n\n\n    if (!this.options.drill || this.options.drill.enabled === false) {\n      return;\n    }\n\n    var _d = this.options.drill,\n        steps = _d.steps,\n        _e = _d.triggerUp,\n        triggerUp = _e === void 0 ? 'unclick' : _e,\n        _f = _d.triggerDown,\n        triggerDown = _f === void 0 ? 'click' : _f;\n    var dillSteps = steps.map(function (step) {\n      if (typeof step === 'string') {\n        return {\n          level: step,\n          granularity: constants_1.DEFAULT_AREA_GRANULARITY[step]\n        };\n      }\n\n      if (!step.granularity) {\n        step.granularity = constants_1.DEFAULT_AREA_GRANULARITY[step.level];\n      }\n\n      return step;\n    }); // 初始化或钻取路径更新时\n\n    if (!(0, helper_1.isEqualDrillSteps)(dillSteps, this.drillSteps)) {\n      this.drillSteps = dillSteps;\n      this.drillStacks = [];\n    } // 上卷事件\n\n\n    this.fillAreaLayer.on(triggerUp, this.onDrillUpHander); // 下钻事件\n\n    this.fillAreaLayer.on(triggerDown, this.onDrillDownHander);\n  };\n  /**\n   * 重置钻取缓存数据\n   */\n\n\n  Choropleth.prototype.drillReset = function () {\n    this.drillStacks = [];\n  };\n  /**\n   * 实现 legend 配置项\n   */\n\n\n  Choropleth.prototype.getLegendOptions = function () {\n    var colorLegendItems = this.fillAreaLayer.getColorLegendItems();\n\n    if (colorLegendItems.length !== 0) {\n      return {\n        type: 'category',\n        items: colorLegendItems\n      };\n    }\n\n    return {};\n  };\n  /**\n   * 请求数据\n   */\n\n\n  Choropleth.prototype.fetchData = function (level, adcode, granularity) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      var fileName, cacheArea, _a, url, type, extension, response, data;\n\n      return (0, tslib_1.__generator)(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            fileName = \"\".concat(adcode, \"_\").concat(level, \"_\").concat(granularity);\n            cacheArea = (0, cache_1.getCacheArea)(fileName);\n            if (cacheArea) return [2\n            /*return*/\n            , cacheArea];\n            _a = (0, helper_1.getGeoAreaConfig)(this.options.geoArea), url = _a.url, type = _a.type, extension = _a.extension;\n            return [4\n            /*yield*/\n            , fetch(\"\".concat(url, \"/\").concat(level, \"/\").concat(fileName, \".\").concat(extension))];\n\n          case 1:\n            response = _b.sent();\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 2:\n            data = _b.sent();\n\n            if (type === 'topojson') {\n              data = (0, helper_1.topojson2geojson)(data);\n            }\n\n            (0, cache_1.registerCacheArea)(fileName, data);\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * 请求初始化区域数据\n   */\n\n\n  Choropleth.prototype.getInitDistrictData = function () {\n    var _a;\n\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      var fetchChinaBoundaryData, geoData, err_1;\n\n      var _b;\n\n      return (0, tslib_1.__generator)(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            fetchChinaBoundaryData = this.fetchData('country', '100000', 'boundary');\n            geoData = (_a = this.options.source) === null || _a === void 0 ? void 0 : _a.joinBy.geoData;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Promise.all([fetchChinaBoundaryData, this.getDistrictData(geoData)])];\n\n          case 2:\n            _b = tslib_1.__read.apply(void 0, [_c.sent(), 1]), this.chinaBoundaryData = _b[0];\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _c.sent();\n            throw new Error(\"Failed to get china boundary data\\uFF0C\".concat(err_1));\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * 请求区域数据\n   */\n\n\n  Choropleth.prototype.getDistrictData = function (geoData) {\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      var _a, level, adcode, _b, granularity, fetchCurrentDistrictData, _c, err_2;\n\n      return (0, tslib_1.__generator)(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = this.options.viewLevel, level = _a.level, adcode = _a.adcode, _b = _a.granularity, granularity = _b === void 0 ? constants_1.DEFAULT_AREA_GRANULARITY[level] : _b;\n            fetchCurrentDistrictData = geoData ? Promise.resolve(geoData) : this.fetchData(level, adcode, granularity);\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 3,, 4]);\n\n            _c = this;\n            return [4\n            /*yield*/\n            , fetchCurrentDistrictData];\n\n          case 2:\n            _c.currentDistrictData = _d.sent();\n            this.options.source = (0, utils_1.deepAssign)({}, this.options.source, {\n              joinBy: {\n                geoData: this.currentDistrictData\n              }\n            });\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_2 = _d.sent();\n            throw new Error(\"Failed to get district data\\uFF0C\".concat(err_2));\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * 向下钻取方法\n   */\n\n\n  Choropleth.prototype.drillDown = function (view, config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = {};\n    }\n\n    this.changeView(view, config).then(function (drillData) {\n      drillData && _this.drillStacks.push(drillData);\n    });\n  };\n  /**\n   * 向上钻取方法\n   */\n\n\n  Choropleth.prototype.drillUp = function (config) {\n    if (config === void 0) {\n      config = {};\n    } // 已经上卷到最高层级\n\n\n    var isTopDrillStack = this.drillStacks.length === 0 || this.drillStacks.length === 1;\n\n    if (isTopDrillStack) {\n      return;\n    }\n\n    var lastIndex = this.drillStacks.length - 1;\n    var _a = this.drillStacks[lastIndex - 1],\n        drillConfig = _a.config,\n        view = (0, tslib_1.__rest)(_a, [\"config\"]);\n    var mergeConfig = (0, utils_1.deepAssign)({}, drillConfig, config);\n    this.changeView(view, mergeConfig);\n    this.drillStacks.pop();\n  };\n  /**\n   * 更新显示区域\n   */\n\n\n  Choropleth.prototype.changeView = function (view, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {\n      var level, adcode, _a, granularity, geoData, mergeConfig, drillData;\n\n      return (0, tslib_1.__generator)(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            level = view.level, adcode = view.adcode, _a = view.granularity, granularity = _a === void 0 ? constants_1.DEFAULT_AREA_GRANULARITY[level] : _a;\n            return [4\n            /*yield*/\n            , this.fetchData(level, adcode, granularity)];\n\n          case 1:\n            geoData = _b.sent();\n            if (!geoData.features.length) return [2\n            /*return*/\n            ];\n            mergeConfig = (0, utils_1.deepAssign)({}, (0, helper_1.getDrillStepDefaultConfig)(this.options), config, {\n              viewLevel: {\n                level: level,\n                adcode: adcode,\n                granularity: granularity\n              },\n              source: {\n                joinBy: {\n                  geoData: geoData\n                }\n              }\n            });\n            this.update(mergeConfig);\n            drillData = {\n              level: level,\n              adcode: adcode,\n              granularity: granularity,\n              config: mergeConfig\n            };\n            return [2\n            /*return*/\n            , drillData];\n        }\n      });\n    });\n  };\n  /**\n   * 默认配置项\n   */\n\n\n  Choropleth.DefaultOptions = constants_1.DEFAULT_OPTIONS;\n  /**\n   * 地理数据地址\n   */\n\n  Choropleth.GeoDataUrl = constants_1.GEO_DATA_URL;\n  /**\n   * 行政数据地址\n   */\n\n  Choropleth.GeoAreaUrl = constants_1.GEO_AREA_URL;\n  return Choropleth;\n}(plot_1.Plot);\n\nexports.Choropleth = Choropleth;","map":null,"metadata":{},"sourceType":"script"}