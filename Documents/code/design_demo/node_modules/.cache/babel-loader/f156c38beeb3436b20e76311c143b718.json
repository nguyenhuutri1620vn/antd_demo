{"ast":null,"code":"import 'reflect-metadata';\nimport { EventEmitter } from 'eventemitter3';\nimport { Container, decorate, injectable } from 'inversify';\nimport getDecorators from 'inversify-inject-decorators';\nimport { TYPES } from './types';\nimport FontService from './services/asset/FontService';\nimport IconService from './services/asset/IconService';\nimport CameraService from './services/camera/CameraService';\nimport ControlService from './services/component/ControlService';\nimport MarkerService from './services/component/MarkerService';\nimport PopupService from './services/component/PopupService';\nimport GlobalConfigService from './services/config/ConfigService';\nimport CoordinateSystemService from './services/coordinate/CoordinateSystemService';\nimport InteractionService from './services/interaction/InteractionService';\nimport PickingService from './services/interaction/PickingService';\nimport LayerService from './services/layer/LayerService';\nimport StyleAttributeService from './services/layer/StyleAttributeService';\nimport SceneService from './services/scene/SceneService';\nimport ShaderModuleService from './services/shader/ShaderModuleService';\nimport ClearPass from './services/renderer/passes/ClearPass';\nimport MultiPassRenderer from './services/renderer/passes/MultiPassRenderer';\nimport PixelPickingPass from './services/renderer/passes/PixelPickingPass';\nimport BloomPass from './services/renderer/passes/post-processing/BloomPass';\nimport BlurHPass from './services/renderer/passes/post-processing/BlurHPass';\nimport BlurVPass from './services/renderer/passes/post-processing/BlurVPass';\nimport ColorHalfTonePass from './services/renderer/passes/post-processing/ColorHalfTonePass';\nimport CopyPass from './services/renderer/passes/post-processing/CopyPass';\nimport HexagonalPixelatePass from './services/renderer/passes/post-processing/HexagonalPixelatePass';\nimport InkPass from './services/renderer/passes/post-processing/InkPass';\nimport NoisePass from './services/renderer/passes/post-processing/NoisePass';\nimport SepiaPass from './services/renderer/passes/post-processing/SepiaPass';\nimport PostProcessor from './services/renderer/passes/PostProcessor';\nimport RenderPass from './services/renderer/passes/RenderPass';\nimport TAAPass from './services/renderer/passes/TAAPass';\nvar container = new Container();\ncontainer.bind(TYPES.IGlobalConfigService).to(GlobalConfigService).inSingletonScope();\ndecorate(injectable(), EventEmitter);\ncontainer.bind(TYPES.IEventEmitter).to(EventEmitter);\nvar DECORATORS = getDecorators(container, false);\nexport var lazyInject = function lazyInject(serviceIdentifier) {\n  var original = DECORATORS.lazyInject(serviceIdentifier);\n  return function (proto, key, descriptor) {\n    original.call(this, proto, key);\n\n    if (descriptor) {\n      descriptor.initializer = function () {\n        return proto[key];\n      };\n    }\n  };\n};\nexport var lazyMultiInject = function lazyMultiInject(serviceIdentifier) {\n  var original = DECORATORS.lazyMultiInject(serviceIdentifier);\n  return function (proto, key, descriptor) {\n    original.call(this, proto, key);\n\n    if (descriptor) {\n      descriptor.initializer = function () {\n        return proto[key];\n      };\n    }\n  };\n};\nexport default container;\nvar sceneIdCounter = 0;\nexport function createSceneContainer() {\n  var sceneContainer = new Container();\n  sceneContainer.parent = container;\n  sceneContainer.bind(TYPES.SceneID).toConstantValue(\"\".concat(sceneIdCounter++));\n  sceneContainer.bind(TYPES.IShaderModuleService).to(ShaderModuleService).inSingletonScope();\n  sceneContainer.bind(TYPES.ILayerService).to(LayerService).inSingletonScope();\n  sceneContainer.bind(TYPES.ISceneService).to(SceneService).inSingletonScope();\n  sceneContainer.bind(TYPES.ICameraService).to(CameraService).inSingletonScope();\n  sceneContainer.bind(TYPES.ICoordinateSystemService).to(CoordinateSystemService).inSingletonScope();\n  sceneContainer.bind(TYPES.IInteractionService).to(InteractionService).inSingletonScope();\n  sceneContainer.bind(TYPES.IPickingService).to(PickingService).inSingletonScope();\n  sceneContainer.bind(TYPES.IControlService).to(ControlService).inSingletonScope();\n  sceneContainer.bind(TYPES.IMarkerService).to(MarkerService).inSingletonScope();\n  sceneContainer.bind(TYPES.IIconService).to(IconService).inSingletonScope();\n  sceneContainer.bind(TYPES.IFontService).to(FontService).inSingletonScope();\n  sceneContainer.bind(TYPES.IPopupService).to(PopupService).inSingletonScope();\n  sceneContainer.bind(TYPES.INormalPass).to(ClearPass).whenTargetNamed('clear');\n  sceneContainer.bind(TYPES.INormalPass).to(PixelPickingPass).whenTargetNamed('pixelPicking');\n  sceneContainer.bind(TYPES.INormalPass).to(RenderPass).whenTargetNamed('render');\n  sceneContainer.bind(TYPES.INormalPass).to(TAAPass).whenTargetNamed('taa');\n  sceneContainer.bind(TYPES.IFactoryNormalPass).toFactory(function (context) {\n    return function (named) {\n      return context.container.getNamed(TYPES.INormalPass, named);\n    };\n  });\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(CopyPass).whenTargetNamed('copy');\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(BloomPass).whenTargetNamed('bloom');\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(BlurHPass).whenTargetNamed('blurH');\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(BlurVPass).whenTargetNamed('blurV');\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(NoisePass).whenTargetNamed('noise');\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(SepiaPass).whenTargetNamed('sepia');\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(ColorHalfTonePass).whenTargetNamed('colorHalftone');\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(HexagonalPixelatePass).whenTargetNamed('hexagonalPixelate');\n  sceneContainer.bind(TYPES.IPostProcessingPass).to(InkPass).whenTargetNamed('ink');\n  sceneContainer.bind(TYPES.IFactoryPostProcessingPass).toFactory(function (context) {\n    return function (named) {\n      var pass = context.container.getNamed(TYPES.IPostProcessingPass, named);\n      pass.setName(named);\n      return pass;\n    };\n  });\n  return sceneContainer;\n}\nexport function createLayerContainer(sceneContainer) {\n  var layerContainer = new Container();\n  layerContainer.parent = sceneContainer;\n  layerContainer.bind(TYPES.IStyleAttributeService).to(StyleAttributeService).inSingletonScope();\n  layerContainer.bind(TYPES.IMultiPassRenderer).to(MultiPassRenderer).inSingletonScope();\n  layerContainer.bind(TYPES.IPostProcessor).to(PostProcessor).inSingletonScope();\n  return layerContainer;\n}","map":null,"metadata":{},"sourceType":"module"}