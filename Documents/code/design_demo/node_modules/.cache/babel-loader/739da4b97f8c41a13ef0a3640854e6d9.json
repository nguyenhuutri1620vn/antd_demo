{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { isEqual } from 'lodash';\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGraphCommands, XFlowNodeCommands, XFlowEdgeCommands, XFlowGroupCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsGraphUtils;\n\n(function (NsGraphUtils) {\n  function isNodeEqual(curNodeConfig, nextNodeConfig) {\n    /** XFlow默认的判断节点是否相等的逻辑 */\n    return isEqual(curNodeConfig, nextNodeConfig);\n  }\n\n  NsGraphUtils.isNodeEqual = isNodeEqual;\n\n  function isEdgeEqual(curEdgeConfig, nextEdgeConfig) {\n    /** XFlow默认的判断边是否相等的逻辑 */\n    return isEqual(curEdgeConfig, nextEdgeConfig);\n  }\n\n  NsGraphUtils.isEdgeEqual = isEdgeEqual;\n})(NsGraphUtils || (NsGraphUtils = {}));\n\nexport var NsGraphRender;\n\n(function (NsGraphRender) {\n  /** Command: 用于注册named factory */\n  NsGraphRender.command = XFlowGraphCommands.GRAPH_RENDER;\n  /** hookName */\n\n  NsGraphRender.hookKey = 'graphRender';\n})(NsGraphRender || (NsGraphRender = {}));\n\nlet GraphRenderCommand =\n/** 画布渲染命令 */\nclass GraphRenderCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.graphRender.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const graphMeta = yield this.ctx.getGraphMeta();\n        const {\n          beforeRender,\n          graphData,\n          isNodeEqual,\n          isEdgeEqual,\n          afterRender\n        } = handlerArgs;\n        /** 如果用户自定义beforeRender方法 */\n\n        beforeRender && beforeRender(graphMeta);\n        yield this.doLoadGraph(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n        /** 如果用户自定义afterRender方法 */\n\n        afterRender && afterRender(graphData, graphMeta);\n        return {};\n      }), runtimeHook);\n      /** 设置结果 */\n\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n\n    this.doLoadGraph = (x6Graph, graphData, isNodeEqual, isEdgeEqual) => __awaiter(this, void 0, void 0, function* () {\n      if (!(x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen())) {\n        x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.freeze();\n      }\n\n      const commandService = this.ctx.getCommands();\n      const {\n        addNodeConfigs,\n        addEdgeConfigs,\n        // retainNodes,\n        // retainEdges,\n        removeNodes,\n        removeEdges,\n        updateNodes,\n        updateEdges\n      } = this.graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual);\n      /** 新增节点/边 */\n\n      for (const nodeConfig of addNodeConfigs) {\n        yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n          nodeConfig\n        }, {\n          name: 'remove servcie',\n          handler: args => __awaiter(this, void 0, void 0, function* () {\n            delete args.createNodeService;\n          })\n        });\n      }\n\n      yield commandService.executeCommand(XFlowGroupCommands.INIT_GROUP.id, {\n        graphData: {\n          nodes: addNodeConfigs,\n          edges: []\n        }\n      });\n\n      for (const edgeConfig of addEdgeConfigs) {\n        yield commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n          edgeConfig\n        }, {\n          name: 'remove servcie',\n          handler: args => __awaiter(this, void 0, void 0, function* () {\n            delete args.createEdgeService;\n          })\n        });\n      }\n      /** 删除节点/边/群组 */\n\n\n      for (const removeNode of removeNodes) {\n        const nodeData = removeNode === null || removeNode === void 0 ? void 0 : removeNode.getData();\n\n        if (nodeData.isGroup) {\n          yield commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n            nodeConfig: nodeData\n          });\n        } else {\n          yield commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n            nodeConfig: nodeData\n          });\n        }\n      }\n\n      for (const removeEdge of removeEdges) {\n        const edgeData = removeEdge === null || removeEdge === void 0 ? void 0 : removeEdge.getData();\n        yield commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n          edgeConfig: edgeData\n        });\n      }\n      /** 更新节点/边 */\n\n\n      for (const updateNode of updateNodes) {\n        const nodeData = updateNode === null || updateNode === void 0 ? void 0 : updateNode.getData();\n        yield commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n          nodeConfig: nodeData\n        });\n      }\n\n      for (const updateEdge of updateEdges) {\n        const edgeData = updateEdge === null || updateEdge === void 0 ? void 0 : updateEdge.getData();\n        yield commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n          edgeConfig: edgeData\n        });\n      }\n\n      if (x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.isFrozen()) {\n        x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.unfreeze();\n      }\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n  /**\n   * 画布内容Diff\n   * @param x6Graph x6画布实例\n   * @param graphData 画布数据\n   * @param isNodeEqual 允许用户自定义判断节点是否相等\n   * @param isEdgeEqual 允许用户自定义判断边是否相等\n   */\n\n\n  graphDataDiff(x6Graph, graphData, isNodeEqual, isEdgeEqual) {\n    const {\n      nodes: nodeConfigs,\n      edges: edgeConfigs\n    } = graphData;\n    /** 新增节点数据 */\n\n    const addNodeConfigs = [];\n    nodeConfigs.forEach(nodeConfig => {\n      const findNode = x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);\n\n      if (!findNode) {\n        addNodeConfigs.push(nodeConfig);\n      }\n    });\n    /** 保持、更新、移除节点 */\n\n    const retainNodes = [];\n    const updateNodes = [];\n    const removeNodes = [];\n    const allNodes = x6Graph.getNodes();\n    allNodes.forEach(x6Node => {\n      const findNodeConfig = nodeConfigs.find(nodeConfig => (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id) === (x6Node === null || x6Node === void 0 ? void 0 : x6Node.id));\n\n      if (!findNodeConfig) {\n        removeNodes.push(x6Node);\n      } else {\n        let judgeResult = true;\n\n        if (isNodeEqual) {\n          /** 如果用户自定义节点是否相等的方法 */\n          judgeResult = isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n        } else {\n          /** XFlow默认的判断节点是否相等的逻辑 */\n          if ((x6Node === null || x6Node === void 0 ? void 0 : x6Node.data) && findNodeConfig) {\n            judgeResult = NsGraphUtils.isNodeEqual(x6Node === null || x6Node === void 0 ? void 0 : x6Node.data, findNodeConfig);\n          }\n        }\n\n        if (!judgeResult) {\n          x6Node.setData(findNodeConfig);\n        }\n\n        judgeResult === true ? retainNodes.push(x6Node) : updateNodes.push(x6Node);\n      }\n    });\n    /** 新增边数据 */\n\n    const addEdgeConfigs = [];\n    edgeConfigs.forEach(edgeConfig => {\n      const findEdge = x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n\n      if (!findEdge) {\n        addEdgeConfigs.push(edgeConfig);\n      }\n    });\n    /** 保持、更新、移除节点 */\n\n    const retainEdges = [];\n    const updateEdges = [];\n    const removeEdges = [];\n    const allEdges = x6Graph.getEdges();\n    allEdges.forEach(x6Edge => {\n      const findEdgeConfig = edgeConfigs.find(edgeConfig => (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id) === (x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.id));\n\n      if (!findEdgeConfig) {\n        removeEdges.push(x6Edge);\n      } else {\n        let judgeResult = true;\n\n        if (isEdgeEqual) {\n          /** 如果用户自定义边是否相等的方法 */\n          judgeResult = isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n        } else {\n          /** XFlow默认的判断边是否相等的逻辑 */\n          if ((x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data) && findEdgeConfig) {\n            judgeResult = NsGraphUtils.isEdgeEqual(x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.data, findEdgeConfig);\n          }\n        }\n\n        if (!judgeResult) {\n          x6Edge.setData(findEdgeConfig);\n        }\n\n        judgeResult === true ? retainEdges.push(x6Edge) : updateEdges.push(x6Edge);\n      }\n    });\n    return {\n      addNodeConfigs,\n      addEdgeConfigs,\n      retainNodes,\n      retainEdges,\n      removeNodes,\n      removeEdges,\n      updateNodes,\n      updateEdges\n    };\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphRenderCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphRenderCommand.prototype, \"init\", null);\n\nGraphRenderCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphRender.command.id\n  }\n})\n/** 画布渲染命令 */\n], GraphRenderCommand);\nexport { GraphRenderCommand };","map":null,"metadata":{},"sourceType":"module"}