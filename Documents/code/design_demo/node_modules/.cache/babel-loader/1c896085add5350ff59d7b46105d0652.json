{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport { Toolbar } from '@antv/x6-react-components';\nimport { useXFlowApp, IconStore } from '@antv/xflow';\nexport var ToolbarItem = function (props) {\n  var _a;\n\n  var app = useXFlowApp();\n  var item = props.item,\n      layout = props.layout;\n  var Icon = IconStore.get(item.iconName);\n  var clz = classnames((_a = {}, _a['xflow-toolbar-item'] = true, _a));\n  var text = layout === 'vertical' ? '' : item.text;\n  var icon = Icon ? React.createElement(Icon, null) : null;\n  var ToolbarItemWrap = item.render;\n  var _b = item.isEnabled,\n      isEnabled = _b === void 0 ? true : _b;\n  var commandService = app.commandService,\n      modelService = app.modelService;\n\n  var onItemClick = function () {\n    if (item.onClick) {\n      item.onClick({\n        toolbarItem: item,\n        commandService: commandService,\n        modelService: modelService\n      });\n    }\n  };\n\n  if (ToolbarItemWrap) {\n    return React.createElement(ToolbarItemWrap, __assign({}, item, {\n      onClick: onItemClick\n    }), React.createElement(Toolbar.Item, __assign({}, item, {\n      icon: icon,\n      text: text,\n      className: clz,\n      disabled: !isEnabled,\n      tooltip: item.tooltip || item.text,\n      tooltipProps: __assign({\n        placement: layout === 'vertical' ? 'left' : 'bottom'\n      }, item.tooltipProps),\n      onClick: function () {}\n    })));\n  }\n\n  return React.createElement(Toolbar.Item, __assign({}, item, {\n    icon: icon,\n    text: text,\n    className: clz,\n    hidden: !item,\n    disabled: !isEnabled,\n    tooltip: item.tooltip || item.text,\n    onClick: onItemClick,\n    tooltipProps: __assign(__assign({}, item.tooltipProps), {\n      placement: layout === 'vertical' ? 'left' : 'bottom'\n    })\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}