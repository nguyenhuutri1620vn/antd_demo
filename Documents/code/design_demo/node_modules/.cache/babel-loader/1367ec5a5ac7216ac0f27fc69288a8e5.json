{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { useRef, useEffect } from 'react';\nimport { isEqual, pick } from '@antv/util';\nimport { deepCloneMapConfig } from '../util';\nexport default function useL7Plot(Ctor, config) {\n  var plotRef = useRef();\n  var plotConfig = useRef();\n  var containerRef = useRef(null);\n  var onReady = config.onReady; // updateOption/changeData/updateMap\n\n  useEffect(function () {\n    if (!plotRef.current || !plotConfig.current || isEqual(plotConfig.current, config)) return;\n    var changeData = false;\n    var updateMap = false;\n    var updateOption = false;\n\n    var _a = plotConfig.current,\n        currentOnReady = _a.onReady,\n        currentMap = _a.map,\n        currentSource = _a.source,\n        currentConfig = __rest(_a, [\"onReady\", \"map\", \"source\"]);\n\n    var onReady = config.onReady,\n        inputMap = config.map,\n        inputSource = config.source,\n        inputConfig = __rest(config, [\"onReady\", \"map\", \"source\"]);\n\n    updateMap = !isEqual(currentMap, inputMap);\n    changeData = !isEqual(currentSource, inputSource);\n    updateOption = !isEqual(currentConfig, inputConfig);\n\n    if (updateMap && inputMap) {\n      var updateMapConfig = pick(inputMap, ['center', 'pitch', 'rotation', 'zoom', 'style']);\n      plotRef.current.updateMap(updateMapConfig);\n    }\n\n    if (changeData && inputSource) {\n      var data_1 = inputSource.data,\n          cfg_1 = __rest(inputSource, [\"data\"]);\n\n      if (plotRef.current.loaded) {\n        plotRef.current.changeData(data_1, cfg_1);\n      } else {\n        plotRef.current.once('loaded', function () {\n          var _a;\n\n          (_a = plotRef.current) === null || _a === void 0 ? void 0 : _a.changeData(data_1, cfg_1);\n        });\n      }\n    }\n\n    if (updateOption && inputConfig) {\n      if (plotRef.current.loaded) {\n        // @ts-ignore\n        plotRef.current.update(inputConfig);\n      } else {\n        plotRef.current.once('loaded', function () {\n          var _a; // @ts-ignore\n\n\n          (_a = plotRef.current) === null || _a === void 0 ? void 0 : _a.update(inputConfig);\n        });\n      }\n    }\n\n    plotConfig.current = deepCloneMapConfig(config);\n  }, [config]);\n  useEffect(function () {\n    if (!containerRef.current) {\n      return function () {\n        return null;\n      };\n    }\n\n    plotRef.current = new Ctor(containerRef.current, __assign({}, config));\n\n    if (!plotConfig.current) {\n      plotConfig.current = deepCloneMapConfig(config);\n    }\n\n    if (onReady) {\n      plotRef.current.once('loaded', function () {\n        onReady(plotRef.current);\n      });\n    } // 组件销毁时销毁图表\n\n\n    return function () {\n      if (plotRef.current) {\n        plotRef.current.destroy();\n        plotRef.current = undefined;\n      }\n    };\n  }, []);\n  return {\n    plotRef: plotRef,\n    containerRef: containerRef\n  };\n}","map":null,"metadata":{},"sourceType":"module"}