{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsInitGroup;\n\n(function (NsInitGroup) {\n  /** Command: 用于注册named factory */\n  NsInitGroup.command = XFlowGroupCommands.INIT_GROUP;\n  /** hookName */\n\n  NsInitGroup.hookKey = 'initGroup';\n})(NsInitGroup || (NsInitGroup = {}));\n\nlet InitGroupCommand =\n/** 创建节点命令 */\nclass InitGroupCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.initGroup.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graphData,\n          commandService\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n        const {\n          nodes\n        } = graphData;\n        const groupMap = {};\n        nodes.forEach(node => {\n          const {\n            id,\n            group\n          } = node;\n\n          if (group) {\n            if (groupMap[group]) {\n              groupMap[group].push(id);\n            } else {\n              groupMap[group] = [id];\n            }\n          }\n        });\n        Object.keys(groupMap).forEach(groupId => __awaiter(this, void 0, void 0, function* () {\n          const groupNode = graph.getCellById(groupId);\n          const groupData = groupNode.getData();\n          const childrenIds = groupMap[groupId] || []; // 更新props\n\n          groupNode.prop('isGroup', true);\n          groupNode.setData(Object.assign(Object.assign({}, groupData), {\n            isGroup: true,\n            groupChildren: childrenIds\n          }));\n          childrenIds.forEach(childId => {\n            const child = graph.getCellById(childId);\n            groupNode.embed(child);\n          }); // Group置于底层\n\n          groupNode.toBack(); // collapse\n\n          const {\n            isCollapsed,\n            groupCollapsedSize\n          } = groupData;\n\n          if (isCollapsed) {\n            const collapsedSize = handlerArgs.collapsedSize || groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n            yield commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n              collapsedSize,\n              isCollapsed: true,\n              nodeId: groupNode.id\n            });\n          }\n        }));\n        return {};\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], InitGroupCommand.prototype, \"contextProvider\", void 0);\n\nInitGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsInitGroup.command.id\n  }\n})\n/** 创建节点命令 */\n], InitGroupCommand);\nexport { InitGroupCommand };","map":null,"metadata":{},"sourceType":"module"}