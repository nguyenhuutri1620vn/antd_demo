{"ast":null,"code":"import { Point } from './point';\nimport { Geometry } from './geometry';\nimport { Rectangle } from './rectangle';\nexport class Line extends Geometry {\n  constructor(x1, y1, x2, y2) {\n    super();\n\n    if (typeof x1 === 'number' && typeof y1 === 'number') {\n      this.start = new Point(x1, y1);\n      this.end = new Point(x2, y2);\n    } else {\n      this.start = Point.create(x1);\n      this.end = Point.create(y1);\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return Line.toStringTag;\n  }\n\n  get center() {\n    return new Point((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);\n  }\n\n  getCenter() {\n    return this.center;\n  }\n  /**\n   * Rounds the line to the given `precision`.\n   */\n\n\n  round() {\n    let precision = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.start.round(precision);\n    this.end.round(precision);\n    return this;\n  }\n\n  translate(tx, ty) {\n    if (typeof tx === 'number') {\n      this.start.translate(tx, ty);\n      this.end.translate(tx, ty);\n    } else {\n      this.start.translate(tx);\n      this.end.translate(tx);\n    }\n\n    return this;\n  }\n  /**\n   * Rotate the line by `angle` around `origin`.\n   */\n\n\n  rotate(angle, origin) {\n    this.start.rotate(angle, origin);\n    this.end.rotate(angle, origin);\n    return this;\n  }\n  /**\n   * Scale the line by `sx` and `sy` about the given `origin`. If origin is not\n   * specified, the line is scaled around `0,0`.\n   */\n\n\n  scale(sx, sy, origin) {\n    this.start.scale(sx, sy, origin);\n    this.end.scale(sx, sy, origin);\n    return this;\n  }\n  /**\n   * Returns the length of the line.\n   */\n\n\n  length() {\n    return Math.sqrt(this.squaredLength());\n  }\n  /**\n   * Useful for distance comparisons in which real length is not necessary\n   * (saves one `Math.sqrt()` operation).\n   */\n\n\n  squaredLength() {\n    const dx = this.start.x - this.end.x;\n    const dy = this.start.y - this.end.y;\n    return dx * dx + dy * dy;\n  }\n  /**\n   * Scale the line so that it has the requested length. The start point of\n   * the line is preserved.\n   */\n\n\n  setLength(length) {\n    const total = this.length();\n\n    if (!total) {\n      return this;\n    }\n\n    const scale = length / total;\n    return this.scale(scale, scale, this.start);\n  }\n\n  parallel(distance) {\n    const line = this.clone();\n\n    if (!line.isDifferentiable()) {\n      return line;\n    }\n\n    const {\n      start,\n      end\n    } = line;\n    const eRef = start.clone().rotate(270, end);\n    const sRef = end.clone().rotate(90, start);\n    start.move(sRef, distance);\n    end.move(eRef, distance);\n    return line;\n  }\n  /**\n   * Returns the vector of the line with length equal to length of the line.\n   */\n\n\n  vector() {\n    return new Point(this.end.x - this.start.x, this.end.y - this.start.y);\n  }\n  /**\n   * Returns the angle of incline of the line.\n   *\n   * The function returns `NaN` if the start and end endpoints of the line\n   * both lie at the same coordinates(it is impossible to determine the angle\n   * of incline of a line that appears to be a point). The\n   * `line.isDifferentiable()` function may be used in advance to determine\n   * whether the angle of incline can be computed for a given line.\n   */\n\n\n  angle() {\n    const horizontal = new Point(this.start.x + 1, this.start.y);\n    return this.start.angleBetween(this.end, horizontal);\n  }\n  /**\n   * Returns a rectangle that is the bounding box of the line.\n   */\n\n\n  bbox() {\n    const left = Math.min(this.start.x, this.end.x);\n    const top = Math.min(this.start.y, this.end.y);\n    const right = Math.max(this.start.x, this.end.x);\n    const bottom = Math.max(this.start.y, this.end.y);\n    return new Rectangle(left, top, right - left, bottom - top);\n  }\n  /**\n   * Returns the bearing (cardinal direction) of the line.\n   *\n   * The return value is one of the following strings:\n   * 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW' and 'N'.\n   *\n   * The function returns 'N' if the two endpoints of the line are coincident.\n   */\n\n\n  bearing() {\n    return this.start.bearing(this.end);\n  }\n  /**\n   * Returns the point on the line that lies closest to point `p`.\n   */\n\n\n  closestPoint(p) {\n    return this.pointAt(this.closestPointNormalizedLength(p));\n  }\n  /**\n   * Returns the length of the line up to the point that lies closest to point `p`.\n   */\n\n\n  closestPointLength(p) {\n    return this.closestPointNormalizedLength(p) * this.length();\n  }\n  /**\n   * Returns a line that is tangent to the line at the point that lies closest\n   * to point `p`.\n   */\n\n\n  closestPointTangent(p) {\n    return this.tangentAt(this.closestPointNormalizedLength(p));\n  }\n  /**\n   * Returns the normalized length (distance from the start of the line / total\n   * line length) of the line up to the point that lies closest to point.\n   */\n\n\n  closestPointNormalizedLength(p) {\n    const product = this.vector().dot(new Line(this.start, p).vector());\n    const normalized = Math.min(1, Math.max(0, product / this.squaredLength())); // normalized returns `NaN` if this line has zero length\n\n    if (Number.isNaN(normalized)) {\n      return 0;\n    }\n\n    return normalized;\n  }\n  /**\n   * Returns a point on the line that lies `rate` (normalized length) away from\n   * the beginning of the line.\n   */\n\n\n  pointAt(ratio) {\n    const start = this.start;\n    const end = this.end;\n\n    if (ratio <= 0) {\n      return start.clone();\n    }\n\n    if (ratio >= 1) {\n      return end.clone();\n    }\n\n    return start.lerp(end, ratio);\n  }\n  /**\n   * Returns a point on the line that lies length away from the beginning of\n   * the line.\n   */\n\n\n  pointAtLength(length) {\n    const start = this.start;\n    const end = this.end;\n    let fromStart = true;\n\n    if (length < 0) {\n      fromStart = false; // start calculation from end point\n\n      length = -length; // eslint-disable-line\n    }\n\n    const total = this.length();\n\n    if (length >= total) {\n      return fromStart ? end.clone() : start.clone();\n    }\n\n    const rate = (fromStart ? length : total - length) / total;\n    return this.pointAt(rate);\n  }\n  /**\n   * Divides the line into two lines at the point that lies `rate` (normalized\n   * length) away from the beginning of the line.\n   */\n\n\n  divideAt(ratio) {\n    const dividerPoint = this.pointAt(ratio);\n    return [new Line(this.start, dividerPoint), new Line(dividerPoint, this.end)];\n  }\n  /**\n   * Divides the line into two lines at the point that lies length away from\n   * the beginning of the line.\n   */\n\n\n  divideAtLength(length) {\n    const dividerPoint = this.pointAtLength(length);\n    return [new Line(this.start, dividerPoint), new Line(dividerPoint, this.end)];\n  }\n  /**\n   * Returns `true` if the point `p` lies on the line. Return `false` otherwise.\n   */\n\n\n  containsPoint(p) {\n    const start = this.start;\n    const end = this.end; // cross product of 0 indicates that this line and\n    // the vector to `p` are collinear.\n\n    if (start.cross(p, end) !== 0) {\n      return false;\n    }\n\n    const length = this.length();\n\n    if (new Line(start, p).length() > length) {\n      return false;\n    }\n\n    if (new Line(p, end).length() > length) {\n      return false;\n    }\n\n    return true;\n  }\n\n  intersect(shape, options) {\n    const ret = shape.intersectsWithLine(this, options);\n\n    if (ret) {\n      return Array.isArray(ret) ? ret : [ret];\n    }\n\n    return null;\n  }\n  /**\n   * Returns the intersection point of the line with another line. Returns\n   * `null` if no intersection exists.\n   */\n\n\n  intersectsWithLine(line) {\n    const pt1Dir = new Point(this.end.x - this.start.x, this.end.y - this.start.y);\n    const pt2Dir = new Point(line.end.x - line.start.x, line.end.y - line.start.y);\n    const det = pt1Dir.x * pt2Dir.y - pt1Dir.y * pt2Dir.x;\n    const deltaPt = new Point(line.start.x - this.start.x, line.start.y - this.start.y);\n    const alpha = deltaPt.x * pt2Dir.y - deltaPt.y * pt2Dir.x;\n    const beta = deltaPt.x * pt1Dir.y - deltaPt.y * pt1Dir.x;\n\n    if (det === 0 || alpha * det < 0 || beta * det < 0) {\n      return null;\n    }\n\n    if (det > 0) {\n      if (alpha > det || beta > det) {\n        return null;\n      }\n    } else if (alpha < det || beta < det) {\n      return null;\n    }\n\n    return new Point(this.start.x + alpha * pt1Dir.x / det, this.start.y + alpha * pt1Dir.y / det);\n  }\n  /**\n   * Returns `true` if a tangent line can be found for the line.\n   *\n   * Tangents cannot be found if both of the line endpoints are coincident\n   * (the line appears to be a point).\n   */\n\n\n  isDifferentiable() {\n    return !this.start.equals(this.end);\n  }\n  /**\n   * Returns the perpendicular distance between the line and point. The\n   * distance is positive if the point lies to the right of the line, negative\n   * if the point lies to the left of the line, and `0` if the point lies on\n   * the line.\n   */\n\n\n  pointOffset(p) {\n    const ref = Point.clone(p);\n    const start = this.start;\n    const end = this.end;\n    const determinant = (end.x - start.x) * (ref.y - start.y) - (end.y - start.y) * (ref.x - start.x);\n    return determinant / this.length();\n  }\n\n  pointSquaredDistance(x, y) {\n    const p = Point.create(x, y);\n    return this.closestPoint(p).squaredDistance(p);\n  }\n\n  pointDistance(x, y) {\n    const p = Point.create(x, y);\n    return this.closestPoint(p).distance(p);\n  }\n  /**\n   * Returns a line tangent to the line at point that lies `rate` (normalized\n   * length) away from the beginning of the line.\n   */\n\n\n  tangentAt(ratio) {\n    if (!this.isDifferentiable()) {\n      return null;\n    }\n\n    const start = this.start;\n    const end = this.end;\n    const tangentStart = this.pointAt(ratio);\n    const tangentLine = new Line(start, end);\n    tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y);\n    return tangentLine;\n  }\n  /**\n   * Returns a line tangent to the line at point that lies `length` away from\n   * the beginning of the line.\n   */\n\n\n  tangentAtLength(length) {\n    if (!this.isDifferentiable()) {\n      return null;\n    }\n\n    const start = this.start;\n    const end = this.end;\n    const tangentStart = this.pointAtLength(length);\n    const tangentLine = new Line(start, end);\n    tangentLine.translate(tangentStart.x - start.x, tangentStart.y - start.y);\n    return tangentLine;\n  }\n\n  relativeCcw(x, y) {\n    const ref = Point.create(x, y);\n    let dx1 = ref.x - this.start.x;\n    let dy1 = ref.y - this.start.y;\n    const dx2 = this.end.x - this.start.x;\n    const dy2 = this.end.y - this.start.y;\n    let ccw = dx1 * dy2 - dy1 * dx2;\n\n    if (ccw === 0) {\n      ccw = dx1 * dx2 + dy1 * dy2;\n\n      if (ccw > 0.0) {\n        dx1 -= dx2;\n        dy1 -= dy2;\n        ccw = dx1 * dx2 + dy1 * dy2;\n\n        if (ccw < 0.0) {\n          ccw = 0.0;\n        }\n      }\n    }\n\n    return ccw < 0.0 ? -1 : ccw > 0.0 ? 1 : 0;\n  }\n  /**\n   * Return `true` if the line equals the other line.\n   */\n\n\n  equals(l) {\n    return l != null && this.start.x === l.start.x && this.start.y === l.start.y && this.end.x === l.end.x && this.end.y === l.end.y;\n  }\n  /**\n   * Returns another line which is a clone of the line.\n   */\n\n\n  clone() {\n    return new Line(this.start, this.end);\n  }\n\n  toJSON() {\n    return {\n      start: this.start.toJSON(),\n      end: this.end.toJSON()\n    };\n  }\n\n  serialize() {\n    return [this.start.serialize(), this.end.serialize()].join(' ');\n  }\n\n}\n\n(function (Line) {\n  Line.toStringTag = `X6.Geometry.${Line.name}`;\n\n  function isLine(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof Line) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const line = instance;\n\n    try {\n      if ((tag == null || tag === Line.toStringTag) && Point.isPoint(line.start) && Point.isPoint(line.end) && typeof line.vector === 'function' && typeof line.bearing === 'function' && typeof line.parallel === 'function' && typeof line.intersect === 'function') {\n        return true;\n      }\n    } catch (e) {\n      return false;\n    }\n\n    return false;\n  }\n\n  Line.isLine = isLine;\n})(Line || (Line = {}));","map":null,"metadata":{},"sourceType":"module"}