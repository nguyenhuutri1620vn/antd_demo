{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGraphCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsGraphSaveData;\n\n(function (NsGraphSaveData) {\n  /** Command Id: 用于注册named factory */\n  NsGraphSaveData.command = XFlowGraphCommands.SAVE_GRAPH_DATA;\n  /** hookName */\n\n  NsGraphSaveData.hookKey = 'saveGrpahData';\n})(NsGraphSaveData || (NsGraphSaveData = {}));\n\nlet GraphSaveDataCommand =\n/** 创建节点命令 */\nclass GraphSaveDataCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.ctx;\n      const args = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      /** 执行hooks */\n\n      yield hooks.saveGrpahData.call(\n      /** 执行hooks pipeline处理args */\n      args.args,\n      /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          saveGraphDataService,\n          includeAttrs\n        } = handlerArgs;\n        const x6Graph = yield ctx.getX6Graph();\n        const x6Nodes = x6Graph.getNodes();\n        const x6Edges = x6Graph.getEdges();\n        const nodes = x6Nodes.map(node => {\n          const data = node.getData();\n          const position = node.position();\n          const size = node.size();\n          const model = Object.assign(Object.assign(Object.assign({\n            id: node.id\n          }, data), position), size);\n\n          if (includeAttrs) {\n            model.attrs = node.getAttrs();\n          }\n\n          return model;\n        });\n        const edges = x6Edges.map(edge => {\n          const data = edge.getData();\n          const model = Object.assign({\n            id: edge.id\n          }, data);\n\n          if (includeAttrs) {\n            model.attrs = edge.getAttrs();\n          }\n\n          return model;\n        });\n        const graphData = {\n          nodes,\n          edges\n        };\n        const graphMeta = yield this.ctx.getGraphMeta();\n        /** 执行 service */\n\n        if (saveGraphDataService) {\n          const result = yield saveGraphDataService(graphMeta, graphData);\n          /** 设置结果 */\n\n          if (result) {\n            this.ctx.setResult(result);\n          }\n        }\n\n        return {};\n      }),\n      /** 外部的 hook */\n      args.hooks);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n  /** isUndoable */\n\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphSaveDataCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphSaveDataCommand.prototype, \"init\", null);\n\nGraphSaveDataCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphSaveData.command.id\n  }\n})\n/** 创建节点命令 */\n], GraphSaveDataCommand);\nexport { GraphSaveDataCommand };","map":null,"metadata":{},"sourceType":"module"}