{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { addEventListener } from '@antv/dom-util';\nimport { each, isNil, wrapBehavior } from '@antv/util';\nimport { AbstractEvent, Util } from '@antv/g6-core';\nvar cloneEvent = Util.cloneEvent,\n    isViewportChanged = Util.isViewportChanged;\n\nvar EventController =\n/** @class */\nfunction (_super) {\n  __extends(EventController, _super);\n\n  function EventController(graph) {\n    var _this = _super.call(this, graph) || this;\n\n    _this.extendEvents = [];\n    _this.dragging = false;\n    _this.preItem = null;\n    _this.graph = graph;\n    _this.destroyed = false;\n\n    _this.initEvents();\n\n    return _this;\n  } // 初始化 G6 中的事件\n\n\n  EventController.prototype.initEvents = function () {\n    var _a = this,\n        graph = _a.graph,\n        _b = _a.extendEvents,\n        extendEvents = _b === void 0 ? [] : _b;\n\n    var canvas = graph.get('canvas'); // canvas.set('draggable', true);\n\n    var el = canvas.get('el');\n    var canvasHandler = wrapBehavior(this, 'onCanvasEvents');\n    var originHandler = wrapBehavior(this, 'onExtendEvents');\n    var wheelHandler = wrapBehavior(this, 'onWheelEvent'); // each(EVENTS, event => {\n    //   canvas.off(event).on(event, canvasHandler);\n    // });\n\n    canvas.off('*').on('*', canvasHandler);\n    this.canvasHandler = canvasHandler;\n    extendEvents.push(addEventListener(el, 'DOMMouseScroll', wheelHandler));\n    extendEvents.push(addEventListener(el, 'mousewheel', wheelHandler));\n\n    if (typeof window !== 'undefined') {\n      extendEvents.push(addEventListener(window, 'keydown', originHandler));\n      extendEvents.push(addEventListener(window, 'keyup', originHandler));\n      extendEvents.push(addEventListener(window, 'focus', originHandler));\n    }\n  }; // 获取 shape 的 item 对象\n\n\n  EventController.getItemRoot = function (shape) {\n    while (shape && !shape.get('item')) {\n      shape = shape.get('parent');\n    }\n\n    return shape;\n  };\n  /**\n   * 处理 canvas 事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onCanvasEvents = function (evt) {\n    var graph = this.graph;\n    var canvas = graph.get('canvas');\n    var target = evt.target;\n    var eventType = evt.type;\n    /**\n     * (clientX, clientY): 相对于页面的坐标；\n     * (canvasX, canvasY): 相对于 <canvas> 左上角的坐标；\n     * (x, y): 相对于整个画布的坐标, 与 model 的 x, y 是同一维度的。\n     */\n\n    evt.canvasX = evt.x;\n    evt.canvasY = evt.y;\n    var point = {\n      x: evt.canvasX,\n      y: evt.canvasY\n    };\n    var group = graph.get('group');\n    var matrix = group.getMatrix();\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    if (isViewportChanged(matrix)) {\n      point = graph.getPointByClient(evt.clientX, evt.clientY);\n    }\n\n    evt.x = point.x;\n    evt.y = point.y;\n    evt.currentTarget = graph;\n\n    if (target === canvas) {\n      if (eventType === 'mousemove' || eventType === 'mouseleave') {\n        this.handleMouseMove(evt, 'canvas');\n      }\n\n      evt.target = canvas;\n      evt.item = null;\n      graph.emit(eventType, evt);\n      graph.emit(\"canvas:\".concat(eventType), evt);\n      return;\n    }\n\n    var itemShape = EventController.getItemRoot(target);\n\n    if (!itemShape) {\n      graph.emit(eventType, evt);\n      return;\n    }\n\n    var item = itemShape.get('item');\n\n    if (item.destroyed) {\n      return;\n    }\n\n    var type = item.getType(); // 事件target是触发事件的Shape实例，item是触发事件的item实例\n\n    evt.target = target;\n    evt.item = item;\n\n    if (evt.canvasX === evt.x && evt.canvasY === evt.y) {\n      var canvasPoint = graph.getCanvasByPoint(evt.x, evt.y);\n      evt.canvasX = canvasPoint.x;\n      evt.canvasY = canvasPoint.y;\n    } // emit('click', evt);\n\n\n    graph.emit(eventType, evt);\n    if (evt.name && !evt.name.includes(':')) graph.emit(\"\".concat(type, \":\").concat(eventType), evt); // emit('node:click', evt)\n    else graph.emit(evt.name, evt); // emit('text-shape:click', evt)\n\n    if (eventType === 'dragstart') {\n      this.dragging = true;\n    }\n\n    if (eventType === 'dragend') {\n      this.dragging = false;\n    }\n\n    if (eventType === 'mousemove') {\n      this.handleMouseMove(evt, type);\n    }\n  };\n  /**\n   * 处理扩展事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onExtendEvents = function (evt) {\n    this.graph.emit(evt.type, evt);\n  };\n  /**\n   * 处理滚轮事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onWheelEvent = function (evt) {\n    if (isNil(evt.wheelDelta)) {\n      evt.wheelDelta = -evt.detail;\n    }\n\n    this.graph.emit('wheel', evt);\n  };\n  /**\n   * 处理鼠标移动的事件\n   * @param evt 事件句柄\n   * @param type item 类型\n   */\n\n\n  EventController.prototype.handleMouseMove = function (evt, type) {\n    var _a = this,\n        graph = _a.graph,\n        preItem = _a.preItem;\n\n    var canvas = graph.get('canvas');\n    var item = evt.target === canvas ? null : evt.item;\n    evt = cloneEvent(evt); // 从前一个item直接移动到当前item，触发前一个item的leave事件\n\n    if (preItem && preItem !== item && !preItem.destroyed) {\n      evt.item = preItem;\n      this.emitCustomEvent(preItem.getType(), 'mouseleave', evt);\n\n      if (this.dragging) {\n        this.emitCustomEvent(preItem.getType(), 'dragleave', evt);\n      }\n    } // 从一个item或canvas移动到当前item，触发当前item的enter事件\n\n\n    if (item && preItem !== item) {\n      evt.item = item;\n      this.emitCustomEvent(type, 'mouseenter', evt);\n\n      if (this.dragging) {\n        this.emitCustomEvent(type, 'dragenter', evt);\n      }\n    }\n\n    this.preItem = item;\n  };\n  /**\n   * 在 graph 上面 emit 事件\n   * @param itemType item 类型\n   * @param eventType 事件类型\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.emitCustomEvent = function (itemType, eventType, evt) {\n    evt.type = eventType;\n    this.graph.emit(\"\".concat(itemType, \":\").concat(eventType), evt);\n  };\n\n  EventController.prototype.destroy = function () {\n    var _a = this,\n        graph = _a.graph,\n        canvasHandler = _a.canvasHandler,\n        extendEvents = _a.extendEvents;\n\n    var canvas = graph.get('canvas'); // each(EVENTS, event => {\n    //   canvas.off(event, canvasHandler);\n    // });\n\n    canvas.off('*', canvasHandler);\n    each(extendEvents, function (event) {\n      event.remove();\n    });\n    this.dragging = false;\n    this.preItem = null;\n    this.extendEvents.length = 0;\n    this.canvasHandler = null;\n    this.destroyed = true;\n  };\n\n  return EventController;\n}(AbstractEvent);\n\nexport default EventController;","map":null,"metadata":{},"sourceType":"module"}