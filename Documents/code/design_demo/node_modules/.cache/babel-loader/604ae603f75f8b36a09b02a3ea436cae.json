{"ast":null,"code":"import { Interpreter } from \"./interpreter/main\"; // TODO:\n// add tests\n\nexport function createContext(ctx) {\n  if (ctx === void 0) {\n    ctx = Object.create(null);\n  }\n\n  return ctx;\n}\nexport function compileFunction(code, params, options) {\n  if (params === void 0) {\n    params = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var ctx = options.parsingContext;\n  var timeout = options.timeout === undefined ? 0 : options.timeout;\n  var wrapCode = \"\\n    (function anonymous(\" + params.join(\",\") + \"){\\n         \" + code + \"\\n    });\\n    \";\n  var interpreter = new Interpreter(ctx, {\n    ecmaVersion: options.ecmaVersion,\n    timeout: timeout,\n    rootContext: options.rootContext,\n    globalContextInFunction: options.globalContextInFunction\n  });\n  return interpreter.evaluate(wrapCode);\n}\n\nfunction _runInContext(code, ctx, options) {\n  var interpreter = new Interpreter(ctx, options);\n  return interpreter.evaluate(code);\n}\n\nexport { _runInContext as runInContext };\nexport var runInNewContext = _runInContext;\nexport var Script = /*#__PURE__*/function () {\n  function Script(code) {\n    this._code = code;\n  }\n\n  var _proto = Script.prototype;\n\n  _proto.runInContext = function runInContext(ctx) {\n    return _runInContext(this._code, ctx);\n  };\n\n  _proto.runInNewContext = function runInNewContext(ctx) {\n    return _runInContext(this._code, ctx);\n  };\n\n  return Script;\n}();","map":null,"metadata":{},"sourceType":"module"}