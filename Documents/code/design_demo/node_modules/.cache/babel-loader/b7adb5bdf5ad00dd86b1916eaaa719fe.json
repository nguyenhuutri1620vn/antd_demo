{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { View } from '../../view';\nexport class Widget extends View {\n  constructor(options) {\n    super();\n\n    const _a = options,\n          {\n      view,\n      cell,\n      node,\n      edge,\n      graph\n    } = _a,\n          localOptions = __rest(_a, [\"view\", \"cell\", \"node\", \"edge\", \"graph\"]);\n\n    if (view) {\n      this.view = view;\n      this.cell = view.cell;\n      this.graph = view.graph;\n      this.model = this.graph.model;\n    } else if ((cell || edge || node) && graph) {\n      this.cell = node || edge || cell;\n      this.view = graph.renderer.findViewByCell(this.cell);\n      this.graph = graph;\n      this.model = this.graph.model;\n    }\n\n    const ctor = this.constructor;\n\n    if (options.clearAll !== false) {\n      ctor.removeInstances(this.graph);\n    }\n\n    ctor.register(this);\n    this.init(localOptions);\n  }\n\n  static ensureCache() {\n    if (!this.instanceCache.has(this)) {\n      this.instanceCache.set(this, {});\n    }\n\n    return this.instanceCache.get(this);\n  }\n\n  static register(instance, graph) {\n    if (graph == null) {\n      // eslint-disable-next-line\n      graph = instance.graph;\n    }\n\n    const dic = this.ensureCache();\n    let cache = dic[graph.view.cid];\n\n    if (cache == null) {\n      cache = dic[graph.view.cid] = {};\n    }\n\n    cache[instance.cid] = instance;\n  }\n\n  static unregister(instance, graph) {\n    if (graph == null) {\n      // eslint-disable-next-line\n      graph = instance.graph;\n    }\n\n    const dic = this.ensureCache();\n\n    if (dic[graph.view.cid]) {\n      delete dic[graph.view.cid][instance.cid];\n    }\n  }\n\n  static removeInstances(graph) {\n    const dic = this.ensureCache();\n    const cache = dic[graph.view.cid];\n\n    if (cache) {\n      Object.keys(cache).forEach(cid => {\n        const instance = cache[cid];\n\n        if (instance) {\n          instance.remove();\n        }\n      });\n    }\n  }\n\n  static getInstances(graph) {\n    const dic = this.ensureCache();\n    return dic[graph.view.cid] || {};\n  }\n\n  init(options) {} // eslint-disable-line\n\n\n  render() {\n    return this;\n  }\n\n  startListening() {\n    if (this.options.clearOnBlankMouseDown !== false) {\n      this.graph.on('blank:mousedown', this.remove, this);\n    }\n  }\n\n  stopListening() {\n    if (this.options.clearOnBlankMouseDown !== false) {\n      this.graph.off('blank:mousedown', this.remove, this);\n    }\n  }\n\n  remove() {\n    this.stopListening();\n    const ctor = this.constructor;\n    ctor.unregister(this);\n    return super.remove();\n  }\n\n  dispose() {\n    this.remove();\n  }\n\n} // #region static\n\nWidget.instanceCache = new WeakMap();\n\n__decorate([View.dispose()], Widget.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}