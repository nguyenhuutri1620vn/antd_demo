{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _dec, _class;\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar RegisterStyleAttributePlugin = (_dec = injectable(), _dec(_class = function () {\n  function RegisterStyleAttributePlugin() {\n    _classCallCheck(this, RegisterStyleAttributePlugin);\n  }\n\n  _createClass(RegisterStyleAttributePlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tap('RegisterStyleAttributePlugin', function () {\n        _this.registerBuiltinAttributes(styleAttributeService);\n      });\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes(styleAttributeService) {\n      styleAttributeService.registerStyleAttribute({\n        name: 'position',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Position',\n          buffer: {\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex) {\n            return vertex.length === 2 ? [vertex[0], vertex[1], 0] : [vertex[0], vertex[1], vertex[2]];\n          }\n        }\n      });\n      styleAttributeService.registerStyleAttribute({\n        name: 'filter',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'filter',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx) {\n            var filter = feature.filter;\n            return filter ? [1] : [0];\n          }\n        }\n      });\n      styleAttributeService.registerStyleAttribute({\n        name: 'color',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Color',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 4,\n          update: function update(feature, featureIdx) {\n            var color = feature.color;\n            return !color || !color.length ? [1, 1, 1, 1] : color;\n          }\n        }\n      });\n      styleAttributeService.registerStyleAttribute({\n        name: 'vertexId',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_vertexId',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [featureIdx];\n          }\n        }\n      });\n    }\n  }]);\n\n  return RegisterStyleAttributePlugin;\n}()) || _class);\nexport { RegisterStyleAttributePlugin as default };","map":null,"metadata":{},"sourceType":"module"}