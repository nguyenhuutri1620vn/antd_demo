{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React, { useCallback } from 'react';\nimport { XFlowGraphCommands, MODELS, XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { onConfigChange } from '../flowchart-canvas/utils';\nimport { FormItemWrapper } from '../canvas-json-schema-form';\nimport { usePanelContext } from '../base-panel/context';\nimport useAsync from './useAsync';\nexport const FlowchartFormWrapper = props => {\n  const {\n    controlSchema,\n    children,\n    type: formType = 'node'\n  } = props;\n  const {\n    commandService,\n    modelService\n  } = usePanelContext();\n  const getSelectNode = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    const {\n      data\n    } = yield MODELS.SELECTED_NODE.useValue(modelService);\n    return data;\n  }), [modelService]);\n  const getSelectEdge = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    const cell = yield MODELS.SELECTED_CELL.useValue(modelService);\n    const data = cell.getData();\n    return Object.assign({\n      id: cell.id\n    }, data);\n  }), [modelService]);\n  const {\n    data,\n    loading\n  } = useAsync(formType === 'edge' ? getSelectEdge : getSelectNode);\n  React.useEffect(() => {\n    commandService.executeCommand(XFlowGraphCommands.SAVE_GRAPH_DATA.id, {\n      saveGraphDataService: (meta, graph) => __awaiter(void 0, void 0, void 0, function* () {\n        return {\n          err: null,\n          data: graph,\n          meta\n        };\n      })\n    });\n  }, [commandService]);\n\n  const updateNode = value => __awaiter(void 0, void 0, void 0, function* () {\n    const currentNodeData = yield getSelectNode();\n    const nodeConfig = Object.assign(Object.assign({}, currentNodeData), value);\n    yield commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n      nodeConfig\n    });\n    onConfigChange({\n      type: 'update:node',\n      config: nodeConfig\n    });\n  });\n\n  const updateEdge = function (value) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'line';\n    let key = arguments.length > 2 ? arguments[2] : undefined;\n    return __awaiter(void 0, void 0, void 0, function* () {\n      var _a;\n\n      const currentEdgeData = yield getSelectEdge(); // 更新线、文本样式\n\n      const edgeConfig = Object.assign(Object.assign(Object.assign({}, currentEdgeData), key ? value[key] : value), {\n        attrs: Object.assign(Object.assign({}, currentEdgeData.attrs), {\n          [type]: Object.assign(Object.assign({}, (_a = currentEdgeData.attrs) === null || _a === void 0 ? void 0 : _a[type]), key ? value[key] : value)\n        })\n      });\n      yield commandService.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n        edgeConfig\n      });\n      onConfigChange({\n        type: 'update:edge',\n        config: edgeConfig\n      });\n    });\n  };\n\n  const updateGroup = value => __awaiter(void 0, void 0, void 0, function* () {\n    const currentGroupData = yield getSelectNode();\n    const nodeConfig = Object.assign(Object.assign({}, currentGroupData), value);\n    yield commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n      nodeConfig\n    });\n    onConfigChange({\n      type: 'update:group',\n      config: nodeConfig\n    });\n  });\n\n  if (loading) {\n    return null;\n  }\n\n  return React.createElement(FormItemWrapper, {\n    schema: controlSchema\n  }, () => {\n    return children(Object.assign({}, data), {\n      updateNode,\n      updateEdge,\n      updateGroup\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}