{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { useState } from 'react';\nimport { useXflowPrefixCls, WorkspacePanel } from '@antv/xflow';\nimport { DoubleRightOutlined, DoubleLeftOutlined } from '@ant-design/icons';\nimport { NodePanelBody } from './panel-body';\nimport { NodePanelHeader } from './panel-header';\nimport { usePanelLyaoutStyle } from './utils';\nimport { useTreePanelData } from './service';\nimport { CONTAINER_CLASS, PANEL_HEADER_HEIGHT } from './constants';\nexport var NodeTreePanelMain = function (props) {\n  var prefixClz = props.prefixClz,\n      _a = props.position,\n      position = _a === void 0 ? {\n    width: 240,\n    top: 0,\n    bottom: 0,\n    left: 0\n  } : _a,\n      _b = props.showHeader,\n      showHeader = _b === void 0 ? true : _b,\n      rest = __rest(props, [\"prefixClz\", \"position\", \"showHeader\"]);\n\n  var _c = position.width,\n      width = _c === void 0 ? 200 : _c;\n\n  var _d = usePanelLyaoutStyle(props),\n      headerStyle = _d.headerStyle,\n      bodyStyle = _d.bodyStyle;\n\n  var _e = useTreePanelData(props),\n      state = _e.state,\n      onFolderExpand = _e.onFolderExpand,\n      onKeywordChange = _e.onKeywordChange;\n\n  return React.createElement(React.Fragment, null, showHeader && React.createElement(WorkspacePanel, __assign({}, rest, {\n    position: {\n      top: 0,\n      left: 0,\n      height: PANEL_HEADER_HEIGHT,\n      width: width\n    }\n  }), React.createElement(NodePanelHeader, __assign({}, props, {\n    state: state,\n    style: headerStyle,\n    onKeywordChange: onKeywordChange\n  }))), React.createElement(WorkspacePanel, __assign({\n    className: \"\".concat(CONTAINER_CLASS, \"-nodes\")\n  }, rest, {\n    position: __assign(__assign({}, position), {\n      top: showHeader ? PANEL_HEADER_HEIGHT : 0\n    })\n  }), React.createElement(NodePanelBody, __assign({}, props, {\n    state: state,\n    style: bodyStyle,\n    onFolderExpand: onFolderExpand\n  }))));\n};\nexport var NodeTreePanel = function (props) {\n  var _a = props.show,\n      show = _a === void 0 ? true : _a,\n      _b = props.position,\n      position = _b === void 0 ? {\n    width: 240,\n    top: 40,\n    bottom: 0,\n    left: 0\n  } : _b,\n      rest = __rest(props, [\"show\", \"position\"]);\n\n  if (!show) {\n    return null;\n  }\n\n  var _c = position.width,\n      width = _c === void 0 ? 200 : _c,\n      left = position.left;\n  var prefixClz = useXflowPrefixCls('node-panel');\n\n  var _d = useState(false),\n      collpased = _d[0],\n      setCollpased = _d[1];\n\n  return React.createElement(WorkspacePanel, {\n    className: CONTAINER_CLASS,\n    position: __assign(__assign({}, position), {\n      left: !collpased ? left : -width\n    })\n  }, React.createElement(\"div\", {\n    className: \"\".concat(CONTAINER_CLASS, \"-wrapper\")\n  }, React.createElement(WorkspacePanel, __assign({\n    className: prefixClz\n  }, rest, {\n    position: {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  }), React.createElement(NodeTreePanelMain, __assign({}, props, {\n    prefixClz: prefixClz,\n    position: position\n  }))), React.createElement(\"div\", {\n    className: \"\".concat(CONTAINER_CLASS, \"-icon\"),\n    style: {\n      top: 21,\n      right: !collpased ? -10 : -20,\n      borderRadius: !collpased ? '50%' : '0 50% 50% 0',\n      borderLeft: !collpased ? '' : 'none'\n    },\n    onClick: function () {\n      setCollpased(!collpased);\n    }\n  }, collpased ? React.createElement(DoubleRightOutlined, null) : React.createElement(DoubleLeftOutlined, null))));\n};","map":null,"metadata":{},"sourceType":"module"}