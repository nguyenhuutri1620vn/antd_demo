{"ast":null,"code":"import { translate } from './dom/translate';\n\nconst functionReturnTrue = () => true;\n\nconst functionReturnFalse = () => false;\n\nexport function getJudgeFunction(fn) {\n  if (typeof fn !== 'function') {\n    return fn ? functionReturnTrue : functionReturnFalse;\n  }\n\n  return fn;\n}\nexport function translatePosition(style, x, y) {\n  let initialRender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (initialRender) {\n    style.left = `${x}px`;\n    style.top = `${y}px`;\n  } else {\n    translate(style, x, y);\n  }\n}\nexport function debounce(func, wait, context) {\n  let setTimeoutFunc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window.setTimeout;\n  let clearTimeoutFunc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window.clearTimeout;\n  let timeout;\n\n  const debouncer = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    debouncer.reset();\n\n    const callback = () => {\n      func.apply(context, args);\n    };\n\n    timeout = setTimeoutFunc(callback, wait);\n  };\n\n  debouncer.reset = () => {\n    clearTimeoutFunc(timeout);\n  };\n\n  return debouncer;\n}","map":null,"metadata":{},"sourceType":"module"}