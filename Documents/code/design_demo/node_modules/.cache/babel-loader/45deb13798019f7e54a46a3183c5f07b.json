{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar GridIndex = function () {\n  function GridIndex(width, height, cellSize) {\n    _classCallCheck(this, GridIndex);\n\n    _defineProperty(this, \"boxCells\", []);\n\n    _defineProperty(this, \"xCellCount\", void 0);\n\n    _defineProperty(this, \"yCellCount\", void 0);\n\n    _defineProperty(this, \"boxKeys\", void 0);\n\n    _defineProperty(this, \"bboxes\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"xScale\", void 0);\n\n    _defineProperty(this, \"yScale\", void 0);\n\n    _defineProperty(this, \"boxUid\", void 0);\n\n    var boxCells = this.boxCells;\n    this.xCellCount = Math.ceil(width / cellSize);\n    this.yCellCount = Math.ceil(height / cellSize);\n\n    for (var i = 0; i < this.xCellCount * this.yCellCount; i++) {\n      boxCells.push([]);\n    }\n\n    this.boxKeys = [];\n    this.bboxes = [];\n    this.width = width;\n    this.height = height;\n    this.xScale = this.xCellCount / width;\n    this.yScale = this.yCellCount / height;\n    this.boxUid = 0;\n  }\n\n  _createClass(GridIndex, [{\n    key: \"insert\",\n    value: function insert(key, x1, y1, x2, y2) {\n      this.forEachCell(x1, y1, x2, y2, this.insertBoxCell, this.boxUid++);\n      this.boxKeys.push(key);\n      this.bboxes.push(x1);\n      this.bboxes.push(y1);\n      this.bboxes.push(x2);\n      this.bboxes.push(y2);\n    }\n  }, {\n    key: \"query\",\n    value: function query(x1, y1, x2, y2, predicate) {\n      return this.queryHitTest(x1, y1, x2, y2, false, predicate);\n    }\n  }, {\n    key: \"hitTest\",\n    value: function hitTest(x1, y1, x2, y2, predicate) {\n      return this.queryHitTest(x1, y1, x2, y2, true, predicate);\n    }\n  }, {\n    key: \"insertBoxCell\",\n    value: function insertBoxCell(x1, y1, x2, y2, cellIndex, uid) {\n      this.boxCells[cellIndex].push(uid);\n    }\n  }, {\n    key: \"queryHitTest\",\n    value: function queryHitTest(x1, y1, x2, y2, hitTest, predicate) {\n      if (x2 < 0 || x1 > this.width || y2 < 0 || y1 > this.height) {\n        return hitTest ? false : [];\n      }\n\n      var result = [];\n\n      if (x1 <= 0 && y1 <= 0 && this.width <= x2 && this.height <= y2) {\n        if (hitTest) {\n          return true;\n        }\n\n        for (var boxUid = 0; boxUid < this.boxKeys.length; boxUid++) {\n          result.push({\n            key: this.boxKeys[boxUid],\n            x1: this.bboxes[boxUid * 4],\n            y1: this.bboxes[boxUid * 4 + 1],\n            x2: this.bboxes[boxUid * 4 + 2],\n            y2: this.bboxes[boxUid * 4 + 3]\n          });\n        }\n\n        return predicate ? result.filter(predicate) : result;\n      }\n\n      var queryArgs = {\n        hitTest: hitTest,\n        seenUids: {\n          box: {},\n          circle: {}\n        }\n      };\n      this.forEachCell(x1, y1, x2, y2, this.queryCell, result, queryArgs, predicate);\n      return hitTest ? result.length > 0 : result;\n    }\n  }, {\n    key: \"queryCell\",\n    value: function queryCell(x1, y1, x2, y2, cellIndex, result, queryArgs, predicate) {\n      var seenUids = queryArgs.seenUids;\n      var boxCell = this.boxCells[cellIndex];\n\n      if (boxCell !== null) {\n        var bboxes = this.bboxes;\n\n        var _iterator = _createForOfIteratorHelper(boxCell),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var boxUid = _step.value;\n\n            if (!seenUids.box[boxUid]) {\n              seenUids.box[boxUid] = true;\n              var offset = boxUid * 4;\n\n              if (x1 <= bboxes[offset + 2] && y1 <= bboxes[offset + 3] && x2 >= bboxes[offset + 0] && y2 >= bboxes[offset + 1] && (!predicate || predicate(this.boxKeys[boxUid]))) {\n                if (queryArgs.hitTest) {\n                  result.push(true);\n                  return true;\n                }\n\n                result.push({\n                  key: this.boxKeys[boxUid],\n                  x1: bboxes[offset],\n                  y1: bboxes[offset + 1],\n                  x2: bboxes[offset + 2],\n                  y2: bboxes[offset + 3]\n                });\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"forEachCell\",\n    value: function forEachCell(x1, y1, x2, y2, fn, arg1, arg2, predicate) {\n      var cx1 = this.convertToXCellCoord(x1);\n      var cy1 = this.convertToYCellCoord(y1);\n      var cx2 = this.convertToXCellCoord(x2);\n      var cy2 = this.convertToYCellCoord(y2);\n\n      for (var x = cx1; x <= cx2; x++) {\n        for (var y = cy1; y <= cy2; y++) {\n          var cellIndex = this.xCellCount * y + x;\n\n          if (fn.call(this, x1, y1, x2, y2, cellIndex, arg1, arg2, predicate)) {\n            return;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"convertToXCellCoord\",\n    value: function convertToXCellCoord(x) {\n      return Math.max(0, Math.min(this.xCellCount - 1, Math.floor(x * this.xScale)));\n    }\n  }, {\n    key: \"convertToYCellCoord\",\n    value: function convertToYCellCoord(y) {\n      return Math.max(0, Math.min(this.yCellCount - 1, Math.floor(y * this.yScale)));\n    }\n  }]);\n\n  return GridIndex;\n}();\n\nexport default GridIndex;","map":null,"metadata":{},"sourceType":"module"}