{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject, asyncScheduler } from 'rxjs';\nimport { throttleTime, filter, distinctUntilChanged } from 'rxjs/operators';\nimport { Disposable, DisposableCollection } from './disposable';\nimport { produce, setAutoFreeze, enableMapSet } from 'immer';\nimport { Deferred } from './deferred'; // docs:https://immerjs.github.io/immer/map-set\n\nenableMapSet(); // https://immerjs.github.io/immer/freezing\n\nsetAutoFreeze(false);\nexport var NsModel;\n\n(function (NsModel) {\n  /**\n   * observable 空值，当作model ready的变量\n   * 空值不会触发subscrition\n   */\n  NsModel.EMPTY_VALUE = Symbol('EMPTY_MODEL_VALUE');\n  /** 判断是否是空 */\n\n  function isValidValue(val) {\n    return val !== NsModel.EMPTY_VALUE;\n  }\n\n  NsModel.isValidValue = isValidValue;\n  /** 默认的对事件性能优化方法：只在value不同时才触发，同时增加throttle */\n\n  function defaultPipeFunction(observable) {\n    return observable.pipe(distinctUntilChanged(), filter(item => isValidValue(item)), throttleTime(17, asyncScheduler, {\n      leading: false,\n      trailing: true\n    }));\n  }\n\n  NsModel.defaultPipeFunction = defaultPipeFunction;\n})(NsModel || (NsModel = {}));\n\nexport class RxModel {\n  /** 初始化 */\n  constructor() {\n    var _this = this;\n\n    let initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NsModel.EMPTY_VALUE;\n    let maxSubscription = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n\n    /** disposable */\n    this.toDispose = new DisposableCollection();\n    /** 监听model变化 */\n\n    this.watch = function (cb) {\n      let pipeFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : NsModel.defaultPipeFunction;\n\n      if (_this.subject$.observers.length + 1 > _this.maxSubscription) {\n        console.warn(`${_this.subject$} reach maxSubscription limitation, please check`);\n      }\n\n      const observable = pipeFunction ? pipeFunction(_this.subject$) : _this.subject$;\n      const subscription = observable.subscribe(cb);\n      return Disposable.create(() => {\n        subscription.unsubscribe();\n      });\n    };\n    /** 获取model的值 */\n\n\n    this.getValue = () => {\n      return this.subject$.getValue();\n    };\n    /** 更新model */\n\n\n    this.setValue = value => {\n      if (!this.subject$) {\n        return;\n      }\n\n      if (typeof value === 'function') {\n        const currentValue = this.subject$.getValue();\n        const nextState = produce(currentValue, draft => {\n          value(draft);\n        });\n\n        if (NsModel.isValidValue(nextState)) {\n          this.setValue(nextState);\n        }\n\n        return;\n      }\n\n      this.subject$.next(value);\n    };\n    /** 是否已有值 */\n\n\n    this.hasValidValue = () => {\n      const value = this.getValue();\n      return NsModel.isValidValue(value);\n    };\n    /** 获取非空的值 */\n\n\n    this.getValidValue = () => __awaiter(this, void 0, void 0, function* () {\n      const deffer = new Deferred();\n      /** 返回非空的值 */\n\n      if (this.hasValidValue()) {\n        return this.getValue();\n      }\n      /** 返回会resolve非空值的Promise */\n\n\n      const d = this.watch(val => {\n        if (NsModel.isValidValue(val)) {\n          deffer.resolve(val);\n          d.dispose();\n        }\n      });\n      return deffer.promise;\n    });\n    /** disposable */\n\n\n    this.dispose = () => {\n      this.toDispose.dispose();\n    };\n\n    this.subject$ = new BehaviorSubject(initialValue || NsModel.EMPTY_VALUE);\n    this.maxSubscription = maxSubscription;\n    this.toDispose.push(Disposable.create(() => {\n      this.subject$.complete();\n      this.subject$.unsubscribe(); // @ts-ignore\n\n      this.subject$ = null;\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}