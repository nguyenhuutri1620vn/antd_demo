{"ast":null,"code":"// 类型检测\nexport var isType = function (value, type) {\n  var toString = {}.toString;\n  return toString.call(value) === \"[object \".concat(type, \"]\");\n};\nexport var getType = function (n) {\n  return Object.prototype.toString.call(n).slice(8, -1);\n};\n/**\n * 深克隆\n * @param source 要深克隆的目标对象\n */\n\nexport var deepClone = function (source) {\n  if (!source) {\n    return source;\n  } // @ts-ignore\n\n\n  var target = new source.constructor();\n\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = getType(source[key]) === 'Object' || getType(source[key]) === 'Array' ? deepClone(source[key]) : source[key];\n    }\n  }\n\n  return target;\n};\nexport var clone = function (source) {\n  if (!source) {\n    return source;\n  }\n\n  var target = {}; // eslint-disable-next-line guard-for-in\n\n  for (var k in source) {\n    target[k] = source[k];\n  }\n\n  return target;\n};","map":null,"metadata":{},"sourceType":"module"}