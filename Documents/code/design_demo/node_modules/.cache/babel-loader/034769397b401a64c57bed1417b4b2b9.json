{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsBackEdge;\n\n(function (NsBackEdge) {\n  NsBackEdge.command = XFlowEdgeCommands.BACK_EDGE;\n  NsBackEdge.hookKey = 'frontEdge';\n})(NsBackEdge || (NsBackEdge = {}));\n\nlet BackEdgeCommand =\n/** 边后置命令(始终在画布最后方) */\nclass BackEdgeCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.frontEdge.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const {\n          edgeId\n        } = handlerArgs;\n        const x6Edge = x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(edgeId);\n\n        if (!x6Edge) {\n          console.error(edgeId, 'this edgeId is not exist');\n        } else {\n          x6Edge.toBack();\n          /** frontEdge undo */\n\n          this.ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n            handlerArgs.commandService.executeCommand(XFlowEdgeCommands.FRONT_EDGE.id, {\n              edgeId\n            });\n          })));\n        }\n\n        return {};\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], BackEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], BackEdgeCommand.prototype, \"init\", null);\n\nBackEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsBackEdge.command.id\n  }\n})\n/** 边后置命令(始终在画布最后方) */\n], BackEdgeCommand);\nexport { BackEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}