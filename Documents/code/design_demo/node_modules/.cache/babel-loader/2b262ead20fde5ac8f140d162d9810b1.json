{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LayerGroup = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar event_emitter_1 = (0, tslib_1.__importDefault)(require(\"@antv/event-emitter\"));\n\nvar LayerGroup =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(LayerGroup, _super);\n\n  function LayerGroup(layers, option) {\n    if (layers === void 0) {\n      layers = [];\n    }\n\n    if (option === void 0) {\n      option = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.name = option.name ? option.name : (0, util_1.uniqueId)('layerGroup');\n    _this.layers = layers;\n    return _this;\n  }\n  /**\n   * 图层组添加到地图上\n   */\n\n\n  LayerGroup.prototype.addTo = function (scene) {\n    var _this = this;\n\n    this.scene = scene;\n    var layerIndex = 0;\n    var layerLength = this.layers.length;\n    this.layers.forEach(function (layer) {\n      layer.once('inited', function (e) {\n        layerIndex++;\n\n        _this.emit('inited', e);\n\n        if (layerIndex === layerLength) {\n          _this.emit('inited-all');\n        }\n      });\n      layer.addTo(scene);\n    });\n  };\n  /**\n   * 图层组是否有该图层\n   */\n\n\n  LayerGroup.prototype.hasLayer = function (layer) {\n    return this.layers.some(function (itemLayer) {\n      return itemLayer === layer;\n    });\n  };\n  /**\n   * 增加图层\n   */\n\n\n  LayerGroup.prototype.addLayer = function (layer) {\n    var _this = this; // TODO: duplicate layer\n\n\n    this.layers.push(layer);\n\n    if (this.scene) {\n      layer.once('inited', function (e) {\n        return _this.emit('inited', e);\n      });\n      layer.addTo(this.scene);\n    }\n  };\n  /**\n   * 移除 layer 图层\n   */\n\n\n  LayerGroup.prototype.removeLayer = function (layer) {\n    var layerIndex = this.layers.findIndex(function (itemLayer) {\n      return itemLayer === layer;\n    });\n    if (layerIndex === -1) return false;\n    this.layers.splice(layerIndex, 1);\n\n    if (this.scene) {\n      layer.remove(this.scene);\n    }\n\n    return true;\n  };\n  /**\n   * 获取所有的地图图层\n   */\n\n\n  LayerGroup.prototype.getLayers = function () {\n    return this.layers;\n  };\n  /**\n   * 获取所有的带交互图层\n   */\n\n\n  LayerGroup.prototype.getInteractionLayers = function () {\n    return this.layers.filter(function (_a) {\n      var interaction = _a.interaction;\n      return interaction;\n    });\n  };\n  /**\n   * 根据图层 ID 获取图层对象\n   */\n\n\n  LayerGroup.prototype.getLayer = function (id) {\n    return this.layers.find(function (_a) {\n      var layer = _a.layer;\n      return layer.id === id;\n    });\n  };\n  /**\n   * 根据图层 name 获取图层对象\n   */\n\n\n  LayerGroup.prototype.getLayerByName = function (name) {\n    return this.layers.find(function (itemLayer) {\n      return itemLayer.name === name;\n    });\n  };\n  /**\n   * 移除所有的图层对象\n   */\n\n\n  LayerGroup.prototype.removeAllLayer = function () {\n    var _this = this;\n\n    this.layers.forEach(function (layer) {\n      if (_this.scene) {\n        layer.remove(_this.scene);\n      }\n    });\n    this.layers = [];\n  };\n  /**\n   * 是否图层组为空\n   */\n\n\n  LayerGroup.prototype.isEmpty = function () {\n    return this.layers.length === 0;\n  };\n\n  return LayerGroup;\n}(event_emitter_1.default);\n\nexports.LayerGroup = LayerGroup;","map":null,"metadata":{},"sourceType":"script"}