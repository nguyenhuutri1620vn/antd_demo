{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { tooltip, interaction, animation, theme, scale, state } from '../../adaptor/common';\nimport { pattern } from '../../adaptor/pattern';\nimport { findGeometry, deepAssign } from '../../utils';\nimport { flow, transformLabel } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { binHistogram } from '../../utils/transform/histogram';\nimport { HISTOGRAM_X_FIELD, HISTOGRAM_Y_FIELD } from './constant';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      binField = options.binField,\n      binNumber = options.binNumber,\n      binWidth = options.binWidth,\n      color = options.color,\n      stackField = options.stackField,\n      legend = options.legend,\n      columnStyle = options.columnStyle; // 处理数据\n\n  var plotData = binHistogram(data, binField, binWidth, binNumber, stackField);\n  chart.data(plotData);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: HISTOGRAM_X_FIELD,\n      yField: HISTOGRAM_Y_FIELD,\n      seriesField: stackField,\n      isStack: true,\n      interval: {\n        color: color,\n        style: columnStyle\n      }\n    }\n  });\n  interval(p); // 图例\n\n  if (legend && stackField) {\n    chart.legend(stackField, legend);\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis;\n  return flow(scale((_a = {}, _a[HISTOGRAM_X_FIELD] = xAxis, _a[HISTOGRAM_Y_FIELD] = yAxis, _a)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis; // 为 false 则是不显示轴\n\n  if (xAxis === false) {\n    chart.axis(HISTOGRAM_X_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_X_FIELD, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(HISTOGRAM_Y_FIELD, false);\n  } else {\n    chart.axis(HISTOGRAM_Y_FIELD, yAxis);\n  }\n\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label;\n  var geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    geometry.label({\n      fields: [HISTOGRAM_Y_FIELD],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\n * 直方图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('columnStyle'), geometry, meta, axis, state, label, tooltip, interaction, animation)(params);\n}","map":null,"metadata":{},"sourceType":"module"}