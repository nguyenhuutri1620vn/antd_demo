{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, isString, substitute } from '@antv/util';\nimport { modifyCSS } from '@antv/dom-util';\nimport DomStyles from './theme';\nimport { CONTAINER_CLASS, CONTAINER_TPL, ITEM_TPL, LIST_CLASS, TITLE_CLASS } from './constants';\nimport { Component } from '../core/component';\nimport { clearDom } from '../utils/dom';\n\nvar Tooltip =\n/** @class */\nfunction (_super) {\n  __extends(Tooltip, _super);\n\n  function Tooltip() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  Tooltip.prototype.getDefaultOptions = function () {\n    return deepMix({}, _super.prototype.getDefaultOptions.call(this), {\n      id: 'l7plot-tooltip',\n      name: 'l7plot-tooltip',\n      title: '',\n      showTitle: true,\n      items: [],\n      containerTpl: CONTAINER_TPL,\n      itemTpl: ITEM_TPL,\n      domStyles: DomStyles,\n      className: CONTAINER_CLASS\n    });\n  };\n  /**\n   * 初始化 container\n   */\n\n\n  Tooltip.prototype.initContainer = function () {\n    var customContent = this.options.customContent;\n\n    if (customContent) {\n      var container = this.getHtmlContentNode(customContent);\n      var parentContainer = this.getParentContainer();\n\n      if (parentContainer) {\n        parentContainer.appendChild(container);\n      }\n\n      return container;\n    } else {\n      return _super.prototype.initContainer.call(this);\n    }\n  };\n  /**\n   * 初始化 DOM\n   */\n\n\n  Tooltip.prototype.initDom = function () {\n    this.cacheDoms();\n  };\n  /**\n   * 初始化事件\n   */\n\n\n  Tooltip.prototype.initEvent = function () {//\n  };\n  /**\n   * 清理事件\n   */\n\n\n  Tooltip.prototype.removeEvent = function () {//\n  };\n  /**\n   * 缓存 DOM\n   */\n\n\n  Tooltip.prototype.cacheDoms = function () {\n    var container = this.container;\n    var titleDom = container.getElementsByClassName(TITLE_CLASS)[0];\n    var listDom = container.getElementsByClassName(LIST_CLASS)[0];\n    this.titleDom = titleDom;\n    this.listDom = listDom;\n  };\n  /**\n   * 绘制组件\n   */\n\n\n  Tooltip.prototype.render = function () {\n    if (this.options.customContent) {\n      this.renderCustomContent(this.options.customContent);\n    } else {\n      this.resetTitle();\n      this.renderItems();\n    }\n  };\n  /**\n   * 显示\n   */\n\n\n  Tooltip.prototype.show = function () {\n    var container = this.container;\n    if (!container || this.destroyed) return;\n    modifyCSS(container, {\n      visibility: 'visible'\n    });\n  };\n  /**\n   * 隐藏\n   */\n\n\n  Tooltip.prototype.hide = function () {\n    var container = this.container;\n    if (!container || this.destroyed) return;\n    modifyCSS(container, {\n      visibility: 'hidden'\n    });\n  };\n  /**\n   * 更新\n   */\n\n\n  Tooltip.prototype.updateInner = function (options) {\n    if (this.options.customContent) {\n      this.renderCustomContent(this.options.customContent);\n    } else {\n      if (options.title) {\n        this.resetTitle();\n      }\n\n      if (options.items) {\n        this.renderItems();\n      }\n    }\n\n    _super.prototype.updateInner.call(this, options);\n  };\n  /**\n   * 根据 customContent 渲染 DOM\n   */\n\n\n  Tooltip.prototype.renderCustomContent = function (customContent) {\n    var parentContainer = this.container.parentNode;\n    var node = this.getHtmlContentNode(customContent);\n    var curContainer = this.container;\n\n    if (parentContainer) {\n      parentContainer.replaceChild(node, curContainer);\n    }\n\n    this.container = node;\n    this.applyStyles();\n  };\n  /**\n   * 生成自定义内容 DOM\n   */\n\n\n  Tooltip.prototype.getHtmlContentNode = function (customContent) {\n    var node;\n    var element = customContent(this.options.title || '', this.options.items);\n\n    if (isString(element)) {\n      node = this.createDom(element);\n    } else {\n      node = element;\n    }\n\n    return node;\n  };\n  /**\n   * 重置 title\n   */\n\n\n  Tooltip.prototype.resetTitle = function () {\n    var title = this.options.title;\n    var showTitle = this.options.showTitle;\n\n    if (showTitle && title) {\n      this.showTitle();\n      this.setTitle(title);\n    } else {\n      this.hideTitle();\n    }\n  };\n  /**\n   * 显示 title\n   */\n\n\n  Tooltip.prototype.showTitle = function () {\n    var titleDom = this.titleDom;\n\n    if (titleDom) {\n      modifyCSS(titleDom, {\n        display: 'block'\n      });\n    }\n  };\n  /**\n   * 隐藏 title\n   */\n\n\n  Tooltip.prototype.hideTitle = function () {\n    var titleDom = this.titleDom;\n\n    if (titleDom) {\n      modifyCSS(titleDom, {\n        display: 'none'\n      });\n    }\n  };\n  /**\n   * 设置 title 内容\n   */\n\n\n  Tooltip.prototype.setTitle = function (content) {\n    var titleDom = this.titleDom;\n\n    if (titleDom) {\n      titleDom.innerHTML = content;\n    }\n  };\n  /**\n   * 渲染每项 item\n   */\n\n\n  Tooltip.prototype.renderItems = function () {\n    var _this = this;\n\n    this.clearItemDoms();\n    var items = this.options.items;\n    var itemTpl = this.options.itemTpl || ITEM_TPL;\n    var listDom = this.listDom;\n\n    if (listDom) {\n      items.forEach(function (item) {\n        var substituteObj = __assign({}, item);\n\n        var domStr = substitute(itemTpl, substituteObj);\n\n        var itemDom = _this.createDom(domStr);\n\n        listDom.appendChild(itemDom);\n      });\n      this.applyChildrenStyles(listDom, this.options.domStyles);\n    }\n  };\n  /**\n   * 清空 list DOM 下的 DOM 元素\n   */\n\n\n  Tooltip.prototype.clearItemDoms = function () {\n    if (this.listDom) {\n      clearDom(this.listDom);\n    }\n  };\n  /**\n   * 清空所有\n   */\n\n\n  Tooltip.prototype.clear = function () {\n    this.setTitle('');\n    this.clearItemDoms();\n  };\n\n  return Tooltip;\n}(Component);\n\nexport { Tooltip };","map":null,"metadata":{},"sourceType":"module"}