{"ast":null,"code":"import React from 'react';\nimport clamp from 'clamp';\nimport classNames from 'classnames';\nimport { Box } from './box';\nimport { Resizer } from './resizer';\nexport class SplitBox extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onMouseDown = () => {\n      const {\n        maxSize,\n        minSize\n      } = this.getRange();\n      this.minSize = minSize;\n      this.maxSize = maxSize;\n      this.curSize = this.getPrimarySize();\n      this.rawSize = this.curSize;\n      this.resizing = true;\n      this.createMask();\n      this.updateCursor(this.curSize, minSize, maxSize);\n    };\n\n    this.onMouseMove = (deltaX, deltaY) => {\n      if (this.props.resizable && this.resizing) {\n        const delta = this.getDelta(deltaX, deltaY);\n\n        if (delta === 0) {\n          return;\n        }\n\n        if (this.rawSize < this.minSize || this.rawSize > this.maxSize) {\n          this.rawSize -= delta;\n          return;\n        }\n\n        this.rawSize -= delta;\n        this.curSize = this.rawSize;\n        this.curSize = clamp(this.curSize, this.minSize, this.maxSize);\n        this.setPrimarySize(this.curSize);\n        this.updateCursor(this.curSize, this.minSize, this.maxSize);\n\n        if (this.props.onResizing) {\n          this.props.onResizing(this.curSize);\n        }\n      }\n    };\n\n    this.onMouseMoveEnd = () => {\n      if (this.props.resizable && this.resizing) {\n        if (this.props.onResizeEnd) {\n          this.props.onResizeEnd(this.curSize);\n        }\n\n        if (this.props.refresh) {\n          const isPrimaryFirst = this.isPrimaryFirst();\n          this.setState({\n            box1Size: isPrimaryFirst ? this.curSize : undefined,\n            box2Size: isPrimaryFirst ? undefined : this.curSize\n          });\n        }\n\n        this.resizing = false;\n        this.removeMask();\n      }\n    };\n\n    this.refContainer = container => {\n      this.container = container;\n    };\n\n    this.refResizer = elem => {\n      this.resizerElem = elem;\n    };\n\n    this.state = this.getNextState(props);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const nextState = this.getNextState(nextProps);\n    this.setState(nextState);\n  }\n\n  getNextState(props) {\n    const {\n      size,\n      defaultSize,\n      primary\n    } = props;\n    const initialSize = size != null ? size : defaultSize != null ? defaultSize : '25%';\n    return {\n      box1Size: primary === 'first' ? initialSize : undefined,\n      box2Size: primary === 'second' ? initialSize : undefined\n    };\n  }\n\n  isVertical() {\n    return this.props.split === 'vertical';\n  }\n\n  isPrimaryFirst() {\n    return this.props.primary === 'first';\n  }\n\n  getDelta(deltaX, deltaY) {\n    const {\n      step\n    } = this.props;\n    const isVertical = this.isVertical();\n    const isPrimaryFirst = this.isPrimaryFirst();\n    let delta = isVertical ? deltaX : deltaY;\n\n    if (delta === 0) {\n      return 0;\n    }\n\n    if (step && Math.abs(delta) >= step) {\n      delta = ~~(delta / step) * step; // eslint-disable-line\n    }\n\n    delta = isPrimaryFirst ? -delta : delta;\n    const primaryBox = isPrimaryFirst ? this.box1Elem : this.box2Elem;\n    const secondBox = isPrimaryFirst ? this.box2Elem : this.box1Elem;\n    const box1Order = parseInt(window.getComputedStyle(primaryBox).order, 10);\n    const box2Order = parseInt(window.getComputedStyle(secondBox).order, 10);\n\n    if (box1Order > box2Order) {\n      delta = -delta;\n    }\n\n    return delta;\n  }\n\n  getRange() {\n    const {\n      maxSize,\n      minSize\n    } = this.props;\n    const containerRect = this.container.getBoundingClientRect();\n    const containerSize = this.isVertical() ? containerRect.width : containerRect.height;\n    let newMinSize = minSize !== undefined ? minSize : 0;\n    let newMaxSize = maxSize !== undefined ? maxSize : 0;\n\n    while (newMinSize < 0) {\n      newMinSize = containerSize + newMinSize;\n    }\n\n    while (newMaxSize <= 0) {\n      newMaxSize = containerSize + newMaxSize;\n    }\n\n    return {\n      minSize: clamp(newMinSize, 0, containerSize),\n      maxSize: clamp(newMaxSize, 0, containerSize)\n    };\n  }\n\n  getPrimarySize() {\n    const primaryBox = this.isPrimaryFirst() ? this.box1Elem : this.box2Elem;\n    return this.isVertical() ? primaryBox.getBoundingClientRect().width : primaryBox.getBoundingClientRect().height;\n  }\n\n  setPrimarySize(size) {\n    const isFirstPrimary = this.isPrimaryFirst();\n    const primaryBox = isFirstPrimary ? this.box1Elem : this.box2Elem;\n    const secondBox = isFirstPrimary ? this.box2Elem : this.box1Elem;\n    const resizerElem = this.resizerElem;\n    const value = `${size}px`;\n\n    if (this.isVertical()) {\n      primaryBox.style.width = value;\n\n      if (isFirstPrimary) {\n        secondBox.style.left = value;\n        resizerElem.style.left = value;\n      } else {\n        secondBox.style.right = value;\n        resizerElem.style.right = value;\n      }\n    } else {\n      primaryBox.style.height = value;\n\n      if (isFirstPrimary) {\n        secondBox.style.top = value;\n        resizerElem.style.top = value;\n      } else {\n        secondBox.style.bottom = value;\n        resizerElem.style.bottom = value;\n      }\n    }\n  }\n\n  updateCursor(size, minSize, maxSize) {\n    let cursor = '';\n\n    if (this.isVertical()) {\n      if (size === minSize) {\n        cursor = this.isPrimaryFirst() ? 'e-resize' : 'w-resize';\n      } else if (size === maxSize) {\n        cursor = this.isPrimaryFirst() ? 'w-resize' : 'e-resize';\n      } else {\n        cursor = 'col-resize';\n      }\n    } else if (size === minSize) {\n      cursor = this.isPrimaryFirst() ? 's-resize' : 'n-resize';\n    } else if (size === maxSize) {\n      cursor = this.isPrimaryFirst() ? 'n-resize' : 's-resize';\n    } else {\n      cursor = 'row-resize';\n    }\n\n    this.maskElem.style.cursor = cursor;\n  }\n\n  createMask() {\n    const mask = document.createElement('div');\n    mask.style.position = 'absolute';\n    mask.style.top = '0';\n    mask.style.right = '0';\n    mask.style.bottom = '0';\n    mask.style.left = '0';\n    mask.style.zIndex = '9999';\n    document.body.appendChild(mask);\n    this.maskElem = mask;\n  }\n\n  removeMask() {\n    if (this.maskElem.parentNode) {\n      this.maskElem.parentNode.removeChild(this.maskElem);\n    }\n  }\n\n  renderBox(baseCls, index) {\n    const primary = index === 1 ? 'first' : 'second';\n    const isPrimary = this.props.primary === primary;\n    const currentSize = index === 1 ? this.state.box1Size : this.state.box2Size;\n    const oppositeSize = index === 1 ? this.state.box2Size : this.state.box1Size;\n    const style = Object.assign(Object.assign({}, this.props.boxStyle), isPrimary ? this.props.primaryBoxStyle : this.props.secondBoxStyle);\n    const classes = classNames(`${baseCls}-item`, isPrimary ? `${baseCls}-item-primary` : `${baseCls}-item-second`);\n\n    const ref = elem => {\n      if (index === 1) {\n        this.box1Elem = elem;\n      } else {\n        this.box2Elem = elem;\n      }\n    };\n\n    const children = this.props.children;\n    return React.createElement(Box, {\n      key: `box${index}`,\n      refIt: ref,\n      style: style,\n      index: index,\n      className: classes,\n      currentSize: currentSize,\n      oppositeSize: oppositeSize,\n      vertical: this.isVertical(),\n      isPrimary: isPrimary\n    }, children[index - 1]);\n  }\n\n  renderResizer(baseCls) {\n    const style = Object.assign({}, this.props.resizerStyle);\n    style.position = 'absolute';\n    style.zIndex = 2;\n\n    if (this.isVertical()) {\n      style.top = 0;\n      style.bottom = 0;\n\n      if (this.props.resizable === true) {\n        style.cursor = 'col-resize';\n      }\n\n      if (this.isPrimaryFirst()) {\n        style.left = this.state.box1Size;\n      } else {\n        style.right = this.state.box2Size;\n      }\n    } else {\n      style.left = 0;\n      style.right = 0;\n\n      if (this.props.resizable === true) {\n        style.cursor = 'row-resize';\n      }\n\n      if (this.isPrimaryFirst()) {\n        style.top = this.state.box1Size;\n      } else {\n        style.bottom = this.state.box2Size;\n      }\n    }\n\n    return React.createElement(Resizer, {\n      key: \"resizer\",\n      style: style,\n      className: `${baseCls}-resizer`,\n      refIt: this.refResizer,\n      onClick: this.props.onResizerClick,\n      onMouseDown: this.onMouseDown,\n      onMouseMove: this.onMouseMove,\n      onMouseMoveEnd: this.onMouseMoveEnd,\n      onDoubleClick: this.props.onResizerDoubleClick\n    });\n  }\n\n  render() {\n    const style = Object.assign(Object.assign({}, this.props.style), {\n      overflow: 'hidden',\n      position: 'relative',\n      width: '100%',\n      height: '100%'\n    });\n    const baseCls = `${this.props.prefixCls}-split-box`;\n    const classes = classNames(baseCls, `${baseCls}-${this.props.split}`, {\n      [`${baseCls}-disabled`]: !this.props.resizable\n    });\n    return React.createElement(\"div\", {\n      style: style,\n      className: classes,\n      ref: this.refContainer\n    }, this.renderBox(baseCls, 1), this.renderResizer(baseCls), this.renderBox(baseCls, 2));\n  }\n\n}\n\n(function (SplitBox) {\n  SplitBox.defaultProps = {\n    resizable: true,\n    split: 'vertical',\n    primary: 'first',\n    prefixCls: 'x6',\n    defaultSize: '25%'\n  };\n})(SplitBox || (SplitBox = {}));","map":null,"metadata":{},"sourceType":"module"}