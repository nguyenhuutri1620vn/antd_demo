{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport G6 from '@antv/g6';\nimport { isObject } from '@antv/util';\nexport var registerCustomItems = function () {\n  G6.registerNode('card-node', {\n    draw: function (cfg, group) {\n      var _a;\n\n      if (cfg === void 0) {\n        cfg = {};\n      }\n\n      var size = cfg.size || [100, 30];\n      if (typeof size === 'number') size = [size, size];\n\n      var style = __assign({\n        radius: 2,\n        fill: '#fff'\n      }, cfg.style);\n\n      var color = style.stroke || cfg.color || '#5B8FF9';\n      var r = style.radius || 0;\n      var shape = group.addShape('rect', {\n        attrs: __assign({\n          x: 0,\n          y: 0,\n          width: size[0],\n          height: size[1],\n          stroke: color\n        }, style),\n        name: 'main-box',\n        draggable: true\n      }); // title text\n\n      var title = cfg.title || cfg.label;\n      var titleTextShape;\n      var labelStyle = ((_a = cfg.labelCfg) === null || _a === void 0 ? void 0 : _a.style) || {};\n\n      if (title) {\n        var titleStyle = __assign({\n          fill: '#fff'\n        }, labelStyle);\n\n        titleTextShape = group.addShape('text', {\n          attrs: __assign(__assign({\n            textBaseline: 'top',\n            x: 8,\n            y: 2,\n            // lineHeight: 20,\n            text: title\n          }, titleStyle), {\n            fill: '#fff'\n          }),\n          name: 'title'\n        });\n      }\n\n      var titleBox = titleTextShape ? titleTextShape.getBBox() : {\n        height: size[1] / 2\n      }; // title rect\n\n      var titleRectShape = group.addShape('rect', {\n        attrs: {\n          x: 0,\n          y: 0,\n          width: size[0],\n          height: titleBox.height + 4,\n          fill: color,\n          radius: [r, r, 0, 0]\n        },\n        name: 'title-rect',\n        draggable: true\n      });\n      titleTextShape === null || titleTextShape === void 0 ? void 0 : titleTextShape.toFront(); // marker\n\n      var markerShape;\n\n      if (cfg === null || cfg === void 0 ? void 0 : cfg.children) {\n        markerShape = group.addShape('marker', {\n          attrs: {\n            x: size[0] / 2,\n            y: 0,\n            r: 6,\n            cursor: 'pointer',\n            symbol: cfg.collapsed ? G6.Marker.expand : G6.Marker.collapse,\n            stroke: color,\n            lineWidth: 1,\n            fill: '#fff'\n          },\n          name: 'collapse-icon'\n        });\n      } // description\n\n\n      var description = cfg && cfg.description ? cfg.description : undefined;\n      var titleRectBox = titleRectShape.getBBox();\n      var descriptionTextShape;\n\n      if (description) {\n        descriptionTextShape = group.addShape('text', {\n          attrs: __assign({\n            textBaseline: 'top',\n            x: 8,\n            y: titleRectBox.height + 8,\n            text: description\n          }, labelStyle),\n          name: \"description\"\n        });\n      }\n\n      if (descriptionTextShape) {\n        var desTextShapeBBox = descriptionTextShape.getBBox();\n        var height = titleRectBox.height + 16 + desTextShapeBBox.height;\n        var width = size[0] > desTextShapeBBox.width + 16 ? size[0] : desTextShapeBBox.width + 16;\n        shape.attr({\n          width: width,\n          height: height\n        });\n        titleRectShape === null || titleRectShape === void 0 ? void 0 : titleRectShape.attr('width', width);\n        markerShape === null || markerShape === void 0 ? void 0 : markerShape.attr({\n          x: width,\n          y: height / 2\n        });\n      }\n\n      return shape;\n    },\n    update: undefined\n  }, 'single-node');\n  G6.registerNode('round-rect', {\n    drawShape: function (cfg, group) {\n      if (cfg === void 0) {\n        cfg = {};\n      }\n\n      var size = cfg.size || [100, 30];\n      if (typeof size === 'number') size = [size, size];\n      var style = cfg.style || {};\n      var color = style.stroke || cfg.color || '#5B8FF9';\n      var fill = style.fill || '#fff';\n      style = __assign({\n        width: size[0],\n        height: size[1],\n        radius: size[1] / 2,\n        fill: fill,\n        lineWidth: 1.2,\n        stroke: color\n      }, style);\n      var rect = group.addShape('rect', {\n        attrs: __assign({\n          x: -size[0] / 2,\n          y: -size[1] / 2\n        }, style),\n        name: 'rect-shape'\n      }); // circles for anchor points\n\n      group.addShape('circle', {\n        attrs: {\n          x: -size[0] / 2,\n          y: 0,\n          r: 3,\n          fill: style.stroke\n        },\n        name: 'circle-shape'\n      });\n      group.addShape('circle', {\n        attrs: {\n          x: size[0] / 2,\n          y: 0,\n          r: 3,\n          fill: style.stroke\n        },\n        name: 'circle-shape2'\n      });\n      return rect;\n    },\n    getAnchorPoints: function getAnchorPoints() {\n      return [[0, 0.5], [1, 0.5]];\n    },\n    update: function update(cfg, item) {\n      var _a;\n\n      if (cfg === void 0) {\n        cfg = {};\n      }\n\n      var group = item.getContainer();\n      var children = group.get('children');\n      var node = children[0];\n      var circleLeft = children[1];\n      var circleRight = children[2];\n      var stroke = ((_a = cfg.style) === null || _a === void 0 ? void 0 : _a.stroke) || '#5B8FF9';\n\n      if (stroke) {\n        node.attr('stroke', stroke);\n        circleLeft.attr('fill', stroke);\n        circleRight.attr('fill', stroke);\n      }\n    }\n  }, 'single-node');\n  G6.registerEdge('fund-polyline', {\n    draw: function draw(cfg, group) {\n      var _a;\n\n      if (cfg === void 0) {\n        cfg = {};\n      }\n\n      var startPoint = cfg.startPoint;\n      var endPoint = cfg.endPoint;\n      var Ydiff = endPoint.y - startPoint.y;\n      var slope = Ydiff !== 0 ? Math.min(500 / Math.abs(Ydiff), 20) : 0;\n      var cpOffset = slope > 15 ? 0 : 16;\n      var offset = Ydiff < 0 ? cpOffset : -cpOffset;\n      var line1EndPoint = {\n        x: startPoint.x + slope,\n        y: endPoint.y + offset\n      };\n      var line2StartPoint = {\n        x: line1EndPoint.x + cpOffset,\n        y: endPoint.y\n      }; // 控制点坐标\n\n      var controlPoint = {\n        x: (line1EndPoint.x - startPoint.x) * (endPoint.y - startPoint.y) / (line1EndPoint.y - startPoint.y) + startPoint.x,\n        y: endPoint.y\n      };\n      var path = [['M', startPoint.x, startPoint.y], ['L', line1EndPoint.x, line1EndPoint.y], ['Q', controlPoint.x, controlPoint.y, line2StartPoint.x, line2StartPoint.y], ['L', endPoint.x, endPoint.y]];\n\n      if (Math.abs(Ydiff) <= 5) {\n        path = [['M', startPoint.x, startPoint.y], ['L', endPoint.x, endPoint.y]];\n      }\n\n      var style = cfg.style;\n      var stroke = style.stroke || (cfg === null || cfg === void 0 ? void 0 : cfg.colorMap) && cfg.colorMap[cfg.dataType] ? (cfg === null || cfg === void 0 ? void 0 : cfg.colorMap)[cfg === null || cfg === void 0 ? void 0 : cfg.dataType] : '#5B8FF9';\n      var endArrow = ((_a = cfg.style) === null || _a === void 0 ? void 0 : _a.endArrow) || false;\n      if (isObject(endArrow)) endArrow.fill = stroke;\n      var line = group.addShape('path', {\n        attrs: {\n          path: path,\n          stroke: stroke,\n          lineWidth: style.lineWidth || 1.2,\n          endArrow: endArrow\n        },\n        name: 'path-shape'\n      });\n      var labelLeftOffset = 0;\n      var labelTopOffset = 8; // label\n\n      var labelTextShape;\n      var textBeginX = line2StartPoint.x + labelLeftOffset;\n\n      if (cfg === null || cfg === void 0 ? void 0 : cfg.label) {\n        labelTextShape = group.addShape('text', {\n          attrs: {\n            text: cfg.label,\n            x: textBeginX,\n            y: endPoint.y - labelTopOffset - 2,\n            fontSize: 14,\n            textAlign: 'left',\n            textBaseline: 'middle',\n            fill: '#000'\n          },\n          name: 'text-shape-label'\n        });\n      } // dataType\n\n\n      if (cfg === null || cfg === void 0 ? void 0 : cfg.dataType) {\n        var labelTextShapeBBox = labelTextShape ? labelTextShape.getBBox() : {\n          height: 0\n        };\n        group.addShape('text', {\n          attrs: {\n            text: cfg.dataType,\n            x: textBeginX,\n            y: endPoint.y - labelTopOffset - labelTextShapeBBox.height - 2,\n            fontSize: 10,\n            textAlign: 'left',\n            textBaseline: 'middle',\n            fill: '#000'\n          },\n          name: 'text-shape-type'\n        });\n      } // subLabel\n\n\n      if (cfg === null || cfg === void 0 ? void 0 : cfg.subLabel) {\n        group.addShape('text', {\n          attrs: {\n            text: cfg.subLabel,\n            x: textBeginX,\n            y: endPoint.y + labelTopOffset + 4,\n            fontSize: 12,\n            fontWeight: 300,\n            textAlign: 'left',\n            textBaseline: 'middle',\n            fill: '#000'\n          },\n          name: 'text-shape-sub-label'\n        });\n      }\n\n      return line;\n    },\n    update: undefined\n  }, 'single-edge');\n  G6.registerEdge('flow-line', {\n    draw: function (cfg, group) {\n      if (cfg === void 0) {\n        cfg = {};\n      }\n\n      var startPoint = cfg.startPoint,\n          endPoint = cfg.endPoint;\n      var _a = cfg.style,\n          style = _a === void 0 ? {} : _a;\n      var shape = group.addShape('path', {\n        attrs: {\n          stroke: style.stroke,\n          endArrow: style.endArrow,\n          path: [['M', startPoint.x, startPoint.y], ['L', startPoint.x, (startPoint.y + endPoint.y) / 2], ['L', endPoint.x, (startPoint.y + endPoint.y) / 2], ['L', endPoint.x, endPoint.y]]\n        }\n      });\n      return shape;\n    }\n  });\n};\nexport var customIconNode = function (params) {\n  G6.registerNode('icon-node', {\n    options: {\n      size: [60, 20],\n      stroke: '#91d5ff',\n      fill: '#91d5ff'\n    },\n    draw: function (cfg, group) {\n      if (cfg === void 0) {\n        cfg = {};\n      } // @ts-ignore\n\n\n      var styles = this.getShapeStyle(cfg);\n      var _a = cfg.labelCfg,\n          labelCfg = _a === void 0 ? {} : _a;\n      var keyShape = group.addShape('rect', {\n        attrs: __assign(__assign({}, styles), {\n          x: 0,\n          y: 0\n        })\n      });\n      /**\n       * leftIcon 格式如下：\n       *  {\n       *    style: ShapeStyle;\n       *    img: ''\n       *  }\n       */\n\n      var style = {\n        fill: '#e6fffb'\n      };\n      var img = 'https://g.alicdn.com/cm-design/arms-trace/1.0.155/styles/armsTrace/images/TAIR.png';\n\n      if (cfg.leftIcon) {\n        style = __assign(__assign({}, style), cfg.leftIcon.style);\n        img = cfg.leftIcon.img;\n      }\n\n      group.addShape('rect', {\n        attrs: __assign({\n          x: 1,\n          y: 1,\n          width: 38,\n          height: styles.height - 2\n        }, style)\n      });\n      group.addShape('image', {\n        attrs: {\n          x: 8,\n          y: 8,\n          width: 24,\n          height: 24,\n          img: img\n        },\n        name: 'image-shape'\n      });\n\n      if (params.enableEdit) {\n        group.addShape('marker', {\n          attrs: {\n            x: styles.width / 3,\n            y: styles.height + 6,\n            r: 6,\n            stroke: '#73d13d',\n            cursor: 'pointer',\n            symbol: G6.Marker.expand\n          },\n          name: 'add-item'\n        });\n        group.addShape('marker', {\n          attrs: {\n            x: styles.width * 2 / 3,\n            y: styles.height + 6,\n            r: 6,\n            stroke: '#ff4d4f',\n            cursor: 'pointer',\n            symbol: G6.Marker.collapse\n          },\n          name: 'remove-item'\n        });\n      }\n\n      if (cfg.label) {\n        group.addShape('text', {\n          attrs: __assign(__assign({}, labelCfg.style), {\n            text: cfg.label,\n            x: styles.width / 2,\n            y: styles.height / 1.5\n          })\n        });\n      }\n\n      return keyShape;\n    }\n  }, 'rect');\n};","map":null,"metadata":{},"sourceType":"module"}