{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { isNumber, isString } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport { renderTag } from '../util/graphic';\nimport Theme from '../util/theme';\nimport { getValueByPercent } from '../util/util';\n\nvar LineAnnotation =\n/** @class */\nfunction (_super) {\n  __extends(LineAnnotation, _super);\n\n  function LineAnnotation() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n\n\n  LineAnnotation.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      name: 'annotation',\n      type: 'line',\n      locationType: 'region',\n      start: null,\n      end: null,\n      style: {},\n      text: null,\n      defaultCfg: {\n        style: {\n          fill: Theme.textColor,\n          fontSize: 12,\n          textAlign: 'center',\n          textBaseline: 'bottom',\n          fontFamily: Theme.fontFamily\n        },\n        text: {\n          position: 'center',\n          autoRotate: true,\n          content: null,\n          offsetX: 0,\n          offsetY: 0,\n          style: {\n            stroke: Theme.lineColor,\n            lineWidth: 1\n          }\n        }\n      }\n    });\n  };\n\n  LineAnnotation.prototype.renderInner = function (group) {\n    this.renderLine(group);\n\n    if (this.get('text')) {\n      this.renderLabel(group);\n    }\n  }; // 绘制线\n\n\n  LineAnnotation.prototype.renderLine = function (group) {\n    var start = this.get('start');\n    var end = this.get('end');\n    var style = this.get('style');\n    this.addShape(group, {\n      type: 'line',\n      id: this.getElementId('line'),\n      name: 'annotation-line',\n      attrs: __assign({\n        x1: start.x,\n        y1: start.y,\n        x2: end.x,\n        y2: end.y\n      }, style)\n    });\n  }; // 获取 label 的位置\n\n\n  LineAnnotation.prototype.getLabelPoint = function (start, end, position) {\n    var percent;\n\n    if (position === 'start') {\n      percent = 0;\n    } else if (position === 'center') {\n      percent = 0.5;\n    } else if (isString(position) && position.indexOf('%') !== -1) {\n      percent = parseInt(position, 10) / 100;\n    } else if (isNumber(position)) {\n      percent = position;\n    } else {\n      percent = 1;\n    }\n\n    if (percent > 1 || percent < 0) {\n      percent = 1;\n    }\n\n    return {\n      x: getValueByPercent(start.x, end.x, percent),\n      y: getValueByPercent(start.y, end.y, percent)\n    };\n  }; // 绘制 label\n\n\n  LineAnnotation.prototype.renderLabel = function (group) {\n    var text = this.get('text');\n    var start = this.get('start');\n    var end = this.get('end');\n    var position = text.position,\n        content = text.content,\n        style = text.style,\n        offsetX = text.offsetX,\n        offsetY = text.offsetY,\n        autoRotate = text.autoRotate,\n        maxLength = text.maxLength,\n        autoEllipsis = text.autoEllipsis,\n        ellipsisPosition = text.ellipsisPosition,\n        background = text.background,\n        _a = text.isVertical,\n        isVertical = _a === void 0 ? false : _a;\n    var point = this.getLabelPoint(start, end, position);\n    var x = point.x + offsetX;\n    var y = point.y + offsetY;\n    var cfg = {\n      id: this.getElementId('line-text'),\n      name: 'annotation-line-text',\n      x: x,\n      y: y,\n      content: content,\n      style: style,\n      maxLength: maxLength,\n      autoEllipsis: autoEllipsis,\n      ellipsisPosition: ellipsisPosition,\n      background: background,\n      isVertical: isVertical\n    }; // 如果自动旋转\n\n    if (autoRotate) {\n      var vector = [end.x - start.x, end.y - start.y];\n      cfg.rotate = Math.atan2(vector[1], vector[0]);\n    }\n\n    renderTag(group, cfg);\n  };\n\n  return LineAnnotation;\n}(GroupComponent);\n\nexport default LineAnnotation;","map":null,"metadata":{},"sourceType":"module"}