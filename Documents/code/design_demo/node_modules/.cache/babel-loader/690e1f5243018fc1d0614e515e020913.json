{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Basecoat } from '../common';\nimport { ObjectExt } from '../util';\nexport class Store extends Basecoat {\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.pending = false;\n    this.changing = false;\n    this.data = {};\n    this.mutate(ObjectExt.cloneDeep(data));\n    this.changed = {};\n  }\n\n  mutate(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const unset = options.unset === true;\n    const silent = options.silent === true;\n    const changes = [];\n    const changing = this.changing;\n    this.changing = true;\n\n    if (!changing) {\n      this.previous = ObjectExt.cloneDeep(this.data);\n      this.changed = {};\n    }\n\n    const current = this.data;\n    const previous = this.previous;\n    const changed = this.changed;\n    Object.keys(data).forEach(k => {\n      const key = k;\n      const newValue = data[key];\n\n      if (!ObjectExt.isEqual(current[key], newValue)) {\n        changes.push(key);\n      }\n\n      if (!ObjectExt.isEqual(previous[key], newValue)) {\n        changed[key] = newValue;\n      } else {\n        delete changed[key];\n      }\n\n      if (unset) {\n        delete current[key];\n      } else {\n        current[key] = newValue;\n      }\n    });\n\n    if (!silent && changes.length > 0) {\n      this.pending = true;\n      this.pendingOptions = options;\n      changes.forEach(key => {\n        this.emit('change:*', {\n          key,\n          options,\n          store: this,\n          current: current[key],\n          previous: previous[key]\n        });\n      });\n    }\n\n    if (changing) {\n      return this;\n    }\n\n    if (!silent) {\n      // Changes can be recursively nested within `\"change\"` events.\n      while (this.pending) {\n        this.pending = false;\n        this.emit('changed', {\n          current,\n          previous,\n          store: this,\n          options: this.pendingOptions\n        });\n      }\n    }\n\n    this.pending = false;\n    this.changing = false;\n    this.pendingOptions = null;\n    return this;\n  }\n\n  get(key, defaultValue) {\n    if (key == null) {\n      return this.data;\n    }\n\n    const ret = this.data[key];\n    return ret == null ? defaultValue : ret;\n  }\n\n  getPrevious(key) {\n    if (this.previous) {\n      const ret = this.previous[key];\n      return ret == null ? undefined : ret;\n    }\n\n    return undefined;\n  }\n\n  set(key, value, options) {\n    if (key != null) {\n      if (typeof key === 'object') {\n        this.mutate(key, value);\n      } else {\n        this.mutate({\n          [key]: value\n        }, options);\n      }\n    }\n\n    return this;\n  }\n\n  remove(key, options) {\n    const empty = undefined;\n    const subset = {};\n    let opts;\n\n    if (typeof key === 'string') {\n      subset[key] = empty;\n      opts = options;\n    } else if (Array.isArray(key)) {\n      key.forEach(k => subset[k] = empty);\n      opts = options;\n    } else {\n      // eslint-disable-next-line\n      for (const key in this.data) {\n        subset[key] = empty;\n      }\n\n      opts = key;\n    }\n\n    this.mutate(subset, Object.assign(Object.assign({}, opts), {\n      unset: true\n    }));\n    return this;\n  }\n\n  getByPath(path) {\n    return ObjectExt.getByPath(this.data, path, '/');\n  }\n\n  setByPath(path, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const delim = '/';\n    const pathArray = Array.isArray(path) ? [...path] : path.split(delim);\n    const pathString = Array.isArray(path) ? path.join(delim) : path;\n    const property = pathArray[0];\n    const pathArrayLength = pathArray.length;\n    options.propertyPath = pathString;\n    options.propertyValue = value;\n    options.propertyPathArray = pathArray;\n\n    if (pathArrayLength === 1) {\n      this.set(property, value, options);\n    } else {\n      const update = {};\n      let diver = update;\n      let nextKey = property; // Initialize the nested object. Subobjects are either arrays or objects.\n      // An empty array is created if the sub-key is an integer. Otherwise, an\n      // empty object is created.\n\n      for (let i = 1; i < pathArrayLength; i += 1) {\n        const key = pathArray[i];\n        const isArrayIndex = Number.isFinite(Number(key));\n        diver = diver[nextKey] = isArrayIndex ? [] : {};\n        nextKey = key;\n      } // Fills update with the `value` on `path`.\n\n\n      ObjectExt.setByPath(update, pathArray, value, delim);\n      const data = ObjectExt.cloneDeep(this.data); // If rewrite mode enabled, we replace value referenced by path with the\n      // new one (we don't merge).\n\n      if (options.rewrite) {\n        ObjectExt.unsetByPath(data, path, delim);\n      }\n\n      const merged = ObjectExt.merge(data, update);\n      this.set(property, merged[property], options);\n    }\n\n    return this;\n  }\n\n  removeByPath(path, options) {\n    const keys = Array.isArray(path) ? path : path.split('/');\n    const key = keys[0];\n\n    if (keys.length === 1) {\n      this.remove(key, options);\n    } else {\n      const paths = keys.slice(1);\n      const prop = ObjectExt.cloneDeep(this.get(key));\n\n      if (prop) {\n        ObjectExt.unsetByPath(prop, paths);\n      }\n\n      this.set(key, prop, options);\n    }\n\n    return this;\n  }\n\n  hasChanged(key) {\n    if (key == null) {\n      return Object.keys(this.changed).length > 0;\n    }\n\n    return key in this.changed;\n  }\n  /**\n   * Returns an object containing all the data that have changed,\n   * or `null` if there are no changes. Useful for determining what\n   * parts of a view need to be updated.\n   */\n\n\n  getChanges(diff) {\n    if (diff == null) {\n      return this.hasChanged() ? ObjectExt.cloneDeep(this.changed) : null;\n    }\n\n    const old = this.changing ? this.previous : this.data;\n    const changed = {};\n    let hasChanged; // eslint-disable-next-line\n\n    for (const key in diff) {\n      const val = diff[key];\n\n      if (!ObjectExt.isEqual(old[key], val)) {\n        changed[key] = val;\n        hasChanged = true;\n      }\n    }\n\n    return hasChanged ? ObjectExt.cloneDeep(changed) : null;\n  }\n  /**\n   * Returns a copy of the store's `data` object.\n   */\n\n\n  toJSON() {\n    return ObjectExt.cloneDeep(this.data);\n  }\n\n  clone() {\n    const constructor = this.constructor;\n    return new constructor(this.data);\n  }\n\n  dispose() {\n    this.off();\n    this.data = {};\n    this.previous = {};\n    this.changed = {};\n    this.pending = false;\n    this.changing = false;\n    this.pendingOptions = null;\n    this.trigger('disposed', {\n      store: this\n    });\n  }\n\n}\n\n__decorate([Basecoat.dispose()], Store.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}