{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { singleton, inject } from 'mana-syringe';\nimport { IGraphOptionProvider } from '../../xflow-main/graph/config';\nimport { XFlowGraphCommands } from '../../command-contributions/constant';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { IHookContribution } from '../interface';\nimport { throttle } from '../../common/utils';\nexport var NsGraphEventPlugin;\n\n(function (NsGraphEventPlugin) {\n  NsGraphEventPlugin.pluginId = 'base-graph-events';\n})(NsGraphEventPlugin || (NsGraphEventPlugin = {}));\n/**\n * 内置的hook contribution\n * 处理graph config 的 evnets props\n */\n\n\nlet GraphEventContribution = class GraphEventContribution {\n  constructor() {\n    this.toDispose = new DisposableCollection();\n\n    this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n      return Disposable.create(() => {});\n    });\n    /** 扩展Hook */\n\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [\n      /** 在graph启动前, 注册外部事件到x6Events的hooks上*/\n      hooks.x6Events.registerHook({\n        name: NsGraphEventPlugin.pluginId,\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const {\n            events\n          } = yield this.graphOptions.getOptions();\n          events.forEach(event => {\n            args.push(event);\n          });\n        })\n      }),\n      /** 在graph init后, 外部事件 */\n      hooks.afterGraphInit.registerHook({\n        name: NsGraphEventPlugin.pluginId,\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const {\n            commandService,\n            modelService,\n            graph\n          } = args;\n          /** 注册事件 */\n\n          const todo = yield hooks.x6Events.call([], mergedEvents => __awaiter(this, void 0, void 0, function* () {\n            return mergedEvents.map(e => {\n              const handler = handlerArgs => {\n                e.callback(handlerArgs, commandService, modelService, graph);\n              };\n\n              graph.on(e.eventName, handler);\n              return {\n                dispose: () => {\n                  graph.off(e.eventName, handler);\n                }\n              };\n            });\n          }));\n          toDispose.pushAll(todo);\n        })\n      }),\n      /** 监听window的resize事件，实现自动resize */\n      hooks.afterGraphInit.registerHook({\n        name: 'add auto resize event',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const {\n            commandService,\n            options,\n            graph\n          } = args;\n          const resizeHandler = throttle(() => {\n            commandService.executeCommand(XFlowGraphCommands.GRAPH_RESIZE.id, {});\n          });\n          window.addEventListener('resize', resizeHandler);\n          const {\n            rootContainer\n          } = options;\n          const resizeObserver = new ResizeObserver(() => graph.resize(rootContainer.clientWidth));\n          rootContainer && resizeObserver.observe(rootContainer);\n          toDispose.push(Disposable.create(() => {\n            window.removeEventListener('resize', resizeHandler);\n          }));\n        })\n      }),\n      /** 在graph停止时 取消外部事件 */\n      hooks.beforeGraphDestroy.registerHook({\n        name: NsGraphEventPlugin.pluginId,\n        handler: () => __awaiter(this, void 0, void 0, function* () {\n          toDispose.dispose();\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return toDispose;\n    });\n  }\n\n};\n\n__decorate([inject(IGraphOptionProvider), __metadata(\"design:type\", Object)], GraphEventContribution.prototype, \"graphOptions\", void 0);\n\nGraphEventContribution = __decorate([singleton({\n  contrib: IHookContribution\n})], GraphEventContribution);\nexport { GraphEventContribution };","map":null,"metadata":{},"sourceType":"module"}