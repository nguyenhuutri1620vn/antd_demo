{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport BaseLayer from '../core/BaseLayer';\nimport PointModels from './models/index';\n\nvar PointLayer = function (_BaseLayer) {\n  _inherits(PointLayer, _BaseLayer);\n\n  var _super = _createSuper(PointLayer);\n\n  function PointLayer() {\n    var _this;\n\n    _classCallCheck(this, PointLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'PointLayer');\n\n    return _this;\n  }\n\n  _createClass(PointLayer, [{\n    key: \"buildModels\",\n    value: function buildModels() {\n      var modelType = this.getModelType();\n      this.layerModel = new PointModels[modelType](this);\n      this.models = this.layerModel.initModels();\n    }\n  }, {\n    key: \"rebuildModels\",\n    value: function rebuildModels() {\n      this.models = this.layerModel.buildModels();\n    }\n  }, {\n    key: \"getModelTypeWillEmptyData\",\n    value: function getModelTypeWillEmptyData() {\n      if (this.shapeOption) {\n        var _this$shapeOption = this.shapeOption,\n            field = _this$shapeOption.field,\n            values = _this$shapeOption.values;\n\n        var _this$getLayerConfig = this.getLayerConfig(),\n            shape2d = _this$getLayerConfig.shape2d,\n            shape3d = _this$getLayerConfig.shape3d;\n\n        var iconMap = this.iconService.getIconMap();\n\n        if (field && (shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(field)) !== -1) {\n          return 'fill';\n        }\n\n        if (values) {\n          var _iterator = _createForOfIteratorHelper(values),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var v = _step.value;\n\n              if (iconMap.hasOwnProperty(values)) {\n                return 'image';\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n\n      return 'normal';\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getDefaultConfig\",\n    value: function getDefaultConfig() {\n      var type = this.getModelType();\n      var defaultConfig = {\n        normal: {\n          blend: 'additive'\n        },\n        simplePoint: {},\n        fill: {\n          blend: 'normal'\n        },\n        extrude: {},\n        image: {},\n        icon: {},\n        text: {\n          blend: 'normal'\n        }\n      };\n      return defaultConfig[type];\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      var layerData = this.getEncodedData();\n\n      var _this$getLayerConfig2 = this.getLayerConfig(),\n          shape2d = _this$getLayerConfig2.shape2d,\n          shape3d = _this$getLayerConfig2.shape3d;\n\n      var iconMap = this.iconService.getIconMap();\n      var item = layerData.find(function (fe) {\n        return fe.hasOwnProperty('shape');\n      });\n\n      if (!item) {\n        return this.getModelTypeWillEmptyData();\n      } else {\n        var shape = item.shape;\n\n        if (shape === 'dot') {\n          return 'normal';\n        }\n\n        if (shape === 'simple') {\n          return 'simplePoint';\n        }\n\n        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {\n          return 'fill';\n        }\n\n        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {\n          return 'extrude';\n        }\n\n        if (iconMap.hasOwnProperty(shape)) {\n          return 'image';\n        }\n\n        if (this.fontService.getGlyph(shape) !== '') {\n          return 'icon';\n        }\n\n        return 'text';\n      }\n    }\n  }]);\n\n  return PointLayer;\n}(BaseLayer);\n\nexport { PointLayer as default };","map":null,"metadata":{},"sourceType":"module"}