{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { inject, injectable } from 'inversify';\nimport { createEntity } from '../..';\nimport { IDENTIFIER } from '../../identifier';\nexport var MaterialSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.MaterialComponentManager), _dec3 = inject(IDENTIFIER.RenderEngine), _dec4 = inject(IDENTIFIER.ShaderModuleService), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function MaterialSystem() {\n    _classCallCheck(this, MaterialSystem);\n\n    _initializerDefineProperty(this, \"material\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"engine\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"shaderModule\", _descriptor3, this);\n  }\n\n  _createClass(MaterialSystem, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function execute() {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.material.clear();\n    }\n    /**\n     * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial\n     */\n\n  }, {\n    key: \"createShaderMaterial\",\n    value: function createShaderMaterial(params) {\n      var entity = createEntity();\n      var vertexShaderGLSL = params.vertexShader;\n      var fragmentShaderGLSL = params.fragmentShader;\n      var uniforms = [];\n\n      if (!this.engine.supportWebGPU) {\n        var moduleName = \"material-\".concat(entity);\n        this.shaderModule.registerModule(moduleName, {\n          vs: params.vertexShader,\n          fs: params.fragmentShader\n        });\n        var materialModule = this.shaderModule.getModule(moduleName);\n        vertexShaderGLSL = materialModule.vs;\n        fragmentShaderGLSL = materialModule.fs;\n\n        if (materialModule.uniforms) {\n          // @ts-ignore\n          uniforms = Object.keys(materialModule.uniforms).map(function (uniformName) {\n            return {\n              dirty: true,\n              name: uniformName,\n              // @ts-ignore\n              data: materialModule.uniforms[uniformName]\n            };\n          });\n        }\n      }\n\n      return this.material.create(entity, _objectSpread(_objectSpread({\n        vertexShaderGLSL: vertexShaderGLSL,\n        fragmentShaderGLSL: fragmentShaderGLSL\n      }, params), {}, {\n        uniforms: uniforms\n      }));\n    }\n  }]);\n\n  return MaterialSystem;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"material\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"shaderModule\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);","map":null,"metadata":{},"sourceType":"module"}