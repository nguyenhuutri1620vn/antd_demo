{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { $window } from './mini-adapter';\nexport function getContainer(domId) {\n  var $dom = domId;\n\n  if (typeof domId === 'string') {\n    $dom = $window.document.getElementById(domId);\n  }\n\n  return $dom;\n}\nexport function trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\nexport function splitWords(str) {\n  return trim(str).split(/\\s+/);\n}\n\nfunction testProp(props) {\n  var _$window$document, _$window$document$doc;\n\n  var docStyle = $window === null || $window === void 0 ? void 0 : (_$window$document = $window.document) === null || _$window$document === void 0 ? void 0 : (_$window$document$doc = _$window$document.documentElement) === null || _$window$document$doc === void 0 ? void 0 : _$window$document$doc.style;\n\n  if (!docStyle) {\n    return props[0];\n  }\n\n  for (var i in props) {\n    if (props[i] && props[i] in docStyle) {\n      return props[i];\n    }\n  }\n\n  return props[0];\n}\n\nexport function create(tagName, className, container) {\n  var el = $window.document.createElement(tagName);\n  el.className = className || '';\n\n  if (container) {\n    container.appendChild(el);\n  }\n\n  return el;\n}\nexport function remove(el) {\n  var parent = el.parentNode;\n\n  if (parent) {\n    parent.removeChild(el);\n  }\n}\nexport function addClass(el, name) {\n  if (el.classList !== undefined) {\n    var classes = splitWords(name);\n\n    for (var i = 0, len = classes.length; i < len; i++) {\n      el.classList.add(classes[i]);\n    }\n  } else if (!hasClass(el, name)) {\n    var className = getClass(el);\n    setClass(el, (className ? className + ' ' : '') + name);\n  }\n}\nexport function removeClass(el, name) {\n  if (el.classList !== undefined) {\n    el.classList.remove(name);\n  } else {\n    setClass(el, trim((' ' + getClass(el) + ' ').replace(' ' + name + ' ', ' ')));\n  }\n}\nexport function hasClass(el, name) {\n  if (el.classList !== undefined) {\n    return el.classList.contains(name);\n  }\n\n  var className = getClass(el);\n  return className.length > 0 && new RegExp('(^|\\\\s)' + name + '(\\\\s|$)').test(className);\n}\nexport function setClass(el, name) {\n  if (el instanceof HTMLElement) {\n    el.className = name;\n  } else {\n    el.className.baseVal = name;\n  }\n}\nexport function getClass(el) {\n  if (el instanceof SVGElement) {\n    el = el.correspondingElement;\n  }\n\n  return el.className.baseVal === undefined ? el.className : el.className.baseVal;\n}\nexport function empty(el) {\n  while (el && el.firstChild) {\n    el.removeChild(el.firstChild);\n  }\n}\nvar transformProp = testProp(['transform', 'WebkitTransform']);\nexport function setTransform(el, value) {\n  el.style[transformProp] = value;\n}\nexport function triggerResize() {\n  if (typeof Event === 'function') {\n    $window.dispatchEvent(new Event('resize'));\n  } else {\n    var evt = $window.document.createEvent('UIEvents');\n    evt.initUIEvent('resize', true, false, $window, 0);\n    $window.dispatchEvent(evt);\n  }\n}\nexport function printCanvas(canvas) {\n  var css = ['padding: ' + (canvas.height / 2 - 8) + 'px ' + canvas.width / 2 + 'px;', 'line-height: ' + canvas.height + 'px;', 'background-image: url(' + canvas.toDataURL() + ');'];\n  console.log('%c\\n', css.join(''));\n}\nexport function getViewPortScale() {\n  var _content;\n\n  var meta = $window.document.querySelector('meta[name=\"viewport\"]');\n\n  if (!meta) {\n    return 1;\n  }\n\n  var contentItems = (_content = meta.content) === null || _content === void 0 ? void 0 : _content.split(',');\n  var scale = contentItems.find(function (item) {\n    var _item$split = item.split('='),\n        _item$split2 = _slicedToArray(_item$split, 2),\n        key = _item$split2[0],\n        value = _item$split2[1];\n\n    return key === 'initial-scale';\n  });\n  return scale ? scale.split('=')[1] * 1 : 1;\n}\nexport var DPR = getViewPortScale() < 1 ? 1 : $window.devicePixelRatio;","map":null,"metadata":{},"sourceType":"module"}