{"ast":null,"code":"const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\nexport function inspectMatrixWithOptions(matrix) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    maxRows = 15,\n    maxColumns = 10,\n    maxNumSize = 8\n  } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  const {\n    rows,\n    columns\n  } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n\n    result.push(`${line.join(' ')}`);\n  }\n\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize) {\n  const numStr = String(num);\n\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n\n  const precise = num.toPrecision(maxNumSize - 2);\n\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}","map":null,"metadata":{},"sourceType":"module"}