{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { get } from '@antv/util';\nimport { deepAssign, findGeometry } from '../../utils';\nimport { flow, transformLabel } from '../../utils';\nimport { tooltip, interaction, animation, theme, scale, annotation, state, pattern } from '../../adaptor/common';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { getTooltipMapping } from '../../utils/tooltip';\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      type = options.type,\n      xField = options.xField,\n      yField = options.yField,\n      colorField = options.colorField,\n      sizeField = options.sizeField,\n      sizeRatio = options.sizeRatio,\n      shape = options.shape,\n      color = options.color,\n      tooltip = options.tooltip,\n      heatmapStyle = options.heatmapStyle;\n  chart.data(data);\n  var geometryType = 'polygon';\n\n  if (type === 'density') {\n    geometryType = 'heatmap';\n  }\n\n  var _a = getTooltipMapping(tooltip, [xField, yField, colorField]),\n      fields = _a.fields,\n      formatter = _a.formatter;\n  /**\n   * The ratio between the actual size and the max available size, must be in range `[0,1]`.\n   *\n   * If the `sizeRatio` attribute is undefined or it exceeds the range,\n   * `checkedSizeRatio` would be set to 1 as default.\n   */\n\n\n  var checkedSizeRatio = 1;\n\n  if (sizeRatio || sizeRatio === 0) {\n    if (!shape && !sizeField) {\n      console.warn('sizeRatio is not in effect: Must define shape or sizeField first');\n    } else if (sizeRatio < 0 || sizeRatio > 1) {\n      console.warn('sizeRatio is not in effect: It must be a number in [0,1]');\n    } else {\n      checkedSizeRatio = sizeRatio;\n    }\n  }\n\n  geometryAdaptor(deepAssign({}, params, {\n    options: {\n      type: geometryType,\n      colorField: colorField,\n      tooltipFields: fields,\n      shapeField: sizeField || '',\n      label: undefined,\n      mapping: {\n        tooltip: formatter,\n        shape: shape && (sizeField ? function (dautm) {\n          var field = data.map(function (row) {\n            return row[sizeField];\n          });\n          var min = Math.min.apply(Math, field);\n          var max = Math.max.apply(Math, field);\n          return [shape, (get(dautm, sizeField) - min) / (max - min), checkedSizeRatio];\n        } : function () {\n          return [shape, 1, checkedSizeRatio];\n        }),\n        color: color || colorField && chart.getTheme().sequenceColors.join('-'),\n        style: heatmapStyle\n      }\n    }\n  }));\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField; // 为 false 则是不显示轴\n\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\n\n\nfunction legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField,\n      sizeField = options.sizeField,\n      sizeLegend = options.sizeLegend;\n  /** legend 不为 false, 则展示图例, 优先展示 color 分类图例 */\n\n  var showLegend = legend !== false;\n\n  if (colorField) {\n    chart.legend(colorField, showLegend ? legend : false);\n  } // 旧版本: 有 sizeField 就有 sizeLegend. 这里默认继承下 legend 配置\n\n\n  if (sizeField) {\n    chart.legend(sizeField, sizeLegend === undefined ? legend : sizeLegend);\n  }\n  /** 默认没有 sizeField，则隐藏连续图例 */\n\n\n  if (!showLegend && !sizeLegend) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n/**\n * fixme 后续确认下，数据标签的逻辑为啥和通用的不一致\n * 数据标签\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      colorField = options.colorField,\n      type = options.type;\n  var geometry = findGeometry(chart, type === 'density' ? 'heatmap' : 'polygon');\n\n  if (!label) {\n    geometry.label(false);\n  } else if (colorField) {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    geometry.label({\n      fields: [colorField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\n * 极坐标\n * @param params\n */\n\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var coordinate = options.coordinate,\n      reflect = options.reflect;\n\n  if (coordinate) {\n    chart.coordinate({\n      type: coordinate.type || 'rect',\n      cfg: coordinate.cfg\n    });\n  }\n\n  if (reflect) {\n    chart.coordinate().reflect(reflect);\n  }\n\n  return params;\n}\n/**\n * 热力图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(theme, pattern('heatmapStyle'), meta, coordinate, geometry, axis, legend, tooltip, label, annotation(), interaction, animation, state)(params);\n}","map":null,"metadata":{},"sourceType":"module"}