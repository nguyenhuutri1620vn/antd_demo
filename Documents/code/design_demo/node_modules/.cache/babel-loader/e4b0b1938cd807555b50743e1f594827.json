{"ast":null,"code":"import { PortLayout, PortLabelLayout } from '../registry';\nimport { ObjectExt } from '../util';\nimport { Point } from '../geometry';\nexport class PortManager {\n  constructor(data) {\n    this.ports = [];\n    this.groups = {};\n    this.init(ObjectExt.cloneDeep(data));\n  }\n\n  getPorts() {\n    return this.ports;\n  }\n\n  getGroup(groupName) {\n    return groupName != null ? this.groups[groupName] : null;\n  }\n\n  getPortsByGroup(groupName) {\n    return this.ports.filter(p => p.group === groupName || p.group == null && groupName == null);\n  }\n\n  getPortsLayoutByGroup(groupName, elemBBox) {\n    const ports = this.getPortsByGroup(groupName);\n    const group = groupName ? this.getGroup(groupName) : null;\n    const groupPosition = group ? group.position : null;\n    const groupPositionName = groupPosition ? groupPosition.name : null;\n    let layoutFn;\n\n    if (groupPositionName != null) {\n      const fn = PortLayout.registry.get(groupPositionName);\n\n      if (fn == null) {\n        return PortLayout.registry.onNotFound(groupPositionName);\n      }\n\n      layoutFn = fn;\n    } else {\n      layoutFn = PortLayout.presets.left;\n    }\n\n    const portsArgs = ports.map(port => port && port.position && port.position.args || {});\n    const groupArgs = groupPosition && groupPosition.args || {};\n    const layouts = layoutFn(portsArgs, elemBBox, groupArgs);\n    return layouts.map((portLayout, index) => {\n      const port = ports[index];\n      return {\n        portLayout,\n        portId: port.id,\n        portSize: port.size,\n        portAttrs: port.attrs,\n        labelSize: port.label.size,\n        labelLayout: this.getPortLabelLayout(port, Point.create(portLayout.position), elemBBox)\n      };\n    });\n  }\n\n  init(data) {\n    const {\n      groups,\n      items\n    } = data;\n\n    if (groups != null) {\n      Object.keys(groups).forEach(key => {\n        this.groups[key] = this.parseGroup(groups[key]);\n      });\n    }\n\n    if (Array.isArray(items)) {\n      items.forEach(item => {\n        this.ports.push(this.parsePort(item));\n      });\n    }\n  }\n\n  parseGroup(group) {\n    return Object.assign(Object.assign({}, group), {\n      label: this.getLabel(group, true),\n      position: this.getPortPosition(group.position, true)\n    });\n  }\n\n  parsePort(port) {\n    const result = Object.assign({}, port);\n    const group = this.getGroup(port.group) || {};\n    result.markup = result.markup || group.markup;\n    result.attrs = ObjectExt.merge({}, group.attrs, result.attrs);\n    result.position = this.createPosition(group, result);\n    result.label = ObjectExt.merge({}, group.label, this.getLabel(result));\n    result.zIndex = this.getZIndex(group, result);\n    result.size = Object.assign(Object.assign({}, group.size), result.size);\n    return result;\n  }\n\n  getZIndex(group, port) {\n    if (typeof port.zIndex === 'number') {\n      return port.zIndex;\n    }\n\n    if (typeof group.zIndex === 'number' || group.zIndex === 'auto') {\n      return group.zIndex;\n    }\n\n    return 'auto';\n  }\n\n  createPosition(group, port) {\n    return ObjectExt.merge({\n      name: 'left',\n      args: {}\n    }, group.position, {\n      args: port.args\n    });\n  }\n\n  getPortPosition(position) {\n    let setDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (position == null) {\n      if (setDefault) {\n        return {\n          name: 'left',\n          args: {}\n        };\n      }\n    } else {\n      if (typeof position === 'string') {\n        return {\n          name: position,\n          args: {}\n        };\n      }\n\n      if (Array.isArray(position)) {\n        return {\n          name: 'absolute',\n          args: {\n            x: position[0],\n            y: position[1]\n          }\n        };\n      }\n\n      if (typeof position === 'object') {\n        return position;\n      }\n    }\n\n    return {\n      args: {}\n    };\n  }\n\n  getPortLabelPosition(position) {\n    let setDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (position == null) {\n      if (setDefault) {\n        return {\n          name: 'left',\n          args: {}\n        };\n      }\n    } else {\n      if (typeof position === 'string') {\n        return {\n          name: position,\n          args: {}\n        };\n      }\n\n      if (typeof position === 'object') {\n        return position;\n      }\n    }\n\n    return {\n      args: {}\n    };\n  }\n\n  getLabel(item) {\n    let setDefaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const label = item.label || {};\n    label.position = this.getPortLabelPosition(label.position, setDefaults);\n    return label;\n  }\n\n  getPortLabelLayout(port, portPosition, elemBBox) {\n    const name = port.label.position.name || 'left';\n    const args = port.label.position.args || {};\n    const layoutFn = PortLabelLayout.registry.get(name) || PortLabelLayout.presets.left;\n\n    if (layoutFn) {\n      return layoutFn(portPosition, elemBBox, args);\n    }\n\n    return null;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}