{"ast":null,"code":"export var Interp;\n\n(function (Interp) {\n  Interp.number = (a, b) => {\n    const d = b - a;\n    return t => {\n      return a + d * t;\n    };\n  };\n\n  Interp.object = (a, b) => {\n    const keys = Object.keys(a);\n    return t => {\n      const ret = {};\n\n      for (let i = keys.length - 1; i !== -1; i -= 1) {\n        const key = keys[i];\n        ret[key] = a[key] + (b[key] - a[key]) * t;\n      }\n\n      return ret;\n    };\n  };\n\n  Interp.unit = (a, b) => {\n    const reg = /(-?[0-9]*.[0-9]*)(px|em|cm|mm|in|pt|pc|%)/;\n    const ma = reg.exec(a);\n    const mb = reg.exec(b);\n    const pb = mb ? mb[1] : '';\n    const aa = ma ? +ma[1] : 0;\n    const bb = mb ? +mb[1] : 0;\n    const index = pb.indexOf('.');\n    const precision = index > 0 ? pb[1].length - index - 1 : 0;\n    const d = bb - aa;\n    const u = ma ? ma[2] : '';\n    return t => {\n      return (aa + d * t).toFixed(precision) + u;\n    };\n  };\n\n  Interp.color = (a, b) => {\n    const ca = parseInt(a.slice(1), 16);\n    const cb = parseInt(b.slice(1), 16);\n    const ra = ca & 0x0000ff;\n    const rd = (cb & 0x0000ff) - ra;\n    const ga = ca & 0x00ff00;\n    const gd = (cb & 0x00ff00) - ga;\n    const ba = ca & 0xff0000;\n    const bd = (cb & 0xff0000) - ba;\n    return t => {\n      const r = ra + rd * t & 0x000000ff;\n      const g = ga + gd * t & 0x0000ff00;\n      const b = ba + bd * t & 0x00ff0000;\n      return `#${(1 << 24 | r | g | b).toString(16).slice(1)}`;\n    };\n  };\n})(Interp || (Interp = {}));","map":null,"metadata":{},"sourceType":"module"}