{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Line } from '../../geometry';\nimport { normalizePoint, toResult } from './util';\nexport const line = (portsPositionArgs, elemBBox, groupPositionArgs) => {\n  const start = normalizePoint(elemBBox, groupPositionArgs.start || elemBBox.getOrigin());\n  const end = normalizePoint(elemBBox, groupPositionArgs.end || elemBBox.getCorner());\n  return lineLayout(portsPositionArgs, start, end, groupPositionArgs);\n};\nexport const left = (portsPositionArgs, elemBBox, groupPositionArgs) => {\n  return lineLayout(portsPositionArgs, elemBBox.getTopLeft(), elemBBox.getBottomLeft(), groupPositionArgs);\n};\nexport const right = (portsPositionArgs, elemBBox, groupPositionArgs) => {\n  return lineLayout(portsPositionArgs, elemBBox.getTopRight(), elemBBox.getBottomRight(), groupPositionArgs);\n};\nexport const top = (portsPositionArgs, elemBBox, groupPositionArgs) => {\n  return lineLayout(portsPositionArgs, elemBBox.getTopLeft(), elemBBox.getTopRight(), groupPositionArgs);\n};\nexport const bottom = (portsPositionArgs, elemBBox, groupPositionArgs) => {\n  return lineLayout(portsPositionArgs, elemBBox.getBottomLeft(), elemBBox.getBottomRight(), groupPositionArgs);\n};\n\nfunction lineLayout(portsPositionArgs, p1, p2, groupPositionArgs) {\n  const line = new Line(p1, p2);\n  const length = portsPositionArgs.length;\n  return portsPositionArgs.map((_a, index) => {\n    var {\n      strict\n    } = _a,\n        offset = __rest(_a, [\"strict\"]);\n\n    const ratio = strict || groupPositionArgs.strict ? (index + 1) / (length + 1) : (index + 0.5) / length;\n    const p = line.pointAt(ratio);\n\n    if (offset.dx || offset.dy) {\n      p.translate(offset.dx || 0, offset.dy || 0);\n    }\n\n    return toResult(p.round(), 0, offset);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}