{"ast":null,"code":"import { clone } from '@antv/util';\nimport { getAllProperties } from './utils/node-properties';\nimport { oneHot } from './utils/data-preprocessing';\nimport cosineSimilarity from './cosine-similarity';\n/**\n *  nodes-cosine-similarity算法 基于节点属性计算余弦相似度(基于种子节点寻找相似节点)\n * @param nodes 图节点数据\n * @param seedNode 种子节点\n * @param propertyKey 属性的字段名\n * @param involvedKeys 参与计算的key集合\n * @param uninvolvedKeys 不参与计算的key集合\n */\n\nvar nodesCosineSimilarity = function nodesCosineSimilarity(nodes, seedNode, propertyKey, involvedKeys, uninvolvedKeys) {\n  if (nodes === void 0) {\n    nodes = [];\n  }\n\n  if (propertyKey === void 0) {\n    propertyKey = undefined;\n  }\n\n  if (involvedKeys === void 0) {\n    involvedKeys = [];\n  }\n\n  if (uninvolvedKeys === void 0) {\n    uninvolvedKeys = [];\n  }\n\n  var similarNodes = clone(nodes.filter(function (node) {\n    return node.id !== seedNode.id;\n  }));\n  var seedNodeIndex = nodes.findIndex(function (node) {\n    return node.id === seedNode.id;\n  }); // 所有节点属性集合\n\n  var properties = getAllProperties(nodes, propertyKey); // 所有节点属性one-hot特征向量集合\n\n  var allPropertiesWeight = oneHot(properties, involvedKeys, uninvolvedKeys); // 种子节点属性\n\n  var seedNodeProperties = allPropertiesWeight[seedNodeIndex];\n  var allCosineSimilarity = [];\n  similarNodes.forEach(function (node, index) {\n    if (node.id !== seedNode.id) {\n      // 节点属性\n      var nodeProperties = allPropertiesWeight[index]; // 计算节点向量和种子节点向量的余弦相似度\n\n      var cosineSimilarityValue = cosineSimilarity(nodeProperties, seedNodeProperties);\n      allCosineSimilarity.push(cosineSimilarityValue);\n      node.cosineSimilarity = cosineSimilarityValue;\n    }\n  }); // 将返回的节点按照余弦相似度大小排序\n\n  similarNodes.sort(function (a, b) {\n    return b.cosineSimilarity - a.cosineSimilarity;\n  });\n  return {\n    allCosineSimilarity: allCosineSimilarity,\n    similarNodes: similarNodes\n  };\n};\n\nexport default nodesCosineSimilarity;","map":null,"metadata":{},"sourceType":"module"}