{"ast":null,"code":"export function getUniformLengthByType(type) {\n  var arrayLength = 0;\n\n  switch (type) {\n    case 'vec2':\n    case 'ivec2':\n      arrayLength = 2;\n      break;\n\n    case 'vec3':\n    case 'ivec3':\n      arrayLength = 3;\n      break;\n\n    case 'vec4':\n    case 'ivec4':\n    case 'mat2':\n      arrayLength = 4;\n      break;\n\n    case 'mat3':\n      arrayLength = 9;\n      break;\n\n    case 'mat4':\n      arrayLength = 16;\n      break;\n\n    default:\n  }\n\n  return arrayLength;\n}\nvar uniformRegExp = /uniform\\s+(bool|float|int|vec2|vec3|vec4|ivec2|ivec3|ivec4|mat2|mat3|mat4|sampler2D|samplerCube)\\s+([\\s\\S]*?);/g;\nexport function extractUniforms(content) {\n  var uniforms = {};\n  content = content.replace(uniformRegExp, function (_, type, c) {\n    var defaultValues = c.split(':');\n    var uniformName = defaultValues[0].trim();\n    var defaultValue = '';\n\n    if (defaultValues.length > 1) {\n      defaultValue = defaultValues[1].trim();\n    } // set default value for uniform according to its type\n    // eg. vec2 u -> [0.0, 0.0]\n\n\n    switch (type) {\n      case 'bool':\n        defaultValue = defaultValue === 'true';\n        break;\n\n      case 'float':\n      case 'int':\n        defaultValue = Number(defaultValue);\n        break;\n\n      case 'vec2':\n      case 'vec3':\n      case 'vec4':\n      case 'ivec2':\n      case 'ivec3':\n      case 'ivec4':\n      case 'mat2':\n      case 'mat3':\n      case 'mat4':\n        if (defaultValue) {\n          defaultValue = defaultValue.replace('[', '').replace(']', '').split(',').reduce(function (prev, cur) {\n            prev.push(Number(cur.trim()));\n            return prev;\n          }, []);\n        } else {\n          defaultValue = new Array(getUniformLengthByType(type)).fill(0);\n        }\n\n        break;\n\n      default:\n    } // @ts-ignore\n\n\n    uniforms[uniformName] = defaultValue;\n    return \"uniform \".concat(type, \" \").concat(uniformName, \";\\n\");\n  });\n  return {\n    content: content,\n    uniforms: uniforms\n  };\n}","map":null,"metadata":{},"sourceType":"module"}