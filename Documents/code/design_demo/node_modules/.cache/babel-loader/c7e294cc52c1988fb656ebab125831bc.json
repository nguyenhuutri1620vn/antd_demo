{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar point_1 = require(\"./point\");\n\nvar Bounds =\n/** @class */\nfunction () {\n  function Bounds(topLeft, bottomRight) {\n    if (!topLeft) {\n      return;\n    }\n\n    var points = bottomRight ? [topLeft, bottomRight] : topLeft;\n\n    if (Array.isArray(points)) {\n      for (var i = 0, len = points.length; i < len; i += 1) {\n        // @ts-ignore\n        this.extend(points[i]);\n      }\n    }\n  }\n\n  Bounds.prototype.extend = function (point) {\n    var newPoint = point_1.toPoint(point);\n\n    if (!this.min && !this.max) {\n      this.min = newPoint.clone();\n      this.max = newPoint.clone();\n    } else {\n      this.min.x = Math.min(newPoint.x, this.min.x);\n      this.max.x = Math.max(newPoint.x, this.max.x);\n      this.min.y = Math.min(newPoint.y, this.min.y);\n      this.max.y = Math.max(newPoint.y, this.max.y);\n    }\n\n    return this;\n  };\n\n  Bounds.prototype.getCenter = function (round) {\n    return new point_1.Point((this.min.x + this.max.x) / 2, (this.min.y + this.max.y) / 2, round);\n  };\n\n  Bounds.prototype.getBottomLeft = function () {\n    return new point_1.Point(this.min.x, this.max.y);\n  };\n\n  Bounds.prototype.getTopRight = function () {\n    return new point_1.Point(this.max.x, this.min.y);\n  };\n\n  Bounds.prototype.getBottomRight = function () {\n    return this.max;\n  };\n\n  Bounds.prototype.getTopLeft = function () {\n    return this.min;\n  };\n\n  Bounds.prototype.getSize = function () {\n    return this.max.subtract(this.min);\n  };\n  /**\n   * 判断是否包含 输入 points 或者 bounds\n   * @param obj\n   */\n\n\n  Bounds.prototype.contains = function (obj) {\n    var min;\n    var max;\n    var newObj = obj; // @ts-ignore\n\n    if (newObj instanceof point_1.Point || typeof newObj[0] === 'number') {\n      newObj = point_1.toPoint(newObj);\n    } else {\n      newObj = toBounds(newObj);\n    }\n\n    if (newObj instanceof Bounds) {\n      min = newObj.min;\n      max = newObj.max;\n    } else {\n      min = max = obj;\n    }\n\n    return min.x >= this.min.x && max.x <= this.max.x && min.y >= this.min.y && max.y <= this.max.y;\n  };\n  /**\n   * 判断两个bounds是否相交 ,\n   * @param bounds\n   */\n\n\n  Bounds.prototype.intersect = function (bounds) {\n    var newBounds = toBounds(bounds);\n    var min = this.min;\n    var max = this.max;\n    var min2 = newBounds.min;\n    var max2 = newBounds.max;\n    var xIntersects = max2.x >= min.x && min2.x <= max.x;\n    var yIntersects = max2.y >= min.y && min2.y <= max.y;\n    return xIntersects && yIntersects;\n  };\n  /**\n   * 判断bounds是否相互覆盖\n   * @param bounds\n   */\n\n\n  Bounds.prototype.overlaps = function (bounds) {\n    var newBounds = toBounds(bounds);\n    var min = this.min;\n    var max = this.max;\n    var min2 = newBounds.min;\n    var max2 = newBounds.max;\n    var xOverlaps = max2.x > min.x && min2.x < max.x;\n    var yOverlaps = max2.y > min.y && min2.y < max.y;\n    return xOverlaps && yOverlaps;\n  };\n\n  Bounds.prototype.isValid = function () {\n    return !!(this.min && this.max);\n  };\n\n  return Bounds;\n}();\n\nexports.Bounds = Bounds;\n\nfunction toBounds(topLeft, bottomRight) {\n  if (!topLeft || topLeft instanceof Bounds) {\n    return topLeft;\n  }\n\n  return new Bounds(topLeft, bottomRight);\n}\n\nexports.toBounds = toBounds;","map":null,"metadata":{},"sourceType":"script"}