{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { deepMix, each, get, isArray, isNull } from '@antv/util';\nimport { doAnimate } from '../animate';\nimport { getGeometryLabelLayout } from '../geometry/label';\nimport { getlLabelBackgroundInfo } from '../geometry/label/util';\nimport { polarToCartesian } from '../util/graphics';\nimport { rotate, translate } from '../util/transform';\nimport { FIELD_ORIGIN } from '../constant';\nimport { updateLabel } from './update-label';\n/**\n * Geometry labels 渲染组件\n */\n\nvar Labels =\n/** @class */\nfunction () {\n  function Labels(cfg) {\n    /** 存储当前 shape 的映射表，键值为 shape id */\n    this.shapesMap = {};\n    this.lastShapesMap = {};\n    var layout = cfg.layout,\n        container = cfg.container;\n    this.layout = layout;\n    this.container = container;\n  }\n  /**\n   * 渲染文本\n   */\n\n\n  Labels.prototype.render = function (items, shapes, isUpdate) {\n    var _this = this;\n\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    this.shapesMap = {};\n    var container = this.container;\n    var offscreenGroup = this.createOffscreenGroup(); // 创建虚拟分组\n\n    if (items.length) {\n      // 如果 items 空的话就不进行绘制调整操作\n      // step 1: 在虚拟 group 中创建 shapes\n      for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n        var item = items_1[_i];\n\n        if (item) {\n          this.renderLabel(item, offscreenGroup);\n        }\n      } // step 2: 根据布局，调整 labels\n\n\n      this.doLayout(items, shapes); // step 3.1: 绘制 labelLine\n\n      this.renderLabelLine(items); // step 3.2: 绘制 labelBackground\n\n      this.renderLabelBackground(items); // step 4: 根据用户设置的偏移量调整 label\n\n      this.adjustLabel(items);\n    } // 进行添加、更新、销毁操作\n\n\n    var lastShapesMap = this.lastShapesMap;\n    var shapesMap = this.shapesMap;\n    each(shapesMap, function (shape, id) {\n      if (shape.destroyed) {\n        // label 在布局调整环节被删除了（doLayout）\n        delete shapesMap[id];\n      } else {\n        if (lastShapesMap[id]) {\n          // 图形发生更新\n          var data = shape.get('data');\n          var origin_1 = shape.get('origin');\n          var coordinate = shape.get('coordinate');\n          var currentAnimateCfg = shape.get('animateCfg');\n          var currentShape = lastShapesMap[id]; // 已经在渲染树上的 shape\n\n          updateLabel(currentShape, shapesMap[id], {\n            data: data,\n            origin: origin_1,\n            animateCfg: currentAnimateCfg,\n            coordinate: coordinate\n          });\n          _this.shapesMap[id] = currentShape; // 保存引用\n        } else {\n          // 新生成的 shape\n          container.add(shape);\n          var animateCfg = get(shape.get('animateCfg'), isUpdate ? 'enter' : 'appear');\n\n          if (animateCfg) {\n            doAnimate(shape, animateCfg, {\n              toAttrs: __assign({}, shape.attr()),\n              coordinate: shape.get('coordinate')\n            });\n          }\n        }\n\n        delete lastShapesMap[id];\n      }\n    }); // 移除\n\n    each(lastShapesMap, function (deleteShape) {\n      var animateCfg = get(deleteShape.get('animateCfg'), 'leave');\n\n      if (animateCfg) {\n        doAnimate(deleteShape, animateCfg, {\n          toAttrs: null,\n          coordinate: deleteShape.get('coordinate')\n        });\n      } else {\n        deleteShape.remove(true); // 移除\n      }\n    });\n    this.lastShapesMap = shapesMap;\n    offscreenGroup.destroy();\n  };\n  /** 清除当前 labels */\n\n\n  Labels.prototype.clear = function () {\n    this.container.clear();\n    this.shapesMap = {};\n    this.lastShapesMap = {};\n  };\n  /** 销毁 */\n\n\n  Labels.prototype.destroy = function () {\n    this.container.destroy();\n    this.shapesMap = null;\n    this.lastShapesMap = null;\n  };\n\n  Labels.prototype.renderLabel = function (cfg, container) {\n    var id = cfg.id,\n        elementId = cfg.elementId,\n        data = cfg.data,\n        mappingData = cfg.mappingData,\n        coordinate = cfg.coordinate,\n        animate = cfg.animate,\n        content = cfg.content;\n    var shapeAppendCfg = {\n      id: id,\n      elementId: elementId,\n      data: data,\n      origin: __assign(__assign({}, mappingData), {\n        data: mappingData[FIELD_ORIGIN]\n      }),\n      coordinate: coordinate\n    };\n    var labelGroup = container.addGroup(__assign({\n      name: 'label',\n      // 如果 this.animate === false 或者 cfg.animate === false/null 则不进行动画，否则进行动画配置的合并\n      animateCfg: this.animate === false || animate === null || animate === false ? false : deepMix({}, this.animate, animate)\n    }, shapeAppendCfg));\n    var labelShape;\n\n    if (content.isGroup && content.isGroup() || content.isShape && content.isShape()) {\n      // 如果 content 是 Group 或者 Shape，根据 textAlign 调整位置后，直接将其加入 labelGroup\n      var _a = content.getCanvasBBox(),\n          width = _a.width,\n          height = _a.height;\n\n      var textAlign = get(cfg, 'textAlign', 'left');\n      var x = cfg.x;\n      var y = cfg.y - height / 2;\n\n      if (textAlign === 'center') {\n        x = x - width / 2;\n      } else if (textAlign === 'right' || textAlign === 'end') {\n        x = x - width;\n      }\n\n      translate(content, x, y); // 将 label 平移至 x, y 指定的位置\n\n      labelShape = content;\n      labelGroup.add(content);\n    } else {\n      var fill = get(cfg, ['style', 'fill']);\n      labelShape = labelGroup.addShape('text', __assign({\n        attrs: __assign(__assign({\n          x: cfg.x,\n          y: cfg.y,\n          textAlign: cfg.textAlign,\n          textBaseline: get(cfg, 'textBaseline', 'middle'),\n          text: cfg.content\n        }, cfg.style), {\n          fill: isNull(fill) ? cfg.color : fill\n        })\n      }, shapeAppendCfg));\n    }\n\n    if (cfg.rotate) {\n      rotate(labelShape, cfg.rotate);\n    }\n\n    this.shapesMap[id] = labelGroup;\n  }; // 根据type对label布局\n\n\n  Labels.prototype.doLayout = function (items, shapes) {\n    var _this = this;\n\n    if (this.layout) {\n      var layouts = isArray(this.layout) ? this.layout : [this.layout];\n      each(layouts, function (layout) {\n        var layoutFn = getGeometryLabelLayout(get(layout, 'type', ''));\n\n        if (layoutFn) {\n          var labelShapes_1 = [];\n          var geometryShapes_1 = [];\n          each(_this.shapesMap, function (labelShape, id) {\n            labelShapes_1.push(labelShape);\n            geometryShapes_1.push(shapes[labelShape.get('elementId')]);\n          });\n          layoutFn(items, labelShapes_1, geometryShapes_1, _this.region, layout.cfg);\n        }\n      });\n    }\n  };\n\n  Labels.prototype.renderLabelLine = function (labelItems) {\n    var _this = this;\n\n    each(labelItems, function (labelItem) {\n      var coordinate = get(labelItem, 'coordinate');\n\n      if (!labelItem || !coordinate) {\n        return;\n      }\n\n      var center = coordinate.getCenter();\n      var radius = coordinate.getRadius();\n\n      if (!labelItem.labelLine) {\n        // labelLine: null | false，关闭 label 对应的 labelLine\n        return;\n      }\n\n      var labelLineCfg = get(labelItem, 'labelLine', {});\n      var id = labelItem.id;\n      var path = labelLineCfg.path;\n\n      if (!path) {\n        var start = polarToCartesian(center.x, center.y, radius, labelItem.angle);\n        path = [['M', start.x, start.y], ['L', labelItem.x, labelItem.y]];\n      }\n\n      var labelGroup = _this.shapesMap[id];\n\n      if (!labelGroup.destroyed) {\n        labelGroup.addShape('path', {\n          capture: false,\n          attrs: __assign({\n            path: path,\n            stroke: labelItem.color ? labelItem.color : get(labelItem, ['style', 'fill'], '#000'),\n            fill: null\n          }, labelLineCfg.style),\n          id: id,\n          origin: labelItem.mappingData,\n          data: labelItem.data,\n          coordinate: labelItem.coordinate\n        });\n      }\n    });\n  };\n  /**\n   * 绘制标签背景\n   * @param labelItems\n   */\n\n\n  Labels.prototype.renderLabelBackground = function (labelItems) {\n    var _this = this;\n\n    each(labelItems, function (labelItem) {\n      var coordinate = get(labelItem, 'coordinate');\n      var background = get(labelItem, 'background');\n\n      if (!background || !coordinate) {\n        return;\n      }\n\n      var id = labelItem.id;\n      var labelGroup = _this.shapesMap[id];\n\n      if (!labelGroup.destroyed) {\n        var labelContentShape = labelGroup.getChildren()[0];\n\n        if (labelContentShape) {\n          var _a = getlLabelBackgroundInfo(labelGroup, labelItem, background.padding),\n              rotation = _a.rotation,\n              box = __rest(_a, [\"rotation\"]);\n\n          var backgroundShape = labelGroup.addShape('rect', {\n            attrs: __assign(__assign({}, box), background.style || {}),\n            id: id,\n            origin: labelItem.mappingData,\n            data: labelItem.data,\n            coordinate: labelItem.coordinate\n          });\n          backgroundShape.setZIndex(-1);\n\n          if (rotation) {\n            var matrix = labelContentShape.getMatrix();\n            backgroundShape.setMatrix(matrix);\n          }\n        }\n      }\n    });\n  };\n\n  Labels.prototype.createOffscreenGroup = function () {\n    var container = this.container;\n    var GroupClass = container.getGroupBase(); // 获取分组的构造函数\n\n    var newGroup = new GroupClass({});\n    return newGroup;\n  };\n\n  Labels.prototype.adjustLabel = function (items) {\n    var _this = this;\n\n    each(items, function (item) {\n      if (item) {\n        var id = item.id;\n        var labelGroup = _this.shapesMap[id];\n\n        if (!labelGroup.destroyed) {\n          // fix: 如果说开发者的 label content 是一个 group，此处的偏移无法对 整个 content group 生效；场景类似 饼图 spider label 是一个含 2 个 textShape 的 gorup\n          var labelShapes = labelGroup.findAll(function (ele) {\n            return ele.get('type') !== 'path';\n          });\n          each(labelShapes, function (labelShape) {\n            if (labelShape) {\n              if (item.offsetX) {\n                labelShape.attr('x', labelShape.attr('x') + item.offsetX);\n              }\n\n              if (item.offsetY) {\n                labelShape.attr('y', labelShape.attr('y') + item.offsetY);\n              }\n            }\n          });\n        }\n      }\n    });\n  };\n\n  return Labels;\n}();\n\nexport default Labels;","map":null,"metadata":{},"sourceType":"module"}