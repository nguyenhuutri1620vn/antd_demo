{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AreaLayer = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar l7_layers_1 = require(\"@antv/l7-layers\");\n\nvar plot_layer_1 = require(\"../../core/layer/plot-layer\");\n\nvar adaptor_1 = require(\"./adaptor\");\n\nvar helper_1 = require(\"../dot-layer/helper\");\n\nvar DEFAULT_OPTIONS = {\n  visible: true,\n  state: {\n    active: false,\n    select: false\n  },\n  enabledMultiSelect: false\n};\nvar LAYER_OPTIONS_KEYS = ['color', 'style', 'state', 'enabledMultiSelect'];\n\nvar AreaLayer =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(AreaLayer, _super);\n\n  function AreaLayer(options) {\n    var _this = _super.call(this, options) || this;\n    /**\n     * 选中数据\n     */\n\n\n    _this.selectData = [];\n    /**\n     * 图层类型\n     */\n\n    _this.type = plot_layer_1.PlotLayer.LayerType.AreaLayer;\n    /**\n     * 图层是否具有交互属性\n     */\n\n    _this.interaction = true;\n\n    _this.onHighlighHandle = function (event) {\n      var feature = event.feature,\n          featureId = event.featureId;\n\n      _this.setHighlightLayerSource(feature, featureId);\n    };\n\n    _this.onUnhighlighHandle = function () {\n      _this.setHighlightLayerSource();\n    };\n\n    _this.onSelectHandle = function (event) {\n      var enabledMultiSelect = _this.options.enabledMultiSelect;\n      var feature = event.feature,\n          featureId = event.featureId;\n      var selectData = (0, util_1.clone)(_this.selectData);\n      var index = selectData.findIndex(function (item) {\n        return item.featureId === featureId;\n      });\n\n      if (index === -1) {\n        if (enabledMultiSelect) {\n          selectData.push({\n            feature: feature,\n            featureId: featureId\n          });\n        } else {\n          selectData = [{\n            feature: feature,\n            featureId: featureId\n          }];\n        }\n\n        _this.emit('select', feature, (0, util_1.clone)(selectData));\n      } else {\n        var unselectFeature = selectData[index];\n\n        if (enabledMultiSelect) {\n          selectData.splice(index, 1);\n        } else {\n          selectData = [];\n        }\n\n        _this.emit('unselect', unselectFeature, (0, util_1.clone)(selectData));\n      }\n\n      _this.setSelectLayerSource(selectData);\n    };\n\n    var _a = _this.options,\n        name = _a.name,\n        source = _a.source,\n        visible = _a.visible,\n        minZoom = _a.minZoom,\n        maxZoom = _a.maxZoom,\n        _b = _a.zIndex,\n        zIndex = _b === void 0 ? 0 : _b;\n\n    var config = _this.pickLayerConfig(_this.options);\n\n    var defaultState = (0, adaptor_1.getDefaultState)(_this.options.state);\n    _this.name = name ? name : (0, util_1.uniqueId)(_this.type);\n    _this.layer = new l7_layers_1.PolygonLayer((0, tslib_1.__assign)((0, tslib_1.__assign)({}, config), {\n      name: _this.name\n    }));\n    _this.strokeLayer = new l7_layers_1.LineLayer({\n      name: 'strokeLayer',\n      visible: visible,\n      zIndex: zIndex,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    });\n    _this.highlightLayer = new l7_layers_1.LineLayer({\n      name: 'highlightLayer',\n      visible: visible && Boolean(defaultState.active.stroke),\n      zIndex: zIndex + 0.1,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    });\n    _this.selectFillLayer = new l7_layers_1.PolygonLayer({\n      name: 'selectFillLayer',\n      visible: visible && Boolean(defaultState.select.fill),\n      zIndex: zIndex + 0.1,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    });\n    _this.selectStrokeLayer = new l7_layers_1.LineLayer({\n      name: 'selectStrokeLayer',\n      visible: visible && Boolean(defaultState.select.stroke),\n      zIndex: zIndex + 0.1,\n      minZoom: minZoom,\n      maxZoom: maxZoom\n    });\n\n    _this.mappingLayer(_this.options);\n\n    _this.setSource(source);\n\n    _this.initEvent();\n\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  AreaLayer.prototype.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n\n  AreaLayer.prototype.mappingLayer = function (options) {\n    (0, adaptor_1.mappingLayer)(this.layer, this.strokeLayer, this.highlightLayer, this.selectFillLayer, this.selectStrokeLayer, options);\n  };\n\n  AreaLayer.prototype.setSource = function (source) {\n    _super.prototype.setSource.call(this, source);\n\n    this.setStrokeLayerSource();\n    this.setHighlightLayerSource();\n    this.selectFillLayer.source({\n      type: 'FeatureCollection',\n      features: []\n    }, {\n      parser: {\n        type: 'geojson'\n      }\n    });\n    this.selectStrokeLayer.source({\n      type: 'FeatureCollection',\n      features: []\n    }, {\n      parser: {\n        type: 'geojson'\n      }\n    });\n  };\n\n  AreaLayer.prototype.setStrokeLayerSource = function () {\n    var layerSource = this.layer.getSource();\n\n    if (layerSource) {\n      this.strokeLayer.setSource(layerSource);\n    } else {\n      var _a = this.layer.sourceOption,\n          data = _a.data,\n          options = _a.options;\n      this.strokeLayer.source(data, options);\n    }\n  };\n\n  AreaLayer.prototype.setHighlightLayerSource = function (feature, featureId) {\n    if (featureId === void 0) {\n      featureId = -999;\n    }\n\n    if (this.highlightLayerData === featureId) {\n      return;\n    }\n\n    var features = feature ? [feature] : [];\n    this.highlightLayer.setData({\n      type: 'FeatureCollection',\n      features: features\n    }, {\n      parser: {\n        type: 'geojson'\n      }\n    });\n    this.highlightLayerData = featureId;\n  };\n\n  AreaLayer.prototype.setSelectLayerSource = function (selectData) {\n    if (selectData === void 0) {\n      selectData = [];\n    }\n\n    if (this.selectData.length === selectData.length && (0, util_1.isEqual)(this.selectData.map(function (_a) {\n      var featureId = _a.featureId;\n      return featureId;\n    }), selectData.map(function (_a) {\n      var featureId = _a.featureId;\n      return featureId;\n    }))) {\n      return;\n    }\n\n    var features = selectData.map(function (_a) {\n      var feature = _a.feature;\n      return feature;\n    });\n    this.selectFillLayer.setData({\n      type: 'FeatureCollection',\n      features: features\n    }, {\n      parser: {\n        type: 'geojson'\n      }\n    });\n    this.selectStrokeLayer.setData({\n      type: 'FeatureCollection',\n      features: features\n    }, {\n      parser: {\n        type: 'geojson'\n      }\n    });\n    this.selectData = selectData;\n  };\n\n  AreaLayer.prototype.initEvent = function () {\n    this.layer.off('mousemove', this.onHighlighHandle);\n    this.layer.off('unmousemove', this.onHighlighHandle);\n    this.layer.off('click', this.onSelectHandle);\n    this.selectData = [];\n    this.highlightLayerData = null;\n    if (!this.options.state) return; // active\n\n    if (this.options.state.active) {\n      this.layer.on('mousemove', this.onHighlighHandle);\n      this.layer.on('unmousemove', this.onUnhighlighHandle);\n    } // select\n\n\n    if (this.options.state.select) {\n      this.layer.on('click', this.onSelectHandle);\n    }\n  };\n\n  AreaLayer.prototype.addTo = function (scene) {\n    scene.addLayer(this.layer);\n    scene.addLayer(this.strokeLayer);\n    scene.addLayer(this.highlightLayer);\n    scene.addLayer(this.selectFillLayer);\n    scene.addLayer(this.selectStrokeLayer);\n  };\n\n  AreaLayer.prototype.remove = function (scene) {\n    scene.removeLayer(this.layer);\n    scene.removeLayer(this.strokeLayer);\n    scene.removeLayer(this.highlightLayer);\n    scene.removeLayer(this.selectFillLayer);\n    scene.removeLayer(this.selectStrokeLayer);\n  };\n\n  AreaLayer.prototype.update = function (options) {\n    _super.prototype.update.call(this, options);\n\n    this.mappingLayer(this.options);\n\n    if (this.options.visible) {\n      if (!(0, util_1.isUndefined)(options.state) && !(0, util_1.isEqual)(this.lastOptions.state, this.options.state)) {\n        this.updateHighlightLayer();\n      }\n\n      var defaultState = (0, adaptor_1.getDefaultState)(this.options.state);\n\n      if (defaultState.active.stroke) {\n        this.setHighlightLayerSource();\n      }\n\n      if (defaultState.select.fill || defaultState.select.stroke) {\n        this.setSelectLayerSource();\n      }\n    }\n\n    this.initEvent();\n  };\n\n  AreaLayer.prototype.updateHighlightLayer = function () {\n    var defaultState = (0, adaptor_1.getDefaultState)(this.options.state);\n    var lasetDefaultState = (0, adaptor_1.getDefaultState)(this.lastOptions.state);\n\n    if (lasetDefaultState.active.stroke !== defaultState.active.stroke) {\n      defaultState.active.stroke ? this.highlightLayer.show() : this.highlightLayer.hide();\n    }\n\n    if (lasetDefaultState.select.fill !== defaultState.select.fill) {\n      defaultState.select.fill ? this.selectFillLayer.show() : this.selectFillLayer.hide();\n    }\n\n    if (lasetDefaultState.select.stroke !== defaultState.select.stroke) {\n      defaultState.select.stroke ? this.selectStrokeLayer.show() : this.selectStrokeLayer.hide();\n    }\n  };\n\n  AreaLayer.prototype.setIndex = function (zIndex) {\n    this.layer.setIndex(zIndex);\n    this.strokeLayer.setIndex(zIndex);\n    this.highlightLayer.setIndex(zIndex + 0.1);\n    this.selectFillLayer.setIndex(zIndex + 0.1);\n    this.selectStrokeLayer.setIndex(zIndex + 0.1);\n  };\n\n  AreaLayer.prototype.setMinZoom = function (minZoom) {\n    this.layer.setMinZoom(minZoom);\n    this.strokeLayer.setMinZoom(minZoom);\n    this.highlightLayer.setMinZoom(minZoom);\n    this.selectFillLayer.setMinZoom(minZoom);\n    this.selectStrokeLayer.setMinZoom(minZoom);\n  };\n\n  AreaLayer.prototype.setMaxZoom = function (maxZoom) {\n    this.layer.setMaxZoom(maxZoom);\n    this.strokeLayer.setMaxZoom(maxZoom);\n    this.highlightLayer.setMaxZoom(maxZoom);\n    this.selectFillLayer.setMaxZoom(maxZoom);\n    this.selectStrokeLayer.setMaxZoom(maxZoom);\n  };\n\n  AreaLayer.prototype.show = function () {\n    if (!this.layer.inited) return;\n    this.layer.show();\n    this.strokeLayer.show();\n    this.selectFillLayer.show();\n    this.selectStrokeLayer.show();\n  };\n\n  AreaLayer.prototype.hide = function () {\n    if (!this.layer.inited) return;\n    this.layer.hide();\n    this.strokeLayer.hide();\n    this.selectFillLayer.hide();\n    this.selectStrokeLayer.hide();\n  };\n\n  AreaLayer.prototype.getColorLegendItems = function () {\n    var colorLegendItems = this.layer.getLegendItems('color');\n\n    if (Array.isArray(colorLegendItems) && colorLegendItems.length !== 0) {\n      var items = (0, helper_1.getColorLegendItems)(colorLegendItems);\n      return items;\n    }\n\n    return [];\n  };\n\n  AreaLayer.prototype.setActive = function (id) {// TODO: L7 method pickFeature(id|{x,y})\n  };\n\n  AreaLayer.prototype.setSelect = function (id) {// TODO: L7 method pickFeature(id|{x,y})\n  };\n  /**\n   * 默认配置项\n   */\n\n\n  AreaLayer.DefaultOptions = DEFAULT_OPTIONS;\n  /**\n   * 图层配置项 Keys\n   */\n\n  AreaLayer.LayerOptionsKeys = plot_layer_1.PlotLayer.LayerConfigkeys.concat(LAYER_OPTIONS_KEYS);\n  return AreaLayer;\n}(plot_layer_1.PlotLayer);\n\nexports.AreaLayer = AreaLayer;","map":null,"metadata":{},"sourceType":"script"}