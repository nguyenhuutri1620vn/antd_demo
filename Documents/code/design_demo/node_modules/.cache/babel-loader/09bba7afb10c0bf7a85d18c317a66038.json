{"ast":null,"code":"import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../../utils/createLoading';\nimport ErrorBoundary from '../../errorBoundary';\nimport useGraph from '../hooks/useGraph';\nimport { customIconNode } from './customItems';\nimport { defaultLabelCfg, defaultStateStyles } from './constants';\nimport { getGraphSize, processMinimap, getGraphId, renderGraph, bindEvents, useProps } from './utils';\nvar defaultNodeStyle = {\n  fill: '#91d5ff',\n  stroke: '#40a9ff',\n  radius: 2\n};\nvar defaultEdgeStyle = {\n  stroke: '#91d5ff',\n  endArrow: {\n    path: 'M 0,0 L 12, 6 L 9,0 L 12, -6 Z',\n    fill: '#91d5ff',\n    d: -20\n  }\n};\nvar defaultLayout = {\n  type: 'compactBox',\n  direction: 'TB',\n  getId: function getId(d) {\n    return d.id;\n  },\n  getHeight: function getHeight() {\n    return 16;\n  },\n  getWidth: function getWidth() {\n    return 16;\n  },\n  getVGap: function getVGap() {\n    return 40;\n  },\n  getHGap: function getHGap() {\n    return 70;\n  }\n};\nvar defaultProps = {\n  nodeType: 'rect',\n  edgeType: 'flow-line',\n  collapseExpand: false,\n  nodeSize: [120, 40],\n  nodeLabelCfg: defaultLabelCfg,\n  edgeLabelCfg: defaultLabelCfg,\n  layout: defaultLayout,\n  enableEdit: false,\n  nodeStyle: defaultNodeStyle,\n  edgeStyle: defaultEdgeStyle,\n  nodeStateStyles: defaultStateStyles,\n  edgeStateStyles: defaultStateStyles,\n  autoFit: true\n};\nvar graphs = {};\n\nvar OrganizationTreeGraphComponent = function (props) {\n  var uProps = useProps(props, defaultProps);\n  var data = uProps.data,\n      className = uProps.className,\n      style = uProps.style,\n      width = uProps.width,\n      height = uProps.height,\n      _a = uProps.nodeType,\n      nodeType = _a === void 0 ? 'rect' : _a,\n      _b = uProps.edgeType,\n      edgeType = _b === void 0 ? 'flow-line' : _b,\n      _c = uProps.collapseExpand,\n      collapseExpand = _c === void 0 ? false : _c,\n      _d = uProps.nodeSize,\n      nodeSize = _d === void 0 ? [120, 40] : _d,\n      _e = uProps.nodeLabelCfg,\n      nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e,\n      _f = uProps.edgeLabelCfg,\n      edgeLabelCfg = _f === void 0 ? defaultLabelCfg : _f,\n      _g = uProps.layout,\n      layout = _g === void 0 ? defaultLayout : _g,\n      _h = uProps.enableEdit,\n      enableEdit = _h === void 0 ? false : _h,\n      minimapCfg = uProps.minimapCfg,\n      _j = uProps.nodeStyle,\n      nodeStyle = _j === void 0 ? defaultNodeStyle : _j,\n      _k = uProps.edgeStyle,\n      edgeStyle = _k === void 0 ? defaultEdgeStyle : _k,\n      _l = uProps.nodeStateStyles,\n      nodeStateStyles = _l === void 0 ? defaultStateStyles : _l,\n      _m = uProps.edgeStateStyles,\n      edgeStateStyles = _m === void 0 ? defaultStateStyles : _m,\n      _o = uProps.autoFit,\n      autoFit = _o === void 0 ? true : _o,\n      graphRef = uProps.graphRef,\n      onReady = uProps.onReady,\n      loading = uProps.loading,\n      loadingTemplate = uProps.loadingTemplate,\n      errorTemplate = uProps.errorTemplate;\n  var container = React.useRef(null);\n  var graph = React.useRef(null);\n  var graphId = getGraphId(graph);\n  useGraph(graphs[graphId], uProps, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n\n    if (nodeType === 'icon-node') {\n      customIconNode({\n        enableEdit: enableEdit\n      });\n    }\n\n    var graph = graphs[graphId];\n\n    if (!graph) {\n      graph = new G6.TreeGraph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        linkCenter: true,\n        modes: {\n          default: ['drag-canvas', 'zoom-canvas']\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle,\n          labelCfg: edgeLabelCfg\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout,\n        fitView: autoFit\n      });\n      graphs[graphId] = graph;\n    }\n\n    if (graphRef) {\n      graphRef.current = graph;\n    }\n\n    processMinimap(minimapCfg, graph);\n    renderGraph(graph, data);\n\n    if (onReady) {\n      onReady(graph);\n    }\n\n    if (collapseExpand) {\n      graph.addBehaviors({\n        type: 'collapse-expand'\n      }, 'default');\n    }\n\n    bindEvents(graph, props);\n    return function () {\n      if (graphs[graphId]) {\n        graphs[graphId].destroy();\n        delete graphs[graphId];\n      }\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, {\n    errorTemplate: errorTemplate\n  }, loading && React.createElement(ChartLoading, {\n    loadingTemplate: loadingTemplate\n  }), React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default OrganizationTreeGraphComponent;","map":null,"metadata":{},"sourceType":"module"}