{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { PositionType, TYPES } from '@antv/l7-core';\nimport { DOM } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nexport { PositionType } from '@antv/l7-core';\nvar controlId = 0;\n\nvar Control = function (_EventEmitter) {\n  _inherits(Control, _EventEmitter);\n\n  var _super = _createSuper(Control);\n\n  function Control(cfg) {\n    var _this;\n\n    _classCallCheck(this, Control);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"controlOption\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"container\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"sceneContainer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"mapsService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"renderService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layerService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"controlService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isShow\", void 0);\n\n    _this.controlOption = _objectSpread(_objectSpread({}, _this.getDefault()), cfg || {});\n    return _this;\n  }\n\n  _createClass(Control, [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      return {\n        position: PositionType.TOPRIGHT,\n        name: \"\".concat(controlId++)\n      };\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition() {\n      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : PositionType.BOTTOMRIGHT;\n      var controlService = this.controlService;\n\n      if (controlService) {\n        controlService.removeControl(this);\n      }\n\n      this.controlOption.position = position;\n\n      if (controlService) {\n        controlService.addControl(this, this.sceneContainer);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addTo\",\n    value: function addTo(sceneContainer) {\n      this.mapsService = sceneContainer.get(TYPES.IMapService);\n      this.renderService = sceneContainer.get(TYPES.IRendererService);\n      this.layerService = sceneContainer.get(TYPES.ILayerService);\n      this.controlService = sceneContainer.get(TYPES.IControlService);\n      this.sceneContainer = sceneContainer;\n      this.isShow = true;\n      this.container = this.onAdd();\n      var container = this.container;\n      var pos = this.controlOption.position;\n      var corner = this.controlService.controlCorners[pos];\n      DOM.addClass(container, 'l7-control');\n\n      if (pos.indexOf('bottom') !== -1) {\n        corner.insertBefore(container, corner.firstChild);\n      } else {\n        corner.appendChild(container);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var container = this.container;\n      DOM.addClass(container, 'l7-control-hide');\n      this.isShow = false;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      var container = this.container;\n      DOM.removeClass(container, 'l7-control-hide');\n      this.isShow = true;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (!this.mapsService) {\n        return this;\n      }\n\n      DOM.remove(this.container);\n      this.onRemove();\n    }\n  }, {\n    key: \"_refocusOnMap\",\n    value: function _refocusOnMap(e) {\n      if (this.mapsService && e && e.screenX > 0 && e.screenY > 0) {\n        var container = this.mapsService.getContainer();\n\n        if (container !== null) {\n          container.focus();\n        }\n      }\n    }\n  }]);\n\n  return Control;\n}(EventEmitter);\n\nexport { Control as default };","map":null,"metadata":{},"sourceType":"module"}