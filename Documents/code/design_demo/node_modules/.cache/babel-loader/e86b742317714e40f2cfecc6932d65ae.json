{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport BaseLayer from '../core/BaseLayer';\nimport HeatMapModels from './models';\n\nvar HeatMapLayer = function (_BaseLayer) {\n  _inherits(HeatMapLayer, _BaseLayer);\n\n  var _super = _createSuper(HeatMapLayer);\n\n  function HeatMapLayer() {\n    var _this;\n\n    _classCallCheck(this, HeatMapLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'HeatMapLayer');\n\n    return _this;\n  }\n\n  _createClass(HeatMapLayer, [{\n    key: \"buildModels\",\n    value: function buildModels() {\n      var shape = this.getModelType();\n      this.layerModel = new HeatMapModels[shape](this);\n      this.models = this.layerModel.initModels();\n    }\n  }, {\n    key: \"rebuildModels\",\n    value: function rebuildModels() {\n      this.models = this.layerModel.buildModels();\n    }\n  }, {\n    key: \"renderModels\",\n    value: function renderModels() {\n      var _this2 = this;\n\n      var shape = this.getModelType();\n\n      if (shape === 'heatmap') {\n        if (this.layerModel) {\n          this.layerModel.render();\n        }\n\n        return this;\n      }\n\n      if (this.layerModelNeedUpdate) {\n        this.models = this.layerModel.buildModels();\n        this.layerModelNeedUpdate = false;\n      }\n\n      this.models.forEach(function (model) {\n        return model.draw({\n          uniforms: _this2.layerModel.getUninforms()\n        });\n      });\n      return this;\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      var _shapeAttribute$scale;\n\n      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n\n      var _this$getLayerConfig = this.getLayerConfig(),\n          shape3d = _this$getLayerConfig.shape3d;\n\n      var source = this.getSource();\n      var sourceType = source.data.type;\n      var shape = (shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field) || 'heatmap';\n\n      if (shape === 'heatmap' || shape === 'heatmap3d') {\n        return 'heatmap';\n      }\n\n      if (sourceType === 'hexagon') {\n        return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'hexagon' : 'grid3d';\n      }\n\n      if (sourceType === 'grid') {\n        return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'grid' : 'grid3d';\n      }\n\n      return 'heatmap';\n    }\n  }]);\n\n  return HeatMapLayer;\n}(BaseLayer);\n\nexport { HeatMapLayer as default };","map":null,"metadata":{},"sourceType":"module"}