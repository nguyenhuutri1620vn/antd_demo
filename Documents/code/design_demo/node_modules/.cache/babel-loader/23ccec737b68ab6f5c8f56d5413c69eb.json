{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { injectable, inject, postConstruct } from 'mana-syringe';\nimport { DisposableCollection } from '../common/disposable';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IModelService, MODELS } from '../model-service';\nimport { IGraphCommandService } from '../command/interface';\nimport { IHookService } from '../hooks';\nlet CmdContext = class CmdContext {\n  constructor() {\n    var _this = this;\n\n    /** undos 存在这里 */\n    this.toDispose = new DisposableCollection();\n    /** command handler的runtimeHook */\n\n    this.runtimeHooks = [];\n    /** 获取 x6 实例 */\n\n    this.getX6Graph = () => __awaiter(this, void 0, void 0, function* () {\n      if (this.graph) return this.graph;\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n      this.graph = graphInstance;\n      return graphInstance;\n    });\n    /** 获取 graph */\n\n\n    this.getGraphConfig = () => __awaiter(this, void 0, void 0, function* () {\n      return this.graphProvider.getGraphOptions();\n    });\n    /** 获取 graphMeta */\n\n\n    this.getGraphMeta = () => __awaiter(this, void 0, void 0, function* () {\n      const service = this.getModelService();\n      const meta = this.graphMeta || (yield MODELS.GRAPH_META.useValue(service));\n      return meta;\n    });\n    /** 设置参数 */\n\n\n    this.setArgs = function (args) {\n      let runtimeHooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      _this.args = args;\n      _this.runtimeHooks = runtimeHooks;\n      return {\n        args,\n        hooks: runtimeHooks\n      };\n    };\n    /** 获取参数 */\n\n\n    this.getArgs = () => {\n      /** 注入graph meta */\n      const args = Object.assign(Object.assign({}, this.args), {\n        modelService: this.getModelService(),\n        commandService: this.getCommands(),\n        getGraphMeta: this.getGraphMeta,\n        getX6Graph: this.getX6Graph,\n        getGraphConfig: this.getGraphConfig\n      });\n      return {\n        args: args,\n        hooks: this.runtimeHooks\n      };\n    };\n    /** 设置执行结果 */\n\n\n    this.setResult = result => {\n      this.result = result;\n      return this.result;\n    };\n    /** 获取执行结果 */\n\n\n    this.getResult = () => {\n      return this.result;\n    };\n    /** hooks */\n\n\n    this.getHooks = () => {\n      return this.hookService.hookProvider();\n    };\n    /** 获取Command Service */\n\n\n    this.getCommands = () => {\n      return this.commandService;\n    };\n    /** 获取Context Service */\n\n\n    this.getModelService = () => {\n      return this.modelService;\n    };\n    /** 添加undo */\n\n\n    this.addUndo = disposable => {\n      if (!Array.isArray(disposable)) {\n        return this.addUndo([disposable]);\n      }\n\n      this.toDispose.pushAll(disposable);\n    };\n    /** 执行undo */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      yield this.toDispose.dispose();\n    });\n    /** 是否可以执行undo */\n\n\n    this.isUndoable = () => {\n      return !this.toDispose.disposed;\n    };\n    /** 获取 toDispose */\n\n\n    this.getDisposables = () => this.toDispose;\n    /** 设置的共享变量 可以在command间共享 */\n\n\n    this.setGlobal = (key, value) => {\n      this.commandService.setGlobal(key, value);\n    };\n    /** 获取共享变量 */\n\n\n    this.getGlobal = key => {\n      return this.commandService.getGlobal(key);\n    };\n  }\n\n  init() {\n    this.getGraphMeta().then(meta => {\n      this.graphMeta = meta;\n    });\n  }\n\n};\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], CmdContext.prototype, \"graphProvider\", void 0);\n\n__decorate([inject(IHookService), __metadata(\"design:type\", Object)], CmdContext.prototype, \"hookService\", void 0);\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], CmdContext.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], CmdContext.prototype, \"modelService\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], CmdContext.prototype, \"init\", null);\n\nCmdContext = __decorate([injectable()], CmdContext);\nexport { CmdContext };","map":null,"metadata":{},"sourceType":"module"}