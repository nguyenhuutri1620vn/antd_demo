{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isTypedArray from \"lodash/isTypedArray\";\nimport _isPlainObject from \"lodash/isPlainObject\";\nimport _cloneDeep from \"lodash/cloneDeep\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { gl } from '@antv/l7-core';\nimport { blendEquationMap, blendFuncMap, cullFaceMap, depthFuncMap, primitiveMap, stencilFuncMap, stencilOpMap } from './constants';\n\nvar ReglModel = function () {\n  function ReglModel(reGl, options) {\n    _classCallCheck(this, ReglModel);\n\n    _defineProperty(this, \"reGl\", void 0);\n\n    _defineProperty(this, \"destroyed\", false);\n\n    _defineProperty(this, \"drawCommand\", void 0);\n\n    _defineProperty(this, \"drawPickCommand\", void 0);\n\n    _defineProperty(this, \"drawParams\", void 0);\n\n    _defineProperty(this, \"options\", void 0);\n\n    _defineProperty(this, \"uniforms\", {});\n\n    this.reGl = reGl;\n    var vs = options.vs,\n        fs = options.fs,\n        attributes = options.attributes,\n        uniforms = options.uniforms,\n        primitive = options.primitive,\n        count = options.count,\n        elements = options.elements,\n        depth = options.depth,\n        blend = options.blend,\n        stencil = options.stencil,\n        cull = options.cull,\n        instances = options.instances;\n    var reglUniforms = {};\n    this.options = options;\n\n    if (uniforms) {\n      this.uniforms = this.extractUniforms(uniforms);\n      Object.keys(uniforms).forEach(function (uniformName) {\n        reglUniforms[uniformName] = reGl.prop(uniformName);\n      });\n    }\n\n    var reglAttributes = {};\n    Object.keys(attributes).forEach(function (name) {\n      reglAttributes[name] = attributes[name].get();\n    });\n    var drawParams = {\n      attributes: reglAttributes,\n      frag: fs,\n      uniforms: reglUniforms,\n      vert: vs,\n      blend: {},\n      primitive: primitiveMap[primitive === undefined ? gl.TRIANGLES : primitive]\n    };\n\n    if (instances) {\n      drawParams.instances = instances;\n    }\n\n    if (count) {\n      drawParams.count = count;\n    }\n\n    if (elements) {\n      drawParams.elements = elements.get();\n    }\n\n    this.initDepthDrawParams({\n      depth: depth\n    }, drawParams);\n    this.initBlendDrawParams({\n      blend: blend\n    }, drawParams);\n    this.initStencilDrawParams({\n      stencil: stencil\n    }, drawParams);\n    this.initCullDrawParams({\n      cull: cull\n    }, drawParams);\n    this.drawCommand = reGl(drawParams);\n\n    var pickDrawParams = _cloneDeep(drawParams);\n\n    pickDrawParams.blend = _objectSpread(_objectSpread({}, pickDrawParams.blend), {}, {\n      enable: false\n    });\n    pickDrawParams.stencil = _objectSpread(_objectSpread({}, pickDrawParams.stencil), {}, {\n      enable: false\n    });\n    this.drawPickCommand = reGl(pickDrawParams);\n    this.drawParams = drawParams;\n  }\n\n  _createClass(ReglModel, [{\n    key: \"addUniforms\",\n    value: function addUniforms(uniforms) {\n      this.uniforms = _objectSpread(_objectSpread({}, this.uniforms), this.extractUniforms(uniforms));\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(options, pick) {\n      if (this.drawParams.attributes && Object.keys(this.drawParams.attributes).length === 0) {\n        return;\n      }\n\n      var uniforms = _objectSpread(_objectSpread({}, this.uniforms), this.extractUniforms(options.uniforms || {}));\n\n      var reglDrawProps = {};\n      Object.keys(uniforms).forEach(function (uniformName) {\n        var type = _typeof(uniforms[uniformName]);\n\n        if (type === 'boolean' || type === 'number' || Array.isArray(uniforms[uniformName]) || uniforms[uniformName].BYTES_PER_ELEMENT) {\n          reglDrawProps[uniformName] = uniforms[uniformName];\n        } else {\n          reglDrawProps[uniformName] = uniforms[uniformName].get();\n        }\n      });\n\n      if (!pick) {\n        this.drawCommand(reglDrawProps);\n      } else {\n        this.drawPickCommand(reglDrawProps);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.drawParams.elements.destroy();\n\n      if (this.options.attributes) {\n        Object.values(this.options.attributes).forEach(function (attr) {\n          attr.destroy();\n        });\n      }\n\n      this.destroyed = true;\n    }\n  }, {\n    key: \"initDepthDrawParams\",\n    value: function initDepthDrawParams(_ref, drawParams) {\n      var depth = _ref.depth;\n\n      if (depth) {\n        drawParams.depth = {\n          enable: depth.enable === undefined ? true : !!depth.enable,\n          mask: depth.mask === undefined ? true : !!depth.mask,\n          func: depthFuncMap[depth.func || gl.LESS],\n          range: depth.range || [0, 1]\n        };\n      }\n    }\n  }, {\n    key: \"initBlendDrawParams\",\n    value: function initBlendDrawParams(_ref2, drawParams) {\n      var blend = _ref2.blend;\n\n      if (blend) {\n        var enable = blend.enable,\n            func = blend.func,\n            equation = blend.equation,\n            _blend$color = blend.color,\n            color = _blend$color === void 0 ? [0, 0, 0, 0] : _blend$color;\n        drawParams.blend = {\n          enable: !!enable,\n          func: {\n            srcRGB: blendFuncMap[func && func.srcRGB || gl.SRC_ALPHA],\n            srcAlpha: blendFuncMap[func && func.srcAlpha || gl.SRC_ALPHA],\n            dstRGB: blendFuncMap[func && func.dstRGB || gl.ONE_MINUS_SRC_ALPHA],\n            dstAlpha: blendFuncMap[func && func.dstAlpha || gl.ONE_MINUS_SRC_ALPHA]\n          },\n          equation: {\n            rgb: blendEquationMap[equation && equation.rgb || gl.FUNC_ADD],\n            alpha: blendEquationMap[equation && equation.alpha || gl.FUNC_ADD]\n          },\n          color: color\n        };\n      }\n    }\n  }, {\n    key: \"initStencilDrawParams\",\n    value: function initStencilDrawParams(_ref3, drawParams) {\n      var stencil = _ref3.stencil;\n\n      if (stencil) {\n        var enable = stencil.enable,\n            _stencil$mask = stencil.mask,\n            mask = _stencil$mask === void 0 ? -1 : _stencil$mask,\n            _stencil$func = stencil.func,\n            func = _stencil$func === void 0 ? {\n          cmp: gl.ALWAYS,\n          ref: 0,\n          mask: -1\n        } : _stencil$func,\n            _stencil$opFront = stencil.opFront,\n            opFront = _stencil$opFront === void 0 ? {\n          fail: gl.KEEP,\n          zfail: gl.KEEP,\n          zpass: gl.KEEP\n        } : _stencil$opFront,\n            _stencil$opBack = stencil.opBack,\n            opBack = _stencil$opBack === void 0 ? {\n          fail: gl.KEEP,\n          zfail: gl.KEEP,\n          zpass: gl.KEEP\n        } : _stencil$opBack;\n        drawParams.stencil = {\n          enable: !!enable,\n          mask: mask,\n          func: _objectSpread(_objectSpread({}, func), {}, {\n            cmp: stencilFuncMap[func.cmp]\n          }),\n          opFront: {\n            fail: stencilOpMap[opFront.fail],\n            zfail: stencilOpMap[opFront.zfail],\n            zpass: stencilOpMap[opFront.zpass]\n          },\n          opBack: {\n            fail: stencilOpMap[opBack.fail],\n            zfail: stencilOpMap[opBack.zfail],\n            zpass: stencilOpMap[opBack.zpass]\n          }\n        };\n      }\n    }\n  }, {\n    key: \"initCullDrawParams\",\n    value: function initCullDrawParams(_ref4, drawParams) {\n      var cull = _ref4.cull;\n\n      if (cull) {\n        var enable = cull.enable,\n            _cull$face = cull.face,\n            face = _cull$face === void 0 ? gl.BACK : _cull$face;\n        drawParams.cull = {\n          enable: !!enable,\n          face: cullFaceMap[face]\n        };\n      }\n    }\n  }, {\n    key: \"extractUniforms\",\n    value: function extractUniforms(uniforms) {\n      var _this = this;\n\n      var extractedUniforms = {};\n      Object.keys(uniforms).forEach(function (uniformName) {\n        _this.extractUniformsRecursively(uniformName, uniforms[uniformName], extractedUniforms, '');\n      });\n      return extractedUniforms;\n    }\n  }, {\n    key: \"extractUniformsRecursively\",\n    value: function extractUniformsRecursively(uniformName, uniformValue, uniforms, prefix) {\n      var _this2 = this;\n\n      if (uniformValue === null || typeof uniformValue === 'number' || typeof uniformValue === 'boolean' || Array.isArray(uniformValue) && typeof uniformValue[0] === 'number' || _isTypedArray(uniformValue) || uniformValue === '' || 'resize' in uniformValue) {\n        uniforms[\"\".concat(prefix && prefix + '.').concat(uniformName)] = uniformValue;\n        return;\n      }\n\n      if (_isPlainObject(uniformValue)) {\n        Object.keys(uniformValue).forEach(function (childName) {\n          _this2.extractUniformsRecursively(childName, uniformValue[childName], uniforms, \"\".concat(prefix && prefix + '.').concat(uniformName));\n        });\n      }\n\n      if (Array.isArray(uniformValue)) {\n        uniformValue.forEach(function (child, idx) {\n          Object.keys(child).forEach(function (childName) {\n            _this2.extractUniformsRecursively(childName, child[childName], uniforms, \"\".concat(prefix && prefix + '.').concat(uniformName, \"[\").concat(idx, \"]\"));\n          });\n        });\n      }\n    }\n  }]);\n\n  return ReglModel;\n}();\n\nexport { ReglModel as default };","map":null,"metadata":{},"sourceType":"module"}