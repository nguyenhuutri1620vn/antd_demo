{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { FrequencyController } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nvar WindFrag = \"precision mediump float;\\nuniform float u_opacity: 1.0;\\nuniform sampler2D u_texture;\\nvarying vec2 v_texCoord;\\nvoid main() {\\n  vec4 color = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y));\\n  gl_FragColor = color;\\n  gl_FragColor.a *= u_opacity;\\n}\\n\";\nvar WindVert = \"precision highp float;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nattribute vec3 a_Position;\\nattribute vec2 a_Uv;\\nvarying vec2 v_texCoord;\\n#pragma include \\\"projection\\\"\\nvoid main() {\\n   v_texCoord = a_Uv;\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\\n   } else {\\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n   }\\n}\\n\";\nimport { Wind } from './windRender';\nvar defaultRampColors = {\n  0.0: '#3288bd',\n  0.1: '#66c2a5',\n  0.2: '#abdda4',\n  0.3: '#e6f598',\n  0.4: '#fee08b',\n  0.5: '#fdae61',\n  0.6: '#f46d43',\n  1.0: '#d53e4f'\n};\n\nvar WindModel = function (_BaseModel) {\n  _inherits(WindModel, _BaseModel);\n\n  var _super = _createSuper(WindModel);\n\n  function WindModel() {\n    var _this;\n\n    _classCallCheck(this, WindModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"colorModel\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"wind\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"imageCoords\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"sizeScale\", 0.5);\n\n    _defineProperty(_assertThisInitialized(_this), \"frequency\", new FrequencyController(7.2));\n\n    return _this;\n  }\n\n  _createClass(WindModel, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      this.frequency.run(function () {\n        _this2.drawWind();\n      });\n      this.drawColorMode();\n    }\n  }, {\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      throw new Error('Method not implemented.');\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      var _this3 = this;\n\n      var createTexture2D = this.rendererService.createTexture2D;\n      var source = this.layer.getSource();\n      this.texture = createTexture2D({\n        height: 0,\n        width: 0\n      });\n      var glContext = this.rendererService.getGLContext();\n      this.imageCoords = source.data.dataArray[0].coordinates;\n      source.data.images.then(function (imageData) {\n        var _ref = _this3.layer.getLayerConfig(),\n            _ref$uMin = _ref.uMin,\n            uMin = _ref$uMin === void 0 ? -21.32 : _ref$uMin,\n            _ref$uMax = _ref.uMax,\n            uMax = _ref$uMax === void 0 ? 26.8 : _ref$uMax,\n            _ref$vMin = _ref.vMin,\n            vMin = _ref$vMin === void 0 ? -21.57 : _ref$vMin,\n            _ref$vMax = _ref.vMax,\n            vMax = _ref$vMax === void 0 ? 21.42 : _ref$vMax,\n            _ref$fadeOpacity = _ref.fadeOpacity,\n            fadeOpacity = _ref$fadeOpacity === void 0 ? 0.996 : _ref$fadeOpacity,\n            _ref$speedFactor = _ref.speedFactor,\n            speedFactor = _ref$speedFactor === void 0 ? 0.25 : _ref$speedFactor,\n            _ref$dropRate = _ref.dropRate,\n            dropRate = _ref$dropRate === void 0 ? 0.003 : _ref$dropRate,\n            _ref$dropRateBump = _ref.dropRateBump,\n            dropRateBump = _ref$dropRateBump === void 0 ? 0.01 : _ref$dropRateBump,\n            _ref$rampColors = _ref.rampColors,\n            rampColors = _ref$rampColors === void 0 ? defaultRampColors : _ref$rampColors,\n            _ref$sizeScale = _ref.sizeScale,\n            sizeScale = _ref$sizeScale === void 0 ? 0.5 : _ref$sizeScale;\n\n        _this3.sizeScale = sizeScale;\n\n        var _this3$getWindSize = _this3.getWindSize(),\n            imageWidth = _this3$getWindSize.imageWidth,\n            imageHeight = _this3$getWindSize.imageHeight;\n\n        var options = {\n          glContext: glContext,\n          imageWidth: imageWidth,\n          imageHeight: imageHeight,\n          fadeOpacity: fadeOpacity,\n          speedFactor: speedFactor,\n          dropRate: dropRate,\n          dropRateBump: dropRateBump,\n          rampColors: rampColors\n        };\n        _this3.wind = new Wind(options);\n\n        _this3.wind.setWind({\n          uMin: uMin,\n          uMax: uMax,\n          vMin: vMin,\n          vMax: vMax,\n          image: imageData[0]\n        });\n\n        _this3.texture = createTexture2D({\n          data: imageData[0],\n          width: imageData[0].width,\n          height: imageData[0].height\n        });\n\n        _this3.layerService.updateLayerRenderList();\n\n        _this3.layerService.renderLayers();\n      });\n      this.colorModel = this.layer.buildLayerModel({\n        moduleName: 'WindLayer',\n        vertexShader: WindVert,\n        fragmentShader: WindFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      });\n      return [this.colorModel];\n    }\n  }, {\n    key: \"getWindSize\",\n    value: function getWindSize() {\n      var p1 = this.mapService.lngLatToPixel(this.imageCoords[0]);\n      var p2 = this.mapService.lngLatToPixel(this.imageCoords[1]);\n      var imageWidth = Math.floor((p2.x - p1.x) * this.sizeScale);\n      var imageHeight = Math.floor((p1.y - p2.y) * this.sizeScale);\n      return {\n        imageWidth: imageWidth,\n        imageHeight: imageHeight\n      };\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return this.initModels();\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture, _this$wind;\n\n      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();\n      (_this$wind = this.wind) === null || _this$wind === void 0 ? void 0 : _this$wind.destroy();\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"drawWind\",\n    value: function drawWind() {\n      if (this.wind) {\n        var _ref2 = this.layer.getLayerConfig(),\n            _ref2$uMin = _ref2.uMin,\n            uMin = _ref2$uMin === void 0 ? -21.32 : _ref2$uMin,\n            _ref2$uMax = _ref2.uMax,\n            uMax = _ref2$uMax === void 0 ? 26.8 : _ref2$uMax,\n            _ref2$vMin = _ref2.vMin,\n            vMin = _ref2$vMin === void 0 ? -21.57 : _ref2$vMin,\n            _ref2$vMax = _ref2.vMax,\n            vMax = _ref2$vMax === void 0 ? 21.42 : _ref2$vMax,\n            _ref2$numParticles = _ref2.numParticles,\n            numParticles = _ref2$numParticles === void 0 ? 65535 : _ref2$numParticles,\n            _ref2$fadeOpacity = _ref2.fadeOpacity,\n            fadeOpacity = _ref2$fadeOpacity === void 0 ? 0.996 : _ref2$fadeOpacity,\n            _ref2$speedFactor = _ref2.speedFactor,\n            speedFactor = _ref2$speedFactor === void 0 ? 0.25 : _ref2$speedFactor,\n            _ref2$dropRate = _ref2.dropRate,\n            dropRate = _ref2$dropRate === void 0 ? 0.003 : _ref2$dropRate,\n            _ref2$dropRateBump = _ref2.dropRateBump,\n            dropRateBump = _ref2$dropRateBump === void 0 ? 0.01 : _ref2$dropRateBump,\n            _ref2$rampColors = _ref2.rampColors,\n            rampColors = _ref2$rampColors === void 0 ? defaultRampColors : _ref2$rampColors,\n            _ref2$sizeScale = _ref2.sizeScale,\n            sizeScale = _ref2$sizeScale === void 0 ? 0.5 : _ref2$sizeScale;\n\n        if (typeof sizeScale === 'number' && sizeScale !== this.sizeScale) {\n          this.sizeScale = sizeScale;\n\n          var _this$getWindSize = this.getWindSize(),\n              imageWidth = _this$getWindSize.imageWidth,\n              imageHeight = _this$getWindSize.imageHeight;\n\n          this.wind.reSize(imageWidth, imageHeight);\n        }\n\n        this.wind.updateWindDir(uMin, uMax, vMin, vMax);\n        this.wind.updateParticelNum(numParticles);\n        this.wind.updateColorRampTexture(rampColors);\n        this.wind.fadeOpacity = fadeOpacity;\n        this.wind.speedFactor = speedFactor;\n        this.wind.dropRate = dropRate;\n        this.wind.dropRateBump = dropRateBump;\n\n        var _this$wind$draw = this.wind.draw(),\n            d = _this$wind$draw.d,\n            w = _this$wind$draw.w,\n            h = _this$wind$draw.h;\n\n        this.rendererService.setBaseState();\n        this.texture.update({\n          data: d,\n          width: w,\n          height: h\n        });\n      }\n    }\n  }, {\n    key: \"drawColorMode\",\n    value: function drawColorMode() {\n      var _ref3 = this.layer.getLayerConfig(),\n          opacity = _ref3.opacity;\n\n      this.colorModel.draw({\n        uniforms: {\n          u_opacity: opacity || 1.0,\n          u_texture: this.texture\n        }\n      });\n    }\n  }]);\n\n  return WindModel;\n}(BaseModel);\n\nexport { WindModel as default };","map":null,"metadata":{},"sourceType":"module"}