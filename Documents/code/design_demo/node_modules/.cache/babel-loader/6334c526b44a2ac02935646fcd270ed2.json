{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor, _temp;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { inject, injectable } from 'inversify';\nimport { IDENTIFIER } from '../../identifier';\nimport { FrameGraphHandle } from './FrameGraphHandle';\nimport { FrameGraphPass } from './FrameGraphPass';\nimport { PassNode } from './PassNode';\nimport { ResourceEntry } from './ResourceEntry';\nimport { ResourceNode } from './ResourceNode';\n/**\n * ported from FrameGraph implemented by SakuraRender\n * @see https://zhuanlan.zhihu.com/p/98572442\n * @see https://github.com/SaeruHikari/Sakura/blob/RenderGraph/SakuraCore/Source/Framework/GraphicTypes/FrameGraph/SakuraFrameGraph.cpp\n */\n\nexport var FrameGraphSystem = (_dec = injectable(), _dec2 = inject(IDENTIFIER.RenderEngine), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function () {\n  function FrameGraphSystem() {\n    _classCallCheck(this, FrameGraphSystem);\n\n    this.passNodes = [];\n    this.resourceNodes = [];\n    this.frameGraphPasses = [];\n\n    _initializerDefineProperty(this, \"engine\", _descriptor, this);\n  }\n\n  _createClass(FrameGraphSystem, [{\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(views) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // this.engine.beginFrame();\n                this.compile();\n                _context.next = 3;\n                return this.executePassNodes(views);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n\n      return execute;\n    }()\n  }, {\n    key: \"tearDown\",\n    value: function tearDown() {\n      this.frameGraphPasses.forEach(function (pass) {\n        if (pass.tearDown) {\n          pass.tearDown();\n        }\n      });\n      this.reset();\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(name, setup, execute, tearDown) {\n      var frameGraphPass = new FrameGraphPass();\n      frameGraphPass.execute = execute;\n\n      if (tearDown) {\n        frameGraphPass.tearDown = tearDown;\n      }\n\n      frameGraphPass.name = name;\n      var passNode = new PassNode();\n      passNode.name = name;\n      this.passNodes.push(passNode);\n      this.frameGraphPasses.push(frameGraphPass);\n      setup(this, passNode, frameGraphPass);\n      return frameGraphPass;\n    }\n  }, {\n    key: \"getPass\",\n    value: function getPass(name) {\n      return this.frameGraphPasses.find(function (p) {\n        return p.name === name;\n      });\n    }\n  }, {\n    key: \"compile\",\n    value: function compile() {\n      var _this = this;\n\n      var _iterator = _createForOfIteratorHelper(this.passNodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _pass = _step.value;\n          _pass.refCount = _pass.writes.length + (_pass.hasSideEffect ? 1 : 0);\n\n          _pass.reads.forEach(function (handle) {\n            _this.resourceNodes[handle.index].readerCount++;\n          });\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var stack = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.resourceNodes),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var node = _step2.value;\n\n          if (node.readerCount === 0) {\n            stack.push(node);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      while (stack.length) {\n        var pNode = stack.pop();\n        var writer = pNode && pNode.writer;\n\n        if (writer) {\n          if (--writer.refCount === 0) {\n            // this pass is culled\n            // assert(!writer->hasSideEffect);\n            var _iterator3 = _createForOfIteratorHelper(writer.reads),\n                _step3;\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var resource = _step3.value;\n                var r = this.resourceNodes[resource.index];\n\n                if (--r.readerCount === 0) {\n                  stack.push(r);\n                }\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        }\n      } // update the final reference counts\n\n\n      this.resourceNodes.forEach(function (node) {\n        node.resource.refs += node.readerCount;\n      });\n\n      var _iterator4 = _createForOfIteratorHelper(this.passNodes),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _pass2 = _step4.value;\n\n          if (!_pass2.refCount) {\n            continue;\n          }\n\n          var _iterator6 = _createForOfIteratorHelper(_pass2.reads),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _resource2 = _step6.value;\n              var pResource = this.resourceNodes[_resource2.index].resource;\n              pResource.first = pResource.first ? pResource.first : _pass2;\n              pResource.last = _pass2;\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          var _iterator7 = _createForOfIteratorHelper(_pass2.writes),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var _resource3 = _step7.value;\n              var _pResource = this.resourceNodes[_resource3.index].resource;\n              _pResource.first = _pResource.first ? _pResource.first : _pass2;\n              _pResource.last = _pass2;\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      for (var priority = 0; priority < 2; priority++) {\n        var _iterator5 = _createForOfIteratorHelper(this.resourceNodes),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var resoureNode = _step5.value;\n            var _resource = resoureNode.resource;\n\n            if (_resource.priority === priority && _resource.refs) {\n              var pFirst = _resource.first;\n              var pLast = _resource.last;\n\n              if (pFirst && pLast) {\n                pFirst.devirtualize.push(_resource);\n                pLast.destroy.push(_resource);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"executePassNodes\",\n    value: function () {\n      var _executePassNodes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(views) {\n        var _iterator8, _step8, _step8$value, index, node, _iterator9, _step9, resource, _iterator10, _step10, _resource4, _iterator11, _step11, _resource5, _iterator12, _step12, _resource6;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iterator8 = _createForOfIteratorHelper(this.passNodes.entries());\n                _context2.prev = 1;\n\n                _iterator8.s();\n\n              case 3:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _step8$value = _slicedToArray(_step8.value, 2), index = _step8$value[0], node = _step8$value[1];\n\n                if (!node.refCount) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                _iterator9 = _createForOfIteratorHelper(node.devirtualize);\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    resource = _step9.value;\n                    resource.preExecuteDevirtualize(this.engine);\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n\n                _iterator10 = _createForOfIteratorHelper(node.destroy);\n\n                try {\n                  for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                    _resource4 = _step10.value;\n\n                    _resource4.preExecuteDestroy(this.engine);\n                  }\n                } catch (err) {\n                  _iterator10.e(err);\n                } finally {\n                  _iterator10.f();\n                }\n\n                _context2.next = 12;\n                return this.frameGraphPasses[index].execute(this, this.frameGraphPasses[index], views);\n\n              case 12:\n                _iterator11 = _createForOfIteratorHelper(node.devirtualize);\n\n                try {\n                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                    _resource5 = _step11.value;\n\n                    _resource5.postExecuteDevirtualize(this.engine);\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n\n                _iterator12 = _createForOfIteratorHelper(node.destroy);\n\n                try {\n                  for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                    _resource6 = _step12.value;\n\n                    _resource6.postExecuteDestroy(this.engine);\n                  }\n                } catch (err) {\n                  _iterator12.e(err);\n                } finally {\n                  _iterator12.f();\n                }\n\n              case 16:\n                _context2.next = 3;\n                break;\n\n              case 18:\n                _context2.next = 23;\n                break;\n\n              case 20:\n                _context2.prev = 20;\n                _context2.t0 = _context2[\"catch\"](1);\n\n                _iterator8.e(_context2.t0);\n\n              case 23:\n                _context2.prev = 23;\n\n                _iterator8.f();\n\n                return _context2.finish(23);\n\n              case 26:\n                this.reset();\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 20, 23, 26]]);\n      }));\n\n      function executePassNodes(_x2) {\n        return _executePassNodes.apply(this, arguments);\n      }\n\n      return executePassNodes;\n    }()\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.passNodes = [];\n      this.resourceNodes = [];\n      this.frameGraphPasses = [];\n    }\n  }, {\n    key: \"getResourceNode\",\n    value: function getResourceNode(r) {\n      return this.resourceNodes[r.index];\n    }\n  }, {\n    key: \"createResourceNode\",\n    value: function createResourceNode(resourceEntry) {\n      var resourceNode = new ResourceNode();\n      resourceNode.resource = resourceEntry;\n      resourceNode.version = resourceEntry.version;\n      this.resourceNodes.push(resourceNode);\n      var fgh = new FrameGraphHandle();\n      fgh.index = this.resourceNodes.length - 1;\n      return fgh;\n    }\n  }, {\n    key: \"createTexture\",\n    value: function createTexture(passNode, name, descriptor) {\n      var resource = new ResourceEntry();\n      resource.name = name;\n      resource.descriptor = descriptor;\n      return this.createResourceNode(resource);\n    }\n  }, {\n    key: \"createRenderTarget\",\n    value: function createRenderTarget(passNode, name, descriptor) {\n      var resource = new ResourceEntry();\n      resource.name = name;\n      resource.descriptor = descriptor;\n      return this.createResourceNode(resource);\n    }\n  }, {\n    key: \"present\",\n    value: function present(input) {\n      this.addPass('Present', function (fg, passNode) {\n        passNode.read(input);\n        passNode.hasSideEffect = true;\n      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      })));\n    }\n  }]);\n\n  return FrameGraphSystem;\n}(), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"engine\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);","map":null,"metadata":{},"sourceType":"module"}