{"ast":null,"code":"/* eslint-disable jsx-a11y/click-events-have-key-events  */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { Popover } from 'antd';\nimport 'antd/es/popover/style/index.css';\nimport addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { SketchPicker } from 'react-color';\nexport class ColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onDocumentClick = e => {\n      const target = e.target;\n\n      if (target === this.container || this.container.contains(target)) {\n        return;\n      }\n\n      this.setState({\n        active: false\n      });\n      this.unbindDocEvent();\n    };\n\n    this.handleChange = (value, event) => {\n      if (this.props.onChange) {\n        this.props.onChange(value, event);\n      }\n\n      this.setState({\n        active: false,\n        color: value.rgb\n      });\n      this.unbindDocEvent();\n    };\n\n    this.handleClick = e => {\n      e.stopPropagation();\n\n      if (this.state.active) {\n        this.setState({\n          active: false\n        });\n        this.unbindDocEvent();\n      } else {\n        this.setState({\n          active: true\n        });\n\n        if (!this.removeDocClickEvent) {\n          this.removeDocClickEvent = addEventListener(document.documentElement, 'click', this.onDocumentClick).remove;\n        }\n      }\n    };\n\n    this.refContainer = container => {\n      this.container = container;\n    };\n\n    this.state = {\n      active: false,\n      color: props.color\n    };\n  }\n\n  componentWillUnmount() {\n    this.unbindDocEvent();\n  }\n\n  unbindDocEvent() {\n    if (this.removeDocClickEvent) {\n      this.removeDocClickEvent();\n      this.removeDocClickEvent = null;\n    }\n  }\n\n  renderPicker() {\n    const _a = this.props,\n          {\n      prefixCls,\n      disabled,\n      style\n    } = _a,\n          props = __rest(_a, [\"prefixCls\", \"disabled\", \"style\"]);\n\n    return React.createElement(SketchPicker, Object.assign({\n      width: \"240px\"\n    }, props, {\n      onChange: this.handleChange\n    }));\n  }\n\n  render() {\n    const {\n      color\n    } = this.state;\n    const {\n      disabled,\n      overlayProps,\n      style\n    } = this.props;\n    const baseCls = `${this.props.prefixCls}-color-picker`;\n    const popoverProps = {};\n\n    if (disabled) {\n      popoverProps.visible = false;\n    } else {\n      popoverProps.visible = this.state.active;\n    }\n\n    const colorStr = typeof color === 'string' ? color : `rgba(${color.r},${color.g},${color.b},${color.a})`;\n    return React.createElement(Popover, Object.assign({\n      placement: \"topLeft\"\n    }, overlayProps, popoverProps, {\n      content: this.renderPicker(),\n      overlayClassName: `${baseCls}-overlay`\n    }), React.createElement(\"div\", {\n      style: style,\n      ref: this.refContainer,\n      onClick: this.handleClick,\n      className: classNames(baseCls, {\n        [`${baseCls}-disabled`]: disabled\n      })\n    }, React.createElement(\"div\", {\n      className: `${baseCls}-block`,\n      style: {\n        backgroundColor: disabled ? '#c4c4c4' : colorStr\n      }\n    })));\n  }\n\n}\n\n(function (ColorPicker) {\n  ColorPicker.defaultProps = {\n    prefixCls: 'x6',\n    color: '#1890FF'\n  };\n})(ColorPicker || (ColorPicker = {}));","map":null,"metadata":{},"sourceType":"module"}