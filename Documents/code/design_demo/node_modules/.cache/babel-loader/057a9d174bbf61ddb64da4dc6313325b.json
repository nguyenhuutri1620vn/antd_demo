{"ast":null,"code":"import { Base } from './base';\nexport class KnobManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.widgets = new Map();\n  }\n\n  get isSelectionEnabled() {\n    return this.options.selecting.enabled === true;\n  }\n\n  init() {\n    this.startListening();\n  }\n\n  startListening() {\n    this.graph.on('node:mouseup', this.onNodeMouseUp, this);\n    this.graph.on('node:selected', this.onNodeSelected, this);\n    this.graph.on('node:unselected', this.onNodeUnSelected, this);\n  }\n\n  stopListening() {\n    this.graph.off('node:mouseup', this.onNodeMouseUp, this);\n    this.graph.off('node:selected', this.onNodeSelected, this);\n    this.graph.off('node:unselected', this.onNodeUnSelected, this);\n  }\n\n  onNodeMouseUp(_ref) {\n    let {\n      node\n    } = _ref;\n\n    if (!this.isSelectionEnabled) {\n      const widgets = this.graph.hook.createKnob(node, {\n        clearAll: true\n      });\n\n      if (widgets) {\n        this.widgets.set(node, widgets);\n      }\n    }\n  }\n\n  onNodeSelected(_ref2) {\n    let {\n      node\n    } = _ref2;\n\n    if (this.isSelectionEnabled) {\n      const widgets = this.graph.hook.createKnob(node, {\n        clearAll: false\n      });\n\n      if (widgets) {\n        this.widgets.set(node, widgets);\n      }\n    }\n  }\n\n  onNodeUnSelected(_ref3) {\n    let {\n      node\n    } = _ref3;\n\n    if (this.isSelectionEnabled) {\n      const widgets = this.widgets.get(node);\n\n      if (widgets) {\n        widgets.forEach(widget => widget.dispose());\n      }\n\n      this.widgets.delete(node);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}