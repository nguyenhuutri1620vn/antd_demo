{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowGroupCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE } from '../../constants';\nexport var NsCollapseGroup;\n\n(function (NsCollapseGroup) {\n  NsCollapseGroup.command = XFlowGroupCommands.COLLAPSE_GROUP;\n  NsCollapseGroup.hookKey = 'collapseGroup';\n})(NsCollapseGroup || (NsCollapseGroup = {}));\n\nlet CollapseGroupCommand =\n/** 添加子节点命令 */\nclass CollapseGroupCommand {\n  constructor() {\n    this.toggleVisible = (cells, visible, graph) => {\n      cells.forEach(cell => {\n        const view = graph.findViewByCell(cell).container;\n        view.style.visibility = visible ? 'visible' : 'hidden';\n      });\n    };\n\n    this.toggleCollapse = (groupNode, graph, args) => {\n      const childrens = groupNode.getChildren().filter(n => n.isNode());\n      const groupData = groupNode.getData();\n      const {\n        isCollapsed,\n        gap = 0\n      } = args;\n\n      if (isCollapsed) {\n        const collapsedSize = args.collapsedSize || groupData.groupCollapsedSize || XFLOW_GROUP_DEFAULT_COLLAPSED_SIZE;\n        groupNode.prop('previousSize', groupNode.size());\n        groupNode.size(collapsedSize);\n      } else {\n        groupNode.size(groupNode.prop('previousSize'));\n      }\n\n      if (childrens) {\n        childrens.forEach(item => {\n          const position = groupNode.position();\n          const innerEdges = graph.getConnectedEdges(item).filter(edge => {\n            const sourceNode = edge.getSourceNode();\n            const targetNode = edge.getTargetNode();\n            return childrens.includes(sourceNode) && childrens.includes(targetNode);\n          });\n\n          if (isCollapsed) {\n            this.toggleVisible([item, ...innerEdges], false, graph);\n            item.prop('previousSize', item.size());\n            item.prop('previousRelativePosition', item.position({\n              relative: true\n            }));\n            item.position(position.x + gap, position.y + gap);\n            const size = groupNode.size();\n            item.size({\n              width: size.width - gap * 2,\n              height: size.height - gap * 2\n            });\n          } else {\n            this.toggleVisible([item, ...innerEdges], true, graph);\n            const pos = item.prop('previousRelativePosition');\n            const size = item.prop('previousSize');\n            item.position(pos.x, pos.y, {\n              relative: true\n            });\n            item.size(size);\n          }\n        });\n      }\n\n      groupNode.prop('isCollapsed', isCollapsed);\n      groupNode.setData(Object.assign(Object.assign({}, groupNode.getData()), {\n        isCollapsed\n      }));\n    };\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.collapseGroup.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const node = x6Graph.getCellById(args.nodeId);\n        const {\n          toggleService\n        } = handlerArgs;\n\n        if (toggleService) {\n          const canToggle = yield toggleService(handlerArgs);\n          if (!canToggle) return {\n            err: 'service rejected'\n          };\n        }\n\n        if (node) {\n          this.toggleCollapse(node, x6Graph, args);\n          this.ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n            if (node) {\n              this.toggleCollapse(node, x6Graph, Object.assign(args, {\n                isCollapsed: !args.isCollapsed\n              }));\n            }\n          })));\n        }\n\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], CollapseGroupCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], CollapseGroupCommand.prototype, \"init\", null);\n\nCollapseGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsCollapseGroup.command.id\n  }\n})\n/** 添加子节点命令 */\n], CollapseGroupCommand);\nexport { CollapseGroupCommand };","map":null,"metadata":{},"sourceType":"module"}