{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport ColorUtil from '@antv/color-util';\nimport { get, isNumber } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\n/**\n * 用于绘制热力图。\n */\n\nvar Heatmap =\n/** @class */\nfunction (_super) {\n  __extends(Heatmap, _super);\n\n  function Heatmap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'heatmap';\n    _this.paletteCache = {};\n    return _this;\n  }\n\n  Heatmap.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    }\n\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var range = this.prepareRange(mappingData);\n      var radius = this.prepareSize();\n      var blur_1 = get(this.styleOption, ['cfg', 'shadowBlur']);\n\n      if (!isNumber(blur_1)) {\n        blur_1 = radius / 2;\n      }\n\n      this.prepareGreyScaleBlurredCircle(radius, blur_1);\n      this.drawWithRange(mappingData, range, radius, blur_1);\n    }\n  };\n  /** 热力图暂时不支持 callback 回调（文档需要说明下） */\n\n\n  Heatmap.prototype.color = function (field, cfg) {\n    this.createAttrOption('color', field, typeof cfg !== 'function' ? cfg : '');\n    return this;\n  };\n  /**\n   * clear\n   */\n\n\n  Heatmap.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this.clearShadowCanvasCtx();\n    this.paletteCache = {};\n  };\n\n  Heatmap.prototype.prepareRange = function (data) {\n    var colorAttr = this.getAttribute('color');\n    var colorField = colorAttr.getFields()[0];\n    var min = Infinity;\n    var max = -Infinity;\n    data.forEach(function (row) {\n      var value = row[FIELD_ORIGIN][colorField];\n\n      if (value > max) {\n        max = value;\n      }\n\n      if (value < min) {\n        min = value;\n      }\n    });\n\n    if (min === max) {\n      min = max - 1;\n    }\n\n    return [min, max];\n  };\n\n  Heatmap.prototype.prepareSize = function () {\n    var radius = this.getDefaultValue('size');\n\n    if (!isNumber(radius)) {\n      radius = this.getDefaultSize();\n    }\n\n    return radius;\n  };\n\n  Heatmap.prototype.prepareGreyScaleBlurredCircle = function (radius, blur) {\n    var grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    var r2 = radius + blur;\n    var ctx = grayScaleBlurredCanvas.getContext('2d');\n    grayScaleBlurredCanvas.width = grayScaleBlurredCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, grayScaleBlurredCanvas.width, grayScaleBlurredCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, radius, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  };\n\n  Heatmap.prototype.drawWithRange = function (data, range, radius, blur) {\n    // canvas size\n    var _a = this.coordinate,\n        start = _a.start,\n        end = _a.end;\n    var width = this.coordinate.getWidth();\n    var height = this.coordinate.getHeight(); // value, range, etc\n\n    var colorAttr = this.getAttribute('color');\n    var valueField = colorAttr.getFields()[0]; // prepare shadow canvas context\n\n    this.clearShadowCanvasCtx();\n    var ctx = this.getShadowCanvasCtx(); // filter data\n\n    if (range) {\n      data = data.filter(function (row) {\n        return row[FIELD_ORIGIN][valueField] <= range[1] && row[FIELD_ORIGIN][valueField] >= range[0];\n      });\n    } // step1. draw points with shadow\n\n\n    var scale = this.scales[valueField];\n\n    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n      var obj = data_1[_i];\n\n      var _b = this.getDrawCfg(obj),\n          x = _b.x,\n          y = _b.y;\n\n      var alpha = scale.scale(obj[FIELD_ORIGIN][valueField]);\n      this.drawGrayScaleBlurredCircle(x - start.x, y - end.y, radius + blur, alpha, ctx);\n    } // step2. convert pixels\n\n\n    var colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    var imageShape = this.getImageShape();\n    imageShape.attr('x', start.x);\n    imageShape.attr('y', end.y);\n    imageShape.attr('width', width);\n    imageShape.attr('height', height);\n    imageShape.attr('img', ctx.canvas);\n    imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  };\n\n  Heatmap.prototype.getDefaultSize = function () {\n    var position = this.getAttribute('position');\n    var coordinate = this.coordinate;\n    return Math.min(coordinate.getWidth() / (position.scales[0].ticks.length * 4), coordinate.getHeight() / (position.scales[1].ticks.length * 4));\n  };\n\n  Heatmap.prototype.clearShadowCanvasCtx = function () {\n    var ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n\n  Heatmap.prototype.getShadowCanvasCtx = function () {\n    var canvas = this.shadowCanvas;\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    return canvas.getContext('2d');\n  };\n\n  Heatmap.prototype.getGrayScaleBlurredCanvas = function () {\n    if (!this.grayScaleBlurredCanvas) {\n      this.grayScaleBlurredCanvas = document.createElement('canvas');\n    }\n\n    return this.grayScaleBlurredCanvas;\n  };\n\n  Heatmap.prototype.drawGrayScaleBlurredCircle = function (x, y, r, alpha, ctx) {\n    var grayScaleBlurredCanvas = this.getGrayScaleBlurredCanvas();\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(grayScaleBlurredCanvas, x - r, y - r);\n  };\n\n  Heatmap.prototype.colorize = function (img) {\n    var colorAttr = this.getAttribute('color');\n    var pixels = img.data;\n    var paletteCache = this.paletteCache;\n\n    for (var i = 3; i < pixels.length; i += 4) {\n      var alpha = pixels[i]; // get gradient color from opacity value\n\n      if (isNumber(alpha)) {\n        var palette = paletteCache[alpha] ? paletteCache[alpha] : ColorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  };\n\n  Heatmap.prototype.getImageShape = function () {\n    var imageShape = this.imageShape;\n\n    if (imageShape) {\n      return imageShape;\n    }\n\n    var container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {}\n    });\n    this.imageShape = imageShape;\n    return imageShape;\n  };\n\n  Heatmap.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    var data = mappingData.map(function (obj) {\n      return obj[FIELD_ORIGIN];\n    });\n    return __assign(__assign({}, shapeCfg), {\n      mappingData: mappingData,\n      data: data\n    });\n  };\n\n  return Heatmap;\n}(Geometry);\n\nexport default Heatmap;","map":null,"metadata":{},"sourceType":"module"}