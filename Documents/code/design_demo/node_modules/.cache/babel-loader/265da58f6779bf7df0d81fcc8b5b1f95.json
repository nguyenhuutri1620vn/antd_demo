{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React, { useCallback } from 'react';\nimport { Empty, Collapse } from 'antd';\nimport { get } from 'lodash';\nimport { Addon } from '@antv/x6';\nimport { getNodeReactComponent, useXFlowApp, uuidv4, XFlowNodeCommands } from '@antv/xflow-core';\nimport { setNodeRender } from './utils';\nimport { getProps } from '../flowchart-canvas/utils';\nimport { NodeTitle, defaultNodeFactory } from '../canvas-node-tree-panel/panel-body';\nconst {\n  Panel\n} = Collapse;\nexport const NodePanelBody = props => {\n  const {\n    x6NodeFactory,\n    dndOptions,\n    state,\n    prefixClz,\n    registerNode,\n    defaultActiveKey = ['official', 'custom']\n  } = props;\n  const {\n    title = '复制节点'\n  } = registerNode !== null && registerNode !== void 0 ? registerNode : {};\n  const {\n    graphProvider,\n    modelService,\n    commandService\n  } = useXFlowApp();\n  const [dnd, setDnd] = React.useState();\n  /** 获取graph实例 */\n\n  const [graph, setGraph] = React.useState();\n  graphProvider.getGraphInstance().then(x6Graph => {\n    setGraph(x6Graph);\n  });\n  let graphConfig = undefined;\n  graphProvider.getGraphOptions().then(x6GraphConfig => {\n    /** x6GraphConfig 上缺失 setNodeRender 方法  */\n    setNodeRender(getProps('graphConfig'), get(props, 'registerNode.nodes', []));\n    graphConfig = x6GraphConfig;\n  });\n  const onNodeDrop = useCallback(node => __awaiter(void 0, void 0, void 0, function* () {\n    var _a;\n\n    const {\n      ports\n    } = node;\n    const nodeConfig = Object.assign(Object.assign({}, node), {\n      id: `node-${uuidv4()}`,\n      zIndex: 10,\n      ports: Object.assign(Object.assign({}, ports), {\n        items: (_a = ports.items) === null || _a === void 0 ? void 0 : _a.map(item => Object.assign(Object.assign({}, item), {\n          id: uuidv4()\n        }))\n      })\n    });\n    const args = {\n      nodeConfig\n    };\n    yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, args);\n    const onAddNode = getProps('onAddNode');\n\n    if (typeof onAddNode === 'function') {\n      onAddNode(nodeConfig);\n    }\n  }), [commandService]);\n  React.useEffect(() => {\n    if (!graph) {\n      return;\n    }\n\n    const dndInstance = new Addon.Dnd(Object.assign(Object.assign({\n      scaled: false,\n      animation: false\n    }, dndOptions), {\n      target: graph,\n\n      /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n       * 在validateNode时调用command添加\n       */\n      validateNode: droppingNode => __awaiter(void 0, void 0, void 0, function* () {\n        const nodeConfig = Object.assign(Object.assign({}, droppingNode.getData()), droppingNode.getPosition());\n        yield onNodeDrop(nodeConfig);\n        return false;\n      })\n    }));\n    setDnd(dndInstance);\n  }, [commandService, dndOptions, graph, modelService, onNodeDrop]);\n  const onMouseDown = React.useCallback(nodeConfig => e => {\n    if (!graph || !dnd || !graphConfig) {\n      return;\n    }\n\n    const renderKey = graphConfig.nodeTypeParser(nodeConfig);\n    const {\n      width = 180,\n      height = 40\n    } = nodeConfig;\n    const reactComponent = graphConfig.nodeRender.get(renderKey);\n    const wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n    const nodeData = {\n      data: nodeConfig,\n      width,\n      height,\n      view: graphConfig.graphId,\n      component: wrappedComponent\n    };\n    const x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n    dnd.start(x6Node, e.nativeEvent);\n  }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n  const renderTree = React.useCallback(function () {\n    let list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return list.map(item => {\n      const {\n        popoverContent\n      } = item;\n      return React.createElement(NodeTitle, {\n        item: item,\n        key: item.id,\n        onMouseDown: onMouseDown(item),\n        popoverContent: popoverContent,\n        prefixClz: prefixClz,\n        modelService: modelService,\n        commandService: commandService,\n        graphConfig: graphConfig\n      });\n    });\n  }, [commandService, graphConfig, modelService, onMouseDown, prefixClz]);\n  const customNode = state.nodeList.filter(item => item.isCustom);\n  const officialNode = state.nodeList.filter(item => !item.isCustom);\n  const searchCustomNode = state.searchList.filter(item => item.isCustom);\n  const searchOfficialNode = state.searchList.filter(item => !item.isCustom);\n  const hasCustomNode = customNode.length > 0;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: `${prefixClz}-body`\n  }, React.createElement(Collapse, {\n    defaultActiveKey: defaultActiveKey,\n    style: {\n      border: 'none'\n    }\n  }, React.createElement(Panel, {\n    header: \"\\u901A\\u7528\\u8282\\u70B9\",\n    key: \"official\",\n    style: {\n      border: 'none'\n    }\n  }, !state.keyword && React.createElement(\"div\", {\n    className: `${prefixClz}-official`\n  }, renderTree(officialNode)), state.searchList.length > 0 && React.createElement(\"div\", {\n    className: `${prefixClz}-official`\n  }, renderTree(searchOfficialNode))), hasCustomNode && React.createElement(Panel, {\n    header: title,\n    key: \"custom\",\n    style: {\n      border: 'none'\n    }\n  }, !state.keyword && React.createElement(\"div\", {\n    className: `${prefixClz}-custom`\n  }, renderTree(customNode)), state.searchList.length > 0 && React.createElement(\"div\", {\n    className: `${prefixClz}-custom`\n  }, renderTree(searchCustomNode)))), state.keyword && state.searchList.length === 0 && React.createElement(Empty, {\n    style: {\n      marginTop: '48px'\n    }\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}