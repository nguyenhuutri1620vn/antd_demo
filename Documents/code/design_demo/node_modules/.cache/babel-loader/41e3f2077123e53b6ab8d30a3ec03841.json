{"ast":null,"code":"import get from 'lodash/get'; // 根据依赖字段生成 FormItem 的 updater\n\nexport function makeUpdaterByDependencies(dependencies, setReasonField) {\n  return function (prevValues, currentValues) {\n    var hasFunctionDep = dependencies.some(function (dep) {\n      return typeof (dep === null || dep === void 0 ? void 0 : dep.condition) === 'function';\n    });\n\n    if (hasFunctionDep) {\n      if (typeof setReasonField === 'function') {\n        setReasonField(undefined); // 在更新规则是一个函数时，不依赖特定字段进行更新(即只要有字段的值更新了就更新，因为不知道函数内部依赖什么字段)\n      }\n\n      return true;\n    }\n\n    return dependencies.some(function (dep) {\n      var name = dep.name;\n\n      if (!name) {\n        // eslint-disable-next-line no-console\n        console.error(\"[Schema form]: A dependent name must be provided in the updater when the dependency condition is not a function.\");\n        return false;\n      }\n\n      var changed = get(prevValues, name) !== get(currentValues, name);\n\n      if (changed) {\n        if (typeof setReasonField === 'function') {\n          setReasonField(name);\n        }\n\n        return true;\n      }\n\n      return false;\n    });\n  };\n}\nexport function isEmptyParamValue(val) {\n  return val === '' || val === undefined;\n} // 根据依赖字段的值生成当前的 FormItem 的值\n\nexport function makeFormItemControlledProps(form, schema, reasonField) {\n  var getFieldValue = form.getFieldValue,\n      getFieldsValue = form.getFieldsValue;\n  var dependencies = schema.dependencies,\n      hidden = schema.hidden,\n      disabled = schema.disabled;\n  var isHidden = hidden;\n  var isDisabled = disabled; // 当依赖满足并且依赖被操作过时，最终状态会变成依赖指定的状态\n\n  dependencies === null || dependencies === void 0 ? void 0 : dependencies.forEach(function (dependency) {\n    var depName = dependency.name,\n        condition = dependency.condition,\n        targetHiden = dependency.hidden,\n        targetDisabled = dependency.disabled; // 在 condition 不是函数时，只检验造成更新的字段的变化\n\n    if (typeof condition !== 'function' && reasonField && depName !== reasonField) {\n      return;\n    }\n\n    var match = false;\n\n    if (typeof condition === 'function') {\n      var values = getFieldsValue();\n      match = !!condition(values);\n    } else {\n      if (!depName) {\n        // eslint-disable-next-line no-console\n        console.error(\"[Schema form]: A dependent name must be provided in the props genarator when the dependency condition is not a function.\");\n        return;\n      }\n\n      match = getFieldValue(depName) === condition;\n    }\n\n    if (match) {\n      if (targetHiden !== undefined) {\n        isHidden = targetHiden;\n      }\n\n      if (targetDisabled !== undefined) {\n        isDisabled = targetDisabled;\n      }\n    }\n  });\n  return {\n    hidden: isHidden,\n    disabled: isDisabled\n  };\n}","map":null,"metadata":{},"sourceType":"module"}