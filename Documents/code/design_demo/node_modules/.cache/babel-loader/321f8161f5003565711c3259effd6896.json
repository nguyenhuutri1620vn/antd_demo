{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { aProjectFlat, Satistics } from '@antv/l7-utils';\nimport { hexbin } from 'd3-hexbin';\nvar R_EARTH = 6378000;\nexport function pointToHexbin(data, option) {\n  var dataArray = data.dataArray;\n  var _option$size = option.size,\n      size = _option$size === void 0 ? 10 : _option$size,\n      _option$method = option.method,\n      method = _option$method === void 0 ? 'sum' : _option$method;\n  var pixlSize = size / (2 * Math.PI * R_EARTH) * (256 << 20) / 2;\n  var screenPoints = dataArray.map(function (point) {\n    var _aProjectFlat = aProjectFlat(point.coordinates),\n        _aProjectFlat2 = _slicedToArray(_aProjectFlat, 2),\n        x = _aProjectFlat2[0],\n        y = _aProjectFlat2[1];\n\n    return _objectSpread(_objectSpread({}, point), {}, {\n      coordinates: [x, y]\n    });\n  });\n  var newHexbin = hexbin().radius(pixlSize).x(function (d) {\n    return d.coordinates[0];\n  }).y(function (d) {\n    return d.coordinates[1];\n  });\n  var hexbinBins = newHexbin(screenPoints);\n  var result = {\n    dataArray: hexbinBins.map(function (hex, index) {\n      var _ref;\n\n      if (option.field && method) {\n        var columns = Satistics.getColumn(hex, option.field);\n        hex[method] = Satistics.statMap[method](columns);\n      }\n\n      return _ref = {}, _defineProperty(_ref, option.method, hex[method]), _defineProperty(_ref, \"count\", hex.length), _defineProperty(_ref, \"rawData\", hex), _defineProperty(_ref, \"coordinates\", [hex.x, hex.y]), _defineProperty(_ref, \"_id\", index), _ref;\n    }),\n    radius: pixlSize,\n    xOffset: pixlSize,\n    yOffset: pixlSize,\n    type: 'hexagon'\n  };\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}