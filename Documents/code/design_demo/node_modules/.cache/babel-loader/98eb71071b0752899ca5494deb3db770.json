{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { mat4, vec3 } from 'gl-matrix';\n\nvar Viewport = function () {\n  function Viewport() {\n    _classCallCheck(this, Viewport);\n\n    _defineProperty(this, \"xzReg\", -Math.PI * 0.6);\n\n    _defineProperty(this, \"yReg\", Math.PI * 0.2);\n\n    _defineProperty(this, \"earthCameraRadius\", 200);\n\n    _defineProperty(this, \"earthCameraZoom\", 1);\n\n    _defineProperty(this, \"cameraPosition\", vec3.create());\n\n    _defineProperty(this, \"viewport\", void 0);\n\n    _defineProperty(this, \"projectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"modelMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewProjectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"ViewProjectionMatrixUncentered\", mat4.create());\n\n    _defineProperty(this, \"viewUncenteredMatrix\", mat4.create());\n  }\n\n  _createClass(Viewport, [{\n    key: \"syncWithMapCamera\",\n    value: function syncWithMapCamera(mapCamera) {\n      var _mapCamera$viewportHe = mapCamera.viewportHeight,\n          viewportHeight = _mapCamera$viewportHe === void 0 ? 1 : _mapCamera$viewportHe,\n          _mapCamera$viewportWi = mapCamera.viewportWidth,\n          viewportWidth = _mapCamera$viewportWi === void 0 ? 1 : _mapCamera$viewportWi;\n      var aspect = viewportWidth / viewportHeight;\n      var near = 0.1;\n      var far = 10000;\n      var fov = 20;\n      mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\n      var x = this.earthCameraRadius * Math.cos(this.xzReg);\n      var z = this.earthCameraRadius * Math.sin(this.xzReg);\n      var y = this.earthCameraRadius * Math.sin(this.yReg);\n      this.cameraPosition = vec3.fromValues(x, y, z);\n      vec3.normalize(this.cameraPosition, this.cameraPosition);\n      vec3.multiply(this.cameraPosition, this.cameraPosition, vec3.fromValues(this.earthCameraRadius, this.earthCameraRadius, this.earthCameraRadius));\n      vec3.scale(this.cameraPosition, this.cameraPosition, this.earthCameraZoom);\n      var crossY = vec3.create();\n      vec3.cross(crossY, this.cameraPosition, vec3.fromValues(0, 1, 0));\n      var up = vec3.fromValues(0, 1, 0);\n      vec3.cross(up, crossY, this.cameraPosition);\n      var target = vec3.fromValues(0, 0, 0);\n      mat4.lookAt(this.viewMatrix, this.cameraPosition, target, up);\n      this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n      mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);\n      mat4.multiply(this.ViewProjectionMatrixUncentered, this.projectionMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"rotateY\",\n    value: function rotateY(r) {\n      this.xzReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);\n    }\n  }, {\n    key: \"rotateX\",\n    value: function rotateX(r) {\n      this.yReg += r * Math.min(this.earthCameraZoom * this.earthCameraZoom, 1);\n    }\n  }, {\n    key: \"scaleZoom\",\n    value: function scaleZoom(z) {\n      this.earthCameraZoom += z;\n      this.earthCameraZoom = Math.max(this.earthCameraZoom, 0.6);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return 4;\n    }\n  }, {\n    key: \"getZoomScale\",\n    value: function getZoomScale() {\n      return Math.pow(2, this.getZoom());\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return [0, 0];\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.projectionMatrix;\n    }\n  }, {\n    key: \"getModelMatrix\",\n    value: function getModelMatrix() {\n      return this.modelMatrix;\n    }\n  }, {\n    key: \"getViewMatrix\",\n    value: function getViewMatrix() {\n      return this.viewMatrix;\n    }\n  }, {\n    key: \"getViewMatrixUncentered\",\n    value: function getViewMatrixUncentered() {\n      return this.viewMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrix\",\n    value: function getViewProjectionMatrix() {\n      return this.viewProjectionMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrixUncentered\",\n    value: function getViewProjectionMatrixUncentered() {\n      return this.viewProjectionMatrix;\n    }\n  }, {\n    key: \"getFocalDistance\",\n    value: function getFocalDistance() {\n      return 1;\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat, scale) {\n      return this.viewport.projectFlat(lngLat, scale);\n    }\n  }]);\n\n  return Viewport;\n}();\n\nexport { Viewport as default };","map":null,"metadata":{},"sourceType":"module"}