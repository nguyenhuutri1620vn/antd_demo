{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nexport var LRUCache = function () {\n  function LRUCache() {\n    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n    var destroy = arguments.length > 1 ? arguments[1] : undefined;\n\n    _classCallCheck(this, LRUCache);\n\n    _defineProperty(this, \"limit\", void 0);\n\n    _defineProperty(this, \"cache\", void 0);\n\n    _defineProperty(this, \"destroy\", void 0);\n\n    _defineProperty(this, \"order\", void 0);\n\n    this.limit = limit;\n    this.destroy = destroy || this.defaultDestroy;\n    this.order = [];\n    this.clear();\n  }\n\n  _createClass(LRUCache, [{\n    key: \"clear\",\n    value: function clear() {\n      var _this = this;\n\n      this.order.forEach(function (key) {\n        _this.delete(key);\n      });\n      this.cache = {};\n      this.order = [];\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var value = this.cache[key];\n\n      if (value) {\n        this.deleteOrder(key);\n        this.appendOrder(key);\n      }\n\n      return value;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      if (!this.cache[key]) {\n        if (Object.keys(this.cache).length === this.limit) {\n          this.delete(this.order[0]);\n        }\n\n        this.cache[key] = value;\n        this.appendOrder(key);\n      } else {\n        this.delete(key);\n        this.cache[key] = value;\n        this.appendOrder(key);\n      }\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      var value = this.cache[key];\n\n      if (value) {\n        this.deleteCache(key);\n        this.deleteOrder(key);\n        this.destroy(value, key);\n      }\n    }\n  }, {\n    key: \"deleteCache\",\n    value: function deleteCache(key) {\n      delete this.cache[key];\n    }\n  }, {\n    key: \"deleteOrder\",\n    value: function deleteOrder(key) {\n      var index = this.order.findIndex(function (o) {\n        return o === key;\n      });\n\n      if (index >= 0) {\n        this.order.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"appendOrder\",\n    value: function appendOrder(key) {\n      this.order.push(key);\n    }\n  }, {\n    key: \"defaultDestroy\",\n    value: function defaultDestroy(value, key) {\n      return null;\n    }\n  }]);\n\n  return LRUCache;\n}();","map":null,"metadata":{},"sourceType":"module"}