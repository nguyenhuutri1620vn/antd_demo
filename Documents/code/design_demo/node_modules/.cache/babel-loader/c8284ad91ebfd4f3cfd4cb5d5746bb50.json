{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { // utils\nDisposable, // context\nuseXFlowApp, // models\nMODELS, createComponentModel, // commands\nXFlowModelCommands } from '@antv/xflow-core';\nimport { NsCollapsePanelModel } from './interface';\n/** 方便其他组件执行Command改变Panel内部状态 */\n\nexport const executeCollapsePanelCommand = (cmds, updateModel) => {\n  cmds.executeCommand(XFlowModelCommands.UPDATE_MODEL.id, {\n    getModel: modelService => __awaiter(void 0, void 0, void 0, function* () {\n      return NsCollapsePanelModel.useModel(modelService);\n    }),\n    updateModel: updateModel\n  });\n};\n/** 方便其他组件执行Command改变Panel内部状态 */\n\nexport const useCollapsePanelData = props => {\n  const {\n    collapsible,\n    nodeDataService,\n    searchService,\n    onCollapseChange\n  } = props;\n  const {\n    modelService\n  } = useXFlowApp();\n  /** 创建model */\n\n  const [state, setState, panelModel] = createComponentModel({\n    /** service: onKeywordChange */\n    keyword: '',\n\n    /** 展开的key id */\n    collapseData: [],\n\n    /** 搜索结果 */\n    searchResult: []\n  });\n  /** 注册model成为全局状态，方便其他组件联动 */\n\n  React.useEffect(() => {\n    if (modelService.findDeferredModel(NsCollapsePanelModel.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsCollapsePanelModel.id,\n      modelFactory: () => panelModel,\n      watchChange: self => __awaiter(void 0, void 0, void 0, function* () {\n        const graphMetaModel = yield MODELS.GRAPH_META.getModel(modelService); //useContext(MODELS.GRAPH_META.id)\n\n        const fetch = meta => __awaiter(void 0, void 0, void 0, function* () {\n          const data = yield nodeDataService(meta, modelService);\n          return {\n            collapseData: data\n          };\n        });\n\n        const graphMetaDisposable = graphMetaModel.watch(meta => __awaiter(void 0, void 0, void 0, function* () {\n          const {\n            collapseData\n          } = yield fetch(meta);\n          self.setValue(m => {\n            m.keyword = '';\n            m.collapseData = collapseData;\n            m.searchResult = [];\n          });\n        }));\n        return Disposable.create(() => {\n          graphMetaDisposable.dispose();\n        });\n      })\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 折叠文件夹 */\n\n  const onActiveKeyChange = React.useCallback(activeKey => {\n    setState(modelState => {\n      modelState.collapseData.forEach(item => {\n        if (item.id === activeKey && item.collapsible !== false) {\n          item.isCollapsed = !item.isCollapsed;\n        }\n      });\n    });\n  }, [setState]);\n  /** 搜索 */\n\n  const onKeywordChange = React.useCallback((keyword, panelNodes) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!searchService) {\n      return console.warn('searchService is not defined');\n    }\n\n    if (keyword) {\n      const searchResult = yield searchService(panelNodes, keyword);\n      setState(modelState => {\n        modelState.keyword = keyword;\n        modelState.searchResult = searchResult;\n      });\n    } else {\n      setState(modelState => {\n        modelState.keyword = '';\n        modelState.searchResult = [];\n      });\n    }\n  }), // eslint-disable-next-line\n  [searchService]);\n  return {\n    state,\n    collapsible,\n    setState,\n    onKeywordChange,\n    onActiveKeyChange,\n    onCollapseChange\n  };\n};","map":null,"metadata":{},"sourceType":"module"}