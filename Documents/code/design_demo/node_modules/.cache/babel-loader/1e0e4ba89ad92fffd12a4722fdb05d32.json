{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowNodeCommands } from '../constant';\nexport var NsSelectNode;\n\n(function (NsSelectNode) {\n  NsSelectNode.command = XFlowNodeCommands.SELECT_NODE;\n  NsSelectNode.hookKey = 'selectNode';\n})(NsSelectNode || (NsSelectNode = {}));\n\nlet SelectNodeCommand =\n/** 节点更新命令 */\nclass SelectNodeCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.selectNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const currentSelectionIds = x6Graph.getSelectedCells().map(node => node.id);\n        const {\n          nodeIds,\n          resetSelection,\n          commandService\n        } = handlerArgs;\n\n        if (resetSelection) {\n          x6Graph.resetSelection(nodeIds);\n        } else {\n          x6Graph.select(nodeIds);\n        }\n\n        this.ctx.addUndo({\n          dispose: () => {\n            commandService.executeUndoCommand(XFlowNodeCommands.SELECT_NODE.id, {\n              nodeIds: currentSelectionIds,\n              resetSelection: true\n            });\n          }\n        });\n        return {};\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], SelectNodeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], SelectNodeCommand.prototype, \"init\", null);\n\nSelectNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsSelectNode.command.id\n  }\n})\n/** 节点更新命令 */\n], SelectNodeCommand);\nexport { SelectNodeCommand };","map":null,"metadata":{},"sourceType":"module"}