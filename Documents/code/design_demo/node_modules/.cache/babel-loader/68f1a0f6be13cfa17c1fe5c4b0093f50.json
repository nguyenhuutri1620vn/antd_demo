{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@antv/util\");\n/**\n * 向量运算\n */\n\n\nvar Vector =\n/** @class */\nfunction () {\n  function Vector(arr) {\n    this.arr = arr;\n  }\n\n  Vector.prototype.getArr = function () {\n    return this.arr || [];\n  };\n\n  Vector.prototype.add = function (otherVector) {\n    var _a;\n\n    var otherArr = otherVector.arr;\n\n    if (!((_a = this.arr) === null || _a === void 0 ? void 0 : _a.length)) {\n      return new Vector(otherArr);\n    }\n\n    if (!(otherArr === null || otherArr === void 0 ? void 0 : otherArr.length)) {\n      return new Vector(this.arr);\n    }\n\n    if (this.arr.length === otherArr.length) {\n      var res = [];\n\n      for (var index in this.arr) {\n        res[index] = this.arr[index] + otherArr[index];\n      }\n\n      return new Vector(res);\n    }\n  };\n\n  Vector.prototype.subtract = function (otherVector) {\n    var _a;\n\n    var otherArr = otherVector.arr;\n\n    if (!((_a = this.arr) === null || _a === void 0 ? void 0 : _a.length)) {\n      return new Vector(otherArr);\n    }\n\n    if (!(otherArr === null || otherArr === void 0 ? void 0 : otherArr.length)) {\n      return new Vector(this.arr);\n    }\n\n    if (this.arr.length === otherArr.length) {\n      var res = [];\n\n      for (var index in this.arr) {\n        res[index] = this.arr[index] - otherArr[index];\n      }\n\n      return new Vector(res);\n    }\n  };\n\n  Vector.prototype.avg = function (length) {\n    var res = [];\n\n    if (length !== 0) {\n      for (var index in this.arr) {\n        res[index] = this.arr[index] / length;\n      }\n    }\n\n    return new Vector(res);\n  };\n\n  Vector.prototype.negate = function () {\n    var res = [];\n\n    for (var index in this.arr) {\n      res[index] = -this.arr[index];\n    }\n\n    return new Vector(res);\n  }; // 平方欧式距离\n\n\n  Vector.prototype.squareEuclideanDistance = function (otherVector) {\n    var _a;\n\n    var otherArr = otherVector.arr;\n\n    if (!((_a = this.arr) === null || _a === void 0 ? void 0 : _a.length) || !(otherArr === null || otherArr === void 0 ? void 0 : otherArr.length)) {\n      return 0;\n    }\n\n    if (this.arr.length === otherArr.length) {\n      var res = 0;\n\n      for (var index in this.arr) {\n        res += Math.pow(this.arr[index] - otherVector.arr[index], 2);\n      }\n\n      return res;\n    }\n  }; // 欧式距离\n\n\n  Vector.prototype.euclideanDistance = function (otherVector) {\n    var _a;\n\n    var otherArr = otherVector.arr;\n\n    if (!((_a = this.arr) === null || _a === void 0 ? void 0 : _a.length) || !(otherArr === null || otherArr === void 0 ? void 0 : otherArr.length)) {\n      return 0;\n    }\n\n    if (this.arr.length === otherArr.length) {\n      var res = 0;\n\n      for (var index in this.arr) {\n        res += Math.pow(this.arr[index] - otherVector.arr[index], 2);\n      }\n\n      return Math.sqrt(res);\n    } else {\n      console.error('The two vectors are unequal in length.');\n    }\n  }; // 归一化处理\n\n\n  Vector.prototype.normalize = function () {\n    var res = [];\n    var cloneArr = (0, _util.clone)(this.arr);\n    cloneArr.sort(function (a, b) {\n      return a - b;\n    });\n    var max = cloneArr[cloneArr.length - 1];\n    var min = cloneArr[0];\n\n    for (var index in this.arr) {\n      res[index] = (this.arr[index] - min) / (max - min);\n    }\n\n    return new Vector(res);\n  }; // 2范数 or 模长\n\n\n  Vector.prototype.norm2 = function () {\n    var _a;\n\n    if (!((_a = this.arr) === null || _a === void 0 ? void 0 : _a.length)) {\n      return 0;\n    }\n\n    var res = 0;\n\n    for (var index in this.arr) {\n      res += Math.pow(this.arr[index], 2);\n    }\n\n    return Math.sqrt(res);\n  }; // 两个向量的点积\n\n\n  Vector.prototype.dot = function (otherVector) {\n    var _a;\n\n    var otherArr = otherVector.arr;\n\n    if (!((_a = this.arr) === null || _a === void 0 ? void 0 : _a.length) || !(otherArr === null || otherArr === void 0 ? void 0 : otherArr.length)) {\n      return 0;\n    }\n\n    if (this.arr.length === otherArr.length) {\n      var res = 0;\n\n      for (var index in this.arr) {\n        res += this.arr[index] * otherVector.arr[index];\n      }\n\n      return res;\n    } else {\n      console.error('The two vectors are unequal in length.');\n    }\n  }; // 两个向量比较\n\n\n  Vector.prototype.equal = function (otherVector) {\n    var _a;\n\n    var otherArr = otherVector.arr;\n\n    if (((_a = this.arr) === null || _a === void 0 ? void 0 : _a.length) !== (otherArr === null || otherArr === void 0 ? void 0 : otherArr.length)) {\n      return false;\n    }\n\n    for (var index in this.arr) {\n      if (this.arr[index] !== otherArr[index]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  return Vector;\n}();\n\nvar _default = Vector;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}