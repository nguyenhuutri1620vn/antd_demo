{"ast":null,"code":"import React from 'react';\n/** AppContext */\n\nexport const XFlowAppContext = React.createContext(null);\nXFlowAppContext.displayName = 'XFlowAppContext';\n/** AppContext:获取 app */\n\nexport const useXFlowApp = () => {\n  const container = React.useContext(XFlowAppContext);\n  return container && container.getApp ? container.getApp() : null;\n};\n/** AppContext: 获取 appContainer */\n\nexport const useXFlowAppContainer = () => {\n  return React.useContext(XFlowAppContext);\n};\n\nclass AppContainer {\n  constructor() {\n    let isUserDefined = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.cache = null;\n\n    this.setApp = app => {\n      this.cache = app;\n\n      if (this.onAppChangeCallback) {\n        this.onAppChangeCallback(app);\n      }\n    };\n\n    this.isUserDefined = () => this.isUserDefinedFlag;\n\n    this.getApp = () => {\n      return this.cache;\n    };\n\n    this.onAppChange = cb => {\n      this.onAppChangeCallback = cb;\n    };\n\n    this.dispose = () => {\n      this.cache = null;\n    };\n\n    this.isUserDefinedFlag = isUserDefined;\n  }\n\n}\n/** XFlow内部使用 */\n\n\nexport const XFlowAppInternalProvider = props => {\n  const userDefinedAppContainer = useXFlowAppContainer();\n  const [, setTick] = React.useState(null);\n  const appContainer = React.useMemo(() => {\n    return userDefinedAppContainer && userDefinedAppContainer.isUserDefined() ? userDefinedAppContainer : new AppContainer(false); // 不要移除：保证config只生成一次\n    // eslint-disable-next-line\n  }, []); // set appChange callback\n\n  if (!appContainer.isUserDefined()) {\n    appContainer.onAppChange(() => setTick(0));\n  }\n\n  React.useEffect(() => {\n    if (props.app) {\n      appContainer.setApp(props.app);\n    } // 不要移除：只关心 props.app\n    // eslint-disable-next-line\n\n  }, [props.app]);\n\n  if (appContainer.isUserDefined()) {\n    return React.createElement(React.Fragment, null, props.children);\n  }\n\n  return React.createElement(XFlowAppContext.Provider, {\n    value: Object.assign({}, appContainer)\n  }, props.children);\n};\nXFlowAppInternalProvider.displayName = 'XFlowAppInternalProvider';\n/** XFlow外部使用 */\n\nexport const XFlowAppProvider = _ref => {\n  let {\n    children\n  } = _ref;\n  const [, setTick] = React.useState(null);\n  const appContainer = React.useMemo(() => {\n    return new AppContainer(true);\n  }, []); // add callback\n\n  appContainer.onAppChange(() => setTick(0));\n  return React.createElement(XFlowAppContext.Provider, {\n    value: Object.assign({}, appContainer)\n  }, children);\n};\nXFlowAppProvider.displayName = 'XFlowAppProvider';","map":null,"metadata":{},"sourceType":"module"}