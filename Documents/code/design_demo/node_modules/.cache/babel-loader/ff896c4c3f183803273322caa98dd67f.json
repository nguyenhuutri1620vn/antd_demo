{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { HookHub } from '@antv/xflow-hook';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelNode;\n\n(function (NsDelNode) {\n  /** Command: 用于注册named factory */\n  NsDelNode.command = XFlowNodeCommands.DEL_NODE;\n  /** hook name */\n\n  NsDelNode.hookKey = 'delNode';\n  /** 创建 hook */\n\n  NsDelNode.createHook = () => {\n    return new HookHub();\n  };\n})(NsDelNode || (NsDelNode = {}));\n\nlet DelNodeCommand =\n/** 创建节点命令 */\nclass DelNodeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.delNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          commandService,\n          deleteNodeService,\n          options\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n\n        if (deleteNodeService) {\n          const canDel = yield deleteNodeService(handlerArgs);\n          if (!canDel) return {\n            err: ' service rejected'\n          };\n        }\n\n        const nodeId = (handlerArgs.x6Node || handlerArgs.nodeConfig).id;\n        const nodeCell = graph.getCellById(nodeId);\n\n        if (nodeCell && nodeCell.isNode()) {\n          /** 先清理连线 */\n          const edges = [...(graph.getIncomingEdges(nodeCell) || []), ...(graph.getOutgoingEdges(nodeCell) || [])];\n          yield Promise.all(edges.map(edge => {\n            return commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n              x6Edge: edge\n            });\n          }));\n          /** 再清理节点 */\n\n          const nodeConfig = nodeCell.getData();\n          nodeCell.remove(Object.assign(Object.assign({}, options), {\n            isCommand: true\n          }));\n          /** add undo: delete node */\n\n          ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n            yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n              nodeConfig\n            }); // TODO: 支持线和节点的undo\n            // 通过 sequence mapping 出新的port id\n            // const nodeCtx = nodeCmd.contextProvider()\n            // const { nodeCell } = nodeCtx.getResult()\n            // edgeCmds.forEach(async cmd => {\n            //   const c = cmd.contextProvider()\n            //   const { edgeConfig } = c.getResult()\n            // })\n          })));\n          return {\n            err: null,\n            nodeConfig\n          };\n        }\n\n        return {\n          err: 'node is not exist'\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      if (this.isUndoable()) {\n        const ctx = this.contextProvider();\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelNodeCommand.prototype, \"contextProvider\", void 0);\n\nDelNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelNode.command.id\n  }\n})\n/** 创建节点命令 */\n], DelNodeCommand);\nexport { DelNodeCommand };","map":null,"metadata":{},"sourceType":"module"}