{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { $window, LRUCache } from '@antv/l7-utils';\nimport { injectable } from 'inversify';\nimport TinySDF from 'l7-tiny-sdf';\nimport 'reflect-metadata';\nimport { buildMapping } from '../../utils/font_util';\nexport var DEFAULT_CHAR_SET = getDefaultCharacterSet();\nexport var DEFAULT_FONT_FAMILY = 'sans-serif';\nexport var DEFAULT_FONT_WEIGHT = 'normal';\nexport var DEFAULT_FONT_SIZE = 24;\nexport var DEFAULT_BUFFER = 3;\nexport var DEFAULT_CUTOFF = 0.25;\nexport var DEFAULT_RADIUS = 8;\nvar MAX_CANVAS_WIDTH = 1024;\nvar BASELINE_SCALE = 1.0;\nvar HEIGHT_SCALE = 1.0;\nvar CACHE_LIMIT = 3;\nvar VALID_PROPS = ['fontFamily', 'fontWeight', 'characterSet', 'fontSize', 'sdf', 'buffer', 'cutoff', 'radius'];\n\nfunction getDefaultCharacterSet() {\n  var charSet = [];\n\n  for (var i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n\n  return charSet;\n}\n\nfunction setTextStyle(ctx, fontFamily, fontSize, fontWeight) {\n  ctx.font = \"\".concat(fontWeight, \" \").concat(fontSize, \"px \").concat(fontFamily);\n  ctx.fillStyle = 'black';\n  ctx.textBaseline = 'middle';\n}\n\nfunction populateAlphaChannel(alphaChannel, imageData) {\n  for (var i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nvar FontService = (_dec = injectable(), _dec(_class = function () {\n  function FontService() {\n    _classCallCheck(this, FontService);\n\n    _defineProperty(this, \"fontAtlas\", void 0);\n\n    _defineProperty(this, \"iconFontMap\", void 0);\n\n    _defineProperty(this, \"iconFontGlyphs\", {});\n\n    _defineProperty(this, \"fontOptions\", void 0);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"cache\", new LRUCache(CACHE_LIMIT));\n  }\n\n  _createClass(FontService, [{\n    key: \"scale\",\n    get: function get() {\n      return HEIGHT_SCALE;\n    }\n  }, {\n    key: \"canvas\",\n    get: function get() {\n      var data = this.cache.get(this.key);\n      return data && data.data;\n    }\n  }, {\n    key: \"mapping\",\n    get: function get() {\n      var data = this.cache.get(this.key);\n      return data && data.mapping;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this.cache.clear();\n      this.fontOptions = {\n        fontFamily: DEFAULT_FONT_FAMILY,\n        fontWeight: DEFAULT_FONT_WEIGHT,\n        characterSet: DEFAULT_CHAR_SET,\n        fontSize: DEFAULT_FONT_SIZE,\n        buffer: DEFAULT_BUFFER,\n        sdf: true,\n        cutoff: DEFAULT_CUTOFF,\n        radius: DEFAULT_RADIUS,\n        iconfont: false\n      };\n      this.key = '';\n      this.iconFontMap = new Map();\n    }\n  }, {\n    key: \"addIconGlyphs\",\n    value: function addIconGlyphs(glyphs) {\n      var _this = this;\n\n      glyphs.forEach(function (glyph) {\n        _this.iconFontGlyphs[glyph.name] = glyph.unicode;\n      });\n    }\n  }, {\n    key: \"addIconFont\",\n    value: function addIconFont(name, fontUnicode) {\n      this.iconFontMap.set(name, fontUnicode);\n    }\n  }, {\n    key: \"getIconFontKey\",\n    value: function getIconFontKey(name) {\n      return this.iconFontMap.get(name) || name;\n    }\n  }, {\n    key: \"getGlyph\",\n    value: function getGlyph(name) {\n      if (this.iconFontGlyphs[name]) {\n        return String.fromCharCode(parseInt(this.iconFontGlyphs[name], 16));\n      }\n\n      return '';\n    }\n  }, {\n    key: \"setFontOptions\",\n    value: function setFontOptions(option) {\n      this.fontOptions = _objectSpread(_objectSpread({}, this.fontOptions), option);\n      this.key = this.getKey();\n      var charSet = this.getNewChars(this.key, this.fontOptions.characterSet);\n      var cachedFontAtlas = this.cache.get(this.key);\n\n      if (cachedFontAtlas && charSet.length === 0) {\n        return;\n      }\n\n      var fontAtlas = this.generateFontAtlas(this.key, charSet, cachedFontAtlas);\n      this.fontAtlas = fontAtlas;\n      this.cache.set(this.key, fontAtlas);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.cache.clear();\n      this.iconFontMap.clear();\n    }\n  }, {\n    key: \"generateFontAtlas\",\n    value: function generateFontAtlas(key, characterSet, cachedFontAtlas) {\n      var _this$fontOptions = this.fontOptions,\n          fontFamily = _this$fontOptions.fontFamily,\n          fontWeight = _this$fontOptions.fontWeight,\n          fontSize = _this$fontOptions.fontSize,\n          buffer = _this$fontOptions.buffer,\n          sdf = _this$fontOptions.sdf,\n          radius = _this$fontOptions.radius,\n          cutoff = _this$fontOptions.cutoff,\n          iconfont = _this$fontOptions.iconfont;\n      var canvas = cachedFontAtlas && cachedFontAtlas.data;\n\n      if (!canvas) {\n        canvas = $window.document.createElement('canvas');\n        canvas.width = MAX_CANVAS_WIDTH;\n      }\n\n      var ctx = canvas.getContext('2d');\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n      var _buildMapping = buildMapping(_objectSpread({\n        getFontWidth: function getFontWidth(char) {\n          return ctx.measureText(char).width;\n        },\n        fontHeight: fontSize * HEIGHT_SCALE,\n        buffer: buffer,\n        characterSet: characterSet,\n        maxCanvasWidth: MAX_CANVAS_WIDTH\n      }, cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })),\n          mapping = _buildMapping.mapping,\n          canvasHeight = _buildMapping.canvasHeight,\n          xOffset = _buildMapping.xOffset,\n          yOffset = _buildMapping.yOffset;\n\n      var copyImageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(copyImageData, 0, 0);\n      setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n      if (sdf) {\n        var tinySDF = new TinySDF(fontSize, buffer, radius, cutoff, fontFamily, fontWeight);\n        var imageData = ctx.getImageData(0, 0, tinySDF.size, tinySDF.size);\n\n        var _iterator = _createForOfIteratorHelper(characterSet),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var char = _step.value;\n\n            if (iconfont) {\n              var icon = String.fromCharCode(parseInt(char.replace('&#x', '').replace(';', ''), 16));\n              var iconData = tinySDF.draw(icon);\n              populateAlphaChannel(iconData, imageData);\n            } else {\n              populateAlphaChannel(tinySDF.draw(char), imageData);\n            }\n\n            ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        var _iterator2 = _createForOfIteratorHelper(characterSet),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _char = _step2.value;\n            ctx.fillText(_char, mapping[_char].x, mapping[_char].y + fontSize * BASELINE_SCALE);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      return {\n        xOffset: xOffset,\n        yOffset: yOffset,\n        mapping: mapping,\n        data: canvas,\n        width: canvas.width,\n        height: canvas.height\n      };\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey() {\n      return 'key';\n      var _this$fontOptions2 = this.fontOptions,\n          fontFamily = _this$fontOptions2.fontFamily,\n          fontWeight = _this$fontOptions2.fontWeight,\n          fontSize = _this$fontOptions2.fontSize,\n          buffer = _this$fontOptions2.buffer,\n          sdf = _this$fontOptions2.sdf,\n          radius = _this$fontOptions2.radius,\n          cutoff = _this$fontOptions2.cutoff;\n\n      if (sdf) {\n        return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer, \" \").concat(radius, \" \").concat(cutoff, \" \");\n      }\n\n      return \"\".concat(fontFamily, \" \").concat(fontWeight, \" \").concat(fontSize, \" \").concat(buffer);\n    }\n  }, {\n    key: \"getNewChars\",\n    value: function getNewChars(key, characterSet) {\n      var cachedFontAtlas = this.cache.get(key);\n\n      if (!cachedFontAtlas) {\n        return characterSet;\n      }\n\n      var newChars = [];\n      var cachedMapping = cachedFontAtlas.mapping;\n      var cachedCharSet = new Set(Object.keys(cachedMapping));\n      var charSet = new Set(characterSet);\n      charSet.forEach(function (char) {\n        if (!cachedCharSet.has(char)) {\n          newChars.push(char);\n        }\n      });\n      return newChars;\n    }\n  }]);\n\n  return FontService;\n}()) || _class);\nexport { FontService as default };","map":null,"metadata":{},"sourceType":"module"}