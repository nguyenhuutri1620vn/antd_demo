{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { createComponentModel, Disposable, MODELS, useXFlowApp } from '@antv/xflow-core';\nimport { nodeService } from './utils';\nexport var NsPanelData;\n\n(function (NsPanelData) {\n  NsPanelData.id = 'NODE_PANEL_DATA';\n})(NsPanelData || (NsPanelData = {}));\n/** 节点查找 */\n\n\nconst DefaultsearchService = function () {\n  let nodeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyword = arguments.length > 1 ? arguments[1] : undefined;\n  return __awaiter(void 0, void 0, void 0, function* () {\n    const list = nodeList.filter(i => {\n      var _a, _b;\n\n      return i.isDirectory || ((_a = i.label) === null || _a === void 0 ? void 0 : _a.includes(keyword)) || ((_b = i.name) === null || _b === void 0 ? void 0 : _b.includes(keyword));\n    });\n    return list;\n  });\n};\n\nexport const usePanelData = props => {\n  const {\n    registerNode,\n    searchService = DefaultsearchService\n  } = props;\n  const {\n    nodes\n  } = registerNode !== null && registerNode !== void 0 ? registerNode : {};\n  const {\n    modelService\n  } = useXFlowApp();\n  /** 使用model */\n\n  const [state, setState, panelModel] = createComponentModel({\n    searchList: [],\n    nodeList: [],\n    defaultExpandAll: false,\n    keyword: ''\n  });\n  /** 注册成为全局状态，方便其他组件联动 */\n\n  React.useEffect(() => {\n    if (modelService.findDeferredModel(NsPanelData.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsPanelData.id,\n      modelFactory: () => panelModel,\n      watchChange: self => __awaiter(void 0, void 0, void 0, function* () {\n        const graphMetaModel = yield MODELS.GRAPH_META.getModel(modelService); //useContext(MODELS.GRAPH_META.id)\n\n        const fetch = () => __awaiter(void 0, void 0, void 0, function* () {\n          const listData = yield nodeService(nodes);\n          return {\n            listData\n          };\n        });\n\n        const graphMetaDisposable = graphMetaModel.watch(() => __awaiter(void 0, void 0, void 0, function* () {\n          const data = yield fetch();\n          self.setValue({\n            nodeList: data.listData,\n            defaultExpandAll: false,\n            keyword: '',\n            searchList: []\n          });\n        }));\n        return Disposable.create(() => {\n          graphMetaDisposable.dispose();\n        });\n      })\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 搜索 */\n\n  const onKeywordChange = React.useCallback(keyword => __awaiter(void 0, void 0, void 0, function* () {\n    if (!searchService) {\n      return;\n    }\n\n    if (keyword) {\n      // @ts-ignore\n      const list = yield searchService(state.nodeList, keyword);\n      setState(modelState => {\n        modelState.keyword = keyword;\n        modelState.searchList = list;\n      });\n    } else {\n      setState(modelState => {\n        modelState.keyword = '';\n        modelState.searchList = [];\n      });\n    }\n  }), [searchService, state.nodeList, setState]);\n  return {\n    state,\n    setState,\n    onKeywordChange\n  };\n};","map":null,"metadata":{},"sourceType":"module"}