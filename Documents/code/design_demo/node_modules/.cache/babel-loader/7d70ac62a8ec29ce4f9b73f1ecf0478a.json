{"ast":null,"code":"import * as d3 from 'd3-color';\nimport { $window, isMini } from './mini-adapter';\nexport function isColor(str) {\n  if (typeof str === 'string') {\n    return !!d3.color(str);\n  } else {\n    return false;\n  }\n}\nexport function rgb2arr(str) {\n  var color = d3.color(str);\n  var arr = [0, 0, 0, 0];\n\n  if (color != null) {\n    arr[0] = color.r / 255;\n    arr[1] = color.g / 255;\n    arr[2] = color.b / 255;\n    arr[3] = color.opacity;\n  }\n\n  return arr;\n}\nexport function decodePickingColor(color) {\n  var i1 = color && color[0];\n  var i2 = color && color[1];\n  var i3 = color && color[2];\n  var index = i1 + i2 * 256 + i3 * 65536 - 1;\n  return index;\n}\nexport function encodePickingColor(featureIdx) {\n  return [featureIdx + 1 & 255, featureIdx + 1 >> 8 & 255, featureIdx + 1 >> 8 >> 8 & 255];\n}\nexport function generateColorRamp(colorRamp) {\n  var canvas = $window.document.createElement('canvas');\n  var ctx = canvas.getContext('2d');\n  canvas.width = 256;\n  canvas.height = 1;\n  var gradient = ctx.createLinearGradient(0, 0, 256, 1);\n  var data = null;\n  var min = colorRamp.positions[0];\n  var max = colorRamp.positions[colorRamp.positions.length - 1];\n\n  for (var i = 0; i < colorRamp.colors.length; ++i) {\n    var value = (colorRamp.positions[i] - min) / (max - min);\n    gradient.addColorStop(value, colorRamp.colors[i]);\n  }\n\n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, 256, 1);\n  data = new Uint8ClampedArray(ctx.getImageData(0, 0, 256, 1).data);\n  return !isMini ? new ImageData(data, 256, 1) : {\n    data: data,\n    width: 256,\n    height: 1\n  };\n}","map":null,"metadata":{},"sourceType":"module"}