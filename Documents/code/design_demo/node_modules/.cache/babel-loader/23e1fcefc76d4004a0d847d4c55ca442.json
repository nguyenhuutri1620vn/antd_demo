{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { generateColorRamp, getMask } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nvar rasterFrag = \"precision mediump float;\\nuniform float u_opacity: 1.0;\\nuniform sampler2D u_texture;\\nuniform sampler2D u_colorTexture;\\nuniform float u_min;\\nuniform float u_max;\\nuniform vec2 u_domain;\\nuniform float u_noDataValue;\\nuniform bool u_clampLow: true;\\nuniform bool u_clampHigh: true;\\nvarying vec2 v_texCoord;\\n\\nvoid main() {\\n\\n  float value = texture2D(u_texture,vec2(v_texCoord.x,v_texCoord.y)).r;\\n  if (value == u_noDataValue)\\n    gl_FragColor = vec4(0.0, 0, 0, 0.0);\\n  else if ((!u_clampLow && value < u_domain[0]) || (!u_clampHigh && value > u_domain[1]))\\n    gl_FragColor = vec4(0, 0, 0, 0);\\n  else {\\n    float normalisedValue =(value - u_domain[0]) / (u_domain[1] -u_domain[0]);\\n    vec4 color = texture2D(u_colorTexture,vec2(normalisedValue, 0));\\n    gl_FragColor = color;\\n    gl_FragColor.a =  gl_FragColor.a * u_opacity ;\\n  }\\n\\n\\n}\\n\";\nvar rasterVert = \"precision highp float;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nattribute vec3 a_Position;\\nattribute vec2 a_Uv;\\nvarying vec2 v_texCoord;\\n#pragma include \\\"projection\\\"\\nvoid main() {\\n   v_texCoord = a_Uv;\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n\\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\\n   } else {\\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n   }\\n}\\n\";\n\nvar RasterModel = function (_BaseModel) {\n  _inherits(RasterModel, _BaseModel);\n\n  var _super = _createSuper(RasterModel);\n\n  function RasterModel() {\n    var _this;\n\n    _classCallCheck(this, RasterModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"colorTexture\", void 0);\n\n    return _this;\n  }\n\n  _createClass(RasterModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n          _ref$clampLow = _ref.clampLow,\n          clampLow = _ref$clampLow === void 0 ? true : _ref$clampLow,\n          _ref$clampHigh = _ref.clampHigh,\n          clampHigh = _ref$clampHigh === void 0 ? true : _ref$clampHigh,\n          _ref$noDataValue = _ref.noDataValue,\n          noDataValue = _ref$noDataValue === void 0 ? -9999999 : _ref$noDataValue,\n          _ref$domain = _ref.domain,\n          domain = _ref$domain === void 0 ? [0, 1] : _ref$domain;\n\n      this.updateColorTexure();\n      return {\n        u_opacity: opacity || 1,\n        u_texture: this.texture,\n        u_domain: domain,\n        u_clampLow: clampLow,\n        u_clampHigh: typeof clampHigh !== 'undefined' ? clampHigh : clampLow,\n        u_noDataValue: noDataValue,\n        u_colorTexture: this.colorTexture\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      var _ref2 = this.layer.getLayerConfig(),\n          _ref2$mask = _ref2.mask,\n          mask = _ref2$mask === void 0 ? false : _ref2$mask,\n          _ref2$maskInside = _ref2.maskInside,\n          maskInside = _ref2$maskInside === void 0 ? true : _ref2$maskInside;\n\n      var source = this.layer.getSource();\n      var createTexture2D = this.rendererService.createTexture2D;\n      var parserDataItem = source.data.dataArray[0];\n      this.texture = createTexture2D({\n        data: parserDataItem.data,\n        width: parserDataItem.width,\n        height: parserDataItem.height,\n        format: gl.LUMINANCE,\n        type: gl.FLOAT\n      });\n\n      var _ref3 = this.layer.getLayerConfig(),\n          rampColors = _ref3.rampColors;\n\n      var imageData = generateColorRamp(rampColors);\n      this.colorTexture = createTexture2D({\n        data: imageData.data,\n        width: imageData.width,\n        height: imageData.height,\n        flipY: false\n      });\n      return [this.layer.buildLayerModel({\n        moduleName: 'RasterImageData',\n        vertexShader: rasterVert,\n        fragmentShader: rasterFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend(),\n        stencil: getMask(mask, maskInside)\n      })];\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return this.initModels();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Uv',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3], vertex[4]];\n          }\n        }\n      });\n    }\n  }, {\n    key: \"updateColorTexure\",\n    value: function updateColorTexure() {\n      var createTexture2D = this.rendererService.createTexture2D;\n\n      var _ref4 = this.layer.getLayerConfig(),\n          rampColors = _ref4.rampColors;\n\n      var imageData = generateColorRamp(rampColors);\n      this.colorTexture = createTexture2D({\n        data: imageData.data,\n        width: imageData.width,\n        height: imageData.height,\n        flipY: false\n      });\n    }\n  }]);\n\n  return RasterModel;\n}(BaseModel);\n\nexport { RasterModel as default };","map":null,"metadata":{},"sourceType":"module"}