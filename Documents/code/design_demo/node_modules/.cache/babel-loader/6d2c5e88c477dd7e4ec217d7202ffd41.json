{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { polygonTriangulation } from '../../core/triangulation';\nvar mask_frag = \"uniform float u_opacity;\\nvarying vec4 v_Color;\\n\\nvoid main() {\\n  gl_FragColor = v_Color;\\n  gl_FragColor.a *= u_opacity;\\n}\\n\";\nvar mask_vert = \"attribute vec4 a_Color;\\nattribute vec3 a_Position;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\n\\nvarying vec4 v_Color;\\n\\n#pragma include \\\"projection\\\"\\n\\nvoid main() {\\n\\n  v_Color = a_Color;\\n  vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n  // gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xyz, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xyz, 1.0));\\n  }\\n}\\n\\n\";\n\nvar MaskModel = function (_BaseModel) {\n  _inherits(MaskModel, _BaseModel);\n\n  var _super = _createSuper(MaskModel);\n\n  function MaskModel() {\n    _classCallCheck(this, MaskModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MaskModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          _ref$opacity = _ref.opacity,\n          opacity = _ref$opacity === void 0 ? 0 : _ref$opacity;\n\n      return {\n        u_opacity: _isNumber(opacity) ? opacity : 0.0\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.layer.zIndex = -1000;\n      return this.buildModels();\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return [this.layer.buildLayerModel({\n        moduleName: 'mask',\n        vertexShader: mask_vert,\n        fragmentShader: mask_frag,\n        triangulation: polygonTriangulation,\n        blend: this.getBlend(),\n        depth: {\n          enable: false\n        },\n        stencil: {\n          enable: true,\n          mask: 0xff,\n          func: {\n            cmp: gl.ALWAYS,\n            ref: 1,\n            mask: 0xff\n          },\n          opFront: {\n            fail: gl.REPLACE,\n            zfail: gl.REPLACE,\n            zpass: gl.REPLACE\n          }\n        }\n      })];\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$dataTexture;\n\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      return '';\n    }\n  }]);\n\n  return MaskModel;\n}(BaseModel);\n\nexport { MaskModel as default };","map":null,"metadata":{},"sourceType":"module"}