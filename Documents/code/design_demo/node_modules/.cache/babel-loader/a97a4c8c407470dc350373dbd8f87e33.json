{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as Registry from '../registry';\nimport { Dom, Vector } from '../util';\nimport { Base } from './base';\nexport class GridManager extends Base {\n  get elem() {\n    return this.view.grid;\n  }\n\n  get grid() {\n    return this.options.grid;\n  }\n\n  init() {\n    this.startListening();\n    this.draw(this.grid);\n  }\n\n  startListening() {\n    this.graph.on('scale', this.update, this);\n    this.graph.on('translate', this.update, this);\n  }\n\n  stopListening() {\n    this.graph.off('scale', this.update, this);\n    this.graph.off('translate', this.update, this);\n  }\n\n  setVisible(visible) {\n    if (this.grid.visible !== visible) {\n      this.grid.visible = visible;\n      this.update();\n    }\n  }\n\n  getGridSize() {\n    return this.grid.size;\n  }\n\n  setGridSize(size) {\n    this.grid.size = Math.max(size, 1);\n    this.update();\n  }\n\n  show() {\n    this.setVisible(true);\n    this.update();\n  }\n\n  hide() {\n    this.setVisible(false);\n    this.update();\n  }\n\n  clear() {\n    this.elem.style.backgroundImage = '';\n  }\n\n  draw(options) {\n    this.clear();\n    this.instance = null;\n    Object.assign(this.grid, options);\n    this.patterns = this.resolveGrid(options);\n    this.update();\n  }\n\n  update() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const gridSize = this.grid.size;\n\n    if (gridSize <= 1 || !this.grid.visible) {\n      return this.clear();\n    }\n\n    const ctm = this.graph.matrix();\n    const grid = this.getInstance();\n    const items = Array.isArray(options) ? options : [options];\n    this.patterns.forEach((settings, index) => {\n      const id = `pattern_${index}`;\n      const sx = ctm.a || 1;\n      const sy = ctm.d || 1;\n\n      const {\n        update,\n        markup\n      } = settings,\n            others = __rest(settings, [\"update\", \"markup\"]);\n\n      const options = Object.assign(Object.assign(Object.assign({}, others), items[index]), {\n        sx,\n        sy,\n        ox: ctm.e || 0,\n        oy: ctm.f || 0,\n        width: gridSize * sx,\n        height: gridSize * sy\n      });\n\n      if (!grid.has(id)) {\n        grid.add(id, Vector.create('pattern', {\n          id,\n          patternUnits: 'userSpaceOnUse'\n        }, Vector.createVectors(markup)).node);\n      }\n\n      const patternElem = grid.get(id);\n\n      if (typeof update === 'function') {\n        update(patternElem.childNodes[0], options);\n      }\n\n      let x = options.ox % options.width;\n\n      if (x < 0) {\n        x += options.width;\n      }\n\n      let y = options.oy % options.height;\n\n      if (y < 0) {\n        y += options.height;\n      }\n\n      Dom.attr(patternElem, {\n        x,\n        y,\n        width: options.width,\n        height: options.height\n      });\n    });\n    const base64 = new XMLSerializer().serializeToString(grid.root);\n    const url = `url(data:image/svg+xml;base64,${btoa(base64)})`;\n    this.elem.style.backgroundImage = url;\n  }\n\n  getInstance() {\n    if (!this.instance) {\n      this.instance = new Registry.Grid();\n    }\n\n    return this.instance;\n  }\n\n  resolveGrid(options) {\n    if (!options) {\n      return [];\n    }\n\n    const type = options.type;\n\n    if (type == null) {\n      return [Object.assign(Object.assign({}, Registry.Grid.presets.dot), options.args)];\n    }\n\n    const items = Registry.Grid.registry.get(type);\n\n    if (items) {\n      let args = options.args || [];\n\n      if (!Array.isArray(args)) {\n        args = [args];\n      }\n\n      return Array.isArray(items) ? items.map((item, index) => Object.assign(Object.assign({}, item), args[index])) : [Object.assign(Object.assign({}, items), args[0])];\n    }\n\n    return Registry.Grid.registry.onNotFound(type);\n  }\n\n  dispose() {\n    this.stopListening();\n    this.clear();\n  }\n\n}\n\n__decorate([Base.dispose()], GridManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}