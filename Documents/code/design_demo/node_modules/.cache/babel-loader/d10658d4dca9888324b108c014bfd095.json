{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _merge from \"lodash/merge\";\n\nvar _dec, _class;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport WarnInfo from './warnInfo';\nvar defaultSceneConfig = {\n  id: 'map',\n  logoPosition: 'bottomleft',\n  logoVisible: true,\n  antialias: true,\n  preserveDrawingBuffer: false,\n  pickBufferScale: 1.0,\n  fitBoundsOptions: {\n    animate: false\n  }\n};\nvar defaultLayerConfig = {\n  colors: ['rgb(103,0,31)', 'rgb(178,24,43)', 'rgb(214,96,77)', 'rgb(244,165,130)', 'rgb(253,219,199)', 'rgb(247,247,247)', 'rgb(209,229,240)', 'rgb(146,197,222)', 'rgb(67,147,195)', 'rgb(33,102,172)', 'rgb(5,48,97)'],\n  size: 10,\n  shape: 'circle',\n  scales: {},\n  shape2d: ['circle', 'triangle', 'square', 'pentagon', 'hexagon', 'octogon', 'hexagram', 'rhombus', 'vesica'],\n  shape3d: ['cylinder', 'triangleColumn', 'hexagonColumn', 'squareColumn'],\n  minZoom: -1,\n  maxZoom: 24,\n  visible: true,\n  autoFit: false,\n  pickingBuffer: 0,\n  enablePropagation: false,\n  zIndex: 0,\n  blend: 'normal',\n  pickedFeatureID: -1,\n  enableMultiPassRenderer: false,\n  enablePicking: true,\n  active: false,\n  activeColor: '#2f54eb',\n  enableHighlight: false,\n  enableSelect: false,\n  highlightColor: '#2f54eb',\n  activeMix: 0,\n  selectColor: 'blue',\n  selectMix: 0,\n  enableTAA: false,\n  jitterScale: 1,\n  enableLighting: false,\n  animateOption: {\n    enable: false,\n    interval: 0.2,\n    duration: 4,\n    trailLength: 0.15\n  },\n  forward: true\n};\nvar GlobalConfigService = (_dec = injectable(), _dec(_class = function () {\n  function GlobalConfigService() {\n    _classCallCheck(this, GlobalConfigService);\n\n    _defineProperty(this, \"sceneConfigCache\", {});\n\n    _defineProperty(this, \"layerConfigCache\", {});\n  }\n\n  _createClass(GlobalConfigService, [{\n    key: \"getSceneConfig\",\n    value: function getSceneConfig(sceneId) {\n      return this.sceneConfigCache[sceneId];\n    }\n  }, {\n    key: \"getSceneWarninfo\",\n    value: function getSceneWarninfo(id) {\n      return WarnInfo[id];\n    }\n  }, {\n    key: \"setSceneConfig\",\n    value: function setSceneConfig(sceneId, config) {\n      this.sceneConfigCache[sceneId] = _objectSpread(_objectSpread({}, defaultSceneConfig), config);\n    }\n  }, {\n    key: \"getLayerConfig\",\n    value: function getLayerConfig(layerId) {\n      return this.layerConfigCache[layerId];\n    }\n  }, {\n    key: \"setLayerConfig\",\n    value: function setLayerConfig(sceneId, layerId, config) {\n      this.layerConfigCache[layerId] = _objectSpread({}, _merge({}, this.sceneConfigCache[sceneId], defaultLayerConfig, config));\n    }\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.sceneConfigCache = {};\n      this.layerConfigCache = {};\n    }\n  }]);\n\n  return GlobalConfigService;\n}()) || _class);\nexport { GlobalConfigService as default };","map":null,"metadata":{},"sourceType":"module"}