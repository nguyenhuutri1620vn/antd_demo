{"ast":null,"code":"/**\n * @fileOverview Combo force layout\n * @author shiwu.wyy@antfin.com\n */\nimport { Base } from \"./base\";\nimport { isArray, isNumber, isFunction, traverseTreeUp, isObject, getEdgeTerminal } from \"../util\";\n/**\n * force layout for graph with combos\n */\n\nexport class ComboForceLayout extends Base {\n  constructor(options) {\n    super();\n    /** 布局中心 */\n\n    this.center = [0, 0];\n    /** 停止迭代的最大迭代数 */\n\n    this.maxIteration = 100;\n    /** 重力大小，影响图的紧凑程度 */\n\n    this.gravity = 10;\n    /** 群组中心力大小 */\n\n    this.comboGravity = 10;\n    /** 默认边长度 */\n\n    this.linkDistance = 10;\n    /** 每次迭代位移的衰减相关参数 */\n\n    this.alpha = 1;\n    this.alphaMin = 0.001;\n    this.alphaDecay = 1 - Math.pow(this.alphaMin, 1 / 300);\n    this.alphaTarget = 0;\n    /** 节点运动速度衰减参数 */\n\n    this.velocityDecay = 0.6;\n    /** 边引力大小 */\n\n    this.edgeStrength = 0.6;\n    /** 节点引力大小 */\n\n    this.nodeStrength = 30;\n    /** 是否开启防止重叠 */\n\n    this.preventOverlap = false;\n    /** 是否开启节点之间的防止重叠 */\n\n    this.preventNodeOverlap = false;\n    /** 是否开启 Combo 之间的防止重叠 */\n\n    this.preventComboOverlap = false;\n    /** 防止重叠的碰撞力大小 */\n\n    this.collideStrength = undefined;\n    /** 防止重叠的碰撞力大小 */\n\n    this.nodeCollideStrength = 0.5;\n    /** 防止重叠的碰撞力大小 */\n\n    this.comboCollideStrength = 0.5;\n    /** Combo 最小间距，防止重叠时的间隙 */\n\n    this.comboSpacing = 20;\n    /** Combo 内部的 padding */\n\n    this.comboPadding = 10;\n    /** 优化计算斥力的速度，两节点间距超过 optimizeRangeFactor * width 则不再计算斥力和重叠斥力 */\n\n    this.optimizeRangeFactor = 1;\n    /** 每次迭代的回调函数 */\n\n    this.onTick = () => {};\n    /** 迭代结束的回调函数 */\n\n\n    this.onLayoutEnd = () => {};\n    /** 根据边两端节点层级差距的调整引力系数的因子，取值范围 [0, 1]。层级差距越大，引力越小 */\n\n\n    this.depthAttractiveForceScale = 1;\n    /** 根据边两端节点层级差距的调整斥力系数的因子，取值范围 [1, Infinity]。层级差距越大，斥力越大 */\n\n    this.depthRepulsiveForceScale = 2;\n    /** 内部计算参数 */\n\n    this.nodes = [];\n    this.edges = [];\n    this.combos = [];\n    this.comboTrees = [];\n    this.width = 300;\n    this.height = 300;\n    this.bias = [];\n    this.nodeMap = {};\n    this.oriComboMap = {};\n    this.indexMap = {};\n    this.comboMap = {};\n    this.previousLayouted = false;\n    this.updateCfg(options);\n  }\n\n  getDefaultCfg() {\n    return {\n      maxIteration: 100,\n      center: [0, 0],\n      gravity: 10,\n      speed: 1,\n      comboGravity: 30,\n      preventOverlap: false,\n      preventComboOverlap: true,\n      preventNodeOverlap: true,\n      nodeSpacing: undefined,\n      collideStrength: undefined,\n      nodeCollideStrength: 0.5,\n      comboCollideStrength: 0.5,\n      comboSpacing: 20,\n      comboPadding: 10,\n      edgeStrength: 0.6,\n      nodeStrength: 30,\n      linkDistance: 10\n    };\n  }\n  /**\n   * 执行布局\n   */\n\n\n  execute() {\n    const self = this;\n    const nodes = self.nodes;\n    const center = self.center;\n    self.comboTree = {\n      id: \"comboTreeRoot\",\n      depth: -1,\n      children: self.comboTrees\n    };\n\n    if (!nodes || nodes.length === 0) {\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    if (nodes.length === 1) {\n      nodes[0].x = center[0];\n      nodes[0].y = center[1];\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return;\n    }\n\n    self.initVals(); // layout\n\n    self.run();\n    if (self.onLayoutEnd) self.onLayoutEnd();\n  }\n\n  run() {\n    const self = this;\n    const nodes = self.nodes;\n    const maxIteration = self.previousLayouted ? self.maxIteration / 5 : self.maxIteration;\n\n    if (!self.width && typeof window !== \"undefined\") {\n      self.width = window.innerWidth;\n    }\n\n    if (!self.height && typeof window !== \"undefined\") {\n      self.height = window.innerHeight;\n    }\n\n    const center = self.center;\n    const velocityDecay = self.velocityDecay; // init the positions to make the nodes with same combo gather around the combo\n\n    const comboMap = self.comboMap;\n    if (!self.previousLayouted) self.initPos(comboMap); // iterate\n\n    for (let i = 0; i < maxIteration; i++) {\n      const displacements = [];\n      nodes.forEach((_, j) => {\n        displacements[j] = {\n          x: 0,\n          y: 0\n        };\n      });\n      self.applyCalculate(displacements); // gravity for combos\n\n      self.applyComboCenterForce(displacements); // move\n\n      nodes.forEach((n, j) => {\n        if (!isNumber(n.x) || !isNumber(n.y)) return;\n        n.x += displacements[j].x * velocityDecay;\n        n.y += displacements[j].y * velocityDecay;\n      });\n      self.alpha += (self.alphaTarget - self.alpha) * self.alphaDecay;\n      self.onTick();\n    } // move to center\n\n\n    const meanCenter = [0, 0];\n    nodes.forEach(n => {\n      if (!isNumber(n.x) || !isNumber(n.y)) return;\n      meanCenter[0] += n.x;\n      meanCenter[1] += n.y;\n    });\n    meanCenter[0] /= nodes.length;\n    meanCenter[1] /= nodes.length;\n    const centerOffset = [center[0] - meanCenter[0], center[1] - meanCenter[1]];\n    nodes.forEach((n, j) => {\n      if (!isNumber(n.x) || !isNumber(n.y)) return;\n      n.x += centerOffset[0];\n      n.y += centerOffset[1];\n    }); // arrange the empty combo\n\n    self.combos.forEach(combo => {\n      const mapped = comboMap[combo.id];\n\n      if (mapped && mapped.empty) {\n        combo.x = mapped.cx || combo.x;\n        combo.y = mapped.cy || combo.y;\n      }\n    });\n    self.previousLayouted = true;\n  }\n\n  initVals() {\n    const self = this;\n    const edges = self.edges;\n    const nodes = self.nodes;\n    const combos = self.combos;\n    const count = {};\n    const nodeMap = {};\n    const indexMap = {};\n    nodes.forEach((node, i) => {\n      nodeMap[node.id] = node;\n      indexMap[node.id] = i;\n    });\n    self.nodeMap = nodeMap;\n    self.indexMap = indexMap;\n    const oriComboMap = {};\n    combos.forEach(combo => {\n      oriComboMap[combo.id] = combo;\n    });\n    self.oriComboMap = oriComboMap;\n    self.comboMap = self.getComboMap();\n    const preventOverlap = self.preventOverlap;\n    self.preventComboOverlap = self.preventComboOverlap || preventOverlap;\n    self.preventNodeOverlap = self.preventNodeOverlap || preventOverlap;\n    const collideStrength = self.collideStrength;\n\n    if (collideStrength) {\n      self.comboCollideStrength = collideStrength;\n      self.nodeCollideStrength = collideStrength;\n    }\n\n    self.comboCollideStrength = self.comboCollideStrength ? self.comboCollideStrength : 0;\n    self.nodeCollideStrength = self.nodeCollideStrength ? self.nodeCollideStrength : 0; // get edge bias\n\n    for (let i = 0; i < edges.length; ++i) {\n      const source = getEdgeTerminal(edges[i], 'source');\n      const target = getEdgeTerminal(edges[i], 'target');\n      if (count[source]) count[source]++;else count[source] = 1;\n      if (count[target]) count[target]++;else count[target] = 1;\n    }\n\n    const bias = [];\n\n    for (let i = 0; i < edges.length; ++i) {\n      const source = getEdgeTerminal(edges[i], 'source');\n      const target = getEdgeTerminal(edges[i], 'target');\n      bias[i] = count[source] / (count[source] + count[target]);\n    }\n\n    this.bias = bias;\n    const nodeSize = self.nodeSize;\n    const nodeSpacing = self.nodeSpacing;\n    let nodeSizeFunc;\n    let nodeSpacingFunc; // nodeSpacing to function\n\n    if (isNumber(nodeSpacing)) {\n      nodeSpacingFunc = () => nodeSpacing;\n    } else if (isFunction(nodeSpacing)) {\n      nodeSpacingFunc = nodeSpacing;\n    } else {\n      nodeSpacingFunc = () => 0;\n    }\n\n    this.nodeSpacing = nodeSpacingFunc; // nodeSize to function\n\n    if (!nodeSize) {\n      nodeSizeFunc = d => {\n        if (d.size) {\n          if (isArray(d.size)) {\n            const res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n            return res / 2;\n          }\n\n          if (isObject(d.size)) {\n            const res = d.size.width > d.size.height ? d.size.width : d.size.height;\n            return res / 2;\n          }\n\n          return d.size / 2;\n        }\n\n        return 10;\n      };\n    } else if (isFunction(nodeSize)) {\n      nodeSizeFunc = d => {\n        return nodeSize(d);\n      };\n    } else if (isArray(nodeSize)) {\n      const larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n      const radius = larger / 2;\n\n      nodeSizeFunc = d => radius;\n    } else {\n      // number type\n      const radius = nodeSize / 2;\n\n      nodeSizeFunc = d => radius;\n    }\n\n    this.nodeSize = nodeSizeFunc; // comboSpacing to function\n\n    const comboSpacing = self.comboSpacing;\n    let comboSpacingFunc;\n\n    if (isNumber(comboSpacing)) {\n      comboSpacingFunc = () => comboSpacing;\n    } else if (isFunction(comboSpacing)) {\n      comboSpacingFunc = comboSpacing;\n    } else {\n      // null type\n      comboSpacingFunc = () => 0;\n    }\n\n    this.comboSpacing = comboSpacingFunc; // comboPadding to function\n\n    const comboPadding = self.comboPadding;\n    let comboPaddingFunc;\n\n    if (isNumber(comboPadding)) {\n      comboPaddingFunc = () => comboPadding;\n    } else if (isArray(comboPadding)) {\n      comboPaddingFunc = () => Math.max.apply(null, comboPadding);\n    } else if (isFunction(comboPadding)) {\n      comboPaddingFunc = comboPadding;\n    } else {\n      // null type\n      comboPaddingFunc = () => 0;\n    }\n\n    this.comboPadding = comboPaddingFunc; // linkDistance to function\n\n    let linkDistance = this.linkDistance;\n    let linkDistanceFunc;\n\n    if (!linkDistance) {\n      linkDistance = 10;\n    }\n\n    if (isNumber(linkDistance)) {\n      linkDistanceFunc = d => {\n        return linkDistance;\n      };\n    } else {\n      linkDistanceFunc = linkDistance;\n    }\n\n    this.linkDistance = linkDistanceFunc; // linkStrength to function\n\n    let edgeStrength = this.edgeStrength;\n    let edgeStrengthFunc;\n\n    if (!edgeStrength) {\n      edgeStrength = 1;\n    }\n\n    if (isNumber(edgeStrength)) {\n      edgeStrengthFunc = d => {\n        return edgeStrength;\n      };\n    } else {\n      edgeStrengthFunc = edgeStrength;\n    }\n\n    this.edgeStrength = edgeStrengthFunc; // nodeStrength to function\n\n    let nodeStrength = this.nodeStrength;\n    let nodeStrengthFunc;\n\n    if (!nodeStrength) {\n      nodeStrength = 30;\n    }\n\n    if (isNumber(nodeStrength)) {\n      nodeStrengthFunc = d => {\n        return nodeStrength;\n      };\n    } else {\n      nodeStrengthFunc = nodeStrength;\n    }\n\n    this.nodeStrength = nodeStrengthFunc;\n  }\n\n  initPos(comboMap) {\n    const self = this;\n    const nodes = self.nodes;\n    nodes.forEach((node, i) => {\n      const comboId = node.comboId;\n      const combo = comboMap[comboId];\n\n      if (comboId && combo) {\n        node.x = combo.cx + 100 / (i + 1);\n        node.y = combo.cy + 100 / (i + 1);\n      } else {\n        node.x = 100 / (i + 1);\n        node.y = 100 / (i + 1);\n      }\n    });\n  }\n\n  getComboMap() {\n    const self = this;\n    const nodeMap = self.nodeMap;\n    const comboTrees = self.comboTrees;\n    const oriComboMap = self.oriComboMap;\n    const comboMap = {};\n    (comboTrees || []).forEach(ctree => {\n      const treeChildren = [];\n      traverseTreeUp(ctree, treeNode => {\n        if (treeNode.itemType === \"node\") return true; // skip it\n\n        if (!oriComboMap[treeNode.id]) return true; // means it is hidden, skip it\n\n        if (comboMap[treeNode.id] === undefined) {\n          const combo = {\n            id: treeNode.id,\n            name: treeNode.id,\n            cx: 0,\n            cy: 0,\n            count: 0,\n            depth: self.oriComboMap[treeNode.id].depth || 0,\n            children: []\n          };\n          comboMap[treeNode.id] = combo;\n        }\n\n        const children = treeNode.children;\n\n        if (children) {\n          children.forEach(child => {\n            if (!comboMap[child.id] && !nodeMap[child.id]) return true; // means it is hidden\n\n            treeChildren.push(child);\n          });\n        }\n\n        const c = comboMap[treeNode.id];\n        c.cx = 0;\n        c.cy = 0;\n\n        if (treeChildren.length === 0) {\n          c.empty = true;\n          const oriCombo = oriComboMap[treeNode.id];\n          c.cx = oriCombo.x;\n          c.cy = oriCombo.y;\n        }\n\n        treeChildren.forEach(child => {\n          c.count++;\n\n          if (child.itemType !== \"node\") {\n            const childCombo = comboMap[child.id];\n            if (isNumber(childCombo.cx)) c.cx += childCombo.cx;\n            if (isNumber(childCombo.cy)) c.cy += childCombo.cy;\n            return;\n          }\n\n          const node = nodeMap[child.id]; // means the node is hidden, skip it\n\n          if (!node) return;\n\n          if (isNumber(node.x)) {\n            c.cx += node.x;\n          }\n\n          if (isNumber(node.y)) {\n            c.cy += node.y;\n          }\n        });\n        c.cx /= c.count || 1;\n        c.cy /= c.count || 1;\n        c.children = treeChildren;\n        return true;\n      });\n    });\n    return comboMap;\n  }\n\n  applyComboCenterForce(displacements) {\n    const self = this;\n    const gravity = self.gravity;\n    const comboGravity = self.comboGravity || gravity;\n    const alpha = this.alpha;\n    const comboTrees = self.comboTrees;\n    const indexMap = self.indexMap;\n    const nodeMap = self.nodeMap;\n    const comboMap = self.comboMap;\n    (comboTrees || []).forEach(ctree => {\n      traverseTreeUp(ctree, treeNode => {\n        if (treeNode.itemType === \"node\") return true; // skip it\n\n        const combo = comboMap[treeNode.id]; // means the combo is hidden, skip it\n\n        if (!combo) return true;\n        const c = comboMap[treeNode.id]; // higher depth the combo, larger the gravity\n\n        const gravityScale = (c.depth + 1) / 10 * 0.5; // apply combo center force for all the descend nodes in this combo\n        // and update the center position and count for this combo\n\n        const comboX = c.cx;\n        const comboY = c.cy;\n        c.cx = 0;\n        c.cy = 0;\n        c.children.forEach(child => {\n          if (child.itemType !== \"node\") {\n            const childCombo = comboMap[child.id];\n            if (childCombo && isNumber(childCombo.cx)) c.cx += childCombo.cx;\n            if (childCombo && isNumber(childCombo.cy)) c.cy += childCombo.cy;\n            return;\n          }\n\n          const node = nodeMap[child.id];\n          const vecX = node.x - comboX || 0.005;\n          const vecY = node.y - comboY || 0.005;\n          const l = Math.sqrt(vecX * vecX + vecY * vecY);\n          const childIdx = indexMap[node.id];\n          const params = comboGravity * alpha / l * gravityScale;\n          displacements[childIdx].x -= vecX * params;\n          displacements[childIdx].y -= vecY * params;\n          if (isNumber(node.x)) c.cx += node.x;\n          if (isNumber(node.y)) c.cy += node.y;\n        });\n        c.cx /= c.count || 1;\n        c.cy /= c.count || 1;\n        return true;\n      });\n    });\n  }\n\n  applyCalculate(displacements) {\n    const self = this;\n    const comboMap = self.comboMap;\n    const nodes = self.nodes; // store the vx, vy, and distance to reduce dulplicate calculation\n\n    const vecMap = {};\n    nodes.forEach((v, i) => {\n      nodes.forEach((u, j) => {\n        if (i < j) return;\n        const vx = v.x - u.x || 0.005;\n        const vy = v.y - u.y || 0.005;\n        let vl2 = vx * vx + vy * vy;\n        const vl = Math.sqrt(vl2);\n        if (vl2 < 1) vl2 = vl;\n        vecMap[`${v.id}-${u.id}`] = {\n          vx,\n          vy,\n          vl2,\n          vl\n        };\n        vecMap[`${u.id}-${v.id}`] = {\n          vl2,\n          vl,\n          vx: -vx,\n          vy: -vy\n        };\n      });\n    }); // get the sizes of the combos\n\n    self.updateComboSizes(comboMap);\n    self.calRepulsive(displacements, vecMap);\n    self.calAttractive(displacements, vecMap);\n    const preventComboOverlap = self.preventComboOverlap;\n    if (preventComboOverlap) self.comboNonOverlapping(displacements, comboMap);\n  }\n  /**\n   * Update the sizes of the combos according to their children\n   * Used for combos nonoverlap, but not re-render the combo shapes\n   */\n\n\n  updateComboSizes(comboMap) {\n    const self = this;\n    const comboTrees = self.comboTrees;\n    const nodeMap = self.nodeMap;\n    const nodeSize = self.nodeSize;\n    const comboSpacing = self.comboSpacing;\n    const comboPadding = self.comboPadding;\n    (comboTrees || []).forEach(ctree => {\n      const treeChildren = [];\n      traverseTreeUp(ctree, treeNode => {\n        if (treeNode.itemType === \"node\") return true; // skip it\n\n        const c = comboMap[treeNode.id]; // means the combo is hidden, skip it\n\n        if (!c) return false;\n        const children = treeNode.children;\n\n        if (children) {\n          children.forEach(child => {\n            // means the combo is hidden.\n            if (!comboMap[child.id] && !nodeMap[child.id]) return;\n            treeChildren.push(child);\n          });\n        }\n\n        c.minX = Infinity;\n        c.minY = Infinity;\n        c.maxX = -Infinity;\n        c.maxY = -Infinity;\n        treeChildren.forEach(child => {\n          if (child.itemType !== \"node\") return true; // skip it\n\n          const node = nodeMap[child.id];\n          if (!node) return true; // means it is hidden\n\n          const r = nodeSize(node);\n          const nodeMinX = node.x - r;\n          const nodeMinY = node.y - r;\n          const nodeMaxX = node.x + r;\n          const nodeMaxY = node.y + r;\n          if (c.minX > nodeMinX) c.minX = nodeMinX;\n          if (c.minY > nodeMinY) c.minY = nodeMinY;\n          if (c.maxX < nodeMaxX) c.maxX = nodeMaxX;\n          if (c.maxY < nodeMaxY) c.maxY = nodeMaxY;\n        });\n        let minSize = self.oriComboMap[treeNode.id].size || 10;\n        if (isArray(minSize)) minSize = minSize[0];\n        const maxLength = Math.max(c.maxX - c.minX, c.maxY - c.minY, minSize);\n        c.r = maxLength / 2 + comboSpacing(c) / 2 + comboPadding(c);\n        return true;\n      });\n    });\n  }\n  /**\n   * prevent the overlappings among combos\n   */\n\n\n  comboNonOverlapping(displacements, comboMap) {\n    const self = this;\n    const comboTree = self.comboTree;\n    const comboCollideStrength = self.comboCollideStrength;\n    const indexMap = self.indexMap;\n    const nodeMap = self.nodeMap;\n    traverseTreeUp(comboTree, treeNode => {\n      if (!comboMap[treeNode.id] && !nodeMap[treeNode.id] && treeNode.id !== \"comboTreeRoot\") {\n        return false;\n      } // means it is hidden\n\n\n      const children = treeNode.children; // 同个子树下的子 combo 间两两对比\n\n      if (children && children.length > 1) {\n        children.forEach((v, i) => {\n          if (v.itemType === \"node\") return false; // skip it\n\n          const cv = comboMap[v.id];\n          if (!cv) return; // means it is hidden, skip it\n\n          children.forEach((u, j) => {\n            if (i <= j) return false;\n            if (u.itemType === \"node\") return false; // skip it\n\n            const cu = comboMap[u.id];\n            if (!cu) return false; // means it is hidden, skip it\n\n            const vx = cv.cx - cu.cx || 0.005;\n            const vy = cv.cy - cu.cy || 0.005;\n            const l = vx * vx + vy * vy;\n            const rv = cv.r || 1;\n            const ru = cu.r || 1;\n            const r = rv + ru;\n            const ru2 = ru * ru;\n            const rv2 = rv * rv; // overlapping\n\n            if (l < r * r) {\n              const vnodes = v.children;\n              if (!vnodes || vnodes.length === 0) return false; // skip it\n\n              const unodes = u.children;\n              if (!unodes || unodes.length === 0) return false; // skip it\n\n              const sqrtl = Math.sqrt(l);\n              const ll = (r - sqrtl) / sqrtl * comboCollideStrength;\n              const xl = vx * ll;\n              const yl = vy * ll;\n              const rratio = ru2 / (rv2 + ru2);\n              const irratio = 1 - rratio; // 两兄弟 combo 的子节点上施加斥力\n\n              vnodes.forEach(vn => {\n                if (vn.itemType !== \"node\") return false; // skip it\n\n                if (!nodeMap[vn.id]) return; // means it is hidden, skip it\n\n                const vindex = indexMap[vn.id];\n                unodes.forEach(un => {\n                  if (un.itemType !== \"node\") return false;\n                  if (!nodeMap[un.id]) return false; // means it is hidden, skip it\n\n                  const uindex = indexMap[un.id];\n                  displacements[vindex].x += xl * rratio;\n                  displacements[vindex].y += yl * rratio;\n                  displacements[uindex].x -= xl * irratio;\n                  displacements[uindex].y -= yl * irratio;\n                });\n              });\n            }\n          });\n        });\n      }\n\n      return true;\n    });\n  }\n  /**\n   * Calculate the repulsive force between each node pair\n   * @param displacements The array stores the displacements for nodes\n   * @param vecMap The map stores vector between each node pair\n   */\n\n\n  calRepulsive(displacements, vecMap) {\n    const self = this;\n    const nodes = self.nodes;\n    const max = self.width * self.optimizeRangeFactor;\n    const nodeStrength = self.nodeStrength;\n    const alpha = self.alpha;\n    const nodeCollideStrength = self.nodeCollideStrength;\n    const preventNodeOverlap = self.preventNodeOverlap;\n    const nodeSizeFunc = self.nodeSize;\n    const nodeSpacingFunc = self.nodeSpacing;\n    const scale = self.depthRepulsiveForceScale;\n    const center = self.center;\n    nodes.forEach((v, i) => {\n      if (!v.x || !v.y) return; // center gravity\n\n      if (center) {\n        const gravity = self.gravity;\n        const vecX = v.x - center[0] || 0.005;\n        const vecY = v.y - center[1] || 0.005;\n        const l = Math.sqrt(vecX * vecX + vecY * vecY);\n        displacements[i].x -= vecX * gravity * alpha / l;\n        displacements[i].y -= vecY * gravity * alpha / l;\n      }\n\n      nodes.forEach((u, j) => {\n        if (i === j) {\n          return;\n        }\n\n        if (!u.x || !u.y) return;\n        const {\n          vl2,\n          vl\n        } = vecMap[`${v.id}-${u.id}`];\n        if (vl > max) return;\n        const {\n          vx,\n          vy\n        } = vecMap[`${v.id}-${u.id}`];\n        let depthDiff = Math.log(Math.abs(u.depth - v.depth) / 10) + 1 || 1;\n        depthDiff = depthDiff < 1 ? 1 : depthDiff;\n        if (u.comboId !== v.comboId) depthDiff += 1;\n        const depthParam = depthDiff ? Math.pow(scale, depthDiff) : 1;\n        const params = nodeStrength(u) * alpha / vl2 * depthParam;\n        displacements[i].x += vx * params;\n        displacements[i].y += vy * params; // prevent node overlappings\n\n        if (i < j && preventNodeOverlap) {\n          const ri = nodeSizeFunc(v) + nodeSpacingFunc(v) || 1;\n          const rj = nodeSizeFunc(u) + nodeSpacingFunc(u) || 1;\n          const r = ri + rj;\n\n          if (vl2 < r * r) {\n            const ll = (r - vl) / vl * nodeCollideStrength;\n            const rj2 = rj * rj;\n            let rratio = rj2 / (ri * ri + rj2);\n            const xl = vx * ll;\n            const yl = vy * ll;\n            displacements[i].x += xl * rratio;\n            displacements[i].y += yl * rratio;\n            rratio = 1 - rratio;\n            displacements[j].x -= xl * rratio;\n            displacements[j].y -= yl * rratio;\n          }\n        }\n      });\n    });\n  }\n  /**\n   * Calculate the attractive force between the node pair with edge\n   * @param displacements The array stores the displacements for nodes\n   * @param vecMap The map stores vector between each node pair\n   */\n\n\n  calAttractive(displacements, vecMap) {\n    const self = this;\n    const edges = self.edges;\n    const linkDistance = self.linkDistance;\n    const alpha = self.alpha;\n    const edgeStrength = self.edgeStrength;\n    const bias = self.bias;\n    const scale = self.depthAttractiveForceScale;\n    edges.forEach((e, i) => {\n      const source = getEdgeTerminal(e, 'source');\n      const target = getEdgeTerminal(e, 'target');\n      if (!source || !target || source === target) return;\n      const uIndex = self.indexMap[source];\n      const vIndex = self.indexMap[target];\n      const u = self.nodeMap[source];\n      const v = self.nodeMap[target];\n      if (!u || !v) return;\n      let depthDiff = u.depth === v.depth ? 0 : Math.log(Math.abs(u.depth - v.depth) / 10);\n\n      if (u.comboId === v.comboId) {\n        depthDiff = depthDiff / 2;\n      }\n\n      let depthParam = depthDiff ? Math.pow(scale, depthDiff) : 1;\n\n      if (u.comboId !== v.comboId && depthParam === 1) {\n        depthParam = scale / 2;\n      } else if (u.comboId === v.comboId) {\n        depthParam = 2;\n      }\n\n      if (!isNumber(v.x) || !isNumber(u.x) || !isNumber(v.y) || !isNumber(u.y)) {\n        return;\n      }\n\n      const {\n        vl,\n        vx,\n        vy\n      } = vecMap[`${target}-${source}`];\n      const l = (vl - linkDistance(e)) / vl * alpha * edgeStrength(e) * depthParam;\n      const vecX = vx * l;\n      const vecY = vy * l;\n      const b = bias[i];\n      displacements[vIndex].x -= vecX * b;\n      displacements[vIndex].y -= vecY * b;\n      displacements[uIndex].x += vecX * (1 - b);\n      displacements[uIndex].y += vecY * (1 - b);\n    });\n  }\n\n  getType() {\n    return \"comboForce\";\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}