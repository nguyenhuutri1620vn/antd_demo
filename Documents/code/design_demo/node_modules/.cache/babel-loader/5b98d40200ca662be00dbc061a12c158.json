{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { NodeView, Scheduler } from '@antv/x6';\nimport { Portal } from './portal';\nimport { Wrap } from './wrap';\nexport class ReactShapeView extends NodeView {\n  init() {\n    super.init();\n    this.cell.on('removed', () => {\n      Portal.disconnect(this.cell.id);\n    });\n  }\n\n  getComponentContainer() {\n    return this.cell.prop('useForeignObject') === false ? this.selectors.content : this.selectors.foContent;\n  }\n\n  confirmUpdate(flag) {\n    const ret = super.confirmUpdate(flag);\n    return this.handleAction(ret, ReactShapeView.action, () => {\n      if (Scheduler) {\n        Scheduler.scheduleTask(() => {\n          this.renderReactComponent();\n        });\n      } else {\n        this.renderReactComponent();\n      }\n    });\n  }\n\n  renderReactComponent() {\n    this.unmountReactComponent();\n    const root = this.getComponentContainer();\n    const node = this.cell;\n    const graph = this.graph;\n\n    if (root) {\n      const component = this.graph.hook.getReactComponent(node);\n      const elem = React.createElement(Wrap, {\n        graph,\n        node,\n        component\n      });\n\n      if (Portal.isActive()) {\n        Portal.connect(this.cell.id, ReactDOM.createPortal(elem, root));\n      } else {\n        ReactDOM.render(elem, root);\n      }\n    }\n  }\n\n  unmountReactComponent() {\n    const root = this.getComponentContainer();\n\n    if (root) {\n      ReactDOM.unmountComponentAtNode(root);\n    }\n\n    return root;\n  }\n\n  onMouseDown(e, x, y) {\n    const target = e.target;\n    const tagName = target.tagName.toLowerCase();\n\n    if (tagName === 'input') {\n      const type = target.getAttribute('type');\n\n      if (type == null || ['text', 'password', 'number', 'email', 'search', 'tel', 'url'].includes(type)) {\n        return;\n      }\n    }\n\n    super.onMouseDown(e, x, y);\n  }\n\n  unmount() {\n    Portal.disconnect(this.cell.id);\n    this.unmountReactComponent();\n    super.unmount();\n    return this;\n  }\n\n}\n\n(function (ReactShapeView) {\n  ReactShapeView.action = 'react';\n  ReactShapeView.config({\n    bootstrap: [ReactShapeView.action],\n    actions: {\n      component: ReactShapeView.action\n    }\n  });\n  NodeView.registry.register('react-shape-view', ReactShapeView, true);\n})(ReactShapeView || (ReactShapeView = {}));","map":null,"metadata":{},"sourceType":"module"}