{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\n/** app */\n\nimport { initApp } from '../application-module';\nimport { XFlowAppInternalProvider, useXFlowApp } from './app-context';\n/** app-extension */\n\nimport { ExtensionRegistryContext } from './extension-context';\nimport { useXflowPrefixCls } from './global-config-context';\nimport { XFlowAppExtensionMoudle } from './app-extension-module';\nimport { ExtensionRegistry, createExtensionRegistry } from './extension-registry';\n/** graph */\n\nimport { XFlowCanvas } from './canvas';\n/** command */\n\nimport { ModelServiceRegistry } from '../../model-service';\nimport { CommandsRegistry, XFlowGraphCommands } from '../../command-contributions';\n/** hook */\n\nimport { HookRegistry } from '../../hooks';\n/** UI model */\n\nimport { ToolbarRegistry } from '../../toolbar';\nimport { MenuRegistry } from '../../menu';\nexport const XFlow = props => {\n  const {\n    meta,\n    graphConfig,\n    graphData,\n    graphLayout,\n    onLoad,\n    isAutoCenter,\n    hookConfig,\n    modelServiceConfig,\n    commandConfig,\n    onAppConfigReady,\n    onAppDestroy,\n    children = [],\n    className,\n    style\n  } = props;\n  const [appRef, setAppRef] = React.useState();\n  /** XFlow App 配置中心 */\n\n  const extensionRegistry = createExtensionRegistry();\n  /** didmount */\n\n  React.useEffect(() => {\n    /** before app start */\n    if (onAppConfigReady) {\n      onAppConfigReady(extensionRegistry);\n    }\n    /** 初始化应用 */\n\n\n    const app = initApp(extensionRegistry);\n    app.start().then(() => __awaiter(void 0, void 0, void 0, function* () {\n      /** 保留引用 */\n      setAppRef(app);\n      /** 自动执行 load Meta */\n\n      if (meta) {\n        yield app.commandService.executeCommand(XFlowGraphCommands.LOAD_META.id, {\n          meta\n        });\n      }\n      /** after app start */\n\n\n      if (onLoad) {\n        onLoad(app, extensionRegistry);\n      }\n\n      if (graphData) {\n        if (graphLayout) {\n          yield app.commandService.executeCommand(XFlowGraphCommands.GRAPH_LAYOUT.id, Object.assign({\n            graphData\n          }, graphLayout));\n        }\n\n        yield app.commandService.executeCommand(XFlowGraphCommands.GRAPH_RENDER.id, {\n          graphData\n        });\n      }\n    }));\n    /** unmount */\n\n    const destroy = () => __awaiter(void 0, void 0, void 0, function* () {\n      onAppDestroy && onAppDestroy(app);\n    });\n\n    return () => {\n      destroy();\n    };\n    /** 不要删 保证只生成一次 */\n    // eslint-disable-next-line\n  }, []);\n  /** 自动更新meta */\n\n  React.useEffect(() => {\n    if (appRef) {\n      appRef.commandService.executeCommand(XFlowGraphCommands.LOAD_META.id, {\n        meta\n      });\n    }\n    /** 不要删 只和meta联动 */\n    // eslint-disable-next-line\n\n  }, [meta]);\n  /** 自动渲染画布内容 */\n\n  React.useEffect(() => {\n    const fn = () => __awaiter(void 0, void 0, void 0, function* () {\n      if (appRef) {\n        if (graphData && graphLayout) {\n          yield appRef.commandService.executeCommand(XFlowGraphCommands.GRAPH_LAYOUT.id, Object.assign({\n            graphData\n          }, graphLayout));\n        }\n\n        yield appRef.commandService.executeCommand(XFlowGraphCommands.GRAPH_RENDER.id, {\n          graphData\n        });\n        /** 自动居中画布内容 */\n\n        if (isAutoCenter) {\n          const x6Graph = yield appRef.getGraphInstance();\n          x6Graph.centerContent();\n        }\n      }\n    });\n\n    fn();\n    /** 不要删 只和graphData联动 */\n    // eslint-disable-next-line\n  }, [graphData]);\n  /** classname */\n\n  const appClzName = classNames('xflow-app-workspace', className, ...extensionRegistry.getContainerClassNames());\n  /** 判断是否需要自动渲染画布组件, 坐标相对于xflow-graph-root */\n\n  const hasCanvasComponent = (Array.isArray(children) ? children : [children]).some(child => {\n    return child && child.props.isXFlowCanvas;\n  });\n  return React.createElement(XFlowAppInternalProvider, {\n    app: appRef\n  }, React.createElement(ExtensionRegistryContext.Provider, {\n    value: extensionRegistry\n  }, React.createElement(\"div\", {\n    className: appClzName,\n    id: extensionRegistry.getInstaceId(),\n    style: style\n  }, !hasCanvasComponent && React.createElement(XFlowCanvas, {\n    config: graphConfig,\n    position: {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  }), children, React.createElement(ModelServiceRegistry, {\n    config: modelServiceConfig\n  }), React.createElement(CommandsRegistry, {\n    config: commandConfig\n  }), React.createElement(HookRegistry, {\n    config: hookConfig\n  }), React.createElement(ToolbarRegistry, null), React.createElement(MenuRegistry, null))));\n};\nXFlow.defaultProps = {};\nexport default XFlow;\nexport { useXFlowApp, useXflowPrefixCls, XFlowCanvas, XFlowAppExtensionMoudle as XFlowAppExtension, ExtensionRegistry };","map":null,"metadata":{},"sourceType":"module"}