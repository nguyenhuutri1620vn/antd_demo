{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _class, _class2, _descriptor;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { inject, injectable, postConstruct } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../../types';\nimport { gl } from '../gl';\nvar PostProcessor = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec3 = postConstruct(), _dec(_class = (_class2 = function () {\n  function PostProcessor() {\n    _classCallCheck(this, PostProcessor);\n\n    _initializerDefineProperty(this, \"rendererService\", _descriptor, this);\n\n    _defineProperty(this, \"passes\", []);\n\n    _defineProperty(this, \"readFBO\", void 0);\n\n    _defineProperty(this, \"writeFBO\", void 0);\n  }\n\n  _createClass(PostProcessor, [{\n    key: \"getReadFBO\",\n    value: function getReadFBO() {\n      return this.readFBO;\n    }\n  }, {\n    key: \"getWriteFBO\",\n    value: function getWriteFBO() {\n      return this.writeFBO;\n    }\n  }, {\n    key: \"getCurrentFBOTex\",\n    value: function getCurrentFBOTex() {\n      var _this$rendererService = this.rendererService,\n          getViewportSize = _this$rendererService.getViewportSize,\n          createTexture2D = _this$rendererService.createTexture2D;\n\n      var _getViewportSize = getViewportSize(),\n          width = _getViewportSize.width,\n          height = _getViewportSize.height;\n\n      return createTexture2D({\n        x: 0,\n        y: 0,\n        width: width,\n        height: height,\n        copy: true\n      });\n    }\n  }, {\n    key: \"getReadFBOTex\",\n    value: function getReadFBOTex() {\n      var _this = this;\n\n      var useFramebuffer = this.rendererService.useFramebuffer;\n      return new Promise(function (resolve, reject) {\n        useFramebuffer(_this.readFBO, _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  resolve(_this.getCurrentFBOTex());\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        })));\n      });\n    }\n  }, {\n    key: \"renderBloomPass\",\n    value: function () {\n      var _renderBloomPass = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(layer, pass) {\n        var tex, count;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getReadFBOTex();\n\n              case 2:\n                tex = _context2.sent;\n                count = 0;\n\n              case 4:\n                if (!(count < 4)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                _context2.next = 7;\n                return pass.render(layer, tex);\n\n              case 7:\n                this.swap();\n                count++;\n                _context2.next = 4;\n                break;\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function renderBloomPass(_x, _x2) {\n        return _renderBloomPass.apply(this, arguments);\n      }\n\n      return renderBloomPass;\n    }()\n  }, {\n    key: \"render\",\n    value: function () {\n      var _render = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(layer) {\n        var i, pass;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                i = 0;\n\n              case 1:\n                if (!(i < this.passes.length)) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                pass = this.passes[i];\n                pass.setRenderToScreen(this.isLastEnabledPass(i));\n\n                if (!(pass.getName() === 'bloom')) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                _context3.next = 7;\n                return this.renderBloomPass(layer, pass);\n\n              case 7:\n                _context3.next = 12;\n                break;\n\n              case 9:\n                _context3.next = 11;\n                return pass.render(layer);\n\n              case 11:\n                if (i !== this.passes.length - 1) {\n                  this.swap();\n                }\n\n              case 12:\n                i++;\n                _context3.next = 1;\n                break;\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function render(_x3) {\n        return _render.apply(this, arguments);\n      }\n\n      return render;\n    }()\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      this.readFBO.resize({\n        width: width,\n        height: height\n      });\n      this.writeFBO.resize({\n        width: width,\n        height: height\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add(pass, layer, config) {\n      pass.init(layer, config);\n      this.passes.push(pass);\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(pass, index, layer, config) {\n      pass.init(layer, config);\n      this.passes.splice(index, 0, pass);\n    }\n  }, {\n    key: \"getPostProcessingPassByName\",\n    value: function getPostProcessingPassByName(name) {\n      return this.passes.find(function (p) {\n        return p.getName() === name;\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this$rendererService2 = this.rendererService,\n          createFramebuffer = _this$rendererService2.createFramebuffer,\n          createTexture2D = _this$rendererService2.createTexture2D;\n      this.readFBO = createFramebuffer({\n        color: createTexture2D({\n          width: 1,\n          height: 1,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE\n        })\n      });\n      this.writeFBO = createFramebuffer({\n        color: createTexture2D({\n          width: 1,\n          height: 1,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE\n        })\n      });\n    }\n  }, {\n    key: \"isLastEnabledPass\",\n    value: function isLastEnabledPass(index) {\n      for (var i = index + 1; i < this.passes.length; i++) {\n        if (this.passes[i].isEnabled()) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"swap\",\n    value: function swap() {\n      var tmp = this.readFBO;\n      this.readFBO = this.writeFBO;\n      this.writeFBO = tmp;\n    }\n  }]);\n\n  return PostProcessor;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"rendererService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _applyDecoratedDescriptor(_class2.prototype, \"init\", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, \"init\"), _class2.prototype)), _class2)) || _class);\nexport { PostProcessor as default };","map":null,"metadata":{},"sourceType":"module"}