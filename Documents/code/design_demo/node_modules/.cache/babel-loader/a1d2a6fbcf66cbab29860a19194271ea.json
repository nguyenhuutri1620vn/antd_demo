{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { vec3 } from 'gl-matrix';\nimport { Plane } from './Plane';\nexport var Mask;\n\n(function (Mask) {\n  Mask[Mask[\"OUTSIDE\"] = 4294967295] = \"OUTSIDE\";\n  Mask[Mask[\"INSIDE\"] = 0] = \"INSIDE\";\n  Mask[Mask[\"INDETERMINATE\"] = 2147483647] = \"INDETERMINATE\";\n})(Mask || (Mask = {}));\n\nexport var Frustum = /*#__PURE__*/function () {\n  function Frustum(planes) {\n    _classCallCheck(this, Frustum);\n\n    this.planes = [];\n\n    if (planes) {\n      this.planes = planes;\n    } else {\n      for (var i = 0; i < 6; i++) {\n        this.planes.push(new Plane());\n      }\n    }\n  }\n  /**\n   * extract 6 planes from vpMatrix\n   * @see http://www8.cs.umu.se/kurser/5DV051/HT12/lab/plane_extraction.pdf\n   * @param vpMatrix viewProjectionMatrix\n   */\n\n\n  _createClass(Frustum, [{\n    key: \"extractFromVPMatrix\",\n    value: function extractFromVPMatrix(vpMatrix) {\n      var _vpMatrix = _slicedToArray(vpMatrix, 16),\n          m0 = _vpMatrix[0],\n          m1 = _vpMatrix[1],\n          m2 = _vpMatrix[2],\n          m3 = _vpMatrix[3],\n          m4 = _vpMatrix[4],\n          m5 = _vpMatrix[5],\n          m6 = _vpMatrix[6],\n          m7 = _vpMatrix[7],\n          m8 = _vpMatrix[8],\n          m9 = _vpMatrix[9],\n          m10 = _vpMatrix[10],\n          m11 = _vpMatrix[11],\n          m12 = _vpMatrix[12],\n          m13 = _vpMatrix[13],\n          m14 = _vpMatrix[14],\n          m15 = _vpMatrix[15]; // right\n\n\n      vec3.set(this.planes[0].normal, m3 - m0, m7 - m4, m11 - m8);\n      this.planes[0].distance = -(m15 - m12); // left\n\n      vec3.set(this.planes[1].normal, m3 + m0, m7 + m4, m11 + m8);\n      this.planes[1].distance = -(m15 + m12); // bottom\n\n      vec3.set(this.planes[2].normal, m3 + m1, m7 + m5, m11 + m9);\n      this.planes[2].distance = -(m15 + m13); // top\n\n      vec3.set(this.planes[3].normal, m3 - m1, m7 - m5, m11 - m9);\n      this.planes[3].distance = -(m15 - m13); // far\n\n      vec3.set(this.planes[4].normal, m3 - m2, m7 - m6, m11 - m10);\n      this.planes[4].distance = -(m15 - m14); // near\n\n      vec3.set(this.planes[5].normal, m3 + m2, m7 + m6, m11 + m10);\n      this.planes[5].distance = -(m15 + m14);\n      this.planes.forEach(function (plane) {\n        plane.normalize();\n        plane.updatePNVertexFlag();\n      });\n    }\n  }]);\n\n  return Frustum;\n}();","map":null,"metadata":{},"sourceType":"module"}