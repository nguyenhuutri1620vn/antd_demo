{"ast":null,"code":"import { Path, Point } from '../../geometry';\nexport const loop = function (sourcePoint, targetPoint, routePoints) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  const fix = routePoints.length === 3 ? 0 : 1;\n  const p1 = Point.create(routePoints[0 + fix]);\n  const p2 = Point.create(routePoints[2 + fix]);\n  const center = Point.create(routePoints[1 + fix]);\n\n  if (!Point.equals(sourcePoint, targetPoint)) {\n    const middle = new Point((sourcePoint.x + targetPoint.x) / 2, (sourcePoint.y + targetPoint.y) / 2);\n    const angle = middle.angleBetween(Point.create(sourcePoint).rotate(90, middle), center);\n\n    if (angle > 1) {\n      p1.rotate(180 - angle, middle);\n      p2.rotate(180 - angle, middle);\n      center.rotate(180 - angle, middle);\n    }\n  }\n\n  const pathData = `\n     M ${sourcePoint.x} ${sourcePoint.y}\n     Q ${p1.x} ${p1.y} ${center.x} ${center.y}\n     Q ${p2.x} ${p2.y} ${targetPoint.x} ${targetPoint.y}\n  `;\n  return options.raw ? Path.parse(pathData) : pathData;\n};","map":null,"metadata":{},"sourceType":"module"}