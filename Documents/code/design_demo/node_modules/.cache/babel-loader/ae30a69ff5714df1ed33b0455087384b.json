{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar Point = function () {\n  function Point(x, y) {\n    _classCallCheck(this, Point);\n\n    _defineProperty(this, \"x\", void 0);\n\n    _defineProperty(this, \"y\", void 0);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Point, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Point(this.x, this.y);\n    }\n  }, {\n    key: \"_add\",\n    value: function _add(p) {\n      this.x += p.x;\n      this.y += p.y;\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(p) {\n      return this.clone()._add(p);\n    }\n  }, {\n    key: \"_sub\",\n    value: function _sub(p) {\n      this.x -= p.x;\n      this.y -= p.y;\n      return this;\n    }\n  }, {\n    key: \"sub\",\n    value: function sub(p) {\n      return this.clone()._sub(p);\n    }\n  }, {\n    key: \"_multByPoint\",\n    value: function _multByPoint(p) {\n      this.x *= p.x;\n      this.y *= p.y;\n      return this;\n    }\n  }, {\n    key: \"multByPoint\",\n    value: function multByPoint(p) {\n      return this.clone()._multByPoint(p);\n    }\n  }, {\n    key: \"_divByPoint\",\n    value: function _divByPoint(p) {\n      this.x /= p.x;\n      this.y /= p.y;\n      return this;\n    }\n  }, {\n    key: \"divByPoint\",\n    value: function divByPoint(p) {\n      return this.clone()._divByPoint(p);\n    }\n  }, {\n    key: \"_mult\",\n    value: function _mult(k) {\n      this.x *= k;\n      this.y *= k;\n      return this;\n    }\n  }, {\n    key: \"mult\",\n    value: function mult(k) {\n      return this.clone()._mult(k);\n    }\n  }, {\n    key: \"_div\",\n    value: function _div(k) {\n      this.x /= k;\n      this.y /= k;\n      return this;\n    }\n  }, {\n    key: \"div\",\n    value: function div(k) {\n      return this.clone()._div(k);\n    }\n  }, {\n    key: \"_rotate\",\n    value: function _rotate(angle) {\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var x = cos * this.x - sin * this.y;\n      var y = sin * this.x + cos * this.y;\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n  }, {\n    key: \"rotate\",\n    value: function rotate(angle) {\n      return this.clone()._rotate(angle);\n    }\n  }, {\n    key: \"_rotateAround\",\n    value: function _rotateAround(angle, p) {\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var x = p.x + cos * (this.x - p.x) - sin * (this.y - p.y);\n      var y = p.y + sin * (this.x - p.x) + cos * (this.y - p.y);\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n  }, {\n    key: \"roateAround\",\n    value: function roateAround(angle, p) {\n      return this.clone()._rotateAround(angle, p);\n    }\n  }, {\n    key: \"_matMult\",\n    value: function _matMult(m) {\n      var x = m[0] * this.x + m[1] * this.y;\n      var y = m[2] * this.x + m[3] * this.y;\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n  }, {\n    key: \"matMult\",\n    value: function matMult(m) {\n      return this.clone()._matMult(m);\n    }\n  }, {\n    key: \"_unit\",\n    value: function _unit() {\n      this.div(this.mag());\n      return this;\n    }\n  }, {\n    key: \"unit\",\n    value: function unit() {\n      return this.clone()._unit();\n    }\n  }, {\n    key: \"_perp\",\n    value: function _perp() {\n      var y = this.y;\n      this.y = this.x;\n      this.x = -y;\n      return this;\n    }\n  }, {\n    key: \"perp\",\n    value: function perp() {\n      return this.clone()._perp();\n    }\n  }, {\n    key: \"_round\",\n    value: function _round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      return this;\n    }\n  }, {\n    key: \"round\",\n    value: function round() {\n      return this.clone()._round();\n    }\n  }, {\n    key: \"mag\",\n    value: function mag() {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.x === other.x && this.y === other.y;\n    }\n  }, {\n    key: \"dist\",\n    value: function dist(p) {\n      return Math.sqrt(this.distSqr(p));\n    }\n  }, {\n    key: \"distSqr\",\n    value: function distSqr(p) {\n      var dx = p.x - this.x;\n      var dy = p.y - this.y;\n      return dx * dx + dy * dy;\n    }\n  }, {\n    key: \"angle\",\n    value: function angle() {\n      return Math.atan2(this.y, this.x);\n    }\n  }, {\n    key: \"angleTo\",\n    value: function angleTo(b) {\n      return Math.atan2(this.y - b.y, this.x - b.x);\n    }\n  }, {\n    key: \"angleWith\",\n    value: function angleWith(b) {\n      return this.angleWithSep(b.x, b.y);\n    }\n  }, {\n    key: \"angleWithSep\",\n    value: function angleWithSep(x, y) {\n      return Math.atan2(this.x * y - this.y * x, this.x * x + this.y * y);\n    }\n  }], [{\n    key: \"convert\",\n    value: function convert(a) {\n      if (a instanceof Point) {\n        return a;\n      }\n\n      if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n      }\n\n      return a;\n    }\n  }]);\n\n  return Point;\n}();\n\nexport { Point as default };","map":null,"metadata":{},"sourceType":"module"}