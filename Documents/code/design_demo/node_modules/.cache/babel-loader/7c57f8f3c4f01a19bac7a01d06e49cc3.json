{"ast":null,"code":"import * as d3Force from 'd3-force';\nimport { getEdgeTerminal } from '../../util'; // https://github.com/john-guerra/forceInABox/blob/master/src/forceInABox.js\n\nexport default function forceInABox() {\n  function constant(_) {\n    return () => _;\n  }\n\n  let groupBy = d => {\n    return d.cluster;\n  };\n\n  let forceNodeSize = constant(1);\n  let forceCharge = constant(-1);\n  let forceLinkDistance = constant(100);\n  let forceLinkStrength = constant(0.1);\n  let offset = [0, 0];\n  let nodes = [];\n  let nodesMap = {};\n  let links = [];\n  let centerX = 100;\n  let centerY = 100;\n  let foci = {\n    none: {\n      x: 0,\n      y: 0\n    }\n  };\n  let templateNodes = [];\n  let templateForce;\n  let template = 'force';\n  let enableGrouping = true;\n  let strength = 0.1;\n\n  function force(alpha) {\n    if (!enableGrouping) {\n      return force;\n    }\n\n    templateForce.tick();\n    getFocisFromTemplate();\n\n    for (let i = 0, n = nodes.length, node, k = alpha * strength; i < n; ++i) {\n      node = nodes[i];\n      node.vx += (foci[groupBy(node)].x - node.x) * k;\n      node.vy += (foci[groupBy(node)].y - node.y) * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    initializeWithForce();\n  }\n\n  function initializeWithForce() {\n    if (!nodes || !nodes.length) {\n      return;\n    }\n\n    if (groupBy(nodes[0]) === undefined) {\n      throw Error(\"Couldnt find the grouping attribute for the nodes. Make sure to set it up with forceInABox.groupBy('clusterAttr') before calling .links()\");\n    } // checkLinksAsObjects();\n\n\n    const net = getGroupsGraph();\n    templateForce = d3Force.forceSimulation(net.nodes).force('x', d3Force.forceX(centerX).strength(0.1)).force('y', d3Force.forceY(centerY).strength(0.1)).force('collide', d3Force.forceCollide(d => d.r).iterations(4)).force('charge', d3Force.forceManyBody().strength(forceCharge)).force('links', d3Force.forceLink(net.nodes.length ? net.links : []).distance(forceLinkDistance).strength(forceLinkStrength));\n    templateNodes = templateForce.nodes();\n    getFocisFromTemplate();\n  }\n\n  function getGroupsGraph() {\n    const gnodes = [];\n    const glinks = [];\n    const dNodes = {};\n    let clustersList = [];\n    let clustersCounts = {};\n    let clustersLinks = [];\n    clustersCounts = computeClustersNodeCounts(nodes);\n    clustersLinks = computeClustersLinkCounts(links);\n    clustersList = Object.keys(clustersCounts);\n    clustersList.forEach((key, index) => {\n      const val = clustersCounts[key]; // Uses approx meta-node size\n\n      gnodes.push({\n        id: key,\n        size: val.count,\n        r: Math.sqrt(val.sumforceNodeSize / Math.PI)\n      });\n      dNodes[key] = index;\n    });\n    clustersLinks.forEach(l => {\n      const sourceTerminal = getEdgeTerminal(l, 'source');\n      const targetTerminal = getEdgeTerminal(l, 'target');\n      const source = dNodes[sourceTerminal];\n      const target = dNodes[targetTerminal];\n\n      if (source !== undefined && target !== undefined) {\n        glinks.push({\n          source,\n          target,\n          count: l.count\n        });\n      }\n    });\n    return {\n      nodes: gnodes,\n      links: glinks\n    };\n  }\n\n  function computeClustersNodeCounts(nodes) {\n    const clustersCounts = {};\n    nodes.forEach(d => {\n      const key = groupBy(d);\n\n      if (!clustersCounts[key]) {\n        clustersCounts[key] = {\n          count: 0,\n          sumforceNodeSize: 0\n        };\n      }\n    });\n    nodes.forEach(d => {\n      const key = groupBy(d);\n      const nodeSize = forceNodeSize(d);\n      const tmpCount = clustersCounts[key];\n      tmpCount.count = tmpCount.count + 1;\n      tmpCount.sumforceNodeSize = tmpCount.sumforceNodeSize + Math.PI * (nodeSize * nodeSize) * 1.3;\n      clustersCounts[key] = tmpCount;\n    });\n    return clustersCounts;\n  }\n\n  function computeClustersLinkCounts(links) {\n    const dClusterLinks = {};\n    const clusterLinks = [];\n    links.forEach(l => {\n      const key = getLinkKey(l);\n      let count = 0;\n\n      if (dClusterLinks[key] !== undefined) {\n        count = dClusterLinks[key];\n      }\n\n      count += 1;\n      dClusterLinks[key] = count;\n    }); // @ts-ignore\n\n    const entries = Object.entries(dClusterLinks);\n    entries.forEach(_ref => {\n      let [key, count] = _ref;\n      const source = key.split('~')[0];\n      const target = key.split('~')[1];\n\n      if (source !== undefined && target !== undefined) {\n        clusterLinks.push({\n          source,\n          target,\n          count\n        });\n      }\n    });\n    return clusterLinks;\n  }\n\n  function getFocisFromTemplate() {\n    foci = {\n      none: {\n        x: 0,\n        y: 0\n      }\n    };\n    templateNodes.forEach(d => {\n      foci[d.id] = {\n        x: d.x - offset[0],\n        y: d.y - offset[1]\n      };\n    });\n    return foci;\n  }\n\n  function getLinkKey(l) {\n    const source = getEdgeTerminal(l, 'source');\n    const target = getEdgeTerminal(l, 'target');\n    const sourceID = groupBy(nodesMap[source]);\n    const targetID = groupBy(nodesMap[target]);\n    return sourceID <= targetID ? `${sourceID}~${targetID}` : `${targetID}~${sourceID}`;\n  }\n\n  function genNodesMap(nodes) {\n    nodesMap = {};\n    nodes.forEach(node => {\n      nodesMap[node.id] = node;\n    });\n  }\n\n  function setTemplate(x) {\n    if (!arguments.length) return template;\n    template = x;\n    initialize();\n    return force;\n  }\n\n  function setGroupBy(x) {\n    if (!arguments.length) return groupBy;\n\n    if (typeof x === 'string') {\n      groupBy = d => {\n        return d[x];\n      };\n\n      return force;\n    }\n\n    groupBy = x;\n    return force;\n  }\n\n  function setEnableGrouping(x) {\n    if (!arguments.length) return enableGrouping;\n    enableGrouping = x;\n    return force;\n  }\n\n  function setStrength(x) {\n    if (!arguments.length) return strength;\n    strength = x;\n    return force;\n  }\n\n  function setCenterX(_) {\n    if (arguments.length) {\n      centerX = _;\n      return force;\n    }\n\n    return centerX;\n  }\n\n  function setCenterY(_) {\n    if (arguments.length) {\n      centerY = _;\n      return force;\n    }\n\n    return centerY;\n  }\n\n  function setNodes(_) {\n    if (arguments.length) {\n      genNodesMap(_ || []);\n      nodes = _ || [];\n      return force;\n    }\n\n    return nodes;\n  }\n\n  function setLinks(_) {\n    if (arguments.length) {\n      links = _ || [];\n      initialize();\n      return force;\n    }\n\n    return links;\n  }\n\n  function setForceNodeSize(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceNodeSize = _;\n      } else {\n        forceNodeSize = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceNodeSize;\n  }\n\n  function setForceCharge(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceCharge = _;\n      } else {\n        forceCharge = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceCharge;\n  }\n\n  function setForceLinkDistance(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkDistance = _;\n      } else {\n        forceLinkDistance = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceLinkDistance;\n  }\n\n  function setForceLinkStrength(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkStrength = _;\n      } else {\n        forceLinkStrength = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceLinkStrength;\n  }\n\n  function setOffset(_) {\n    if (arguments.length) {\n      offset = _;\n      return force;\n    }\n\n    return offset;\n  }\n\n  force.initialize = _ => {\n    nodes = _;\n    initialize();\n  };\n\n  force.template = setTemplate;\n  force.groupBy = setGroupBy;\n  force.enableGrouping = setEnableGrouping;\n  force.strength = setStrength;\n  force.centerX = setCenterX;\n  force.centerY = setCenterY;\n  force.nodes = setNodes;\n  force.links = setLinks;\n  force.forceNodeSize = setForceNodeSize; // Legacy support\n\n  force.nodeSize = force.forceNodeSize;\n  force.forceCharge = setForceCharge;\n  force.forceLinkDistance = setForceLinkDistance;\n  force.forceLinkStrength = setForceLinkStrength;\n  force.offset = setOffset;\n  force.getFocis = getFocisFromTemplate;\n  return force;\n}","map":null,"metadata":{},"sourceType":"module"}