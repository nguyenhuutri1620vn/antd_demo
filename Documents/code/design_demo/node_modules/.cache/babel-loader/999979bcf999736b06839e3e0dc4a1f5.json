{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { gl } from '@antv/g-webgpu-core';\nimport { colorSpaceMap, dataTypeMap, filterMap, formatMap, mipmapMap, wrapModeMap } from './constants';\n/**\n * adaptor for regl.Buffer\n * @see https://github.com/regl-project/regl/blob/gh-pages/API.md#buffers\n */\n\nvar ReglTexture2D = /*#__PURE__*/function () {\n  function ReglTexture2D(reGl, options) {\n    _classCallCheck(this, ReglTexture2D);\n\n    this.texture = void 0;\n    this.width = void 0;\n    this.height = void 0;\n    var data = options.data,\n        _options$type = options.type,\n        type = _options$type === void 0 ? gl.UNSIGNED_BYTE : _options$type,\n        width = options.width,\n        height = options.height,\n        _options$flipY = options.flipY,\n        flipY = _options$flipY === void 0 ? false : _options$flipY,\n        _options$format = options.format,\n        format = _options$format === void 0 ? gl.RGBA : _options$format,\n        _options$mipmap = options.mipmap,\n        mipmap = _options$mipmap === void 0 ? false : _options$mipmap,\n        _options$wrapS = options.wrapS,\n        wrapS = _options$wrapS === void 0 ? gl.CLAMP_TO_EDGE : _options$wrapS,\n        _options$wrapT = options.wrapT,\n        wrapT = _options$wrapT === void 0 ? gl.CLAMP_TO_EDGE : _options$wrapT,\n        _options$aniso = options.aniso,\n        aniso = _options$aniso === void 0 ? 0 : _options$aniso,\n        _options$alignment = options.alignment,\n        alignment = _options$alignment === void 0 ? 1 : _options$alignment,\n        _options$premultiplyA = options.premultiplyAlpha,\n        premultiplyAlpha = _options$premultiplyA === void 0 ? false : _options$premultiplyA,\n        _options$mag = options.mag,\n        mag = _options$mag === void 0 ? gl.NEAREST : _options$mag,\n        _options$min = options.min,\n        min = _options$min === void 0 ? gl.NEAREST : _options$min,\n        _options$colorSpace = options.colorSpace,\n        colorSpace = _options$colorSpace === void 0 ? gl.BROWSER_DEFAULT_WEBGL : _options$colorSpace;\n    this.width = width;\n    this.height = height;\n    var textureOptions = {\n      width: width,\n      height: height,\n      // @ts-ignore\n      type: dataTypeMap[type],\n      format: formatMap[format],\n      wrapS: wrapModeMap[wrapS],\n      wrapT: wrapModeMap[wrapT],\n      // @ts-ignore\n      mag: filterMap[mag],\n      min: filterMap[min],\n      alignment: alignment,\n      flipY: flipY,\n      colorSpace: colorSpaceMap[colorSpace],\n      premultiplyAlpha: premultiplyAlpha,\n      aniso: aniso\n    };\n\n    if (data) {\n      textureOptions.data = data;\n    }\n\n    if (typeof mipmap === 'number') {\n      textureOptions.mipmap = mipmapMap[mipmap];\n    } else if (typeof mipmap === 'boolean') {\n      textureOptions.mipmap = mipmap;\n    }\n\n    this.texture = reGl.texture(textureOptions);\n  }\n\n  _createClass(ReglTexture2D, [{\n    key: \"get\",\n    value: function get() {\n      return this.texture;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      // @ts-ignore\n      this.texture._texture.bind();\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(_ref) {\n      var width = _ref.width,\n          height = _ref.height;\n      this.texture.resize(width, height);\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.texture.destroy();\n    }\n  }]);\n\n  return ReglTexture2D;\n}();\n\nexport { ReglTexture2D as default };","map":null,"metadata":{},"sourceType":"module"}