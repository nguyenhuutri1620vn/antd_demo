{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray, isNil, mix } from '@antv/util';\nimport { formatPadding } from '../util/base';\nimport Global from '../global';\nimport Shape from './shape';\nimport { shapeBase } from './shapeBase';\nvar singleNode = {\n  itemType: 'node',\n  // 单个图形的类型\n  shapeType: 'single-node',\n\n  /**\n   * 文本相对图形的位置，默认以中心点\n   * 位置包括： top, bottom, left, right, center\n   * @type {String}\n   */\n  labelPosition: 'center',\n\n  /**\n   * 文本相对偏移，当 labelPosition 不为 center 时有效\n   * @type {Number}\n   */\n  offset: Global.nodeLabel.offset,\n\n  /**\n   * 获取节点宽高\n   * @internal 返回节点的大小，以 [width, height] 的方式维护\n   * @param  {Object} cfg 节点的配置项\n   * @return {Array} 宽高\n   */\n  getSize: function getSize(cfg) {\n    var _a;\n\n    var size = ((_a = this.mergeStyle) === null || _a === void 0 ? void 0 : _a.size) || cfg.size || this.getOptions({}).size || Global.defaultNode.size; // Global.defaultNode.size; //  \n    // size 是数组，但长度为1，则补长度为2\n\n    if (isArray(size) && size.length === 1) {\n      size = [size[0], size[0]];\n    } // size 为数字，则转换为数组\n\n\n    if (!isArray(size)) {\n      size = [size, size];\n    }\n\n    return size;\n  },\n  // 私有方法，不希望扩展的节点复写这个方法\n  getLabelStyleByPosition: function getLabelStyleByPosition(cfg, labelCfg) {\n    var labelPosition = labelCfg.position || this.labelPosition; // 默认的位置（最可能的情形），所以放在最上面\n\n    if (labelPosition === 'center') {\n      return {\n        x: 0,\n        y: 0,\n        text: cfg.label\n      };\n    }\n\n    var offset = labelCfg.offset;\n\n    if (isNil(offset)) {\n      // 考虑 offset = 0 的场景，不用用 labelCfg.offset || Global.nodeLabel.offset\n      offset = this.offset; // 不居中时的偏移量\n    }\n\n    var size = this.getSize(cfg);\n    var style;\n\n    switch (labelPosition) {\n      case 'top':\n        style = {\n          x: 0,\n          y: -size[1] / 2 - offset,\n          textBaseline: 'bottom' // 文本在图形的上面\n\n        };\n        break;\n\n      case 'bottom':\n        style = {\n          x: 0,\n          y: size[1] / 2 + offset,\n          textBaseline: 'top'\n        };\n        break;\n\n      case 'left':\n        style = {\n          x: -size[0] / 2 - offset,\n          y: 0,\n          textAlign: 'right'\n        };\n        break;\n\n      default:\n        style = {\n          x: size[0] / 2 + offset,\n          y: 0,\n          textAlign: 'left'\n        };\n        break;\n    }\n\n    style.text = cfg.label;\n    return style;\n  },\n  getLabelBgStyleByPosition: function getLabelBgStyleByPosition(label, labelCfg) {\n    var _a;\n\n    if (!label) return {};\n    var backgroundStyle = (_a = labelCfg.style) === null || _a === void 0 ? void 0 : _a.background;\n    if (!backgroundStyle) return {};\n    var bbox = label.getBBox();\n    var padding = formatPadding(backgroundStyle.padding);\n    var backgroundWidth = bbox.width + padding[1] + padding[3];\n    var backgroundHeight = bbox.height + padding[0] + padding[2];\n    return __assign(__assign({\n      x: bbox.minX - padding[3],\n      y: bbox.minY - padding[0]\n    }, backgroundStyle), {\n      width: backgroundWidth,\n      height: backgroundHeight\n    });\n  },\n  drawShape: function drawShape(cfg, group) {\n    var shapeType = this.shapeType; // || this.type，都已经加了 shapeType\n\n    var style = this.getShapeStyle(cfg);\n    var shape = group.addShape(shapeType, {\n      attrs: style,\n      draggable: true,\n      name: 'node-shape'\n    });\n    group['shapeMap']['node-shape'] = shape;\n    return shape;\n  },\n\n  /**\n   * 更新linkPoints\n   * @param {Object} cfg 节点数据配置项\n   * @param {Group} group Item所在的group\n   */\n  updateLinkPoints: function updateLinkPoints(cfg, group) {\n    var defaultLinkPoints = (this.mergeStyle || this.getOptions(cfg)).linkPoints;\n    var markLeft = group['shapeMap']['link-point-left'] || group.find(function (element) {\n      return element.get('className') === 'link-point-left';\n    });\n    var markRight = group['shapeMap']['link-point-right'] || group.find(function (element) {\n      return element.get('className') === 'link-point-right';\n    });\n    var markTop = group['shapeMap']['link-point-top'] || group.find(function (element) {\n      return element.get('className') === 'link-point-top';\n    });\n    var markBottom = group['shapeMap']['link-point-bottom'] || group.find(function (element) {\n      return element.get('className') === 'link-point-bottom';\n    });\n    var currentLinkPoints;\n\n    if (markLeft) {\n      currentLinkPoints = markLeft.attr();\n    }\n\n    if (markRight && !currentLinkPoints) {\n      currentLinkPoints = markRight.attr();\n    }\n\n    if (markTop && !currentLinkPoints) {\n      currentLinkPoints = markTop.attr();\n    }\n\n    if (markBottom && !currentLinkPoints) {\n      currentLinkPoints = markBottom.attr();\n    }\n\n    if (!currentLinkPoints) currentLinkPoints = defaultLinkPoints;\n    var linkPoints = mix({}, currentLinkPoints, cfg.linkPoints);\n    var markFill = linkPoints.fill,\n        markStroke = linkPoints.stroke,\n        borderWidth = linkPoints.lineWidth;\n    var markSize = linkPoints.size / 2;\n    if (!markSize) markSize = linkPoints.r;\n\n    var _a = cfg.linkPoints ? cfg.linkPoints : {\n      left: undefined,\n      right: undefined,\n      top: undefined,\n      bottom: undefined\n    },\n        left = _a.left,\n        right = _a.right,\n        top = _a.top,\n        bottom = _a.bottom;\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n    var styles = {\n      r: markSize,\n      fill: markFill,\n      stroke: markStroke,\n      lineWidth: borderWidth\n    };\n\n    if (markLeft) {\n      if (!left && left !== undefined) {\n        markLeft.remove();\n        delete group['shapeMap']['link-point-left'];\n      } else {\n        markLeft.attr(__assign(__assign({}, styles), {\n          x: -width / 2,\n          y: 0\n        }));\n      }\n    } else if (left) {\n      var name_1 = 'link-point-left';\n      group['shapeMap'][name_1] = group.addShape('circle', {\n        attrs: __assign(__assign({}, styles), {\n          x: -width / 2,\n          y: 0\n        }),\n        className: name_1,\n        name: name_1,\n        isAnchorPoint: true\n      });\n    }\n\n    if (markRight) {\n      if (!right && right !== undefined) {\n        markRight.remove();\n        delete group['shapeMap']['link-point-right'];\n      }\n\n      markRight.attr(__assign(__assign({}, styles), {\n        x: width / 2,\n        y: 0\n      }));\n    } else if (right) {\n      var name_2 = 'link-point-right';\n      group['shapeMap'][name_2] = group.addShape('circle', {\n        attrs: __assign(__assign({}, styles), {\n          x: width / 2,\n          y: 0\n        }),\n        className: name_2,\n        name: name_2,\n        isAnchorPoint: true\n      });\n    }\n\n    if (markTop) {\n      if (!top && top !== undefined) {\n        markTop.remove();\n        delete group['shapeMap']['link-point-top'];\n      }\n\n      markTop.attr(__assign(__assign({}, styles), {\n        x: 0,\n        y: -height / 2\n      }));\n    } else if (top) {\n      var name_3 = 'link-point-top';\n      group['shapeMap'][name_3] = group.addShape('circle', {\n        attrs: __assign(__assign({}, styles), {\n          x: 0,\n          y: -height / 2\n        }),\n        className: name_3,\n        name: name_3,\n        isAnchorPoint: true\n      });\n    }\n\n    if (markBottom) {\n      if (!bottom && bottom !== undefined) {\n        markBottom.remove();\n        delete group['shapeMap']['link-point-bottom'];\n      } else {\n        markBottom.attr(__assign(__assign({}, styles), {\n          x: 0,\n          y: height / 2\n        }));\n      }\n    } else if (bottom) {\n      var name_4 = 'link-point-bottom';\n      group['shapeMap'][name_4] = group.addShape('circle', {\n        attrs: __assign(__assign({}, styles), {\n          x: 0,\n          y: height / 2\n        }),\n        className: name_4,\n        name: name_4,\n        isAnchorPoint: true\n      });\n    }\n  },\n  updateShape: function updateShape(cfg, item, keyShapeStyle, hasIcon, updateType) {\n    var keyShape = item.get('keyShape');\n    keyShape.attr(__assign({}, keyShapeStyle));\n\n    if (!undefined || (updateType === null || updateType === void 0 ? void 0 : updateType.includes('label'))) {\n      this.updateLabel(cfg, item, updateType);\n    }\n\n    if (hasIcon) {\n      this.updateIcon(cfg, item);\n    }\n  },\n  updateIcon: function updateIcon(cfg, item) {\n    var _this = this;\n\n    var group = item.getContainer();\n    var icon = (this.mergeStyle || this.getOptions(cfg)).icon;\n\n    var _a = cfg.icon ? cfg.icon : {\n      show: undefined,\n      text: undefined\n    },\n        show = _a.show,\n        text = _a.text;\n\n    var iconShape = group['shapeMap'][\"\".concat(this.type, \"-icon\")] || group.find(function (ele) {\n      return ele.get('name') === \"\".concat(_this.type, \"-icon\");\n    });\n\n    if (iconShape) {\n      // 若原先存在 icon\n      if (show || show === undefined) {\n        // 若传入 show: true, 或没有设置，则更新原有的 icon 样式\n        var iconConfig = mix({}, iconShape.attr(), icon);\n        var _b = iconConfig.width,\n            w = _b === void 0 ? 20 : _b,\n            _c = iconConfig.height,\n            h = _c === void 0 ? 20 : _c;\n\n        if (iconConfig.fontFamily === 'iconfont' || iconConfig.hasOwnProperty('text')) {\n          w = 0;\n          h = 0;\n        }\n\n        iconShape.attr(__assign(__assign({}, iconConfig), {\n          x: -w / 2,\n          y: -h / 2\n        }));\n      } else {\n        // 若传入了 show: false 则删除原先的 icon\n        iconShape.remove();\n      }\n    } else if (show) {\n      // 如果原先不存在 icon，但传入了 show: true，则新增 icon\n      var name_5 = \"\".concat(this.type, \"-icon\");\n\n      if (text) {\n        group['shapeMap'][name_5] = group.addShape('text', {\n          attrs: __assign({\n            x: 0,\n            y: 0,\n            fontSize: 12,\n            fill: '#000',\n            stroke: '#000',\n            textBaseline: 'middle',\n            textAlign: 'center'\n          }, icon),\n          className: name_5,\n          name: name_5\n        });\n      } else {\n        var w = icon.width,\n            h = icon.height;\n        group['shapeMap'][name_5] = group.addShape('image', {\n          attrs: __assign(__assign({}, icon), {\n            x: -w / 2,\n            y: -h / 2\n          }),\n          className: name_5,\n          name: name_5\n        });\n      } // to ensure the label is on the top of all the shapes\n\n\n      var labelShape = group['shapeMap']['node-label'] || group.find(function (ele) {\n        return ele.get('name') === 'node-label';\n      });\n\n      if (labelShape) {\n        labelShape.toFront();\n      }\n    }\n  }\n};\n\nvar singleNodeDef = __assign(__assign({}, shapeBase), singleNode);\n\nShape.registerNode('single-node', singleNodeDef);","map":null,"metadata":{},"sourceType":"module"}