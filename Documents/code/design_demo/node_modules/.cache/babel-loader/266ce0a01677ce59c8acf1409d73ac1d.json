{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { XFlowNodeCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsCenterNode;\n\n(function (NsCenterNode) {\n  NsCenterNode.command = XFlowNodeCommands.CENTER_NODE;\n  NsCenterNode.hookKey = 'centerNode';\n})(NsCenterNode || (NsCenterNode = {}));\n\nlet CenterNodeCommand =\n/** 节点在画布居中命令 */\nclass CenterNodeCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.centerNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const {\n          nodeConfig\n        } = handlerArgs;\n        const x6Node = x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.id);\n        x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.centerCell(x6Node);\n        return {\n          x6Node\n        };\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], CenterNodeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], CenterNodeCommand.prototype, \"init\", null);\n\nCenterNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsCenterNode.command.id\n  }\n})\n/** 节点在画布居中命令 */\n], CenterNodeCommand);\nexport { CenterNodeCommand };","map":null,"metadata":{},"sourceType":"module"}