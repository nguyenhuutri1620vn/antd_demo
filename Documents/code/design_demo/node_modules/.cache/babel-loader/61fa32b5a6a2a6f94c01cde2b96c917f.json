{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Dom, Vector } from '../../util';\nimport { View } from '../../view/view';\nimport { Point, Angle } from '../../geometry';\nexport class Handle {\n  get handleClassName() {\n    return ClassNames.handle;\n  }\n\n  get pie() {\n    return Object.assign(Object.assign({}, Handle.defaultPieOptions), this.handleOptions.pie);\n  }\n\n  initHandles() {\n    this.handles = [];\n\n    if (this.handleOptions.handles) {\n      this.handleOptions.handles.forEach(handle => this.addHandle(handle));\n    }\n\n    if (this.handleOptions.type === 'pie') {\n      if (this.pie.toggles) {\n        const className = ClassNames.pieToggle;\n        this.$pieToggles = {};\n        this.pie.toggles.forEach(item => {\n          const $elem = this.$('<div/>');\n          this.applyAttrs($elem, item.attrs);\n          $elem.addClass(className).addClass(`${className}-pos-${item.position || 'e'}`).attr('data-name', item.name).appendTo(this.container);\n          this.$pieToggles[item.name] = $elem;\n        });\n      }\n\n      this.setPieIcons();\n    }\n\n    if (this.$handleContainer) {\n      const type = this.handleOptions.type || 'surround';\n      this.$handleContainer.addClass(ClassNames.wrap).addClass(ClassNames.animate).addClass(`${ClassNames.handle}-${type}`);\n    }\n\n    this.delegateEvents({\n      [`mousedown .${ClassNames.handle}`]: 'onHandleMouseDown',\n      [`touchstart .${ClassNames.handle}`]: 'onHandleMouseDown',\n      [`mousedown .${ClassNames.pieToggle}`]: 'onPieToggleMouseDown',\n      [`touchstart .${ClassNames.pieToggle}`]: 'onPieToggleMouseDown'\n    });\n  }\n\n  onHandleMouseDown(evt) {\n    const action = this.$(evt.currentTarget).closest(`.${ClassNames.handle}`).attr('data-action');\n\n    if (action) {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.setEventData(evt, {\n        action,\n        clientX: evt.clientX,\n        clientY: evt.clientY,\n        startX: evt.clientX,\n        startY: evt.clientY\n      });\n\n      if (evt.type === 'mousedown' && evt.button === 2) {\n        this.triggerHandleAction(action, 'contextmenu', evt);\n      } else {\n        this.triggerHandleAction(action, 'mousedown', evt);\n        this.delegateDocumentEvents({\n          mousemove: 'onHandleMouseMove',\n          touchmove: 'onHandleMouseMove',\n          mouseup: 'onHandleMouseUp',\n          touchend: 'onHandleMouseUp',\n          touchcancel: 'onHandleMouseUp'\n        }, evt.data);\n      }\n    }\n  }\n\n  onHandleMouseMove(evt) {\n    const data = this.getEventData(evt);\n    const action = data.action;\n\n    if (action) {\n      this.triggerHandleAction(action, 'mousemove', evt);\n    }\n  }\n\n  onHandleMouseUp(evt) {\n    const data = this.getEventData(evt);\n    const action = data.action;\n\n    if (action) {\n      this.triggerHandleAction(action, 'mouseup', evt);\n      this.undelegateDocumentEvents();\n    }\n  }\n\n  triggerHandleAction(action, eventName, evt, args) {\n    evt.preventDefault();\n    evt.stopPropagation();\n    const e = this.normalizeEvent(evt);\n    const data = this.getEventData(e);\n    const local = this.graph.snapToGrid(e.clientX, e.clientY);\n    const origin = this.graph.snapToGrid(data.clientX, data.clientY);\n    const dx = local.x - origin.x;\n    const dy = local.y - origin.y;\n    this.trigger(`action:${action}:${eventName}`, Object.assign({\n      e,\n      dx,\n      dy,\n      x: local.x,\n      y: local.y,\n      offsetX: evt.clientX - data.startX,\n      offsetY: evt.clientY - data.startY\n    }, args));\n    data.clientX = evt.clientX;\n    data.clientY = evt.clientY;\n  }\n\n  onPieToggleMouseDown(evt) {\n    evt.stopPropagation();\n    const name = this.$(evt.target).closest(`.${ClassNames.pieToggle}`).attr('data-name');\n\n    if (!this.isOpen(name)) {\n      if (this.isOpen()) {\n        this.toggleState();\n      }\n    }\n\n    this.toggleState(name);\n  }\n\n  setPieIcons() {\n    if (this.handleOptions.type === 'pie') {\n      this.$handleContainer.find(`.${ClassNames.handle}`).each((_, elem) => {\n        const $elem = this.$(elem);\n        const action = $elem.attr('data-action');\n        const className = ClassNames.pieSlice;\n        const handle = this.getHandle(action);\n\n        if (!handle || !handle.icon) {\n          const contect = window.getComputedStyle(elem, ':before').getPropertyValue('content');\n\n          if (contect && contect !== 'none') {\n            const $icons = $elem.find(`.${className}-txt`);\n\n            if ($icons.length) {\n              Vector.create($icons[0]).text(contect.replace(/['\"]/g, ''));\n            }\n          }\n\n          const bgImg = $elem.css('background-image');\n\n          if (bgImg) {\n            const matches = bgImg.match(/url\\(['\"]?([^'\"]+)['\"]?\\)/);\n\n            if (matches) {\n              const href = matches[1];\n              const $imgs = $elem.find(`.${className}-img`);\n\n              if ($imgs.length > 0) {\n                Vector.create($imgs[0]).attr('xlink:href', href);\n              }\n            }\n          }\n        }\n      });\n    }\n  }\n\n  getHandleIdx(name) {\n    return this.handles.findIndex(item => item.name === name);\n  }\n\n  hasHandle(name) {\n    return this.getHandleIdx(name) >= 0;\n  }\n\n  getHandle(name) {\n    return this.handles.find(item => item.name === name);\n  }\n\n  renderHandle(handle) {\n    const $handle = this.$('<div/>').addClass(`${ClassNames.handle} ${ClassNames.handle}-${handle.name}`).attr('data-action', handle.name).prop('draggable', false);\n\n    if (this.handleOptions.type === 'pie') {\n      const index = this.getHandleIdx(handle.name);\n      const pie = this.pie;\n      const outerRadius = pie.outerRadius;\n      const innerRadius = pie.innerRadius;\n      const offset = (outerRadius + innerRadius) / 2;\n      const ratio = new Point(outerRadius, outerRadius);\n      const delta = Angle.toRad(pie.sliceAngle);\n      const curRad = index * delta + Angle.toRad(pie.startAngle);\n      const nextRad = curRad + delta;\n      const pathData = Dom.createSlicePathData(innerRadius, outerRadius, curRad, nextRad);\n      const vSvg = Vector.create('svg').addClass(`${ClassNames.pieSlice}-svg`);\n      const vPath = Vector.create('path').addClass(ClassNames.pieSlice).attr('d', pathData).translate(outerRadius, outerRadius);\n      const pos = Point.fromPolar(offset, -curRad - delta / 2, ratio).toJSON();\n      const iconSize = pie.iconSize;\n      const vImg = Vector.create('image').attr(pos).addClass(`${ClassNames.pieSlice}-img`);\n      pos.y = pos.y + iconSize - 2;\n      const vText = Vector.create('text', {\n        'font-size': iconSize\n      }).attr(pos).addClass(`${ClassNames.pieSlice}-txt`);\n      vImg.attr({\n        width: iconSize,\n        height: iconSize\n      });\n      vImg.translate(-iconSize / 2, -iconSize / 2);\n      vText.translate(-iconSize / 2, -iconSize / 2);\n      vSvg.append([vPath, vImg, vText]);\n      $handle.append(vSvg.node);\n    } else {\n      $handle.addClass(`${ClassNames.handle}-pos-${handle.position}`);\n\n      if (handle.content) {\n        if (typeof handle.content === 'string') {\n          $handle.html(handle.content);\n        } else {\n          $handle.append(handle.content);\n        }\n      }\n    }\n\n    this.updateHandleIcon($handle, handle.icon);\n    this.applyAttrs($handle, handle.attrs);\n    return $handle;\n  }\n\n  addHandle(handle) {\n    if (!this.hasHandle(handle.name)) {\n      this.handles.push(handle);\n      const events = handle.events;\n\n      if (events) {\n        Object.keys(events).forEach(action => {\n          const callback = events[action];\n          const name = `action:${handle.name}:${action}`;\n\n          if (typeof callback === 'string') {\n            this.on(name, this[callback], this);\n          } else {\n            this.on(name, callback);\n          }\n        });\n      }\n\n      if (this.$handleContainer) {\n        this.$handleContainer.append(this.renderHandle(handle));\n      }\n    }\n\n    return this;\n  }\n\n  addHandles(handles) {\n    handles.forEach(handle => this.addHandle(handle));\n    return this;\n  }\n\n  removeHandles() {\n    while (this.handles.length) {\n      this.removeHandle(this.handles[0].name);\n    }\n\n    return this;\n  }\n\n  removeHandle(name) {\n    const index = this.getHandleIdx(name);\n    const handle = this.handles[index];\n\n    if (handle) {\n      if (handle.events) {\n        Object.keys(handle.events).forEach(event => {\n          this.off(`action:${name}:${event}`);\n        });\n      }\n\n      this.getHandleElem(name).remove();\n      this.handles.splice(index, 1);\n    }\n\n    return this;\n  }\n\n  changeHandle(name, newHandle) {\n    const handle = this.getHandle(name);\n\n    if (handle) {\n      this.removeHandle(name);\n      this.addHandle(Object.assign(Object.assign({}, handle), newHandle));\n    }\n\n    return this;\n  }\n\n  toggleHandle(name, selected) {\n    const handle = this.getHandle(name);\n\n    if (handle) {\n      const $handle = this.getHandleElem(name);\n      const className = `${ClassNames.handle}-selected`;\n\n      if (selected === undefined) {\n        selected = !$handle.hasClass(className); // eslint-disable-line\n      }\n\n      $handle.toggleClass(className, selected);\n      const icon = selected ? handle.iconSelected : handle.icon;\n\n      if (icon) {\n        this.updateHandleIcon($handle, icon);\n      }\n    }\n\n    return this;\n  }\n\n  selectHandle(name) {\n    return this.toggleHandle(name, true);\n  }\n\n  deselectHandle(name) {\n    return this.toggleHandle(name, false);\n  }\n\n  deselectAllHandles() {\n    this.handles.forEach(handle => this.deselectHandle(handle.name));\n    return this;\n  }\n\n  getHandleElem(name) {\n    return this.$handleContainer.find(`.${ClassNames.handle}-${name}`);\n  }\n\n  updateHandleIcon($handle, icon) {\n    if (this.handleOptions.type === 'pie') {\n      const $icons = $handle.find(`.${ClassNames.pieSliceImg}`);\n      this.$($icons[0]).attr('xlink:href', icon || '');\n    } else {\n      $handle.css('background-image', icon ? `url(${icon})` : '');\n    }\n  }\n\n  isRendered() {\n    return this.$handleContainer != null;\n  }\n\n  isOpen(name) {\n    if (this.isRendered()) {\n      return name ? this.$pieToggles[name].hasClass(ClassNames.pieToggleOpened) : this.$handleContainer.hasClass(`${ClassNames.pieOpended}`);\n    }\n\n    return false;\n  }\n\n  toggleState(name) {\n    if (this.isRendered()) {\n      const $handleContainer = this.$handleContainer;\n      Object.keys(this.$pieToggles).forEach(key => {\n        const $toggle = this.$pieToggles[key];\n        $toggle.removeClass(ClassNames.pieToggleOpened);\n      });\n\n      if (this.isOpen()) {\n        this.trigger('pie:close', {\n          name\n        });\n        $handleContainer.removeClass(ClassNames.pieOpended);\n      } else {\n        this.trigger('pie:open', {\n          name\n        });\n\n        if (name) {\n          const toggles = this.pie.toggles;\n          const toggle = toggles && toggles.find(i => i.name === name);\n\n          if (toggle) {\n            $handleContainer.attr({\n              'data-pie-toggle-name': toggle.name,\n              'data-pie-toggle-position': toggle.position\n            });\n          }\n\n          this.$pieToggles[name].addClass(ClassNames.pieToggleOpened);\n        }\n\n        $handleContainer.addClass(ClassNames.pieOpended);\n      }\n    }\n  }\n\n  applyAttrs(elem, attrs) {\n    if (attrs) {\n      const $elem = View.$(elem);\n      Object.keys(attrs).forEach(selector => {\n        const $element = $elem.find(selector).addBack().filter(selector);\n\n        const _a = attrs[selector],\n              {\n          class: cls\n        } = _a,\n              attr = __rest(_a, [\"class\"]);\n\n        if (cls) {\n          $element.addClass(cls);\n        }\n\n        $element.attr(attr);\n      });\n    }\n  }\n\n}\n\n(function (Handle) {\n  Handle.defaultPieOptions = {\n    innerRadius: 20,\n    outerRadius: 50,\n    sliceAngle: 45,\n    startAngle: 0,\n    iconSize: 14,\n    toggles: [{\n      name: 'default',\n      position: 'e'\n    }]\n  };\n})(Handle || (Handle = {}));\n\nvar ClassNames;\n\n(function (ClassNames) {\n  ClassNames.handle = View.prototype.prefixClassName('widget-handle');\n  ClassNames.wrap = `${ClassNames.handle}-wrap`;\n  ClassNames.animate = `${ClassNames.handle}-animate`;\n  ClassNames.pieOpended = `${ClassNames.handle}-pie-opened`;\n  ClassNames.pieToggle = `${ClassNames.handle}-pie-toggle`;\n  ClassNames.pieToggleOpened = `${ClassNames.handle}-pie-toggle-opened`;\n  ClassNames.pieSlice = `${ClassNames.handle}-pie-slice`;\n  ClassNames.pieSliceImg = `${ClassNames.handle}-pie-slice-img`;\n})(ClassNames || (ClassNames = {}));","map":null,"metadata":{},"sourceType":"module"}