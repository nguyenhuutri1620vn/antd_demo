{"ast":null,"code":"import { debounce } from './util';\nexport function createSensor(element) {\n  let sensor = null;\n  let listeners = [];\n  const trigger = debounce(() => {\n    listeners.forEach(listener => {\n      listener(element);\n    });\n  });\n\n  const create = () => {\n    const s = new ResizeObserver(trigger);\n    s.observe(element);\n    trigger();\n    return s;\n  };\n\n  const bind = listener => {\n    if (!sensor) {\n      sensor = create();\n    }\n\n    if (listeners.indexOf(listener) === -1) {\n      listeners.push(listener);\n    }\n  };\n\n  const destroy = () => {\n    if (sensor) {\n      sensor.disconnect();\n      listeners = [];\n      sensor = null;\n    }\n  };\n\n  const unbind = listener => {\n    const idx = listeners.indexOf(listener);\n\n    if (idx !== -1) {\n      listeners.splice(idx, 1);\n    } // no listener, and sensor is exist then destroy the sensor\n\n\n    if (listeners.length === 0 && sensor) {\n      destroy();\n    }\n  };\n\n  return {\n    element,\n    bind,\n    destroy,\n    unbind\n  };\n}","map":null,"metadata":{},"sourceType":"module"}