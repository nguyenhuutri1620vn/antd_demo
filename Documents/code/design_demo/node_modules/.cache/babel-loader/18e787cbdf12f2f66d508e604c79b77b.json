{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { NumberExt, Dom } from '../../util';\nimport { ToolsView } from '../../view/tool';\nimport * as Util from './util';\nexport class Boundary extends ToolsView.ToolItem {\n  onRender() {\n    Dom.addClass(this.container, this.prefixClassName('cell-tool-boundary'));\n\n    if (this.options.attrs) {\n      const _a = this.options.attrs,\n            {\n        class: className\n      } = _a,\n            attrs = __rest(_a, [\"class\"]);\n\n      Dom.attr(this.container, Dom.kebablizeAttrs(attrs));\n\n      if (className) {\n        Dom.addClass(this.container, className);\n      }\n    }\n\n    this.update();\n  }\n\n  update() {\n    const view = this.cellView;\n    const options = this.options;\n    const {\n      useCellGeometry,\n      rotate\n    } = options;\n    const padding = NumberExt.normalizeSides(options.padding);\n    let bbox = Util.getViewBBox(view, useCellGeometry).moveAndExpand({\n      x: -padding.left,\n      y: -padding.top,\n      width: padding.left + padding.right,\n      height: padding.top + padding.bottom\n    });\n    const cell = view.cell;\n\n    if (cell.isNode()) {\n      const angle = cell.getAngle();\n\n      if (angle) {\n        if (rotate) {\n          const origin = cell.getBBox().getCenter();\n          Dom.rotate(this.container, angle, origin.x, origin.y, {\n            absolute: true\n          });\n        } else {\n          bbox = bbox.bbox(angle);\n        }\n      }\n    }\n\n    Dom.attr(this.container, bbox.toJSON());\n    return this;\n  }\n\n}\n\n(function (Boundary) {\n  Boundary.config({\n    name: 'boundary',\n    tagName: 'rect',\n    padding: 10,\n    attrs: {\n      fill: 'none',\n      stroke: '#333',\n      'stroke-width': 0.5,\n      'stroke-dasharray': '5, 5',\n      'pointer-events': 'none'\n    }\n  });\n})(Boundary || (Boundary = {}));","map":null,"metadata":{},"sourceType":"module"}