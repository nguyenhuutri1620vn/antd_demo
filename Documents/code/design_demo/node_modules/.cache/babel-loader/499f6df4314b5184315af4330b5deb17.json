{"ast":null,"code":"var GraphPasteSelectionCommand_1;\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands, XFlowEdgeCommands, XFlowGroupCommands, XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { LOCAL_STORAGE_KEY } from '../../constants';\nimport { safeJson } from '../../common/safe-json';\nimport { GraphMappingHelper } from '../mapping-service';\nexport var NsGraphPasteSelection;\n\n(function (NsGraphPasteSelection) {\n  /** Command: 用于注册named factory */\n  NsGraphPasteSelection.command = XFlowGraphCommands.GRAPH_PASTE;\n  /** hookName */\n\n  NsGraphPasteSelection.hookKey = 'graphPasteSelection';\n})(NsGraphPasteSelection || (NsGraphPasteSelection = {}));\n\nfunction randomNumber(max) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nlet GraphPasteSelectionCommand = GraphPasteSelectionCommand_1 =\n/** 创建节点命令 */\nclass GraphPasteSelectionCommand {\n  constructor() {\n    this.updateNodeCopiedProps = (position, nodeConfig) => {\n      let dx = randomNumber(100);\n      let dy = randomNumber(100);\n\n      if (position) {\n        dx = nodeConfig.x - position.x + randomNumber(30);\n        dy = nodeConfig.y - position.y + randomNumber(30);\n      } // 修改坐标\n\n\n      nodeConfig.x += dx;\n      nodeConfig.y += dy; // 删除 id\n\n      nodeConfig.originId = nodeConfig.id;\n      delete nodeConfig.id; // 修改label\n\n      nodeConfig.label = `${nodeConfig.label}_copied`;\n      nodeConfig.isCollapsed = false;\n      return nodeConfig;\n    };\n    /** 执行Cmd */\n\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n\n      if (GraphPasteSelectionCommand_1.doing) {\n        return this;\n      }\n\n      GraphPasteSelectionCommand_1.doing = true;\n      const result = yield hooks.graphPasteSelection.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          commandService,\n          position\n        } = handlerArgs;\n        const jsonString = window.localStorage.getItem(LOCAL_STORAGE_KEY);\n        const plainObject = safeJson(jsonString, {\n          nodes: [],\n          edges: []\n        });\n        const {\n          nodes = [],\n          edges = []\n        } = plainObject;\n        const {\n          normalNodes,\n          groupNodes\n        } = this.mappingHelper.getNodesByType(nodes);\n        this.mappingHelper.addNodes(nodes); // 添加普通节点\n\n        yield Promise.all(normalNodes.map(nodeConfig => __awaiter(this, void 0, void 0, function* () {\n          const res = yield commandService.executeCommand(XFlowNodeCommands.ADD_NODE.id, {\n            nodeConfig: this.updateNodeCopiedProps(position, nodeConfig)\n          });\n          const context = res.contextProvider();\n          const cmdResult = context.getResult();\n          this.mappingHelper.buildNodeMapping(nodeConfig, cmdResult.nodeConfig);\n        }))); // 处理group\n\n        yield Promise.all(groupNodes.map(group => __awaiter(this, void 0, void 0, function* () {\n          const groupNodeConfig = this.mappingHelper.buildGroupRelations(group);\n          yield commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n            nodeConfig: this.updateNodeCopiedProps(position, groupNodeConfig)\n          });\n        }))); // 处理连线\n\n        yield Promise.all(edges.map(edgeConfig => {\n          const newEdge = this.mappingHelper.createEdgeBetweenNodes(edgeConfig);\n          return commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n            edgeConfig: newEdge\n          });\n        }));\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          window.localStorage.setItem(LOCAL_STORAGE_KEY, null);\n        })));\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      GraphPasteSelectionCommand_1.doing = false;\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n/** 防止多次执行 */\n\nGraphPasteSelectionCommand.doing = false;\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphPasteSelectionCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([inject(GraphMappingHelper), __metadata(\"design:type\", GraphMappingHelper)], GraphPasteSelectionCommand.prototype, \"mappingHelper\", void 0);\n\nGraphPasteSelectionCommand = GraphPasteSelectionCommand_1 = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphPasteSelection.command.id\n  }\n})\n/** 创建节点命令 */\n], GraphPasteSelectionCommand);\nexport { GraphPasteSelectionCommand };","map":null,"metadata":{},"sourceType":"module"}