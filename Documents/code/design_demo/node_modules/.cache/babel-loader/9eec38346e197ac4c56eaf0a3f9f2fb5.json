{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport DOM from '../../utils/dom';\nimport { buttonStillPressed } from './util';\n\nvar MouseHandler = function () {\n  function MouseHandler(options) {\n    _classCallCheck(this, MouseHandler);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"active\", void 0);\n\n    _defineProperty(this, \"lastPoint\", void 0);\n\n    _defineProperty(this, \"eventButton\", void 0);\n\n    _defineProperty(this, \"moved\", void 0);\n\n    _defineProperty(this, \"clickTolerance\", void 0);\n\n    this.reset();\n    this.clickTolerance = options.clickTolerance || 1;\n  }\n\n  _createClass(MouseHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      this.active = false;\n      this.moved = false;\n      delete this.lastPoint;\n      delete this.eventButton;\n    }\n  }, {\n    key: \"mousedown\",\n    value: function mousedown(e, point) {\n      if (this.lastPoint) {\n        return;\n      }\n\n      var eventButton = DOM.mouseButton(e);\n\n      if (!this.correctButton(e, eventButton)) {\n        return;\n      }\n\n      this.lastPoint = point;\n      this.eventButton = eventButton;\n    }\n  }, {\n    key: \"mousemoveWindow\",\n    value: function mousemoveWindow(e, point) {\n      var lastPoint = this.lastPoint;\n\n      if (!lastPoint) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (buttonStillPressed(e, this.eventButton)) {\n        this.reset();\n        return;\n      }\n\n      if (!this.moved && point.dist(lastPoint) < this.clickTolerance) {\n        return;\n      }\n\n      this.moved = true;\n      this.lastPoint = point;\n      return this.move(lastPoint, point);\n    }\n  }, {\n    key: \"mouseupWindow\",\n    value: function mouseupWindow(e) {\n      if (!this.lastPoint) {\n        return;\n      }\n\n      var eventButton = DOM.mouseButton(e);\n\n      if (eventButton !== this.eventButton) {\n        return;\n      }\n\n      if (this.moved) {\n        DOM.suppressClick();\n      }\n\n      this.reset();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      this.enabled = true;\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      this.reset();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }, {\n    key: \"correctButton\",\n    value: function correctButton(e, button) {\n      return false;\n    }\n  }, {\n    key: \"move\",\n    value: function move(lastPoint, point) {\n      return;\n    }\n  }]);\n\n  return MouseHandler;\n}();\n\nexport { MouseHandler as default };","map":null,"metadata":{},"sourceType":"module"}