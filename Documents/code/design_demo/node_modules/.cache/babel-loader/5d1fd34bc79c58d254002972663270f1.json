{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { getNodeReactComponent } from '../components/context';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFLOW_DEFAULT_NODE } from '../../constants';\nexport var NsAddNode;\n\n(function (NsAddNode) {\n  /** Command: 用于注册named factory */\n  NsAddNode.command = XFlowNodeCommands.ADD_NODE;\n  /** hookName */\n\n  NsAddNode.hookKey = 'addNode';\n})(NsAddNode || (NsAddNode = {}));\n\nlet AddNodeCommand =\n/** 创建节点命令 */\nclass AddNodeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.addNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          createNodeService,\n          cellFactory,\n          commandService,\n          options\n        } = handlerArgs;\n        const graph = yield ctx.getX6Graph();\n        let rawNode = handlerArgs.nodeConfig; // 通过createNodeService来获取诸如nodeId的信息，如果返回的nodeid为空则不添加到画布\n\n        if (createNodeService) {\n          const res = yield createNodeService(handlerArgs);\n\n          if (typeof res === 'boolean') {\n            return {\n              err: 'createNodeService rejected'\n            };\n          }\n\n          rawNode = res;\n        }\n\n        const nodeConfig = yield this.processNodeConfig(rawNode);\n        let x6NodeCell;\n        const eventOptions = Object.assign(Object.assign({}, options), {\n          isCommand: true\n        });\n\n        if (cellFactory) {\n          /** 使用参数中的工厂方法 */\n          const cell = yield cellFactory(nodeConfig, this);\n          x6NodeCell = graph.addNode(cell, eventOptions);\n        } else {\n          x6NodeCell = graph.addNode(nodeConfig, eventOptions);\n        }\n        /** add undo: delete node */\n\n\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          const nodeData = Object.assign({\n            id: x6NodeCell.id\n          }, x6NodeCell.getData());\n          commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n            nodeConfig: nodeData\n          });\n        })));\n        return {\n          nodeConfig: nodeConfig,\n          nodeCell: x6NodeCell\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n\n    this.processNodeConfig = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      /**\n       * 1. react shape node 逻辑\n       * 2. X6不会处理data数据, 仅透传。可以通过x6Node?.getData()方法获取这份数据\n       */\n\n      nodeConfig.data = Object.assign({}, nodeConfig);\n      /** 非 react shape */\n\n      if (nodeConfig.shape) {\n        return nodeConfig;\n      }\n      /** react shape 使用react-portal-view提高性能 */\n\n\n      if (!nodeConfig.view) {\n        const graphConfig = yield ctx.getGraphConfig();\n        nodeConfig.view = graphConfig.graphId;\n      }\n      /** 获取 react component */\n\n\n      if (!nodeConfig.component) {\n        const reactComponent = yield this.getNodeReactComponent(nodeConfig);\n        const commands = ctx.getCommands();\n        const modelService = ctx.getModelService();\n        nodeConfig.shape = 'react-shape';\n        nodeConfig.component = getNodeReactComponent(reactComponent, commands, modelService);\n      }\n\n      return nodeConfig;\n    });\n\n    this.getNodeReactComponent = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const hooks = ctx.getHooks();\n      /** 获取Graph Config中用户预设的节点渲染需要的React组件 */\n\n      const graphConfig = yield ctx.getGraphConfig();\n      /** 通过hooks获取更多的组件 */\n\n      const renderMap = yield hooks.reactNodeRender.call(graphConfig.nodeRender);\n      /** 获取renderKey，没有renderKey时使用默认Key */\n\n      const renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFLOW_DEFAULT_NODE;\n      /** 获取组件 */\n\n      const reactComponent = renderMap.get(renderKey);\n\n      if (!reactComponent) {\n        console.error('react node component is missing:', graphConfig.nodeRender, renderKey, reactComponent);\n      }\n\n      return reactComponent;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddNodeCommand.prototype, \"contextProvider\", void 0);\n\nAddNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddNode.command.id\n  }\n})\n/** 创建节点命令 */\n], AddNodeCommand);\nexport { AddNodeCommand };","map":null,"metadata":{},"sourceType":"module"}