{"ast":null,"code":"import { Line } from '../../geometry';\nimport { resolve, getPointAtEdge } from '../node-anchor/util';\nimport { getClosestPoint } from './closest';\nimport { FunctionExt } from '../../util';\n\nconst orthogonal = function (view, magnet, refPoint, options) {\n  const OFFSET = 1e6;\n  const path = view.getConnection();\n  const segmentSubdivisions = view.getConnectionSubdivisions();\n  const vLine = new Line(refPoint.clone().translate(0, OFFSET), refPoint.clone().translate(0, -OFFSET));\n  const hLine = new Line(refPoint.clone().translate(OFFSET, 0), refPoint.clone().translate(-OFFSET, 0));\n  const vIntersections = vLine.intersect(path, {\n    segmentSubdivisions\n  });\n  const hIntersections = hLine.intersect(path, {\n    segmentSubdivisions\n  });\n  const intersections = [];\n\n  if (vIntersections) {\n    intersections.push(...vIntersections);\n  }\n\n  if (hIntersections) {\n    intersections.push(...hIntersections);\n  }\n\n  if (intersections.length > 0) {\n    return refPoint.closest(intersections);\n  }\n\n  if (options.fallbackAt != null) {\n    return getPointAtEdge(view, options.fallbackAt);\n  }\n\n  return FunctionExt.call(getClosestPoint, this, view, magnet, refPoint, options);\n};\n\nexport const orth = resolve(orthogonal);","map":null,"metadata":{},"sourceType":"module"}