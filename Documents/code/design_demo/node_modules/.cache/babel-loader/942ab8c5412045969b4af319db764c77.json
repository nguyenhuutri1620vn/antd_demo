{"ast":null,"code":"import addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { requestAnimationFrame, cancelAnimationFrame } from './animationFrame';\nexport class MouseMoveTracker {\n  constructor(options) {\n    this.onMouseMove = e => {\n      const x = e.clientX;\n      const y = e.clientY;\n      this.deltaX += x - this.clientX;\n      this.deltaY += y - this.clientY;\n\n      if (this.animationFrameID == null) {\n        this.animationFrameID = requestAnimationFrame(this.triggerOnMouseMoveCallback);\n      }\n\n      this.clientX = x;\n      this.clientY = y;\n      e.preventDefault();\n    };\n\n    this.onMouseUp = () => {\n      if (this.animationFrameID) {\n        cancelAnimationFrame(this.animationFrameID);\n        this.triggerOnMouseMoveCallback();\n      }\n\n      this.triggerOnMouseMoveEndCallback(false);\n    };\n\n    this.triggerOnMouseMoveCallback = () => {\n      this.animationFrameID = null;\n      this.onMouseMoveCallback(this.deltaX, this.deltaY, {\n        clientX: this.clientX,\n        clientY: this.clientY\n      });\n      this.deltaX = 0;\n      this.deltaY = 0;\n    };\n\n    this.triggerOnMouseMoveEndCallback = cancel => {\n      this.onMouseMoveEndCallback(cancel);\n    };\n\n    this.elem = options.elem || document.documentElement;\n    this.onMouseMoveCallback = options.onMouseMove;\n    this.onMouseMoveEndCallback = options.onMouseMoveEnd;\n    this.animationFrameID = null;\n  }\n\n  capture(e) {\n    if (!this.captured) {\n      this.removeMouseMoveEvent = addEventListener(this.elem, 'mousemove', this.onMouseMove).remove;\n      this.removeMouseUpEvent = addEventListener(this.elem, 'mouseup', this.onMouseUp).remove;\n    }\n\n    this.captured = true;\n\n    if (!this.dragging) {\n      this.clientX = e.clientX;\n      this.clientY = e.clientY;\n      this.deltaX = 0;\n      this.deltaY = 0;\n      this.dragging = true;\n    }\n\n    e.preventDefault();\n  }\n\n  release() {\n    if (this.captured) {\n      if (this.removeMouseMoveEvent != null) {\n        this.removeMouseMoveEvent();\n        this.removeMouseMoveEvent = null;\n      }\n\n      if (this.removeMouseUpEvent != null) {\n        this.removeMouseUpEvent();\n        this.removeMouseUpEvent = null;\n      }\n    }\n\n    this.captured = false;\n\n    if (this.dragging) {\n      this.dragging = false;\n      this.clientX = 0;\n      this.clientY = 0;\n      this.deltaX = 0;\n      this.deltaY = 0;\n    }\n  }\n\n  isDragging() {\n    return this.dragging;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}