{"ast":null,"code":"import graphlib from '../graphlib';\nconst Graph = graphlib.Graph;\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\n\nconst buildLayerGraph = (g, rank, relationship) => {\n  const root = createRootNode(g);\n  const result = new Graph({\n    compound: true\n  }).setGraph({\n    root\n  }).setDefaultNodeLabel(v => {\n    return g.node(v);\n  });\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n    const parent = g.parent(v);\n\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root); // This assumes we have only short edges!\n\n      g[relationship](v).forEach(e => {\n        const u = e.v === v ? e.w : e.v;\n        const edge = result.edge(u, v);\n        const weight = edge !== undefined ? edge.weight : 0;\n        result.setEdge(u, v, {\n          weight: g.edge(e).weight + weight\n        });\n      });\n\n      if (node.hasOwnProperty(\"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n  return result;\n};\n\nconst createRootNode = g => {\n  let v;\n\n  while (g.hasNode(v = `_root${Math.random()}`));\n\n  return v;\n};\n\nexport default buildLayerGraph;","map":null,"metadata":{},"sourceType":"module"}