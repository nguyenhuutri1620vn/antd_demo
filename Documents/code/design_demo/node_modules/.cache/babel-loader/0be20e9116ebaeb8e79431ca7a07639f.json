{"ast":null,"code":"import { each } from '@antv/util';\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['shift', 'ctrl', 'alt', 'control'];\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      multiple: true,\n      trigger: DEFAULT_TRIGGER,\n      selectedState: 'selected'\n    };\n  },\n  getEvents: function getEvents() {\n    var self = this; // 检测输入是否合法\n\n    if (!(ALLOW_EVENTS.indexOf(self.trigger.toLowerCase()) > -1)) {\n      self.trigger = DEFAULT_TRIGGER; // eslint-disable-next-line no-console\n\n      console.warn(\"Behavior brush-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (!self.multiple) {\n      return {\n        'node:click': 'onClick',\n        'combo:click': 'onClick',\n        'canvas:click': 'onCanvasClick'\n      };\n    }\n\n    return {\n      'node:click': 'onClick',\n      'combo:click': 'onClick',\n      'canvas:click': 'onCanvasClick',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown'\n    };\n  },\n  onClick: function onClick(evt) {\n    var self = this;\n    var item = evt.item;\n\n    if (!item || item.destroyed) {\n      return;\n    }\n\n    var type = item.getType();\n    var graph = self.graph,\n        keydown = self.keydown,\n        multiple = self.multiple,\n        shouldUpdate = self.shouldUpdate,\n        shouldBegin = self.shouldBegin;\n\n    if (!shouldBegin.call(self, evt)) {\n      return;\n    } // allow to select multiple nodes but did not press a key || do not allow the select multiple nodes\n\n\n    if (!keydown || !multiple) {\n      var selected = graph.findAllByState('node', self.selectedState).concat(graph.findAllByState('combo', self.selectedState));\n      each(selected, function (combo) {\n        if (combo !== item) {\n          graph.setItemState(combo, self.selectedState, false);\n        }\n      });\n    }\n\n    if (item.hasState(self.selectedState)) {\n      if (shouldUpdate.call(self, evt)) {\n        graph.setItemState(item, self.selectedState, false);\n      }\n\n      var selectedNodes = graph.findAllByState('node', self.selectedState);\n      var selectedCombos = graph.findAllByState('combo', self.selectedState);\n      graph.emit('nodeselectchange', {\n        target: item,\n        selectedItems: {\n          nodes: selectedNodes,\n          combos: selectedCombos\n        },\n        select: false\n      });\n    } else {\n      if (shouldUpdate.call(self, evt)) {\n        graph.setItemState(item, self.selectedState, true);\n      }\n\n      var selectedNodes = graph.findAllByState('node', self.selectedState);\n      var selectedCombos = graph.findAllByState('combo', self.selectedState);\n      graph.emit('nodeselectchange', {\n        target: item,\n        selectedItems: {\n          nodes: selectedNodes,\n          combos: selectedCombos\n        },\n        select: true\n      });\n    }\n  },\n  onCanvasClick: function onCanvasClick(evt) {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        shouldBegin = _a.shouldBegin;\n\n    if (!shouldBegin.call(this, evt)) {\n      return;\n    }\n\n    var selected = graph.findAllByState('node', this.selectedState);\n    each(selected, function (node) {\n      graph.setItemState(node, _this.selectedState, false);\n    });\n    var selectedCombos = graph.findAllByState('combo', this.selectedState);\n    each(selectedCombos, function (combo) {\n      graph.setItemState(combo, _this.selectedState, false);\n    });\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: [],\n        combos: []\n      },\n      select: false\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var self = this;\n    var code = e.key;\n\n    if (!code) {\n      return;\n    }\n\n    if (code.toLowerCase() === this.trigger.toLowerCase() || code.toLowerCase() === 'control') {\n      self.keydown = true;\n    } else {\n      self.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    var self = this;\n    self.keydown = false;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}