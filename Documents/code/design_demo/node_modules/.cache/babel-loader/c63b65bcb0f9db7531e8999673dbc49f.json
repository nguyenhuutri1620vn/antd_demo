{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { Tooltip } from 'antd';\nimport { useXFlowApp, createComponentModel, XFlowAppExtensionMoudle } from '@antv/xflow-core';\nimport { ACTIVE_NODE_PORT } from '../interface';\nimport { createModule } from '../module';\nexport const CONFIG_TYPE = 'CanvasNodePortTooltip';\n\nconst RenderTooltip = props => {\n  const xflow = useXFlowApp();\n  const [state,, renderModel] = createComponentModel(null);\n  React.useEffect(() => {\n    if (!xflow) {\n      return;\n    }\n\n    const subscribe = () => __awaiter(void 0, void 0, void 0, function* () {\n      const {\n        model\n      } = yield ACTIVE_NODE_PORT.useModel(xflow.modelService);\n      return model.watch(value => {\n        renderModel.setValue(value);\n      });\n    });\n\n    const subscription = subscribe();\n    return () => {\n      subscription.then(disposable => {\n        disposable.dispose();\n      });\n    };\n  }, [renderModel, xflow]);\n  const visible = !!(state && state.position && state.position.x);\n\n  if (!visible) {\n    return null;\n  }\n\n  const title = props.getTooltip ? props.getTooltip(state) : state.tooltip;\n  return React.createElement(Tooltip, {\n    visible: visible,\n    title: title,\n    placement: state.placement || 'top'\n  }, React.createElement(\"span\", {\n    className: \"canvas-node-port-tooltip\",\n    style: {\n      position: 'absolute',\n      left: state.position.x,\n      top: state.position.y\n    }\n  }));\n};\n\nexport const CanvasNodePortTooltip = props => {\n  const getConfig = React.useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    return null;\n  }), []);\n  return React.createElement(XFlowAppExtensionMoudle, {\n    createModule: createModule,\n    config: {\n      CONFIG_TYPE: CONFIG_TYPE,\n      getConfig\n    }\n  }, React.createElement(RenderTooltip, Object.assign({}, props)));\n};","map":null,"metadata":{},"sourceType":"module"}