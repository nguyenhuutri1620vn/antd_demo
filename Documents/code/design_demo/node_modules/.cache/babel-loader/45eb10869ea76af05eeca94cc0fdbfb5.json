{"ast":null,"code":"import { deepMix, each, isString } from '@antv/util';\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport { hasClass } from '../utils/dom';\n\nvar Component =\n/** @class */\nfunction () {\n  function Component(options) {\n    this.destroyed = false;\n    this.options = deepMix({}, this.getDefaultOptions(), options);\n    this.container = this.initContainer();\n    this.initDom();\n    this.applyStyles();\n    this.initEvent();\n    this.initCapture();\n    this.initVisible();\n    this.render();\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  Component.prototype.getDefaultOptions = function () {\n    return {\n      name: '',\n      containerTpl: '<div></div>',\n      visible: true,\n      capture: true,\n      domStyles: {}\n    };\n  };\n  /**\n   * 获取 container\n   */\n\n\n  Component.prototype.getContainer = function () {\n    return this.container;\n  };\n  /**\n   * 获取组件的父容器\n   */\n\n\n  Component.prototype.getParentContainer = function () {\n    var parent = this.options.parent;\n    var parentContainer;\n\n    if (!parent) {\n      return parentContainer;\n    }\n\n    if (isString(parent)) {\n      var parentElement = document.getElementById(parent);\n\n      if (parentElement) {\n        parentContainer = parentElement;\n      } else {\n        throw new Error(\"No parent id \".concat(parent));\n      }\n    } else {\n      parentContainer = parent;\n    }\n\n    return parentContainer;\n  };\n  /**\n   * 初始化 container\n   */\n\n\n  Component.prototype.initContainer = function () {\n    var container = this.createDom(this.options.containerTpl);\n    var parentContainer = this.getParentContainer();\n\n    if (parentContainer) {\n      parentContainer.appendChild(container);\n    }\n\n    return container;\n  };\n  /**\n   * 初始化 visible\n   */\n\n\n  Component.prototype.initVisible = function () {\n    if (this.options.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n  /**\n   * 初始 capture\n   */\n\n\n  Component.prototype.initCapture = function () {\n    this.setCapture(this.options.capture);\n  };\n  /**\n   * 更新组件\n   */\n\n\n  Component.prototype.update = function (options) {\n    this.options = deepMix({}, this.options, options);\n    this.updateInner(options);\n    this.afterUpdate(options);\n  }; // 更新组件样式\n\n\n  Component.prototype.updateInner = function (options) {\n    if (options.domStyles) {\n      this.applyStyles();\n    }\n  };\n  /**\n   * 更新组件后\n   */\n\n\n  Component.prototype.afterUpdate = function (options) {\n    // 更新时考虑capture\n    if (options.capture) {\n      this.setCapture(options.capture);\n    }\n  };\n  /**\n   * 是否允许捕捉事件\n   */\n\n\n  Component.prototype.setCapture = function (capture) {\n    var container = this.container;\n    var value = capture ? 'auto' : 'none';\n    container.style.pointerEvents = value;\n  };\n  /**\n   * 应用所有的样式\n   */\n\n\n  Component.prototype.applyStyles = function () {\n    var domStyles = this.options.domStyles;\n\n    if (!domStyles) {\n      return;\n    }\n\n    var container = this.container;\n    this.applyChildrenStyles(container, domStyles);\n    var className = this.options.className;\n\n    if (className && hasClass(container, className)) {\n      var containerCss = domStyles[className];\n      modifyCSS(container, containerCss);\n    }\n  };\n  /**\n   * 应用样式到 DOM\n   */\n\n\n  Component.prototype.applyChildrenStyles = function (element, styles) {\n    each(styles, function (style, name) {\n      var elements = element.getElementsByClassName(name);\n      each(elements, function (el) {\n        modifyCSS(el, style);\n      });\n    });\n  };\n  /**\n   * 应用到单个 DOM\n   */\n\n\n  Component.prototype.applyStyle = function (cssName, dom) {\n    var domStyles = this.options.domStyles;\n    domStyles && modifyCSS(dom, domStyles[cssName]);\n  };\n  /**\n   * 创建 DOM\n   */\n\n\n  Component.prototype.createDom = function (str) {\n    if (str === void 0) {\n      str = '<div></div>';\n    }\n\n    return createDom(str);\n  };\n  /**\n   * 清理 DOM\n   */\n\n\n  Component.prototype.removeDom = function () {\n    var container = this.container; // 节点不一定有 parentNode\n\n    container && container.parentNode && container.parentNode.removeChild(container);\n  };\n\n  Component.prototype.destroy = function () {\n    this.removeEvent();\n    this.removeDom();\n    this.destroyed = true;\n  };\n\n  return Component;\n}();\n\nexport { Component };","map":null,"metadata":{},"sourceType":"module"}