{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-redeclare */\n\n/* eslint-disable no-await-in-loop */\n\n/* eslint-disable max-classes-per-file */\n\nimport { inject, singleton, contrib, Contribution } from 'mana-syringe';\nimport { Node as X6Node, Edge as X6Edge } from '@antv/x6';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IGraphCommandService } from '../command/interface';\nimport { IModelService } from '../model-service';\nimport { IFrontendApplicationContribution } from './interface';\nimport { cellsToJson } from '../common/graph-utils';\nexport { IFrontendApplicationContribution } from './interface';\nconst TIMER_WARNING_THRESHOLD = 100;\nlet FrontendApplication = class FrontendApplication {\n  constructor() {\n    /** 获取画布实例 */\n    this.getGraphInstance = () => {\n      return this.graphProvider.getGraphInstance();\n    };\n    /** 获取画布配置项 */\n\n\n    this.getGraphConfig = () => {\n      return this.graphProvider.getGraphOptions();\n    };\n    /** 获取画布配置项 */\n\n\n    this.getGraphData = () => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.graphProvider.getGraphInstance();\n      const cells = graph.getCells();\n      return cellsToJson(cells);\n    });\n    /** 获取画布所有节点 */\n\n\n    this.getAllNodes = () => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.graphProvider.getGraphInstance();\n      return graph.getNodes();\n    });\n    /** 获取画布节点 */\n\n\n    this.getNodeById = nodeId => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.graphProvider.getGraphInstance();\n      return graph.getCellById(nodeId);\n    });\n    /** 获取画布所有连线 */\n\n\n    this.getAllEdges = () => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.graphProvider.getGraphInstance();\n      return graph.getEdges();\n    });\n    /** 获取画布连线 */\n\n\n    this.getEdgeById = edgeId => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.graphProvider.getGraphInstance();\n      return graph.getCellById(edgeId);\n    });\n    /** 更新节点样式 */\n\n\n    this.updateNodeAttrs = (node, attrs) => __awaiter(this, void 0, void 0, function* () {\n      if (node instanceof X6Node) {\n        node.setAttrs(attrs);\n      } else {\n        const x6Node = yield this.getNodeById(node);\n        x6Node.setAttrs(attrs);\n      }\n    });\n    /** 更新连线样式 */\n\n\n    this.updateEdgeAttrs = (edge, attrs) => __awaiter(this, void 0, void 0, function* () {\n      if (edge instanceof X6Edge) {\n        edge.setAttrs(attrs);\n      } else {\n        const x6Edge = yield this.getEdgeById(edge);\n        x6Edge.setAttrs(attrs);\n      }\n    });\n    /** 平移画布 */\n\n\n    this.translateGraph = (tx, ty) => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.graphProvider.getGraphInstance();\n      const currentTranslate = graph.translate();\n      graph.translate(currentTranslate.tx + tx, currentTranslate.ty + ty);\n    });\n  }\n  /** 启动app */\n\n\n  start() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.startContributions();\n      this.registerEventListeners();\n    });\n  }\n  /** 暴露命令的执行接口 */\n\n\n  executeCommand(commandId, cmdArgs) {\n    let hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return this.commandService.executeCommand(commandId, cmdArgs, hook);\n  }\n  /** 暴露命令的批量执行接口 */\n\n\n  executeCommandPipeline(cmdOptions) {\n    return this.commandService.executeCommandPipeline(cmdOptions);\n  }\n  /**\n   * Register global event listeners.\n   */\n\n\n  registerEventListeners() {\n    /** 触发app的卸载逻辑 */\n    window.addEventListener('unload', () => {\n      this.stopContributions();\n    });\n  }\n  /**\n   * Initialize and start the frontend application contributions.\n   */\n\n\n  startContributions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log(this.contributions.getContributions());\n\n      for (const contribution of this.contributions.getContributions()) {\n        if (contribution.onStart) {\n          try {\n            yield this.measure(`${contribution.constructor.name}.onStart`, () => contribution.onStart(this));\n          } catch (error) {\n            console.error('Could not start contribution', error);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Stop the frontend application contributions. This is called when the window is unloaded.\n   */\n\n\n  stopContributions() {\n    console.info('>>> Stopping frontend contributions...');\n\n    for (const contribution of this.contributions.getContributions()) {\n      if (contribution.onStop) {\n        try {\n          contribution.onStop(this);\n        } catch (error) {\n          console.error('Could not stop contribution', error);\n        }\n      }\n    }\n\n    console.info('<<< All frontend contributions have been stopped.');\n  }\n\n  measure(name, fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const startMark = `${name}-start`;\n      const endMark = `${name}-end`;\n      performance.mark(startMark);\n      const result = yield fn();\n      performance.mark(endMark);\n      performance.measure(name, startMark, endMark);\n\n      for (const item of performance.getEntriesByName(name)) {\n        const contribution = `Frontend ${item.name}`;\n\n        if (item.duration > TIMER_WARNING_THRESHOLD) {\n          console.warn(`${contribution} is slow, took: ${item.duration.toFixed(1)} ms`);\n        } else {\n          console.debug(`${contribution} took: ${item.duration.toFixed(1)} ms`);\n        }\n      }\n\n      performance.clearMeasures(name);\n      return result;\n    });\n  }\n\n};\n\n__decorate([contrib(IFrontendApplicationContribution), __metadata(\"design:type\", Object)], FrontendApplication.prototype, \"contributions\", void 0);\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], FrontendApplication.prototype, \"graphProvider\", void 0);\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], FrontendApplication.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], FrontendApplication.prototype, \"modelService\", void 0);\n\nFrontendApplication = __decorate([singleton()], FrontendApplication);\nexport { FrontendApplication };","map":null,"metadata":{},"sourceType":"module"}