{"ast":null,"code":"import { uniq } from '@antv/util';\nimport { DistanceType } from '../types';\nimport Vector from './vector';\n/**\n * 获取数据中所有的属性及其对应的值\n * @param dataList 数据集\n * @param involvedKeys 参与计算的key集合\n * @param uninvolvedKeys 不参与计算的key集合\n */\n\nexport var getAllKeyValueMap = function getAllKeyValueMap(dataList, involvedKeys, uninvolvedKeys) {\n  var keys = []; // 指定了参与计算的keys时，使用指定的keys\n\n  if (involvedKeys === null || involvedKeys === void 0 ? void 0 : involvedKeys.length) {\n    keys = involvedKeys;\n  } else {\n    // 未指定抽取的keys时，提取数据中所有的key\n    dataList.forEach(function (data) {\n      keys = keys.concat(Object.keys(data));\n    });\n    keys = uniq(keys);\n  } // 获取所有值非空的key的value数组\n\n\n  var allKeyValueMap = {};\n  keys.forEach(function (key) {\n    var value = [];\n    dataList.forEach(function (data) {\n      if (data[key] !== undefined && data[key] !== '') {\n        value.push(data[key]);\n      }\n    });\n\n    if (value.length && !(uninvolvedKeys === null || uninvolvedKeys === void 0 ? void 0 : uninvolvedKeys.includes(key))) {\n      allKeyValueMap[key] = uniq(value);\n    }\n  });\n  return allKeyValueMap;\n};\n/**\n * one-hot编码：数据特征提取\n * @param dataList 数据集\n * @param involvedKeys 参与计算的的key集合\n * @param uninvolvedKeys 不参与计算的key集合\n */\n\nexport var oneHot = function oneHot(dataList, involvedKeys, uninvolvedKeys) {\n  // 获取数据中所有的属性及其对应的值\n  var allKeyValueMap = getAllKeyValueMap(dataList, involvedKeys, uninvolvedKeys);\n  var oneHotCode = [];\n\n  if (!Object.keys(allKeyValueMap).length) {\n    return;\n  } // 对数据进行one-hot编码\n\n\n  dataList.forEach(function (data, index) {\n    var code = [];\n\n    if (Object.keys(allKeyValueMap).length === 1) {\n      // 如果只有一个属性且所有的属性值都能转成数值型，则直接用属性值\n      var key = Object.keys(allKeyValueMap)[0];\n      var keyValue = allKeyValueMap[key];\n\n      if (keyValue.every(function (value) {\n        return !isNaN(Number(value));\n      })) {\n        code = [data[key]];\n      }\n    } else {\n      Object.keys(allKeyValueMap).forEach(function (key) {\n        var keyValue = data[key];\n        var allKeyValue = allKeyValueMap[key];\n        var valueIndex = allKeyValue.findIndex(function (value) {\n          return keyValue === value;\n        });\n        var subCode = [];\n\n        for (var i = 0; i < allKeyValue.length; i++) {\n          if (i === valueIndex) {\n            subCode.push(1);\n          } else {\n            subCode.push(0);\n          }\n        }\n\n        code = code.concat(subCode);\n      });\n    }\n\n    oneHotCode[index] = code;\n  });\n  return oneHotCode;\n};\n/**\n * getDistance：获取两个元素之间的距离\n * @param item\n * @param otherItem\n * @param distanceType 距离类型\n * @param graphData 图数据\n */\n\nexport var getDistance = function getDistance(item, otherItem, distanceType, graphData) {\n  if (distanceType === void 0) {\n    distanceType = DistanceType.EuclideanDistance;\n  }\n\n  var distance = 0;\n\n  switch (distanceType) {\n    case DistanceType.EuclideanDistance:\n      distance = new Vector(item).euclideanDistance(new Vector(otherItem));\n      break;\n\n    default:\n      break;\n  }\n\n  return distance;\n};\nexport default {\n  getAllKeyValueMap: getAllKeyValueMap,\n  oneHot: oneHot,\n  getDistance: getDistance\n};","map":null,"metadata":{},"sourceType":"module"}