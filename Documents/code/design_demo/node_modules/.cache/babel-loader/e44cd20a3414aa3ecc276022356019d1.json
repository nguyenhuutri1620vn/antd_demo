{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { clone } from '@antv/util';\nimport { Util } from '@antv/g6-core';\nimport Base from '../base';\nvar distance = Util.distance;\nvar DELTA = 0.05;\nvar lensDelegateStyle = {\n  stroke: '#000',\n  strokeOpacity: 0.8,\n  lineWidth: 2,\n  fillOpacity: 1,\n  fill: '#fff'\n};\n\nvar EdgeFilterLens =\n/** @class */\nfunction (_super) {\n  __extends(EdgeFilterLens, _super);\n\n  function EdgeFilterLens(config) {\n    return _super.call(this, config) || this;\n  }\n\n  EdgeFilterLens.prototype.getDefaultCfgs = function () {\n    return {\n      type: 'both',\n      trigger: 'mousemove',\n      r: 60,\n      delegateStyle: clone(lensDelegateStyle),\n      showLabel: 'edge',\n      scaleRBy: 'wheel'\n    };\n  }; // class-methods-use-this\n\n\n  EdgeFilterLens.prototype.getEvents = function () {\n    var events;\n\n    switch (this.get('trigger')) {\n      case 'click':\n        events = {\n          click: 'filter'\n        };\n        break;\n\n      case 'drag':\n        events = {\n          click: 'createDelegate'\n        };\n        break;\n\n      default:\n        events = {\n          mousemove: 'filter'\n        };\n        break;\n    }\n\n    return events;\n  };\n\n  EdgeFilterLens.prototype.init = function () {\n    var self = this;\n    var showLabel = self.get('showLabel');\n    var showNodeLabel = showLabel === 'node' || showLabel === 'both';\n    var showEdgeLabel = showLabel === 'edge' || showLabel === 'both';\n    self.set('showNodeLabel', showNodeLabel);\n    self.set('showEdgeLabel', showEdgeLabel);\n    var shouldShow = self.get('shouldShow');\n    if (!shouldShow) self.set('shouldShow', function () {\n      return true;\n    });\n  }; // Create the delegate when the trigger is drag\n\n\n  EdgeFilterLens.prototype.createDelegate = function (e) {\n    var self = this;\n    var lensDelegate = self.get('delegate');\n\n    if (!lensDelegate || lensDelegate.destroyed) {\n      self.filter(e);\n      lensDelegate = self.get('delegate'); // drag to move the lens\n\n      lensDelegate.on('dragstart', function (evt) {});\n      lensDelegate.on('drag', function (evt) {\n        self.filter(evt);\n      }); // 绑定调整范围（r）\n      // 由于 drag 用于改变 lens 位置，因此在此模式下，drag 不能用于调整 r\n      // scaling r\n\n      if (this.get('scaleRBy') === 'wheel') {\n        lensDelegate.on('mousewheel', function (evt) {\n          self.scaleRByWheel(evt);\n        });\n      }\n    }\n  };\n  /**\n   * Scale the range by wheel\n   * @param e mouse wheel event\n   */\n\n\n  EdgeFilterLens.prototype.scaleRByWheel = function (e) {\n    var self = this;\n    if (!e || !e.originalEvent) return;\n    if (e.preventDefault) e.preventDefault();\n    var graph = self.get('graph');\n    var ratio;\n    var lensDelegate = self.get('delegate');\n    var lensCenter = lensDelegate ? {\n      x: lensDelegate.attr('x'),\n      y: lensDelegate.attr('y')\n    } : undefined;\n    var mousePos = lensCenter || graph.getPointByClient(e.clientX, e.clientY);\n\n    if (e.originalEvent.wheelDelta < 0) {\n      ratio = 1 - DELTA;\n    } else {\n      ratio = 1 / (1 - DELTA);\n    }\n\n    var maxR = self.get('maxR');\n    var minR = self.get('minR');\n    var r = self.get('r');\n\n    if (r > (maxR || graph.get('height')) && ratio > 1 || r < (minR || graph.get('height') * 0.05) && ratio < 1) {\n      ratio = 1;\n    }\n\n    r *= ratio;\n    self.set('r', r);\n    self.filter(e);\n  };\n  /**\n   * Response function for mousemove, click, or drag to filter out the edges\n   * @param e mouse event\n   */\n\n\n  EdgeFilterLens.prototype.filter = function (e) {\n    var self = this;\n    var graph = self.get('graph');\n    var nodes = graph.getNodes();\n    var hitNodesMap = {};\n    var r = self.get('r');\n    var type = self.get('type');\n    var fCenter = {\n      x: e.x,\n      y: e.y\n    };\n    self.updateDelegate(fCenter, r);\n    var shouldShow = self.get('shouldShow');\n    var vShapes = self.get('vShapes');\n\n    if (vShapes) {\n      vShapes.forEach(function (shape) {\n        shape.remove();\n        shape.destroy();\n      });\n    }\n\n    vShapes = [];\n    nodes.forEach(function (node) {\n      var model = node.getModel();\n      var x = model.x,\n          y = model.y;\n\n      if (distance({\n        x: x,\n        y: y\n      }, fCenter) < r) {\n        hitNodesMap[model.id] = node;\n      }\n    });\n    var edges = graph.getEdges();\n    var hitEdges = [];\n    edges.forEach(function (edge) {\n      var model = edge.getModel();\n      var sourceId = model.source;\n      var targetId = model.target;\n\n      if (shouldShow(model)) {\n        if (type === 'only-source' || type === 'one') {\n          if (hitNodesMap[sourceId] && !hitNodesMap[targetId]) hitEdges.push(edge);\n        } else if (type === 'only-target' || type === 'one') {\n          if (hitNodesMap[targetId] && !hitNodesMap[sourceId]) hitEdges.push(edge);\n        } else if (type === 'both' && hitNodesMap[sourceId] && hitNodesMap[targetId]) {\n          hitEdges.push(edge);\n        }\n      }\n    });\n    var showNodeLabel = self.get('showNodeLabel');\n    var showEdgeLabel = self.get('showEdgelabel'); // copy the shapes in hitEdges\n\n    var group = graph.get('group');\n    hitEdges.forEach(function (edge) {\n      var shapes = edge.get('group').get('children');\n      shapes.forEach(function (shape) {\n        var shapeType = shape.get('type');\n        var vShape = group.addShape(shapeType, {\n          attrs: shape.attr()\n        });\n        vShapes.push(vShape);\n\n        if (showNodeLabel && shapeType === 'text') {\n          vShape.set('visible', true);\n        }\n      });\n    }); // copy the shape sof hitNodes\n\n    Object.keys(hitNodesMap).forEach(function (key) {\n      var node = hitNodesMap[key];\n      var clonedGroup = node.get('group').clone();\n      group.add(clonedGroup);\n      vShapes.push(clonedGroup);\n\n      if (showEdgeLabel) {\n        var shapes = clonedGroup.get('children');\n\n        for (var j = 0; j < shapes.length; j++) {\n          var shape = shapes[j];\n\n          if (shape.get('type') === 'text') {\n            shape.set('visible', true);\n          }\n        }\n      }\n    });\n    self.set('vShapes', vShapes);\n  };\n  /**\n   * Adjust part of the parameters, including trigger, type, r, maxR, minR, shouldShow, showLabel, and scaleRBy\n   * @param {EdgeFilterLensConfig} cfg\n   */\n\n\n  EdgeFilterLens.prototype.updateParams = function (cfg) {\n    var self = this;\n    var r = cfg.r,\n        trigger = cfg.trigger,\n        minR = cfg.minR,\n        maxR = cfg.maxR,\n        scaleRBy = cfg.scaleRBy,\n        showLabel = cfg.showLabel,\n        shouldShow = cfg.shouldShow;\n\n    if (!isNaN(cfg.r)) {\n      self.set('r', r);\n    }\n\n    if (!isNaN(maxR)) {\n      self.set('maxR', maxR);\n    }\n\n    if (!isNaN(minR)) {\n      self.set('minR', minR);\n    }\n\n    if (trigger === 'mousemove' || trigger === 'click') {\n      self.set('trigger', trigger);\n    }\n\n    if (scaleRBy === 'wheel' || scaleRBy === 'unset') {\n      self.set('scaleRBy', scaleRBy);\n      self.get('delegate').remove();\n      self.get('delegate').destroy();\n      var dPercentText = self.get('dPercentText');\n\n      if (dPercentText) {\n        dPercentText.remove();\n        dPercentText.destroy();\n      }\n    }\n\n    if (showLabel === 'node' || showLabel === 'both') {\n      self.set('showNodeLabel', true);\n    }\n\n    if (showLabel === 'edge' || showLabel === 'both') {\n      self.set('showEdgeLabel', true);\n    }\n\n    if (shouldShow) {\n      self.set('shouldShow', shouldShow);\n    }\n  };\n  /**\n   * Update the delegate shape of the lens\n   * @param {Point} mCenter the center of the shape\n   * @param {number} r the radius of the shape\n   */\n\n\n  EdgeFilterLens.prototype.updateDelegate = function (mCenter, r) {\n    var self = this;\n    var graph = self.get('graph');\n    var lensDelegate = self.get('delegate');\n\n    if (!lensDelegate || lensDelegate.destroyed) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = self.get('delegateStyle') || lensDelegateStyle; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n\n      lensDelegate = parent_1.addShape('circle', {\n        attrs: __assign({\n          r: r,\n          x: mCenter.x,\n          y: mCenter.y\n        }, attrs),\n        name: 'lens-shape',\n        draggable: true\n      });\n\n      if (this.get('trigger') !== 'drag') {\n        // 调整范围 r 的监听\n        if (this.get('scaleRBy') === 'wheel') {\n          // 使用滚轮调整 r\n          lensDelegate.on('mousewheel', function (evt) {\n            self.scaleRByWheel(evt);\n          });\n        }\n      }\n    } else {\n      lensDelegate.attr({\n        x: mCenter.x,\n        y: mCenter.y,\n        r: r\n      });\n    }\n\n    self.set('delegate', lensDelegate);\n  };\n  /**\n   * Clear the filtering\n   */\n\n\n  EdgeFilterLens.prototype.clear = function () {\n    var self = this;\n    var vShapes = self.get('vShapes');\n\n    if (vShapes) {\n      vShapes.forEach(function (shape) {\n        shape.remove();\n        shape.destroy();\n      });\n    }\n\n    vShapes = [];\n    self.set('vShapes', vShapes);\n    var lensDelegate = self.get('delegate');\n\n    if (lensDelegate && !lensDelegate.destroyed) {\n      lensDelegate.remove();\n      lensDelegate.destroy();\n    }\n  };\n  /**\n   * Destroy the component\n   */\n\n\n  EdgeFilterLens.prototype.destroy = function () {\n    this.clear();\n  };\n\n  return EdgeFilterLens;\n}(Base);\n\nexport default EdgeFilterLens;","map":null,"metadata":{},"sourceType":"module"}