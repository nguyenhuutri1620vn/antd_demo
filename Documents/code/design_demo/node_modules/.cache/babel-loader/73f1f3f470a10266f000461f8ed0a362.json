{"ast":null,"code":"export default {\n  triangle: function triangle(width, length, d) {\n    if (width === void 0) {\n      width = 10;\n    }\n\n    if (length === void 0) {\n      length = 15;\n    }\n\n    if (d === void 0) {\n      d = 0;\n    }\n\n    var begin = d * 2;\n    var path = \"M \".concat(begin, \",0 L \").concat(begin + length, \",-\").concat(width / 2, \" L \").concat(begin + length, \",\").concat(width / 2, \" Z\");\n    return path;\n  },\n  vee: function vee(width, length, d) {\n    if (width === void 0) {\n      width = 15;\n    }\n\n    if (length === void 0) {\n      length = 20;\n    }\n\n    if (d === void 0) {\n      d = 0;\n    }\n\n    var begin = d * 2;\n    var path = \"M \".concat(begin, \",0 L \").concat(begin + length, \",-\").concat(width / 2, \"\\n        L \").concat(begin + 2 * length / 3, \",0 L \").concat(begin + length, \",\").concat(width / 2, \" Z\");\n    return path;\n  },\n  circle: function circle(r, d) {\n    if (r === void 0) {\n      r = 5;\n    }\n\n    if (d === void 0) {\n      d = 0;\n    }\n\n    var begin = d * 2;\n    var path = \"M \".concat(begin, \", 0\\n            a \").concat(r, \",\").concat(r, \" 0 1,0 \").concat(r * 2, \",0\\n            a \").concat(r, \",\").concat(r, \" 0 1,0 \").concat(-r * 2, \",0\");\n    return path;\n  },\n  rect: function rect(width, length, d) {\n    if (width === void 0) {\n      width = 10;\n    }\n\n    if (length === void 0) {\n      length = 10;\n    }\n\n    if (d === void 0) {\n      d = 0;\n    }\n\n    var begin = d * 2;\n    var path = \"M \".concat(begin, \",\").concat(-width / 2, \" \\n        L \").concat(begin + length, \",\").concat(-width / 2, \" \\n        L \").concat(begin + length, \",\").concat(width / 2, \" \\n        L \").concat(begin, \",\").concat(width / 2, \" Z\");\n    return path;\n  },\n  diamond: function diamond(width, length, d) {\n    if (width === void 0) {\n      width = 15;\n    }\n\n    if (length === void 0) {\n      length = 15;\n    }\n\n    if (d === void 0) {\n      d = 0;\n    }\n\n    var begin = d * 2;\n    var path = \"M \".concat(begin, \",0 \\n        L \").concat(begin + length / 2, \",\").concat(-width / 2, \" \\n        L \").concat(begin + length, \",0 \\n        L \").concat(begin + length / 2, \",\").concat(width / 2, \" Z\");\n    return path;\n  },\n  triangleRect: function triangleRect(tWidth, tLength, rWidth, rLength, gap, d) {\n    if (tWidth === void 0) {\n      tWidth = 15;\n    }\n\n    if (tLength === void 0) {\n      tLength = 15;\n    }\n\n    if (rWidth === void 0) {\n      rWidth = 15;\n    }\n\n    if (rLength === void 0) {\n      rLength = 3;\n    }\n\n    if (gap === void 0) {\n      gap = 5;\n    }\n\n    if (d === void 0) {\n      d = 0;\n    }\n\n    var begin = d * 2;\n    var rectBegin = begin + tLength + gap;\n    var path = \"M \".concat(begin, \",0 L \").concat(begin + tLength, \",-\").concat(tWidth / 2, \" L \").concat(begin + tLength, \",\").concat(tWidth / 2, \" Z\\n            M \").concat(rectBegin, \", -\").concat(rWidth / 2, \"\\n            L \").concat(rectBegin + rLength, \" -\").concat(rWidth / 2, \"\\n            L \").concat(rectBegin + rLength, \" \").concat(rWidth / 2, \"\\n            L \").concat(rectBegin, \" \").concat(rWidth / 2, \"\\n            Z\");\n    return path;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}