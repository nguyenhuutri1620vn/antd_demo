{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport Point from '../geo/point';\nimport merge from 'lodash/merge';\nimport { bezier, clamp, now } from '../util';\nvar defaultInertiaOptions = {\n  linearity: 0.3,\n  easing: bezier(0, 0, 0.3, 1)\n};\nvar defaultPanInertiaOptions = merge({\n  deceleration: 2500,\n  maxSpeed: 1400\n}, defaultInertiaOptions);\nvar defaultZoomInertiaOptions = merge({\n  deceleration: 20,\n  maxSpeed: 1400\n}, defaultInertiaOptions);\nvar defaultBearingInertiaOptions = merge({\n  deceleration: 1000,\n  maxSpeed: 360\n}, defaultInertiaOptions);\nvar defaultPitchInertiaOptions = merge({\n  deceleration: 1000,\n  maxSpeed: 90\n}, defaultInertiaOptions);\n\nvar HandlerInertia = function () {\n  function HandlerInertia(map) {\n    _classCallCheck(this, HandlerInertia);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"inertiaBuffer\", void 0);\n\n    this.map = map;\n    this.clear();\n  }\n\n  _createClass(HandlerInertia, [{\n    key: \"clear\",\n    value: function clear() {\n      this.inertiaBuffer = [];\n    }\n  }, {\n    key: \"record\",\n    value: function record(settings) {\n      this.drainInertiaBuffer();\n      this.inertiaBuffer.push({\n        time: now(),\n        settings: settings\n      });\n    }\n  }, {\n    key: \"drainInertiaBuffer\",\n    value: function drainInertiaBuffer() {\n      var inertia = this.inertiaBuffer;\n      var nowTime = now();\n      var cutoff = 160;\n\n      while (inertia.length > 0 && nowTime - inertia[0].time > cutoff) {\n        inertia.shift();\n      }\n    }\n  }, {\n    key: \"onMoveEnd\",\n    value: function onMoveEnd(panInertiaOptions) {\n      this.drainInertiaBuffer();\n\n      if (this.inertiaBuffer.length < 2) {\n        return;\n      }\n\n      var deltas = {\n        zoom: 0,\n        bearing: 0,\n        pitch: 0,\n        pan: new Point(0, 0),\n        pinchAround: undefined,\n        around: undefined\n      };\n\n      var _iterator = _createForOfIteratorHelper(this.inertiaBuffer),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var settings = _step.value.settings;\n          deltas.zoom += settings.zoomDelta || 0;\n          deltas.bearing += settings.bearingDelta || 0;\n          deltas.pitch += settings.pitchDelta || 0;\n\n          if (settings.panDelta) {\n            deltas.pan._add(settings.panDelta);\n          }\n\n          if (settings.around) {\n            deltas.around = settings.around;\n          }\n\n          if (settings.pinchAround) {\n            deltas.pinchAround = settings.pinchAround;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var lastEntry = this.inertiaBuffer[this.inertiaBuffer.length - 1];\n      var duration = lastEntry.time - this.inertiaBuffer[0].time;\n      var easeOptions = {};\n\n      if (deltas.pan.mag()) {\n        var result = calculateEasing(deltas.pan.mag(), duration, merge({}, defaultPanInertiaOptions, panInertiaOptions || {}));\n        easeOptions.offset = deltas.pan.mult(result.amount / deltas.pan.mag());\n        easeOptions.center = this.map.transform.center;\n        extendDuration(easeOptions, result);\n      }\n\n      if (deltas.zoom) {\n        var _result = calculateEasing(deltas.zoom, duration, defaultZoomInertiaOptions);\n\n        easeOptions.zoom = this.map.transform.zoom + _result.amount;\n        extendDuration(easeOptions, _result);\n      }\n\n      if (deltas.bearing) {\n        var _result2 = calculateEasing(deltas.bearing, duration, defaultBearingInertiaOptions);\n\n        easeOptions.bearing = this.map.transform.bearing + clamp(_result2.amount, -179, 179);\n        extendDuration(easeOptions, _result2);\n      }\n\n      if (deltas.pitch) {\n        var _result3 = calculateEasing(deltas.pitch, duration, defaultPitchInertiaOptions);\n\n        easeOptions.pitch = this.map.transform.pitch + _result3.amount;\n        extendDuration(easeOptions, _result3);\n      }\n\n      if (easeOptions.zoom || easeOptions.bearing) {\n        var last = deltas.pinchAround === undefined ? deltas.around : deltas.pinchAround;\n        easeOptions.around = last ? this.map.unproject(last) : this.map.getCenter();\n      }\n\n      this.clear();\n      return merge(easeOptions, {\n        noMoveStart: true\n      });\n    }\n  }]);\n\n  return HandlerInertia;\n}();\n\nexport { HandlerInertia as default };\n\nfunction extendDuration(easeOptions, result) {\n  if (!easeOptions.duration || easeOptions.duration < result.duration) {\n    easeOptions.duration = result.duration;\n    easeOptions.easing = result.easing;\n  }\n}\n\nfunction calculateEasing(amount, inertiaDuration, inertiaOptions) {\n  var maxSpeed = inertiaOptions.maxSpeed,\n      linearity = inertiaOptions.linearity,\n      deceleration = inertiaOptions.deceleration;\n  var speed = clamp(amount * linearity / (inertiaDuration / 1000), -maxSpeed, maxSpeed);\n  var duration = Math.abs(speed) / (deceleration * linearity);\n  return {\n    easing: inertiaOptions.easing,\n    duration: duration * 1000,\n    amount: speed * (duration / 2)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}