{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { Tree, Empty, Popover } from 'antd';\nimport { FolderFilled, FolderOpenFilled } from '@ant-design/icons';\nimport { Addon } from '@antv/x6';\nimport { getNodeReactComponent, useXFlowApp, XFlowConstants } from '@antv/xflow-core';\nimport { XFlowNode } from '../canvas-dag-extension/x6-extension/node';\nconst {\n  DirectoryTree,\n  TreeNode\n} = Tree;\n\nconst FolderIcon = _ref => {\n  let {\n    expanded\n  } = _ref;\n  return expanded ? React.createElement(FolderOpenFilled, null) : React.createElement(FolderFilled, null);\n};\n\nexport const defaultNodeFactory = args => {\n  return new XFlowNode(args);\n};\nexport const renderNode = props => {\n  const {\n    nodeConfig,\n    onMouseDown,\n    graphConfig,\n    modelService,\n    commandService\n  } = props;\n\n  if (!graphConfig) {\n    return React.createElement(\"div\", null);\n  }\n\n  if (nodeConfig.renderComponent) {\n    return React.createElement(\"div\", {\n      onMouseDown: onMouseDown\n    }, React.createElement(nodeConfig.renderComponent, {\n      data: nodeConfig,\n      isNodeTreePanel: true\n    }));\n  }\n\n  const renderKey = graphConfig.nodeTypeParser(nodeConfig) || XFlowConstants.XFLOW_DEFAULT_NODE;\n  const reactComponent = graphConfig.nodeRender.get(renderKey);\n  return React.createElement(\"div\", {\n    onMouseDown: onMouseDown\n  }, React.createElement(reactComponent, {\n    commandService,\n    modelService,\n    data: nodeConfig,\n    isNodeTreePanel: true\n  }));\n};\nexport const NodeTitle = props => {\n  const [isVisible, setVisible] = React.useState(false);\n  const {\n    prefixClz,\n    graphConfig,\n    commandService,\n    modelService,\n    popoverContent,\n    onMouseDown,\n    item\n  } = props;\n  return React.createElement(React.Fragment, null, popoverContent && React.createElement(Popover, {\n    placement: \"right\",\n    destroyTooltipOnHide: true,\n    content: popoverContent,\n    visible: isVisible,\n    onVisibleChange: val => {\n      setVisible(val);\n    }\n  }, React.createElement(\"div\", {\n    className: `${prefixClz}-node-wrapper`,\n    onMouseEnter: () => {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig,\n    commandService: commandService,\n    onMouseDown,\n    modelService,\n    nodeConfig: item\n  }))), !popoverContent && React.createElement(\"div\", {\n    className: `${prefixClz}-node-wrapper`,\n    onMouseEnter: () => {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig,\n    commandService: commandService,\n    onMouseDown,\n    modelService,\n    nodeConfig: item\n  })));\n};\nexport const NodePanelBody = props => {\n  const {\n    x6NodeFactory,\n    dndOptions,\n    onNodeDrop,\n    state,\n    onFolderExpand,\n    prefixClz\n  } = props;\n  const {\n    graphProvider,\n    modelService,\n    commandService\n  } = useXFlowApp();\n  const [graphConfig, setConfig] = React.useState();\n  const [dnd, setDnd] = React.useState();\n  const [graph, setGraph] = React.useState();\n  graphProvider.getGraphInstance().then(x6Graph => {\n    setGraph(x6Graph);\n  });\n  React.useEffect(() => {\n    graphProvider.getGraphOptions().then(x6GraphConfig => {\n      setConfig(x6GraphConfig);\n    });\n\n    if (!graph) {\n      return;\n    }\n\n    const dndInstance = new Addon.Dnd(Object.assign(Object.assign({\n      scaled: false,\n      animation: false\n    }, dndOptions), {\n      target: graph,\n\n      /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n       * 在validateNode时调用command添加\n       */\n      validateNode: droppingNode => __awaiter(void 0, void 0, void 0, function* () {\n        const nodeConfig = Object.assign(Object.assign({}, droppingNode.getData()), droppingNode.getPosition());\n\n        if (onNodeDrop) {\n          yield onNodeDrop(nodeConfig, commandService, modelService);\n        } else {\n          console.error('onNodeDrop method is required in NodeTree Panel');\n        }\n\n        return false;\n      })\n    }));\n    setDnd(dndInstance);\n  }, [commandService, dndOptions, graph, graphProvider, modelService, onNodeDrop]);\n  const onMouseDown = React.useCallback(nodeConfig => e => {\n    if (!graph || !dnd || !graphConfig) {\n      return;\n    }\n\n    const renderKey = graphConfig.nodeTypeParser(nodeConfig);\n    const reactComponent = nodeConfig.renderComponent ? nodeConfig.renderComponent : graphConfig.nodeRender.get(renderKey);\n    const wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n    const nodeData = {\n      data: nodeConfig,\n      width: nodeConfig.width || 180,\n      height: nodeConfig.height || 40,\n      view: graphConfig.graphId,\n      component: wrappedComponent\n    };\n    const x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n    dnd.start(x6Node, e.nativeEvent);\n  }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n  const renderTree = React.useCallback(function () {\n    let treeList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return treeList.map(item => {\n      const {\n        isDirectory,\n        children,\n        popoverContent\n      } = item;\n\n      if (isDirectory) {\n        return React.createElement(TreeNode, {\n          icon: FolderIcon,\n          key: item.id,\n          title: item.label,\n          className: `${prefixClz}-tree-folder`\n        }, renderTree(children));\n      }\n\n      return React.createElement(TreeNode, {\n        isLeaf: true,\n        key: item.id,\n        className: `${prefixClz}-tree-leaf`,\n        icon: React.createElement(\"span\", null),\n        title: React.createElement(NodeTitle, {\n          item: item,\n          onMouseDown: onMouseDown(item),\n          popoverContent: popoverContent,\n          prefixClz: prefixClz,\n          modelService: modelService,\n          commandService: commandService,\n          graphConfig: graphConfig\n        })\n      });\n    });\n  }, [commandService, graphConfig, modelService, onMouseDown, prefixClz]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: `${prefixClz}-body`,\n    style: props.style\n  }, !state.keyword && React.createElement(DirectoryTree, {\n    showIcon: true,\n    selectable: false,\n    autoExpandParent: false,\n    onExpand: onFolderExpand,\n    expandedKeys: state.expandedKeys,\n    className: `${prefixClz}-tree`\n  }, renderTree(state.treeData)), state.searchList.length > 0 && React.createElement(\"ul\", {\n    className: `${prefixClz}-body-list`\n  }, state.searchList.map(treeNode => React.createElement(\"li\", {\n    className: `${prefixClz}-body-list-item`\n  }, React.createElement(NodeTitle, {\n    item: treeNode,\n    onMouseDown: onMouseDown(treeNode),\n    popoverContent: treeNode.popoverContent,\n    prefixClz: prefixClz,\n    modelService: modelService,\n    commandService: commandService,\n    graphConfig: graphConfig\n  })))), state.keyword && state.searchList.length === 0 && React.createElement(Empty, {\n    style: {\n      marginTop: '48px'\n    }\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}