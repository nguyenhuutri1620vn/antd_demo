{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { PositionType } from '@antv/l7-core';\nimport { bindAll, DOM } from '@antv/l7-utils';\nimport Control from './BaseControl';\n\nvar Layers = function (_Control) {\n  _inherits(Layers, _Control);\n\n  var _super = _createSuper(Layers);\n\n  function Layers(cfg) {\n    var _this;\n\n    _classCallCheck(this, Layers);\n\n    _this = _super.call(this, cfg);\n\n    _defineProperty(_assertThisInitialized(_this), \"layerControlInputs\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layers\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastZIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"handlingClick\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layersLink\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"baseLayersList\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"separator\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"overlaysList\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"form\", void 0);\n\n    _this.layerControlInputs = [];\n    _this.layers = [];\n    _this.lastZIndex = 0;\n    _this.handlingClick = false;\n\n    _this.initLayers();\n\n    bindAll(['checkDisabledLayers', 'onLayerChange', 'collapse', 'extend', 'expand', 'onInputClick'], _assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Layers, [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      return {\n        collapsed: true,\n        position: PositionType.TOPRIGHT,\n        autoZIndex: true,\n        hideSingleBase: false,\n        sortLayers: false,\n        name: 'layers'\n      };\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd() {\n      var _this2 = this;\n\n      this.initLayout();\n      this.update();\n      this.mapsService.on('zoomend', this.checkDisabledLayers);\n      this.layers.forEach(function (layerItem) {\n        layerItem.layer.on('remove', _this2.onLayerChange);\n        layerItem.layer.on('add', _this2.onLayerChange);\n      });\n      return this.container;\n    }\n  }, {\n    key: \"addVisualLayer\",\n    value: function addVisualLayer(layer, name) {\n      this.addLayer(layer, name, true);\n      return this.mapsService ? this.update() : this;\n    }\n  }, {\n    key: \"expand\",\n    value: function expand() {\n      var _this$renderService$g = this.renderService.getViewportSize(),\n          height = _this$renderService$g.height;\n\n      DOM.addClass(this.container, 'l7-control-layers-expanded');\n      this.form.style.height = 'null';\n      var acceptableHeight = height - (this.container.offsetTop + 50);\n\n      if (acceptableHeight < this.form.clientHeight) {\n        DOM.addClass(this.form, 'l7-control-layers-scrollbar');\n        this.form.style.height = acceptableHeight + 'px';\n      } else {\n        DOM.removeClass(this.form, 'l7-control-layers-scrollbar');\n      }\n\n      this.checkDisabledLayers();\n      return this;\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse() {\n      DOM.removeClass(this.container, 'l7-control-layers-expanded');\n      return this;\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      var _this3 = this;\n\n      if (!this.mapsService) {\n        return;\n      }\n\n      this.mapsService.off('click', this.collapse);\n      this.layers.forEach(function (layerItem) {\n        layerItem.layer.off('remove', _this3.onLayerChange);\n        layerItem.layer.off('add', _this3.onLayerChange);\n      });\n    }\n  }, {\n    key: \"initLayout\",\n    value: function initLayout() {\n      var className = 'l7-control-layers';\n      var container = this.container = DOM.create('div', className);\n      var collapsed = this.controlOption.collapsed;\n      container.setAttribute('aria-haspopup', 'true');\n      var form = this.form = DOM.create('form', className + '-list');\n\n      if (collapsed) {\n        this.mapsService.on('click', this.collapse);\n        container.addEventListener('mouseenter', this.expand);\n        container.addEventListener('mouseleave', this.collapse);\n      }\n\n      this.layersLink = DOM.create('a', className + '-toggle', container);\n      var link = this.layersLink;\n      link.title = 'Layers';\n\n      if (!collapsed) {\n        this.expand();\n      }\n\n      this.baseLayersList = DOM.create('div', className + '-base', form);\n      this.separator = DOM.create('div', className + '-separator', form);\n      this.overlaysList = DOM.create('div', className + '-overlays', form);\n      container.appendChild(form);\n    }\n  }, {\n    key: \"initLayers\",\n    value: function initLayers() {\n      var _this4 = this;\n\n      var _this$controlOption = this.controlOption,\n          _this$controlOption$b = _this$controlOption.baseLayers,\n          baseLayers = _this$controlOption$b === void 0 ? {} : _this$controlOption$b,\n          _this$controlOption$o = _this$controlOption.overlayers,\n          overlayers = _this$controlOption$o === void 0 ? {} : _this$controlOption$o;\n      Object.keys(baseLayers).forEach(function (name, index) {\n        _this4.addLayer(baseLayers[name], name, false);\n      });\n      Object.keys(overlayers).forEach(function (name, index) {\n        _this4.addLayer(overlayers[name], name, true);\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      if (!this.container) {\n        return this;\n      }\n\n      DOM.empty(this.baseLayersList);\n      DOM.empty(this.overlaysList);\n      this.layerControlInputs = [];\n      var baseLayersPresent;\n      var overlaysPresent;\n      var i;\n      var obj;\n      var baseLayersCount = 0;\n\n      for (i = 0; i < this.layers.length; i++) {\n        obj = this.layers[i];\n        this.addItem(obj);\n        overlaysPresent = overlaysPresent || obj.overlay;\n        baseLayersPresent = baseLayersPresent || !obj.overlay;\n        baseLayersCount += !obj.overlay ? 1 : 0;\n      }\n\n      if (this.controlOption.hideSingleBase) {\n        baseLayersPresent = baseLayersPresent && baseLayersCount > 1;\n        this.baseLayersList.style.display = baseLayersPresent ? '' : 'none';\n      }\n\n      this.separator.style.display = overlaysPresent && baseLayersPresent ? '' : 'none';\n      return this;\n    }\n  }, {\n    key: \"checkDisabledLayers\",\n    value: function checkDisabledLayers() {\n      var inputs = this.layerControlInputs;\n      var input;\n      var layer;\n      var zoom = this.mapsService.getZoom();\n\n      for (var i = inputs.length - 1; i >= 0; i--) {\n        input = inputs[i];\n        layer = this.layerService.getLayer(input.layerId);\n\n        if (layer && layer.inited) {\n          var minZoom = layer.getMinZoom();\n          var maxZoom = layer.getMaxZoom();\n          input.disabled = zoom < minZoom || zoom > maxZoom;\n        }\n      }\n    }\n  }, {\n    key: \"addLayer\",\n    value: function addLayer(layer, name, overlay) {\n      if (this.mapsService) {\n        layer.on('add', this.onLayerChange);\n        layer.on('remove', this.onLayerChange);\n      }\n\n      this.layers.push({\n        layer: layer,\n        name: name,\n        overlay: overlay\n      });\n      var _this$controlOption2 = this.controlOption,\n          sortLayers = _this$controlOption2.sortLayers,\n          sortFunction = _this$controlOption2.sortFunction,\n          autoZIndex = _this$controlOption2.autoZIndex;\n\n      if (sortLayers) {\n        this.layers.sort(function (a, b) {\n          return sortFunction(a.layer, b.layer, a.name, b.name);\n        });\n      }\n\n      if (autoZIndex && layer.setZIndex) {\n        this.lastZIndex++;\n        layer.setZIndex(this.lastZIndex);\n      }\n\n      this.expandIfNotCollapsed();\n    }\n  }, {\n    key: \"expandIfNotCollapsed\",\n    value: function expandIfNotCollapsed() {\n      if (this.mapsService && !this.controlOption.collapsed) {\n        this.expand();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"onLayerChange\",\n    value: function onLayerChange(e) {\n      if (!this.handlingClick) {\n        this.update();\n      }\n\n      var obj = this.layerService.getLayer(e.target.layerId);\n      var type = obj !== null && obj !== void 0 && obj.overlay ? e.type === 'add' ? 'overlayadd' : 'overlayremove' : e.type === 'add' ? 'baselayerchange' : null;\n\n      if (type) {\n        this.emit(type, obj);\n      }\n    }\n  }, {\n    key: \"createRadioElement\",\n    value: function createRadioElement(name, checked) {\n      var radioHtml = '<input type=\"radio\" class=\"l7-control-layers-selector\" name=\"' + name + '\"' + (checked ? ' checked=\"checked\"' : '') + '/>';\n      var radioFragment = document.createElement('div');\n      radioFragment.innerHTML = radioHtml;\n      return radioFragment.firstChild;\n    }\n  }, {\n    key: \"addItem\",\n    value: function addItem(obj) {\n      var label = document.createElement('label');\n      var layer = this.layerService.getLayer(obj.layer.id);\n      var checked = layer && layer.inited && obj.layer.isVisible();\n      var input;\n\n      if (obj.overlay) {\n        input = document.createElement('input');\n        input.type = 'checkbox';\n        input.className = 'l7-control-layers-selector';\n        input.defaultChecked = checked;\n      } else {\n        input = this.createRadioElement('l7-base-layers', checked);\n      }\n\n      this.layerControlInputs.push(input);\n      input.layerId = obj.layer.id;\n      input.addEventListener('click', this.onInputClick);\n      var name = document.createElement('span');\n      name.innerHTML = ' ' + obj.name;\n      var holder = document.createElement('div');\n      label.appendChild(holder);\n      holder.appendChild(input);\n      holder.appendChild(name);\n      var container = obj.overlay ? this.overlaysList : this.baseLayersList;\n      container.appendChild(label);\n      this.checkDisabledLayers();\n      return label;\n    }\n  }, {\n    key: \"onInputClick\",\n    value: function onInputClick() {\n      var inputs = this.layerControlInputs;\n      var input;\n      var layer;\n      var addedLayers = [];\n      var removedLayers = [];\n      this.handlingClick = true;\n\n      for (var i = inputs.length - 1; i >= 0; i--) {\n        input = inputs[i];\n        layer = this.layerService.getLayer(input.layerId);\n\n        if (input.checked) {\n          addedLayers.push(layer);\n        } else if (!input.checked) {\n          removedLayers.push(layer);\n        }\n      }\n\n      removedLayers.forEach(function (l) {\n        l.hide();\n      });\n      addedLayers.forEach(function (l) {\n        l.show();\n      });\n      this.handlingClick = false;\n    }\n  }]);\n\n  return Layers;\n}(Control);\n\nexport { Layers as default };","map":null,"metadata":{},"sourceType":"module"}