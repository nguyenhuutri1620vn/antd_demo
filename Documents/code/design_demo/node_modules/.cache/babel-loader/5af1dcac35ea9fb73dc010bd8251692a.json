{"ast":null,"code":"import React from 'react';\nimport clamp from 'clamp';\nimport classNames from 'classnames';\nimport keys from 'rc-util/lib/KeyCode';\nimport { WheelHandler } from '../util/dom/WheelHandler';\nimport { MouseMoveTracker } from '../util/dom/MouseMoveTracker';\nexport class Scrollbar extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.triggerCallback = nextPosition => {\n      const max = this.props.contentSize - this.props.containerSize;\n      const position = clamp(nextPosition, 0, max);\n\n      if (position !== this.props.scrollPosition) {\n        this.props.onScroll(position);\n      }\n    };\n\n    this.onWheel = delta => {\n      this.triggerCallback(this.props.scrollPosition + delta);\n    };\n\n    this.onWheelX = (deltaX, deltaY) => {\n      if (Math.abs(deltaX) >= Math.abs(deltaY)) {\n        this.onWheel(deltaX);\n      }\n    };\n\n    this.onWheelY = (deltaX, deltaY) => {\n      if (Math.abs(deltaX) <= Math.abs(deltaY)) {\n        this.onWheel(deltaY);\n      }\n    };\n\n    this.onKeyDown = e => {\n      const keyCode = e.keyCode; // let focus move off the scrollbar\n\n      if (keyCode === keys.TAB) {\n        return;\n      }\n\n      const {\n        contentSize,\n        containerSize\n      } = this.props;\n      let distance = this.props.keyboardScrollAmount;\n      let direction = 0;\n\n      if (this.isHorizontal()) {\n        switch (keyCode) {\n          case keys.HOME:\n            direction = -1;\n            distance = contentSize;\n            break;\n\n          case keys.LEFT:\n            direction = -1;\n            break;\n\n          case keys.RIGHT:\n            direction = 1;\n            break;\n\n          default:\n            return;\n        }\n      } else {\n        switch (keyCode) {\n          case keys.SPACE:\n            if (e.shiftKey) {\n              direction = -1;\n            } else {\n              direction = 1;\n            }\n\n            break;\n\n          case keys.HOME:\n            direction = -1;\n            distance = contentSize;\n            break;\n\n          case keys.UP:\n            direction = -1;\n            break;\n\n          case keys.DOWN:\n            direction = 1;\n            break;\n\n          case keys.PAGE_UP:\n            direction = -1;\n            distance = containerSize;\n            break;\n\n          case keys.PAGE_DOWN:\n            direction = 1;\n            distance = containerSize;\n            break;\n\n          default:\n            return;\n        }\n      }\n\n      e.preventDefault();\n      this.triggerCallback(this.props.scrollPosition + distance * direction);\n    };\n\n    this.onMouseDown = e => {\n      if (e.target !== this.thumbElem) {\n        const nativeEvent = e.nativeEvent;\n        const position = this.isHorizontal() ? nativeEvent.offsetX || nativeEvent.layerX : nativeEvent.offsetY || nativeEvent.layerY; // mousedown on the scroll-track directly, move the\n        // center of the scroll-face to the mouse position.\n\n        this.triggerCallback((position - this.thumbSize * 0.5) / this.scale);\n      } else {\n        this.mouseMoveTracker.capture(e);\n      }\n\n      if (this.props.stopPropagation) {\n        e.stopPropagation();\n      } // focus the container so it may receive keyboard events\n\n\n      this.containerElem.focus();\n    };\n\n    this.onMouseMove = (deltaX, deltaY) => {\n      let delta = this.isHorizontal() ? deltaX : deltaY;\n\n      if (delta !== 0) {\n        delta /= this.scale;\n        this.triggerCallback(this.props.scrollPosition + delta);\n      }\n    };\n\n    this.onMouseMoveEnd = () => {\n      this.mouseMoveTracker.release();\n    };\n\n    this.refContainer = container => {\n      this.containerElem = container;\n    };\n\n    this.refThumb = thumb => {\n      this.thumbElem = thumb;\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.wheelHandler = new WheelHandler({\n      onWheel: this.isHorizontal() ? this.onWheelX : this.onWheelY,\n      shouldHandleScrollX: true,\n      shouldHandleScrollY: true,\n      stopPropagation: this.props.stopPropagation\n    });\n    this.mouseMoveTracker = new MouseMoveTracker({\n      elem: document.documentElement,\n      onMouseMove: this.onMouseMove,\n      onMouseMoveEnd: this.onMouseMoveEnd\n    });\n  }\n\n  componentWillUnmount() {\n    this.mouseMoveTracker.release();\n  }\n\n  isHorizontal() {\n    return this.props.orientation === 'horizontal';\n  }\n\n  fixPosition(position) {\n    const max = this.props.contentSize - this.props.containerSize;\n    return clamp(position, 0, max);\n  }\n\n  render() {\n    const {\n      prefixCls,\n      className,\n      scrollPosition,\n      containerSize,\n      contentSize,\n      miniThumbSize,\n      zIndex,\n      scrollbarSize\n    } = this.props; // unscrollable\n\n    if (containerSize < 1 || contentSize <= containerSize) {\n      return null;\n    }\n\n    let scale = containerSize / contentSize;\n    let thumbSize = containerSize * scale;\n\n    if (thumbSize < miniThumbSize) {\n      scale = (containerSize - miniThumbSize) / (contentSize - containerSize);\n      thumbSize = miniThumbSize;\n    } // cache\n\n\n    this.scale = scale;\n    this.thumbSize = thumbSize;\n    let trackStyle;\n    let thumbStyle;\n    const horizontal = this.isHorizontal();\n\n    if (horizontal) {\n      trackStyle = {\n        width: containerSize,\n        height: scrollbarSize\n      };\n      thumbStyle = {\n        width: thumbSize,\n        transform: `translate(${scrollPosition * scale}px, 0)`\n      };\n    } else {\n      trackStyle = {\n        width: scrollbarSize,\n        height: containerSize\n      };\n      thumbStyle = {\n        height: thumbSize,\n        transform: `translate(0, ${scrollPosition * scale}px)`\n      };\n    }\n\n    if (zIndex) {\n      trackStyle.zIndex = zIndex;\n    }\n\n    const baseCls = `${prefixCls}-scrollbar`;\n    return React.createElement(\"div\", {\n      role: \"button\",\n      className: classNames(baseCls, {\n        [`${baseCls}-vertical`]: !horizontal,\n        [`${baseCls}-horizontal`]: horizontal\n      }, className),\n      style: trackStyle,\n      tabIndex: 0,\n      ref: this.refContainer,\n      onKeyDown: this.onKeyDown,\n      onMouseDown: this.onMouseDown,\n      onWheel: this.wheelHandler.onWheel\n    }, React.createElement(\"div\", {\n      ref: this.refThumb,\n      style: thumbStyle,\n      className: `${baseCls}-thumb`\n    }));\n  }\n\n}\n\n(function (Scrollbar) {\n  Scrollbar.defaultProps = {\n    prefixCls: 'x6',\n    orientation: 'vertical',\n    contentSize: 0,\n    containerSize: 0,\n    defaultPosition: 0,\n    scrollbarSize: 4,\n    miniThumbSize: 16,\n    keyboardScrollAmount: 40\n  };\n})(Scrollbar || (Scrollbar = {}));","map":null,"metadata":{},"sourceType":"module"}