{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n/**\n * @fileOverview 从xml建立自定义Node，包含update\n * @author xuzhi.mxz@antfin.com\n */\n\n\nimport { __assign, __rest } from \"tslib\";\nimport { get } from '@antv/util';\nimport { getTextSize } from '../util/graphic';\n/**\n * 一种更宽松的JSON 解析，如果遇到不符合规范的字段会直接转为字符串\n * @param text json 内容\n */\n\nfunction looseJSONParse(text) {\n  if (typeof text !== 'string') {\n    return text;\n  }\n\n  var safeParse = function safeParse(str) {\n    if (typeof str !== 'string') {\n      return str;\n    }\n\n    try {\n      return JSON.parse(str.trim());\n    } catch (e) {\n      return str.trim();\n    }\n  };\n\n  var firstAttempt = safeParse(text);\n\n  if (typeof firstAttempt !== 'string') {\n    return firstAttempt;\n  }\n\n  var tail = function tail(arr) {\n    return arr[arr.length - 1];\n  };\n\n  var str = text.trim();\n  var objectStack = [];\n  var syntaxStack = [];\n\n  var isLastPair = function isLastPair() {\n    var syntaxes = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      syntaxes[_i] = arguments[_i];\n    }\n\n    return syntaxes.some(function (syntax) {\n      return tail(syntaxStack) === syntax;\n    });\n  };\n\n  var getValueStore = function getValueStore() {\n    return tail(objectStack);\n  };\n\n  var rst = null;\n  var i = 0;\n  var temp = '';\n\n  while (i < str.length) {\n    var nowChar = str[i];\n    var isInString = isLastPair('\"', \"'\");\n\n    if (!isInString && !nowChar.trim()) {\n      i += 1;\n      continue;\n    }\n\n    var isLastTranslate = str[i - 1] === '\\\\';\n    var isInObject = isLastPair('}');\n    var isInArray = isLastPair(']');\n    var isWaitingValue = isLastPair(',');\n    var tempArr = getValueStore();\n\n    if (isInString) {\n      if (tail(syntaxStack) === nowChar && !isLastTranslate) {\n        syntaxStack.pop();\n        var value = safeParse(temp);\n        tempArr.push(value);\n        rst = value;\n        temp = '';\n      } else {\n        temp += nowChar;\n      }\n    } else if (isInArray && nowChar === ',') {\n      if (temp) {\n        tempArr.push(safeParse(temp));\n        temp = '';\n      }\n    } else if (isInObject && nowChar === ':') {\n      syntaxStack.push(',');\n\n      if (temp) {\n        tempArr.push(temp);\n        temp = '';\n      }\n    } else if (isWaitingValue && nowChar === ',') {\n      if (temp) {\n        tempArr.push(safeParse(temp));\n        temp = '';\n      }\n\n      syntaxStack.pop();\n    } else if (nowChar === '}' && (isInObject || isWaitingValue)) {\n      if (temp) {\n        tempArr.push(safeParse(temp));\n        temp = '';\n      }\n\n      if (isWaitingValue) {\n        syntaxStack.pop();\n      }\n\n      var obj = {};\n\n      for (var c = 1; c < tempArr.length; c += 2) {\n        obj[tempArr[c - 1]] = tempArr[c];\n      }\n\n      objectStack.pop();\n\n      if (objectStack.length) {\n        tail(objectStack).push(obj);\n      }\n\n      syntaxStack.pop();\n      rst = obj;\n    } else if (nowChar === ']' && isInArray) {\n      if (temp) {\n        tempArr.push(safeParse(temp));\n        temp = '';\n      }\n\n      objectStack.pop();\n\n      if (objectStack.length) {\n        tail(objectStack).push(tempArr);\n      }\n\n      syntaxStack.pop();\n      rst = tempArr;\n    } else if (nowChar === '{') {\n      objectStack.push([]);\n      syntaxStack.push('}');\n    } else if (nowChar === '[') {\n      objectStack.push([]);\n      syntaxStack.push(']');\n    } else if (nowChar === '\"') {\n      syntaxStack.push('\"');\n    } else if (nowChar === \"'\") {\n      syntaxStack.push(\"'\");\n    } else {\n      temp += nowChar;\n    }\n\n    i += 1;\n  }\n\n  return rst || temp;\n}\n\nvar keyConvert = function keyConvert(str) {\n  return str.split('-').reduce(function (a, b) {\n    return a + b.charAt(0).toUpperCase() + b.slice(1);\n  });\n};\n/**\n * 简单的一个{{}}模板渲染，不包含任何复杂语法\n * @param xml\n */\n\n\nexport var xmlDataRenderer = function xmlDataRenderer(xml) {\n  return function (data) {\n    var len = xml.length;\n    var arr = [];\n    var i = 0;\n    var tmp = '';\n\n    while (i < len) {\n      if (xml[i] === '{' && xml[i + 1] === '{') {\n        arr.push(tmp);\n        tmp = '';\n        i += 2;\n      } else if (xml[i] === '}' && xml[i + 1] === '}') {\n        if (arr.length) {\n          var last = arr.pop();\n          tmp = get(data, tmp, last.endsWith('=') ? \"\\\"{\".concat(tmp, \"}\\\"\") : tmp);\n          arr.push(last + tmp);\n        }\n\n        i += 2;\n        tmp = '';\n      } else {\n        tmp += xml[i];\n        i += 1;\n      }\n    }\n\n    arr.push(tmp);\n    return arr.map(function (e, index) {\n      return arr[index - 1] && arr[index - 1].endsWith('=') ? \"\\\"{\".concat(e, \"}\\\"\") : e;\n    }).join('');\n  };\n};\n/**\n * 解析XML，并转化为相应的JSON结构\n * @param xml xml解析后的节点\n */\n\nexport function parseXML(xml, cfg) {\n  var attrs = {};\n  var keys = xml.getAttributeNames && xml.getAttributeNames() || [];\n  var children = xml.children && Array.from(xml.children).map(function (e) {\n    return parseXML(e, cfg);\n  });\n  var rst = {};\n  var tagName = xml.tagName ? xml.tagName.toLowerCase() : 'group';\n\n  if (tagName === 'text') {\n    attrs.text = xml.innerText;\n  }\n\n  rst.type = tagName;\n\n  if (tagName === 'img') {\n    rst.type = 'image';\n  }\n\n  Array.from(keys).forEach(function (k) {\n    var key = keyConvert(k);\n    var val = xml.getAttribute(k);\n\n    try {\n      if (key === 'style' || key === 'attrs') {\n        var style = looseJSONParse(val);\n        attrs = __assign(__assign({}, attrs), style);\n      } else {\n        rst[key] = looseJSONParse(val);\n      }\n    } catch (e) {\n      if (key === 'style') {\n        throw e;\n      }\n\n      rst[key] = val;\n    }\n  });\n  rst.attrs = attrs;\n\n  if (cfg && cfg.style && rst.name && _typeof(cfg.style[rst.name]) === 'object') {\n    rst.attrs = __assign(__assign({}, rst.attrs), cfg.style[rst.name]);\n  }\n\n  if (cfg && cfg.style && rst.keyshape) {\n    rst.attrs = __assign(__assign({}, rst.attrs), cfg.style);\n  }\n\n  if (children.length) {\n    rst.children = children;\n  }\n\n  return rst;\n}\n/**\n * 根据偏移量和内部节点最终的bounding box来得出该shape最终的bbox\n */\n\nexport function getBBox(node, offset, chilrenBBox) {\n  var _a = node.attrs,\n      attrs = _a === void 0 ? {} : _a;\n  var bbox = {\n    x: offset.x || 0,\n    y: offset.y || 0,\n    width: chilrenBBox.width || 0,\n    height: chilrenBBox.height || 0\n  };\n  var shapeHeight, shapeWidth;\n\n  switch (node.type) {\n    case 'maker':\n    case 'circle':\n      if (attrs.r) {\n        shapeWidth = 2 * attrs.r;\n        shapeHeight = 2 * attrs.r;\n      }\n\n      break;\n\n    case 'text':\n      if (attrs.text) {\n        shapeWidth = getTextSize(attrs.text, attrs.fontSize || 12)[0];\n        shapeHeight = 16;\n        bbox.y += shapeHeight;\n        bbox.height = shapeHeight;\n        bbox.width = shapeWidth;\n        node.attrs = __assign({\n          fontSize: 12,\n          fill: '#000'\n        }, attrs);\n      }\n\n      break;\n\n    default:\n      if (attrs.width) {\n        shapeWidth = attrs.width;\n      }\n\n      if (attrs.height) {\n        shapeHeight = attrs.height;\n      }\n\n  }\n\n  if (shapeHeight >= 0) {\n    bbox.height = shapeHeight;\n  }\n\n  if (shapeWidth >= 0) {\n    bbox.width = shapeWidth;\n  }\n\n  if (attrs.marginTop) {\n    bbox.y += attrs.marginTop;\n  }\n\n  if (attrs.marginLeft) {\n    bbox.x += attrs.marginLeft;\n  }\n\n  return bbox;\n}\n/**\n * 把从xml计算出的结构填上位置信息，补全attrs\n * @param target\n * @param lastOffset\n */\n\nexport function generateTarget(target, lastOffset) {\n  var _a;\n\n  if (lastOffset === void 0) {\n    lastOffset = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  var defaultBbox = __assign({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  }, lastOffset);\n\n  if ((_a = target.children) === null || _a === void 0 ? void 0 : _a.length) {\n    var _b = target.attrs,\n        attrs = _b === void 0 ? {} : _b;\n    var marginTop = attrs.marginTop;\n\n    var offset = __assign({}, lastOffset);\n\n    if (marginTop) {\n      offset.y += marginTop;\n    }\n\n    for (var index = 0; index < target.children.length; index++) {\n      target.children[index].attrs.key = \"\".concat(attrs.key || 'root', \" -\").concat(index, \" \");\n      var node = generateTarget(target.children[index], offset);\n\n      if (node.bbox) {\n        var bbox = node.bbox;\n\n        if (node.attrs.next === 'inline') {\n          offset.x += node.bbox.width;\n        } else {\n          offset.y += node.bbox.height;\n        }\n\n        if (bbox.width + bbox.x > defaultBbox.width) {\n          defaultBbox.width = bbox.width + bbox.x;\n        }\n\n        if (bbox.height + bbox.y > defaultBbox.height) {\n          defaultBbox.height = bbox.height + bbox.y;\n        }\n      }\n    }\n  }\n\n  target.bbox = getBBox(target, lastOffset, defaultBbox);\n  target.attrs = __assign(__assign({}, target.attrs), target.bbox);\n  return target;\n}\n/**\n * 对比前后两个最终计算出来的node，并对比出最小改动,\n * 动作： 'add' 添加节点 ｜ ’delete‘ 删除节点 ｜ ’change‘ 改变节点attrs ｜ 'restructure' 重构节点\n * @param nowTarget\n * @param formerTarget\n */\n\nexport function compareTwoTarget(nowTarget, formerTarget) {\n  var _a, _b, _c, _d;\n\n  var type = (nowTarget || {}).type;\n  var key = ((formerTarget === null || formerTarget === void 0 ? void 0 : formerTarget.attrs) || {}).key;\n\n  if (key && nowTarget) {\n    nowTarget.attrs.key = key;\n  }\n\n  if (!nowTarget && formerTarget) {\n    return {\n      action: 'delete',\n      val: formerTarget,\n      type: type,\n      key: key\n    };\n  }\n\n  if (nowTarget && !formerTarget) {\n    return {\n      action: 'add',\n      val: nowTarget,\n      type: type\n    };\n  }\n\n  if (!nowTarget && !formerTarget) {\n    return {\n      action: 'same',\n      type: type\n    };\n  }\n\n  var children = [];\n\n  if (((_a = nowTarget.children) === null || _a === void 0 ? void 0 : _a.length) > 0 || ((_b = formerTarget.children) === null || _b === void 0 ? void 0 : _b.length) > 0) {\n    var length_1 = Math.max((_c = nowTarget.children) === null || _c === void 0 ? void 0 : _c.length, (_d = formerTarget.children) === null || _d === void 0 ? void 0 : _d.length);\n    var formerChilren = formerTarget.children || [];\n    var nowChilren = nowTarget.children || [];\n\n    for (var index = 0; index < length_1; index += 1) {\n      children.push(compareTwoTarget(nowChilren[index], formerChilren[index]));\n    }\n  }\n\n  var formerKeys = Object.keys(formerTarget.attrs);\n  var nowKeys = Object.keys(nowTarget.attrs);\n\n  if (formerTarget.type !== nowTarget.type) {\n    return {\n      action: 'restructure',\n      nowTarget: nowTarget,\n      formerTarget: formerTarget,\n      key: key,\n      children: children\n    };\n  }\n\n  if (formerKeys.filter(function (e) {\n    return e !== 'children';\n  }).some(function (e) {\n    return nowTarget.attrs[e] !== formerTarget.attrs[e] || !nowKeys.includes(e);\n  })) {\n    return {\n      action: 'change',\n      val: nowTarget,\n      children: children,\n      type: type,\n      key: key\n    };\n  }\n\n  return {\n    action: 'same',\n    children: children,\n    type: type,\n    key: key\n  };\n}\n/**\n * 根据xml或者返回xml的函数构建自定义节点的结构\n * @param gen\n */\n\nexport function createNodeFromXML(gen) {\n  var structures = {};\n\n  var compileXML = function compileXML(cfg) {\n    var rawStr = typeof gen === 'function' ? gen(cfg) : gen;\n    var target = xmlDataRenderer(rawStr)(cfg);\n    var xmlParser = document.createElement('div');\n    xmlParser.innerHTML = target;\n    var xml = xmlParser.children[0];\n    var result = generateTarget(parseXML(xml, cfg));\n    xmlParser.remove();\n    return result;\n  };\n\n  return {\n    draw: function draw(cfg, group) {\n      var resultTarget = compileXML(cfg);\n      var keyshape = group;\n\n      var renderTarget = function renderTarget(target) {\n        var _a = target.attrs,\n            attrs = _a === void 0 ? {} : _a,\n            bbox = target.bbox,\n            type = target.type,\n            children = target.children,\n            rest = __rest(target, [\"attrs\", \"bbox\", \"type\", \"children\"]);\n\n        if (target.type !== 'group') {\n          var shape = group.addShape(target.type, __assign({\n            attrs: attrs,\n            origin: {\n              bbox: bbox,\n              type: type,\n              children: children\n            }\n          }, rest));\n\n          if (target.keyshape) {\n            keyshape = shape;\n          }\n        }\n\n        if (target.children) {\n          target.children.forEach(function (n) {\n            return renderTarget(n);\n          });\n        }\n      };\n\n      renderTarget(resultTarget);\n      structures[cfg.id] = [resultTarget];\n      return keyshape;\n    },\n    update: function update(cfg, node) {\n      if (!structures[cfg.id]) {\n        structures[cfg.id] = [];\n      }\n\n      var container = node.getContainer();\n      var children = container.get('children');\n      var newTarget = compileXML(cfg);\n      var lastTarget = structures[cfg.id].pop();\n      var diffResult = compareTwoTarget(newTarget, lastTarget);\n\n      var addShape = function addShape(shape) {\n        var _a;\n\n        if (shape.type !== 'group') {\n          container.addShape(shape.type, {\n            attrs: shape.attrs\n          });\n        }\n\n        if ((_a = shape.children) === null || _a === void 0 ? void 0 : _a.length) {\n          shape.children.map(function (e) {\n            return addShape(e);\n          });\n        }\n      };\n\n      var delShape = function delShape(shape) {\n        var _a;\n\n        var targetShape = children.find(function (e) {\n          return e.attrs.key === shape.attrs.key;\n        });\n\n        if (targetShape) {\n          container.removeChild(targetShape);\n        }\n\n        if ((_a = shape.children) === null || _a === void 0 ? void 0 : _a.length) {\n          shape.children.map(function (e) {\n            return delShape(e);\n          });\n        }\n      };\n\n      var updateTarget = function updateTarget(target) {\n        var key = target.key;\n\n        if (target.type !== 'group') {\n          var targetShape = children.find(function (e) {\n            return e.attrs.key === key;\n          });\n\n          switch (target.action) {\n            case 'change':\n              if (targetShape) {\n                var originAttr = target.val.keyshape ? node.getOriginStyle() : {};\n                targetShape.attr(__assign(__assign({}, originAttr), target.val.attrs));\n              }\n\n              break;\n\n            case 'add':\n              addShape(target.val);\n              break;\n\n            case 'delete':\n              delShape(target.val);\n              break;\n\n            case 'restructure':\n              delShape(target.formerTarget);\n              addShape(target.nowTarget);\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        if (target.children) {\n          target.children.forEach(function (n) {\n            return updateTarget(n);\n          });\n        }\n      };\n\n      updateTarget(diffResult);\n      structures[cfg.id].push(newTarget);\n    },\n    getAnchorPoints: function getAnchorPoints() {\n      return [[0, 0.5], [1, 0.5], [0.5, 1], [0.5, 0]];\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}