{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport rewind from '@mapbox/geojson-rewind';\nimport { getCoords } from '@turf/invariant';\nimport * as turfMeta from '@turf/meta';\nexport default function geoJSON(data, cfg) {\n  var resultData = [];\n  var featureKeys = {};\n  data.features = data.features.filter(function (item) {\n    var geometry = item.geometry;\n    return item != null && geometry && geometry.type && geometry.coordinates && geometry.coordinates.length > 0;\n  });\n  rewind(data, true);\n\n  if (data.features.length === 0) {\n    return {\n      dataArray: [],\n      featureKeys: featureKeys\n    };\n  }\n\n  var i = 0;\n  turfMeta.flattenEach(data, function (currentFeature, featureIndex) {\n    var coord = getCoords(currentFeature);\n    var id = featureIndex;\n\n    var dataItem = _objectSpread(_objectSpread({}, currentFeature.properties), {}, {\n      coordinates: coord,\n      _id: id\n    });\n\n    resultData.push(dataItem);\n  });\n  return {\n    dataArray: resultData,\n    featureKeys: featureKeys\n  };\n}","map":null,"metadata":{},"sourceType":"module"}