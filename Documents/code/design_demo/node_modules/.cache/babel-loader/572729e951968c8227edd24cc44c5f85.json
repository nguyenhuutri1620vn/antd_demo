{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { degreesToRadians, radiansToLength } from '@turf/helpers';\nvar originShift = 2 * Math.PI * 6378137 / 2.0;\nexport function extent(data) {\n  var dataExtent = [Infinity, Infinity, -Infinity, -Infinity];\n  data.forEach(function (item) {\n    var coordinates = item.coordinates;\n    caculExtent(dataExtent, coordinates);\n  });\n  return dataExtent;\n}\n\nfunction caculExtent(dataExtent, coords) {\n  if (Array.isArray(coords[0])) {\n    coords.forEach(function (coord) {\n      caculExtent(dataExtent, coord);\n    });\n  } else {\n    if (dataExtent[0] > coords[0]) {\n      dataExtent[0] = coords[0];\n    }\n\n    if (dataExtent[1] > coords[1]) {\n      dataExtent[1] = coords[1];\n    }\n\n    if (dataExtent[2] < coords[0]) {\n      dataExtent[2] = coords[0];\n    }\n\n    if (dataExtent[3] < coords[1]) {\n      dataExtent[3] = coords[1];\n    }\n  }\n\n  return dataExtent;\n}\n\nexport function tranfrormCoord(data, cb) {\n  return transform(data, cb);\n}\n\nfunction transform(item, cb) {\n  if (Array.isArray(item[0])) {\n    return item.map(function (coord) {\n      return transform(coord, cb);\n    });\n  }\n\n  return cb(item);\n}\n\nexport function lngLatToMeters(lnglat) {\n  var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var accuracy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    enable: true,\n    decimal: 1\n  };\n  lnglat = validateLngLat(lnglat, validate);\n  var lng = lnglat[0];\n  var lat = lnglat[1];\n  var x = lng * originShift / 180.0;\n  var y = Math.log(Math.tan((90 + lat) * Math.PI / 360.0)) / (Math.PI / 180.0);\n  y = y * originShift / 180.0;\n\n  if (accuracy.enable) {\n    x = Number(x.toFixed(accuracy.decimal));\n    y = Number(y.toFixed(accuracy.decimal));\n  }\n\n  return lnglat.length === 3 ? [x, y, lnglat[2]] : [x, y];\n}\nexport function metersToLngLat(meters) {\n  var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n  var x = meters[0];\n  var y = meters[1];\n  var lng = x / originShift * 180.0;\n  var lat = y / originShift * 180.0;\n  lat = 180 / Math.PI * (2 * Math.atan(Math.exp(lat * Math.PI / 180.0)) - Math.PI / 2.0);\n\n  if (decimal !== undefined && decimal !== null) {\n    lng = Number(lng.toFixed(decimal));\n    lat = Number(lat.toFixed(decimal));\n  }\n\n  return meters.length === 3 ? [lng, lat, meters[2]] : [lng, lat];\n}\nexport function longitude(lng) {\n  if (lng === undefined || lng === null) {\n    throw new Error('lng is required');\n  }\n\n  if (lng > 180 || lng < -180) {\n    lng = lng % 360;\n\n    if (lng > 180) {\n      lng = -360 + lng;\n    }\n\n    if (lng < -180) {\n      lng = 360 + lng;\n    }\n\n    if (lng === 0) {\n      lng = 0;\n    }\n  }\n\n  return lng;\n}\nexport function latitude(lat) {\n  if (lat === undefined || lat === null) {\n    throw new Error('lat is required');\n  }\n\n  if (lat > 90 || lat < -90) {\n    lat = lat % 180;\n\n    if (lat > 90) {\n      lat = -180 + lat;\n    }\n\n    if (lat < -90) {\n      lat = 180 + lat;\n    }\n\n    if (lat === 0) {\n      lat = 0;\n    }\n  }\n\n  return lat;\n}\nexport function validateLngLat(lnglat, validate) {\n  if (validate === false) {\n    return lnglat;\n  }\n\n  var lng = longitude(lnglat[0]);\n  var lat = latitude(lnglat[1]);\n\n  if (lat > 85) {\n    lat = 85;\n  }\n\n  if (lat < -85) {\n    lat = -85;\n  }\n\n  return lnglat.length === 3 ? [lng, lat, lnglat[2]] : [lng, lat];\n}\nexport function aProjectFlat(lnglat) {\n  var maxs = 85.0511287798;\n  var lat = Math.max(Math.min(maxs, lnglat[1]), -maxs);\n  var scale = 256 << 20;\n  var d = Math.PI / 180;\n  var x = lnglat[0] * d;\n  var y = lat * d;\n  y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n  var a = 0.5 / Math.PI;\n  var b = 0.5;\n  var c = -0.5 / Math.PI;\n  d = 0.5;\n  x = scale * (a * x + b);\n  y = scale * (c * y + d);\n  return [Math.floor(x), Math.floor(y)];\n}\nexport function unProjectFlat(px) {\n  var a = 0.5 / Math.PI;\n  var b = 0.5;\n  var c = -0.5 / Math.PI;\n  var d = 0.5;\n  var scale = 256 << 20;\n\n  var _px = _slicedToArray(px, 2),\n      x = _px[0],\n      y = _px[1];\n\n  x = (x / scale - b) / a;\n  y = (y / scale - d) / c;\n  y = (Math.atan(Math.pow(Math.E, y)) - Math.PI / 4) * 2;\n  d = Math.PI / 180;\n  var lat = y / d;\n  var lng = x / d;\n  return [lng, lat];\n}\nexport function lnglatDistance(coordinates1, coordinates2, units) {\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), units = 'meters');\n}\nexport function project(lnglat) {\n  var d = Math.PI / 180;\n  var max = 85.0511287798;\n  var earthRadius = 6378137;\n  var lat = Math.max(Math.min(max, lnglat[1]), -max);\n  var sin = Math.sin(lat * d);\n  var x = earthRadius * lnglat[0] * d;\n  var y = earthRadius * Math.log((1 + sin) / (1 - sin)) / 2;\n  return [x, y];\n}\nexport function padBounds(b, bufferRatio) {\n  var heightBuffer = Math.abs(b[1][1] - b[0][1]) * bufferRatio;\n  var widthBuffer = Math.abs(b[1][0] - b[0][0]) * bufferRatio;\n  return [[b[0][0] - widthBuffer, b[0][1] - heightBuffer], [b[1][0] + widthBuffer, b[1][1] + heightBuffer]];\n}\nexport function boundsContains(b1, b2) {\n  return b1[0][0] <= b2[0][0] && b1[0][1] <= b2[0][1] && b1[1][0] >= b2[1][0] && b1[1][1] >= b2[1][1];\n}\nexport function bBoxToBounds(b1) {\n  return [[b1[0], b1[1]], [b1[2], b1[3]]];\n}\nexport function calDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\n\nfunction dotMul(v1, v2) {\n  return v1[0] * v2[0] + v1[1] * v2[1];\n}\n\nfunction getMod(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\nexport function calAngle(v1, v2) {\n  return Math.acos(dotMul(v1, v2) / (getMod(v1) * getMod(v2))) * 180 / Math.PI;\n}\nexport function getAngle(v1, v2) {\n  if (v2[0] > 0) {\n    if (v2[1] > 0) {\n      return 90 - Math.atan(v2[1] / v2[0]) * 180 / Math.PI;\n    } else {\n      return 90 + Math.atan(-v2[1] / v2[0]) * 180 / Math.PI;\n    }\n  } else {\n    if (v2[1] < 0) {\n      return 180 + (90 - Math.atan(v2[1] / v2[0]) * 180 / Math.PI);\n    } else {\n      return 270 + Math.atan(v2[1] / -v2[0]) * 180 / Math.PI;\n    }\n  }\n}\nexport function flow(coords) {\n  var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n\n  if (!coords || coords.length < 2) {\n    return;\n  }\n\n  var originVec2 = [0, 1];\n  var totalDis = 0;\n  var path = [];\n\n  for (var i = 0; i < coords.length - 1; i++) {\n    var p1 = coords[i];\n    var p2 = coords[i + 1];\n    var dis = calDistance(p1, p2);\n    totalDis += dis;\n    var direct = [p1[0] - p2[0], p1[1] - p2[1]];\n    var rotation = getAngle(originVec2, direct);\n\n    if (i > 0) {\n      var lastRotation = path[i - 1].rotation;\n\n      if (lastRotation - rotation > 360 - lastRotation + rotation) {\n        rotation = rotation + 360;\n      }\n    }\n\n    path.push({\n      start: p1,\n      end: p2,\n      dis: dis,\n      rotation: rotation,\n      duration: 0\n    });\n  }\n\n  path.map(function (point) {\n    point.duration = time * (point.dis / totalDis);\n  });\n  return path;\n}","map":null,"metadata":{},"sourceType":"module"}