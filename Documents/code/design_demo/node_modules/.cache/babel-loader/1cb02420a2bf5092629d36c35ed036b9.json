{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Platform, Dom, FunctionExt, ObjectExt } from '../../util';\nimport { Attr } from '../../registry';\nimport { Base } from '../base';\nexport const TextBlock = Base.define({\n  shape: 'text-block',\n  markup: [{\n    tagName: 'rect',\n    selector: 'body'\n  }, Platform.SUPPORT_FOREIGNOBJECT ? {\n    tagName: 'foreignObject',\n    selector: 'foreignObject',\n    children: [{\n      tagName: 'div',\n      ns: Dom.ns.xhtml,\n      selector: 'label',\n      style: {\n        width: '100%',\n        height: '100%',\n        position: 'static',\n        backgroundColor: 'transparent',\n        textAlign: 'center',\n        margin: 0,\n        padding: '0px 5px',\n        boxSizing: 'border-box',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }]\n  } : {\n    tagName: 'text',\n    selector: 'label',\n    attrs: {\n      textAnchor: 'middle'\n    }\n  }],\n  attrs: {\n    body: Object.assign(Object.assign({}, Base.bodyAttr), {\n      refWidth: '100%',\n      refHeight: '100%'\n    }),\n    foreignObject: {\n      refWidth: '100%',\n      refHeight: '100%'\n    },\n    label: {\n      style: {\n        fontSize: 14\n      }\n    }\n  },\n\n  propHooks(metadata) {\n    const {\n      text\n    } = metadata,\n          others = __rest(metadata, [\"text\"]);\n\n    if (text) {\n      ObjectExt.setByPath(others, 'attrs/label/text', text);\n    }\n\n    return others;\n  },\n\n  attrHooks: {\n    text: {\n      set(text, _ref) {\n        let {\n          cell,\n          view,\n          refBBox,\n          elem,\n          attrs\n        } = _ref;\n\n        if (elem instanceof HTMLElement) {\n          elem.textContent = text;\n        } else {\n          // No foreign object\n          const style = attrs.style || {};\n          const wrapValue = {\n            text,\n            width: -5,\n            height: '100%'\n          };\n          const wrapAttrs = Object.assign({\n            textVerticalAnchor: 'middle'\n          }, style);\n          const textWrap = Attr.presets.textWrap;\n          FunctionExt.call(textWrap.set, this, wrapValue, {\n            cell,\n            view,\n            elem,\n            refBBox,\n            attrs: wrapAttrs\n          });\n          return {\n            fill: style.color || null\n          };\n        }\n      },\n\n      position(text, _ref2) {\n        let {\n          refBBox,\n          elem\n        } = _ref2;\n\n        if (elem instanceof SVGElement) {\n          return refBBox.getCenter();\n        }\n      }\n\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}