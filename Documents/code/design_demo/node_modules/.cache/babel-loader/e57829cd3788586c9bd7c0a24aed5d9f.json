{"ast":null,"code":"import { NumberExt } from '../../util';\nimport { Rectangle } from '../../geometry';\nexport function getPointBBox(p) {\n  return new Rectangle(p.x, p.y, 0, 0);\n}\nexport function getPaddingBox() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const sides = NumberExt.normalizeSides(options.padding || 20);\n  return {\n    x: -sides.left,\n    y: -sides.top,\n    width: sides.left + sides.right,\n    height: sides.top + sides.bottom\n  };\n}\nexport function getSourceBBox(view) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return view.sourceBBox.clone().moveAndExpand(getPaddingBox(options));\n}\nexport function getTargetBBox(view) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return view.targetBBox.clone().moveAndExpand(getPaddingBox(options));\n}\nexport function getSourceAnchor(view) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (view.sourceAnchor) {\n    return view.sourceAnchor;\n  }\n\n  const bbox = getSourceBBox(view, options);\n  return bbox.getCenter();\n}\nexport function getTargetAnchor(view) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (view.targetAnchor) {\n    return view.targetAnchor;\n  }\n\n  const bbox = getTargetBBox(view, options);\n  return bbox.getCenter();\n}","map":null,"metadata":{},"sourceType":"module"}