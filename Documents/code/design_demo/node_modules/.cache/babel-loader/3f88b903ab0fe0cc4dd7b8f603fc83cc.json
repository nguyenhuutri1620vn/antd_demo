{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport Action from '../base';\nimport { getComponents } from '../util';\nimport { getCurrentElement, getDelegationObject, getElementValue, isList, getScaleByField } from '../util';\n/**\n * 列表项状态 Action 的基础类\n * @class\n * @ignore\n */\n\nvar ListState =\n/** @class */\nfunction (_super) {\n  __extends(ListState, _super);\n\n  function ListState() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stateName = '';\n    _this.ignoreItemStates = [];\n    return _this;\n  }\n  /** 获取触发的列表组件 */\n\n\n  ListState.prototype.getTriggerListInfo = function () {\n    var delegateObject = getDelegationObject(this.context);\n    var info = null;\n\n    if (isList(delegateObject)) {\n      info = {\n        item: delegateObject.item,\n        list: delegateObject.component\n      };\n    }\n\n    return info;\n  }; // 获取所有允许执行 Action 的组件\n\n\n  ListState.prototype.getAllowComponents = function () {\n    var _this = this;\n\n    var view = this.context.view;\n    var components = getComponents(view);\n    var rst = [];\n    each(components, function (component) {\n      if (component.isList() && _this.allowSetStateByElement(component)) {\n        rst.push(component);\n      }\n    });\n    return rst;\n  };\n  /** 是否存在指定的状态 */\n\n\n  ListState.prototype.hasState = function (list, item) {\n    return list.hasState(item, this.stateName);\n  };\n  /** 清理组件的状态 */\n\n\n  ListState.prototype.clearAllComponentsState = function () {\n    var _this = this;\n\n    var components = this.getAllowComponents();\n    each(components, function (component) {\n      component.clearItemsState(_this.stateName);\n    });\n  }; // 不是所有的 component 都能进行 active，目前仅支持分类 scale 对应的组件\n\n\n  ListState.prototype.allowSetStateByElement = function (component) {\n    var field = component.get('field');\n\n    if (!field) {\n      return false;\n    }\n\n    if (this.cfg && this.cfg.componentNames) {\n      var name_1 = component.get('name'); // 如果配置了限制的 component name，则要进行检测\n\n      if (this.cfg.componentNames.indexOf(name_1) === -1) {\n        return false;\n      }\n    }\n\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    return scale && scale.isCategory;\n  }; // 检测是否允许触发对应的状态改变事件\n\n\n  ListState.prototype.allowSetStateByItem = function (item, list) {\n    var ignoreStates = this.ignoreItemStates;\n\n    if (ignoreStates.length) {\n      var filterStates = ignoreStates.filter(function (state) {\n        return list.hasState(item, state);\n      });\n      return filterStates.length === 0;\n    }\n\n    return true; // 没有定义忽略的状态时，允许\n  }; // 设置组件的 item active\n\n\n  ListState.prototype.setStateByElement = function (component, element, enable) {\n    var field = component.get('field');\n    var view = this.context.view;\n    var scale = getScaleByField(view, field);\n    var value = getElementValue(element, field);\n    var text = scale.getText(value);\n    this.setItemsState(component, text, enable);\n  }; // 设置状态\n\n\n  ListState.prototype.setStateEnable = function (enable) {\n    var _this = this;\n\n    var element = getCurrentElement(this.context);\n\n    if (element) {\n      // trigger by element\n      var components = this.getAllowComponents();\n      each(components, function (component) {\n        _this.setStateByElement(component, element, enable);\n      });\n    } else {\n      // 被组件触发\n      var delegateObject = getDelegationObject(this.context);\n\n      if (isList(delegateObject)) {\n        var item = delegateObject.item,\n            component = delegateObject.component;\n\n        if (this.allowSetStateByElement(component) && this.allowSetStateByItem(item, component)) {\n          this.setItemState(component, item, enable);\n        }\n      }\n    }\n  }; // 多个 item 设置状态\n\n\n  ListState.prototype.setItemsState = function (list, name, enable) {\n    var _this = this;\n\n    var items = list.getItems();\n    each(items, function (item) {\n      if (item.name === name) {\n        _this.setItemState(list, item, enable);\n      }\n    });\n  }; // 单个 item 设置状态\n\n\n  ListState.prototype.setItemState = function (list, item, enable) {\n    list.setItemState(item, this.stateName, enable);\n  };\n  /**\n   * 设置状态\n   */\n\n\n  ListState.prototype.setState = function () {\n    this.setStateEnable(true);\n  };\n  /**\n   * 取消状态\n   */\n\n\n  ListState.prototype.reset = function () {\n    this.setStateEnable(false);\n  };\n  /**\n   * 切换状态\n   */\n\n\n  ListState.prototype.toggle = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo && triggerInfo.item) {\n      var list = triggerInfo.list,\n          item = triggerInfo.item;\n      var enable = this.hasState(list, item);\n      this.setItemState(list, item, !enable);\n    }\n  };\n  /**\n   * 取消状态\n   */\n\n\n  ListState.prototype.clear = function () {\n    var triggerInfo = this.getTriggerListInfo();\n\n    if (triggerInfo) {\n      triggerInfo.list.clearItemsState(this.stateName);\n    } else {\n      this.clearAllComponentsState();\n    }\n  };\n\n  return ListState;\n}(Action);\n\nexport default ListState;","map":null,"metadata":{},"sourceType":"module"}