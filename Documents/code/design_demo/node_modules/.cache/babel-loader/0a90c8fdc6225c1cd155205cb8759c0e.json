{"ast":null,"code":"import { isObject, each, find, get } from '@antv/util';\nimport { polarToCartesian } from '../../../../util/graphics';\n/** label text和line距离 4px */\n\nvar MARGIN = 4;\n\nfunction antiCollision(labelShapes, labels, lineHeight, plotRange, center, isRight) {\n  // adjust y position of labels to avoid overlapping\n  var overlapping = true;\n  var start = plotRange.start;\n  var end = plotRange.end;\n  var startY = Math.min(start.y, end.y);\n  var totalHeight = Math.abs(start.y - end.y);\n  var i;\n  var maxY = 0;\n  var minY = Number.MIN_VALUE;\n  var boxes = labels.map(function (label) {\n    if (label.y > maxY) {\n      maxY = label.y;\n    }\n\n    if (label.y < minY) {\n      minY = label.y;\n    }\n\n    return {\n      size: lineHeight,\n      targets: [label.y - startY]\n    };\n  });\n  minY -= startY;\n\n  if (maxY - startY > totalHeight) {\n    totalHeight = maxY - startY;\n  }\n\n  while (overlapping) {\n    /* eslint no-loop-func: 0 */\n    boxes.forEach(function (box) {\n      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;\n      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size); // box.pos = Math.max(0, target - box.size / 2);\n    }); // detect overlapping and join boxes\n\n    overlapping = false;\n    i = boxes.length;\n\n    while (i--) {\n      if (i > 0) {\n        var previousBox = boxes[i - 1];\n        var box = boxes[i];\n\n        if (previousBox.pos + previousBox.size > box.pos) {\n          // overlapping\n          previousBox.size += box.size;\n          previousBox.targets = previousBox.targets.concat(box.targets); // overflow, shift up\n\n          if (previousBox.pos + previousBox.size > totalHeight) {\n            previousBox.pos = totalHeight - previousBox.size;\n          }\n\n          boxes.splice(i, 1); // removing box\n\n          overlapping = true;\n        }\n      }\n    }\n  }\n\n  i = 0; // step 4: normalize y and adjust x\n\n  boxes.forEach(function (b) {\n    var posInCompositeBox = startY + lineHeight / 2; // middle of the label\n\n    b.targets.forEach(function () {\n      labels[i].y = b.pos + posInCompositeBox;\n      posInCompositeBox += lineHeight;\n      i++;\n    });\n  });\n  var labelsMap = {};\n\n  for (var _i = 0, labelShapes_1 = labelShapes; _i < labelShapes_1.length; _i++) {\n    var labelShape = labelShapes_1[_i];\n    labelsMap[labelShape.get('id')] = labelShape;\n  } // (x - cx)^2 + (y - cy)^2 = totalR^2\n\n\n  labels.forEach(function (label) {\n    var rPow2 = label.r * label.r;\n    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);\n\n    if (rPow2 < dyPow2) {\n      label.x = center.x;\n    } else {\n      var dx = Math.sqrt(rPow2 - dyPow2);\n\n      if (!isRight) {\n        // left\n        label.x = center.x - dx;\n      } else {\n        // right\n        label.x = center.x + dx;\n      }\n    } // adjust labelShape\n\n\n    var labelShape = labelsMap[label.id];\n    labelShape.attr('x', label.x);\n    labelShape.attr('y', label.y); // because group could not effect text-shape, should set text-shape position manually\n\n    var textShape = find(labelShape.getChildren(), function (ele) {\n      return ele.get('type') === 'text';\n    }); // @ts-ignore\n\n    if (textShape) {\n      textShape.attr('y', label.y);\n      textShape.attr('x', label.x);\n    }\n  });\n}\n\nexport function distribute(items, labels, shapes, region) {\n  if (!items.length || !labels.length) {\n    return;\n  }\n\n  var offset = items[0] ? items[0].offset : 0;\n  var coordinate = labels[0].get('coordinate');\n  var radius = coordinate.getRadius();\n  var center = coordinate.getCenter();\n\n  if (offset > 0) {\n    // const lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);\n    var lineHeight_1 = 14; // TODO\n\n    var totalR = radius + offset;\n    var totalHeight_1 = totalR * 2 + lineHeight_1 * 2;\n    var plotRange_1 = {\n      start: coordinate.start,\n      end: coordinate.end\n    }; // step 1: separate labels\n\n    var halves_1 = [[], [] // right\n    ];\n    items.forEach(function (labelItem) {\n      if (!labelItem) {\n        return;\n      }\n\n      if (labelItem.textAlign === 'right') {\n        // left\n        halves_1[0].push(labelItem);\n      } else {\n        // right or center will be put on the right side\n        halves_1[1].push(labelItem);\n      }\n    });\n    halves_1.forEach(function (half, index) {\n      // step 2: reduce labels\n      var maxLabelsCountForOneSide = totalHeight_1 / lineHeight_1;\n\n      if (half.length > maxLabelsCountForOneSide) {\n        half.sort(function (a, b) {\n          // sort by percentage DESC\n          return b['..percent'] - a['..percent'];\n        });\n        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);\n      } // step 3: distribute position (x and y)\n\n\n      half.sort(function (a, b) {\n        // sort by y ASC\n        return a.y - b.y;\n      });\n      antiCollision(labels, half, lineHeight_1, plotRange_1, center, index);\n    });\n  } // 配置 labelLine\n\n\n  each(items, function (item) {\n    if (item && item.labelLine) {\n      var distance = item.offset;\n      var angle = item.angle; // 贴近圆周\n\n      var startPoint = polarToCartesian(center.x, center.y, radius, angle);\n      var innerPoint = polarToCartesian(center.x, center.y, radius + distance / 2, angle);\n      var itemX = item.x + get(item, 'offsetX', 0);\n      var itemY = item.y + get(item, 'offsetY', 0);\n      var endPoint = {\n        x: itemX - Math.cos(angle) * MARGIN,\n        y: itemY - Math.sin(angle) * MARGIN\n      };\n\n      if (!isObject(item.labelLine)) {\n        // labelLine: true\n        item.labelLine = {};\n      }\n\n      item.labelLine.path = [\"M \".concat(startPoint.x), \"\".concat(startPoint.y, \" Q\").concat(innerPoint.x), \"\".concat(innerPoint.y, \" \").concat(endPoint.x), endPoint.y].join(',');\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}