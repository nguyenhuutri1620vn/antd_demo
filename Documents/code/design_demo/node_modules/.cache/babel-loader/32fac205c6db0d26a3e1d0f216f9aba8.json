{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Base from '../base';\n\nfunction getEucliDis(pointA, pointB, eps) {\n  var vx = pointA.x - pointB.x;\n  var vy = pointA.y - pointB.y;\n\n  if (!eps || Math.abs(vx) > eps || Math.abs(vy) > eps) {\n    return Math.sqrt(vx * vx + vy * vy);\n  }\n\n  return eps;\n}\n\nfunction getDotProduct(ei, ej) {\n  return ei.x * ej.x + ei.y * ej.y;\n}\n\nfunction projectPointToEdge(p, e) {\n  var k = (e.source.y - e.target.y) / (e.source.x - e.target.x);\n  var x = (k * k * e.source.x + k * (p.y - e.source.y) + p.x) / (k * k + 1);\n  var y = k * (x - e.source.x) + e.source.y;\n  return {\n    x: x,\n    y: y\n  };\n}\n\nvar Bundling =\n/** @class */\nfunction (_super) {\n  __extends(Bundling, _super);\n\n  function Bundling(config) {\n    return _super.call(this, config) || this;\n  }\n\n  Bundling.prototype.getDefaultCfgs = function () {\n    return {\n      edgeBundles: [],\n      edgePoints: [],\n      K: 0.1,\n      lambda: 0.1,\n      divisions: 1,\n      divRate: 2,\n      cycles: 6,\n      iterations: 90,\n      iterRate: 0.6666667,\n      bundleThreshold: 0.6,\n      eps: 1e-6,\n      onLayoutEnd: function onLayoutEnd() {},\n      onTick: function onTick() {}\n    };\n  };\n\n  Bundling.prototype.init = function () {\n    var graph = this.get('graph');\n    var onTick = this.get('onTick');\n\n    var tick = function tick() {\n      if (onTick) {\n        onTick();\n      }\n\n      graph.refreshPositions();\n    };\n\n    this.set('tick', tick);\n  };\n\n  Bundling.prototype.bundling = function (data) {\n    var self = this;\n    self.set('data', data); // 如果正在布局，忽略布局请求\n\n    if (self.isTicking()) {\n      return;\n    }\n\n    var edges = data.edges || [];\n    var nodes = data.nodes || [];\n    var nodeIdMap = {};\n    var error = false;\n    nodes.forEach(function (node) {\n      if (node.x === null || !node.y === null || node.x === undefined || !node.y === undefined) {\n        error = true;\n      }\n\n      nodeIdMap[node.id] = node;\n    });\n    if (error) throw new Error('please layout the graph or assign x and y for nodes first');\n    self.set('nodeIdMap', nodeIdMap); // subdivide each edges\n\n    var divisions = self.get('divisions');\n    var divRate = self.get('divRate');\n    var edgePoints = self.divideEdges(divisions);\n    self.set('edgePoints', edgePoints); // compute the bundles\n\n    var edgeBundles = self.getEdgeBundles();\n    self.set('edgeBundles', edgeBundles); // iterations\n\n    var C = self.get('cycles');\n    var iterations = self.get('iterations');\n    var iterRate = self.get('iterRate');\n    var lambda = self.get('lambda');\n\n    for (var i = 0; i < C; i++) {\n      var _loop_1 = function _loop_1(j) {\n        var forces = [];\n        edges.forEach(function (e, k) {\n          if (e.source === e.target) return;\n          var source = nodeIdMap[e.source];\n          var target = nodeIdMap[e.target];\n          forces[k] = self.getEdgeForces({\n            source: source,\n            target: target\n          }, k, divisions, lambda);\n\n          for (var p = 0; p < divisions + 1; p++) {\n            edgePoints[k][p].x += forces[k][p].x;\n            edgePoints[k][p].y += forces[k][p].y;\n          }\n        });\n      };\n\n      for (var j = 0; j < iterations; j++) {\n        _loop_1(j);\n      } // parameters for nex cycle\n\n\n      lambda = lambda / 2;\n      divisions *= divRate;\n      iterations *= iterRate;\n      edgePoints = self.divideEdges(divisions);\n      self.set('edgePoints', edgePoints);\n    } // change the edges according to edgePoints\n\n\n    edges.forEach(function (e, i) {\n      if (e.source === e.target) return;\n      e.type = 'polyline';\n      e.controlPoints = edgePoints[i].slice(1, edgePoints[i].length - 1);\n    });\n    var graph = self.get('graph');\n    graph.refresh();\n  };\n\n  Bundling.prototype.updateBundling = function (cfg) {\n    var self = this;\n    var data = cfg.data;\n\n    if (data) {\n      self.set('data', data);\n    }\n\n    if (self.get('ticking')) {\n      self.set('ticking', false);\n    }\n\n    Object.keys(cfg).forEach(function (key) {\n      self.set(key, cfg[key]);\n    });\n\n    if (cfg.onTick) {\n      var graph_1 = this.get('graph');\n      self.set('tick', function () {\n        cfg.onTick();\n        graph_1.refresh();\n      });\n    }\n\n    self.bundling(data);\n  };\n\n  Bundling.prototype.divideEdges = function (divisions) {\n    var self = this;\n    var edges = self.get('data').edges;\n    var nodeIdMap = self.get('nodeIdMap');\n    var edgePoints = self.get('edgePoints');\n    if (!edgePoints || edgePoints === undefined) edgePoints = [];\n    edges.forEach(function (edge, i) {\n      if (!edgePoints[i] || edgePoints[i] === undefined) {\n        edgePoints[i] = [];\n      }\n\n      var source = nodeIdMap[edge.source];\n      var target = nodeIdMap[edge.target];\n\n      if (divisions === 1) {\n        edgePoints[i].push({\n          x: source.x,\n          y: source.y\n        }); // source\n\n        edgePoints[i].push({\n          x: 0.5 * (source.x + target.x),\n          y: 0.5 * (source.y + target.y)\n        }); // mid\n\n        edgePoints[i].push({\n          x: target.x,\n          y: target.y\n        }); // target\n      } else {\n        var edgeLength = 0;\n\n        if (!edgePoints[i] || edgePoints[i] === []) {\n          // it is a straight line\n          edgeLength = getEucliDis({\n            x: source.x,\n            y: source.y\n          }, {\n            x: target.x,\n            y: target.y\n          });\n        } else {\n          edgeLength = self.getEdgeLength(edgePoints[i]);\n        }\n\n        var divisionLength_1 = edgeLength / (divisions + 1);\n        var currentDivisonLength_1 = divisionLength_1;\n        var newEdgePoints_1 = [{\n          x: source.x,\n          y: source.y\n        }]; // source\n\n        edgePoints[i].forEach(function (ep, j) {\n          if (j === 0) return;\n          var oriDivisionLength = getEucliDis(ep, edgePoints[i][j - 1]);\n\n          while (oriDivisionLength > currentDivisonLength_1) {\n            var ratio = currentDivisonLength_1 / oriDivisionLength;\n            var edgePoint = {\n              x: edgePoints[i][j - 1].x,\n              y: edgePoints[i][j - 1].y\n            };\n            edgePoint.x += ratio * (ep.x - edgePoints[i][j - 1].x);\n            edgePoint.y += ratio * (ep.y - edgePoints[i][j - 1].y);\n            newEdgePoints_1.push(edgePoint);\n            oriDivisionLength -= currentDivisonLength_1;\n            currentDivisonLength_1 = divisionLength_1;\n          }\n\n          currentDivisonLength_1 -= oriDivisionLength;\n        });\n        newEdgePoints_1.push({\n          x: target.x,\n          y: target.y\n        }); // target\n\n        edgePoints[i] = newEdgePoints_1;\n      }\n    });\n    return edgePoints;\n  };\n  /**\n   * 计算边的长度\n   * @param points\n   */\n\n\n  Bundling.prototype.getEdgeLength = function (points) {\n    var length = 0;\n    points.forEach(function (p, i) {\n      if (i === 0) return;\n      length += getEucliDis(p, points[i - 1]);\n    });\n    return length;\n  };\n\n  Bundling.prototype.getEdgeBundles = function () {\n    var self = this;\n    var data = self.get('data');\n    var edges = data.edges || [];\n    var bundleThreshold = self.get('bundleThreshold');\n    var nodeIdMap = self.get('nodeIdMap');\n    var edgeBundles = self.get('edgeBundles');\n    if (!edgeBundles) edgeBundles = [];\n    edges.forEach(function (e, i) {\n      if (!edgeBundles[i] || edgeBundles[i] === undefined) {\n        edgeBundles[i] = [];\n      }\n    });\n    edges.forEach(function (ei, i) {\n      var iSource = nodeIdMap[ei.source];\n      var iTarget = nodeIdMap[ei.target];\n      edges.forEach(function (ej, j) {\n        if (j <= i) return;\n        var jSource = nodeIdMap[ej.source];\n        var jTarget = nodeIdMap[ej.target];\n        var score = self.getBundleScore({\n          source: iSource,\n          target: iTarget\n        }, {\n          source: jSource,\n          target: jTarget\n        });\n\n        if (score >= bundleThreshold) {\n          edgeBundles[i].push(j);\n          edgeBundles[j].push(i);\n        }\n      });\n    });\n    return edgeBundles;\n  };\n\n  Bundling.prototype.getBundleScore = function (ei, ej) {\n    var self = this;\n    ei.vx = ei.target.x - ei.source.x;\n    ei.vy = ei.target.y - ei.source.y;\n    ej.vx = ej.target.x - ej.source.x;\n    ej.vy = ej.target.y - ej.source.y;\n    ei.length = getEucliDis({\n      x: ei.source.x,\n      y: ei.source.y\n    }, {\n      x: ei.target.x,\n      y: ei.target.y\n    });\n    ej.length = getEucliDis({\n      x: ej.source.x,\n      y: ej.source.y\n    }, {\n      x: ej.target.x,\n      y: ej.target.y\n    }); // angle score\n\n    var aScore = self.getAngleScore(ei, ej); // scale score\n\n    var sScore = self.getScaleScore(ei, ej); // position score\n\n    var pScore = self.getPositionScore(ei, ej); // visibility socre\n\n    var vScore = self.getVisibilityScore(ei, ej);\n    return aScore * sScore * pScore * vScore;\n  };\n\n  Bundling.prototype.getAngleScore = function (ei, ej) {\n    var dotProduct = getDotProduct({\n      x: ei.vx,\n      y: ei.vy\n    }, {\n      x: ej.vx,\n      y: ej.vy\n    });\n    return dotProduct / (ei.length * ej.length);\n  };\n\n  Bundling.prototype.getScaleScore = function (ei, ej) {\n    var aLength = (ei.length + ej.length) / 2;\n    var score = 2 / (aLength / Math.min(ei.length, ej.length) + Math.max(ei.length, ej.length) / aLength);\n    return score;\n  };\n\n  Bundling.prototype.getPositionScore = function (ei, ej) {\n    var aLength = (ei.length + ej.length) / 2;\n    var iMid = {\n      x: (ei.source.x + ei.target.x) / 2,\n      y: (ei.source.y + ei.target.y) / 2\n    };\n    var jMid = {\n      x: (ej.source.x + ej.target.x) / 2,\n      y: (ej.source.y + ej.target.y) / 2\n    };\n    var distance = getEucliDis(iMid, jMid);\n    return aLength / (aLength + distance);\n  };\n\n  Bundling.prototype.getVisibilityScore = function (ei, ej) {\n    var vij = this.getEdgeVisibility(ei, ej);\n    var vji = this.getEdgeVisibility(ej, ei);\n    return vij < vji ? vij : vji;\n  };\n\n  Bundling.prototype.getEdgeVisibility = function (ei, ej) {\n    var ps = projectPointToEdge(ej.source, ei);\n    var pt = projectPointToEdge(ej.target, ei);\n    var pMid = {\n      x: (ps.x + pt.x) / 2,\n      y: (ps.y + pt.y) / 2\n    };\n    var iMid = {\n      x: (ei.source.x + ei.target.x) / 2,\n      y: (ei.source.y + ei.target.y) / 2\n    };\n    return Math.max(0, 1 - 2 * getEucliDis(pMid, iMid) / getEucliDis(ps, pt));\n  };\n\n  Bundling.prototype.getEdgeForces = function (e, eidx, divisions, lambda) {\n    var self = this;\n    var edgePoints = self.get('edgePoints');\n    var K = self.get('K');\n    var kp = K / (getEucliDis(e.source, e.target) * (divisions + 1));\n    var edgePointForces = [{\n      x: 0,\n      y: 0\n    }];\n\n    for (var i = 1; i < divisions; i++) {\n      var force = {\n        x: 0,\n        y: 0\n      };\n      var spring = self.getSpringForce({\n        pre: edgePoints[eidx][i - 1],\n        cur: edgePoints[eidx][i],\n        next: edgePoints[eidx][i + 1]\n      }, kp);\n      var electrostatic = self.getElectrostaticForce(i, eidx);\n      force.x = lambda * (spring.x + electrostatic.x);\n      force.y = lambda * (spring.y + electrostatic.y);\n      edgePointForces.push(force);\n    }\n\n    edgePointForces.push({\n      x: 0,\n      y: 0\n    });\n    return edgePointForces;\n  };\n\n  Bundling.prototype.getSpringForce = function (divisions, kp) {\n    var x = divisions.pre.x + divisions.next.x - 2 * divisions.cur.x;\n    var y = divisions.pre.y + divisions.next.y - 2 * divisions.cur.y;\n    x *= kp;\n    y *= kp;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  Bundling.prototype.getElectrostaticForce = function (pidx, eidx) {\n    var self = this;\n    var eps = self.get('eps');\n    var edgeBundles = self.get('edgeBundles');\n    var edgePoints = self.get('edgePoints');\n    var edgeBundle = edgeBundles[eidx];\n    var resForce = {\n      x: 0,\n      y: 0\n    };\n    edgeBundle.forEach(function (eb) {\n      var force = {\n        x: edgePoints[eb][pidx].x - edgePoints[eidx][pidx].x,\n        y: edgePoints[eb][pidx].y - edgePoints[eidx][pidx].y\n      };\n\n      if (Math.abs(force.x) > eps || Math.abs(force.y) > eps) {\n        var length_1 = getEucliDis(edgePoints[eb][pidx], edgePoints[eidx][pidx]);\n        var diff = 1 / length_1;\n        resForce.x += force.x * diff;\n        resForce.y += force.y * diff;\n      }\n    });\n    return resForce;\n  };\n\n  Bundling.prototype.isTicking = function () {\n    return this.get('ticking');\n  };\n\n  Bundling.prototype.getSimulation = function () {\n    return this.get('forceSimulation');\n  };\n\n  Bundling.prototype.destroy = function () {\n    if (this.get('ticking')) {\n      this.getSimulation().stop();\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return Bundling;\n}(Base);\n\nexport default Bundling;","map":null,"metadata":{},"sourceType":"module"}