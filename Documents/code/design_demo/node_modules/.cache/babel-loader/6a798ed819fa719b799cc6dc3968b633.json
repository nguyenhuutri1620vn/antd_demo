{"ast":null,"code":"import { Angle, Point, Line } from '../../geometry';\n\nfunction rollup(points, merge) {\n  if (merge != null && merge !== false) {\n    const amount = typeof merge === 'boolean' ? 0 : merge;\n\n    if (amount > 0) {\n      const center1 = Point.create(points[1]).move(points[2], amount);\n      const center2 = Point.create(points[1]).move(points[0], amount);\n      return [center1.toJSON(), ...points, center2.toJSON()];\n    }\n\n    {\n      const center = points[1];\n      return [Object.assign({}, center), ...points, Object.assign({}, center)];\n    }\n  }\n\n  return points;\n}\n\nexport const loop = function (vertices, options, edgeView) {\n  const width = options.width || 50;\n  const height = options.height || 80;\n  const halfHeight = height / 2;\n  const angle = options.angle || 'auto';\n  const sourceAnchor = edgeView.sourceAnchor;\n  const targetAnchor = edgeView.targetAnchor;\n  const sourceBBox = edgeView.sourceBBox;\n  const targetBBox = edgeView.targetBBox;\n\n  if (sourceAnchor.equals(targetAnchor)) {\n    const getVertices = angle => {\n      const rad = Angle.toRad(angle);\n      const sin = Math.sin(rad);\n      const cos = Math.cos(rad);\n      const center = new Point(sourceAnchor.x + cos * width, sourceAnchor.y + sin * width);\n      const ref = new Point(center.x - cos * halfHeight, center.y - sin * halfHeight);\n      const p1 = ref.clone().rotate(-90, center);\n      const p2 = ref.clone().rotate(90, center);\n      return [p1.toJSON(), center.toJSON(), p2.toJSON()];\n    };\n\n    const validate = end => {\n      const start = sourceAnchor.clone().move(end, -1);\n      const line = new Line(start, end);\n      return !sourceBBox.containsPoint(end) && !sourceBBox.intersectsWithLine(line);\n    };\n\n    const angles = [0, 90, 180, 270, 45, 135, 225, 315];\n\n    if (typeof angle === 'number') {\n      return rollup(getVertices(angle), options.merge);\n    }\n\n    const center = sourceBBox.getCenter();\n\n    if (center.equals(sourceAnchor)) {\n      return rollup(getVertices(0), options.merge);\n    }\n\n    const deg = center.angleBetween(sourceAnchor, center.clone().translate(1, 0));\n    let ret = getVertices(deg);\n\n    if (validate(ret[1])) {\n      return rollup(ret, options.merge);\n    } // return the best vertices\n\n\n    for (let i = 1, l = angles.length; i < l; i += 1) {\n      ret = getVertices(deg + angles[i]);\n\n      if (validate(ret[1])) {\n        return rollup(ret, options.merge);\n      }\n    }\n\n    return rollup(ret, options.merge);\n  }\n\n  {\n    const line = new Line(sourceAnchor, targetAnchor);\n    let parallel = line.parallel(-width);\n    let center = parallel.getCenter();\n    let p1 = parallel.start.clone().move(parallel.end, halfHeight);\n    let p2 = parallel.end.clone().move(parallel.start, halfHeight);\n    const ref = line.parallel(-1);\n    const line1 = new Line(ref.start, center);\n    const line2 = new Line(ref.end, center);\n\n    if (sourceBBox.containsPoint(center) || targetBBox.containsPoint(center) || sourceBBox.intersectsWithLine(line1) || sourceBBox.intersectsWithLine(line2) || targetBBox.intersectsWithLine(line1) || targetBBox.intersectsWithLine(line2)) {\n      parallel = line.parallel(width);\n      center = parallel.getCenter();\n      p1 = parallel.start.clone().move(parallel.end, halfHeight);\n      p2 = parallel.end.clone().move(parallel.start, halfHeight);\n    }\n\n    if (options.merge) {\n      const line = new Line(sourceAnchor, targetAnchor);\n      const normal = new Line(center, line.center).setLength(Number.MAX_SAFE_INTEGER);\n      const intersects1 = sourceBBox.intersectsWithLine(normal);\n      const intersects2 = targetBBox.intersectsWithLine(normal);\n      const intersects = intersects1 ? Array.isArray(intersects1) ? intersects1 : [intersects1] : [];\n\n      if (intersects2) {\n        if (Array.isArray(intersects2)) {\n          intersects.push(...intersects2);\n        } else {\n          intersects.push(intersects2);\n        }\n      }\n\n      const anchor = line.center.closest(intersects);\n\n      if (anchor) {\n        edgeView.sourceAnchor = anchor.clone();\n        edgeView.targetAnchor = anchor.clone();\n      } else {\n        edgeView.sourceAnchor = line.center.clone();\n        edgeView.targetAnchor = line.center.clone();\n      }\n    }\n\n    return rollup([p1.toJSON(), center.toJSON(), p2.toJSON()], options.merge);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}