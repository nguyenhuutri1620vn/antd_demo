{"ast":null,"code":"export function isAsyncLike(obj) {\n  return typeof obj === 'object' && obj.then && typeof obj.then === 'function';\n}\nexport function isAsync(obj) {\n  return obj != null && (obj instanceof Promise || isAsyncLike(obj));\n}\nexport function toAsyncBoolean() {\n  const results = [];\n\n  for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n    inputs[_key] = arguments[_key];\n  }\n\n  inputs.forEach(arg => {\n    if (Array.isArray(arg)) {\n      results.push(...arg);\n    } else {\n      results.push(arg);\n    }\n  });\n  const hasAsync = results.some(res => isAsync(res));\n\n  if (hasAsync) {\n    const deferres = results.map(res => isAsync(res) ? res : Promise.resolve(res !== false));\n    return Promise.all(deferres).then(arr => arr.reduce((memo, item) => item !== false && memo, true));\n  }\n\n  return results.every(res => res !== false);\n}\nexport function toDeferredBoolean() {\n  for (var _len2 = arguments.length, inputs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    inputs[_key2] = arguments[_key2];\n  }\n\n  const ret = toAsyncBoolean(inputs);\n  return typeof ret === 'boolean' ? Promise.resolve(ret) : ret;\n}","map":null,"metadata":{},"sourceType":"module"}