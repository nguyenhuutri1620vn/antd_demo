{"ast":null,"code":"import { StringExt, FunctionExt, Platform } from '../util';\nexport class Registry {\n  constructor(options) {\n    this.options = Object.assign({}, options);\n    this.data = this.options.data || {};\n    this.register = this.register.bind(this);\n    this.unregister = this.unregister.bind(this);\n  }\n\n  get names() {\n    return Object.keys(this.data);\n  }\n\n  register(name, options) {\n    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (typeof name === 'object') {\n      Object.keys(name).forEach(key => {\n        this.register(key, name[key], options);\n      });\n      return;\n    }\n\n    if (this.exist(name) && !force && !Platform.isApplyingHMR()) {\n      this.onDuplicated(name);\n    }\n\n    const process = this.options.process;\n    const entity = process ? FunctionExt.call(process, this, name, options) : options;\n    this.data[name] = entity;\n    return entity;\n  }\n\n  unregister(name) {\n    const entity = name ? this.data[name] : null;\n    delete this.data[name];\n    return entity;\n  }\n\n  get(name) {\n    return name ? this.data[name] : null;\n  }\n\n  exist(name) {\n    return name ? this.data[name] != null : false;\n  }\n\n  onDuplicated(name) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      // race\n      if (this.options.onConflict) {\n        FunctionExt.call(this.options.onConflict, this, name);\n      }\n\n      throw new Error(`${StringExt.upperFirst(this.options.type)} with name '${name}' already registered.`);\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  onNotFound(name, prefix) {\n    throw new Error(this.getSpellingSuggestion(name, prefix));\n  }\n\n  getSpellingSuggestion(name, prefix) {\n    const suggestion = this.getSpellingSuggestionForName(name);\n    const prefixed = prefix ? `${prefix} ${StringExt.lowerFirst(this.options.type)}` : this.options.type;\n    return (// eslint-disable-next-line\n      `${StringExt.upperFirst(prefixed)} with name '${name}' does not exist.${suggestion ? ` Did you mean '${suggestion}'?` : ''}`\n    );\n  }\n\n  getSpellingSuggestionForName(name) {\n    return StringExt.getSpellingSuggestion(name, Object.keys(this.data), candidate => candidate);\n  }\n\n}\n\n(function (Registry) {\n  function create(options) {\n    return new Registry(options);\n  }\n\n  Registry.create = create;\n})(Registry || (Registry = {}));","map":null,"metadata":{},"sourceType":"module"}