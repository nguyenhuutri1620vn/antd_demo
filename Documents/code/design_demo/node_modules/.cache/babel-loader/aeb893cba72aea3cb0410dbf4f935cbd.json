{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Polyline as PolylineUtil } from '@antv/g-math';\nimport { Line as LineUtil } from '@antv/g-math';\nimport { each, isArray, isNil } from '@antv/util';\nimport { SVG_ATTR_MAP } from '../constant';\nimport ShapeBase from './base';\n\nvar Polyline =\n/** @class */\nfunction (_super) {\n  __extends(Polyline, _super);\n\n  function Polyline() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'polyline';\n    _this.canFill = true;\n    _this.canStroke = true;\n    return _this;\n  }\n\n  Polyline.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this);\n\n    return __assign(__assign({}, attrs), {\n      startArrow: false,\n      endArrow: false\n    });\n  }; // 更新属性时，检测是否更改了 points\n\n\n  Polyline.prototype.onAttrChange = function (name, value, originValue) {\n    _super.prototype.onAttrChange.call(this, name, value, originValue);\n\n    if (['points'].indexOf(name) !== -1) {\n      this._resetCache();\n    }\n  };\n\n  Polyline.prototype._resetCache = function () {\n    this.set('totalLength', null);\n    this.set('tCache', null);\n  };\n\n  Polyline.prototype.createPath = function (context, targetAttrs) {\n    var attrs = this.attr();\n    var el = this.get('el');\n    each(targetAttrs || attrs, function (value, attr) {\n      if (attr === 'points' && isArray(value) && value.length >= 2) {\n        el.setAttribute('points', value.map(function (point) {\n          return point[0] + \",\" + point[1];\n        }).join(' '));\n      } else if (SVG_ATTR_MAP[attr]) {\n        el.setAttribute(SVG_ATTR_MAP[attr], value);\n      }\n    });\n  };\n  /**\n   * Get length of polyline\n   * @return {number} length\n   */\n\n\n  Polyline.prototype.getTotalLength = function () {\n    var points = this.attr().points; // get totalLength from cache\n\n    var totalLength = this.get('totalLength');\n\n    if (!isNil(totalLength)) {\n      return totalLength;\n    }\n\n    this.set('totalLength', PolylineUtil.length(points));\n    return this.get('totalLength');\n  };\n  /**\n   * Get point according to ratio\n   * @param {number} ratio\n   * @return {Point} point\n   */\n\n\n  Polyline.prototype.getPoint = function (ratio) {\n    var points = this.attr().points; // get tCache from cache\n\n    var tCache = this.get('tCache');\n\n    if (!tCache) {\n      this._setTcache();\n\n      tCache = this.get('tCache');\n    }\n\n    var subt;\n    var index;\n    each(tCache, function (v, i) {\n      if (ratio >= v[0] && ratio <= v[1]) {\n        subt = (ratio - v[0]) / (v[1] - v[0]);\n        index = i;\n      }\n    });\n    return LineUtil.pointAt(points[index][0], points[index][1], points[index + 1][0], points[index + 1][1], subt);\n  };\n\n  Polyline.prototype._setTcache = function () {\n    var points = this.attr().points;\n\n    if (!points || points.length === 0) {\n      return;\n    }\n\n    var totalLength = this.getTotalLength();\n\n    if (totalLength <= 0) {\n      return;\n    }\n\n    var tempLength = 0;\n    var tCache = [];\n    var segmentT;\n    var segmentL;\n    each(points, function (p, i) {\n      if (points[i + 1]) {\n        segmentT = [];\n        segmentT[0] = tempLength / totalLength;\n        segmentL = LineUtil.length(p[0], p[1], points[i + 1][0], points[i + 1][1]);\n        tempLength += segmentL;\n        segmentT[1] = tempLength / totalLength;\n        tCache.push(segmentT);\n      }\n    });\n    this.set('tCache', tCache);\n  };\n  /**\n   * Get start tangent vector\n   * @return {Array}\n   */\n\n\n  Polyline.prototype.getStartTangent = function () {\n    var points = this.attr().points;\n    var result = [];\n    result.push([points[1][0], points[1][1]]);\n    result.push([points[0][0], points[0][1]]);\n    return result;\n  };\n  /**\n   * Get end tangent vector\n   * @return {Array}\n   */\n\n\n  Polyline.prototype.getEndTangent = function () {\n    var points = this.attr().points;\n    var l = points.length - 1;\n    var result = [];\n    result.push([points[l - 1][0], points[l - 1][1]]);\n    result.push([points[l][0], points[l][1]]);\n    return result;\n  };\n\n  return Polyline;\n}(ShapeBase);\n\nexport default Polyline;","map":null,"metadata":{},"sourceType":"module"}