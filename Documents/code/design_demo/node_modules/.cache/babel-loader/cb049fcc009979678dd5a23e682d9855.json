{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n/**\n * 节点面板\n * 内置多种节点，同时提供用户注册机制\n * ```ts\n * nodePanelProps: {\n *  registerNode:{\n *   nodes: [\n *     {\n *       component: CustomNode, // 函数组件\n *       popover: () => <div>节点1</div>,\n *       name: 'custom-node',\n *       width: 60,\n *       height: 40,\n *      },\n *     ],\n *   }\n * }\n * ```\n */\n\n\nimport { uuidv4 } from '@antv/xflow';\nimport { getProps } from '../../util';\nimport AppContext from '../../context';\nimport { withPopover } from './with-popover';\nimport { NODE_HEIGHT, NODE_WIDTH, NODEPOOL, ASPECTRATIONODE } from './constants';\nimport * as NodeComponents from './nodes';\nexport { searchService, onNodeDrop } from './service';\nexport { NodeComponents, NODE_HEIGHT, NODE_WIDTH, AppContext, ASPECTRATIONODE };\n/** 和 graph config 注册的节点保持一致 */\n\nvar getAnchorStyle = function (position) {\n  return {\n    position: {\n      name: position\n    },\n    attrs: {\n      circle: {\n        r: 4,\n        magnet: true,\n        stroke: '#31d0c6',\n        strokeWidth: 2,\n        fill: '#fff',\n        style: {\n          visibility: 'hidden'\n        }\n      }\n    },\n    zIndex: 10\n  };\n};\n\nvar getPorts = function (position) {\n  if (position === void 0) {\n    position = ['top', 'right', 'bottom', 'left'];\n  }\n\n  return {\n    items: position.map(function (name) {\n      return {\n        group: name,\n        id: uuidv4()\n      };\n    }),\n    groups: {\n      top: getAnchorStyle('top'),\n      right: getAnchorStyle('right'),\n      bottom: getAnchorStyle('bottom'),\n      left: getAnchorStyle('left')\n    }\n  };\n};\n\nexport var getRegisterNode = function (flowchartId) {\n  var _a;\n\n  var registerNode = ((_a = getProps(flowchartId, 'nodePanelProps')) !== null && _a !== void 0 ? _a : {}).registerNode;\n  return ((registerNode === null || registerNode === void 0 ? void 0 : registerNode.nodes) || []).map(function (item) {\n    var name = item.name,\n        popover = item.popover,\n        _a = item.label,\n        label = _a === void 0 ? '' : _a,\n        _b = item.width,\n        width = _b === void 0 ? NODE_HEIGHT : _b,\n        _c = item.height,\n        height = _c === void 0 ? NODE_HEIGHT : _c,\n        ports = item.ports;\n    var id = uuidv4(); // 暂不使用上层数据\n\n    return {\n      parentId: '',\n      id: id,\n      renderKey: name,\n      name: name,\n      label: label,\n      popoverContent: popover,\n      width: width,\n      height: height,\n      ports: ports || getPorts(),\n      originData: __assign({}, item),\n      isCustom: true\n    };\n  });\n};\nexport var treeDataService = function (meta, modelService, flowchartId) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var customNodes;\n    return __generator(this, function (_a) {\n      customNodes = getRegisterNode(flowchartId);\n      return [2\n      /*return*/\n      , __spreadArray(__spreadArray([], customNodes, true), NODEPOOL.map(function (_a) {\n        var name = _a.name,\n            ports = _a.ports,\n            _b = _a.width,\n            width = _b === void 0 ? NODE_WIDTH : _b,\n            _c = _a.height,\n            height = _c === void 0 ? NODE_HEIGHT : _c,\n            _d = _a.label,\n            label = _d === void 0 ? '' : _d;\n        return {\n          parentId: '',\n          id: uuidv4(),\n          renderKey: name,\n          // name: `${name.replace(/\\s+/g, '-')}`,\n          name: name,\n          label: label,\n          popoverContent: function () {\n            return name;\n          },\n          width: width,\n          height: height,\n          ports: getPorts(ports)\n        };\n      }), true)];\n    });\n  });\n};\nexport var setNodeRender = function (config, nodePanelProps) {\n  // 自定义节点\n  var registerNode = (nodePanelProps !== null && nodePanelProps !== void 0 ? nodePanelProps : {}).registerNode;\n  var nodes = (registerNode === null || registerNode === void 0 ? void 0 : registerNode.nodes) || [];\n\n  if (nodes.length) {\n    nodes.forEach(function (item) {\n      var name = item.name,\n          component = item.component;\n      config.setNodeRender(name, component);\n    });\n  } // 默认节点\n\n\n  NODEPOOL.forEach(function (item) {\n    config.setNodeRender(item.name, function (props) {\n      return withPopover(props)(NodeComponents[\"\".concat(item.name.replace(/\\s+/g, ''), \"Node\")]);\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"module"}