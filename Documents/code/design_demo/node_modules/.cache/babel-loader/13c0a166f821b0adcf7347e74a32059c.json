{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { decodePickingColor, DOM } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { isEventCrash } from '../../utils/dom';\nimport { InteractionEvent } from '../interaction/IInteractionService';\nimport { gl } from '../renderer/gl';\nvar PickingService = (_dec = injectable(), _dec2 = inject(TYPES.IRendererService), _dec3 = inject(TYPES.IGlobalConfigService), _dec4 = inject(TYPES.IInteractionService), _dec5 = inject(TYPES.ILayerService), _dec(_class = (_class2 = function () {\n  function PickingService() {\n    var _this = this;\n\n    _classCallCheck(this, PickingService);\n\n    _initializerDefineProperty(this, \"rendererService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"interactionService\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"layerService\", _descriptor4, this);\n\n    _defineProperty(this, \"pickingFBO\", void 0);\n\n    _defineProperty(this, \"width\", 0);\n\n    _defineProperty(this, \"height\", 0);\n\n    _defineProperty(this, \"alreadyInPicking\", false);\n\n    _defineProperty(this, \"pickBufferScale\", 1.0);\n\n    _defineProperty(this, \"lastPickTime\", new Date().getTime());\n\n    _defineProperty(this, \"pickFromPickingFBO\", function (layer, _ref) {\n      var _pickedColors;\n\n      var x = _ref.x,\n          y = _ref.y,\n          lngLat = _ref.lngLat,\n          type = _ref.type,\n          target = _ref.target;\n      var isPicked = false;\n      var _this$rendererService = _this.rendererService,\n          getViewportSize = _this$rendererService.getViewportSize,\n          readPixels = _this$rendererService.readPixels,\n          getContainer = _this$rendererService.getContainer;\n\n      var _this$getContainerSiz = _this.getContainerSize(getContainer()),\n          width = _this$getContainerSiz.width,\n          height = _this$getContainerSiz.height;\n\n      width *= DOM.DPR;\n      height *= DOM.DPR;\n\n      var _layer$getLayerConfig = layer.getLayerConfig(),\n          enableHighlight = _layer$getLayerConfig.enableHighlight,\n          enableSelect = _layer$getLayerConfig.enableSelect;\n\n      var xInDevicePixel = x * DOM.DPR;\n      var yInDevicePixel = y * DOM.DPR;\n\n      if (xInDevicePixel > width - 1 * DOM.DPR || xInDevicePixel < 0 || yInDevicePixel > height - 1 * DOM.DPR || yInDevicePixel < 0) {\n        return false;\n      }\n\n      var pickedColors;\n      pickedColors = readPixels({\n        x: Math.floor(xInDevicePixel / _this.pickBufferScale),\n        y: Math.floor((height - (y + 1) * DOM.DPR) / _this.pickBufferScale),\n        width: 1,\n        height: 1,\n        data: new Uint8Array(1 * 1 * 4),\n        framebuffer: _this.pickingFBO\n      });\n\n      if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n        var pickedFeatureIdx = decodePickingColor(pickedColors);\n        var rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n\n        if (pickedFeatureIdx !== layer.getCurrentPickId() && type === 'mousemove') {\n          type = 'mouseenter';\n        }\n\n        var layerTarget = {\n          x: x,\n          y: y,\n          type: type,\n          lngLat: lngLat,\n          featureId: pickedFeatureIdx,\n          feature: rawFeature,\n          target: target\n        };\n\n        if (!rawFeature) {} else {\n          isPicked = true;\n          layer.setCurrentPickId(pickedFeatureIdx);\n\n          _this.triggerHoverOnLayer(layer, layerTarget);\n        }\n      } else {\n        var _layerTarget = {\n          x: x,\n          y: y,\n          lngLat: lngLat,\n          type: layer.getCurrentPickId() !== null && type === 'mousemove' ? 'mouseout' : 'un' + type,\n          featureId: null,\n          target: target,\n          feature: null\n        };\n\n        _this.triggerHoverOnLayer(layer, _objectSpread(_objectSpread({}, _layerTarget), {}, {\n          type: 'unpick'\n        }));\n\n        _this.triggerHoverOnLayer(layer, _layerTarget);\n\n        layer.setCurrentPickId(null);\n      }\n\n      if (enableHighlight) {\n        _this.highlightPickedFeature(layer, pickedColors);\n      }\n\n      if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {\n        var selectedId = decodePickingColor(pickedColors);\n\n        if (layer.getCurrentSelectedId() === null || selectedId !== layer.getCurrentSelectedId()) {\n          _this.selectFeature(layer, pickedColors);\n\n          layer.setCurrentSelectedId(selectedId);\n        } else {\n          _this.selectFeature(layer, new Uint8Array([0, 0, 0, 0]));\n\n          layer.setCurrentSelectedId(null);\n        }\n      }\n\n      return isPicked;\n    });\n  }\n\n  _createClass(PickingService, [{\n    key: \"init\",\n    value: function init(id) {\n      var _this$rendererService2 = this.rendererService,\n          createTexture2D = _this$rendererService2.createTexture2D,\n          createFramebuffer = _this$rendererService2.createFramebuffer,\n          getViewportSize = _this$rendererService2.getViewportSize,\n          getContainer = _this$rendererService2.getContainer;\n\n      var _this$getContainerSiz2 = this.getContainerSize(getContainer()),\n          width = _this$getContainerSiz2.width,\n          height = _this$getContainerSiz2.height;\n\n      width *= DOM.DPR;\n      height *= DOM.DPR;\n      this.pickBufferScale = this.configService.getSceneConfig(id).pickBufferScale || 1;\n      this.pickingFBO = createFramebuffer({\n        color: createTexture2D({\n          width: Math.round(width / this.pickBufferScale),\n          height: Math.round(height / this.pickBufferScale),\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE\n        })\n      });\n      this.interactionService.on(InteractionEvent.Hover, this.pickingAllLayer.bind(this));\n    }\n  }, {\n    key: \"boxPickLayer\",\n    value: function () {\n      var _boxPickLayer = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(layer, box, cb) {\n        var _this2 = this;\n\n        var _this$rendererService3, useFramebuffer, clear, getContainer;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$rendererService3 = this.rendererService, useFramebuffer = _this$rendererService3.useFramebuffer, clear = _this$rendererService3.clear, getContainer = _this$rendererService3.getContainer;\n                this.resizePickingFBO();\n                useFramebuffer(this.pickingFBO, function () {\n                  clear({\n                    framebuffer: _this2.pickingFBO,\n                    color: [0, 0, 0, 0],\n                    stencil: 0,\n                    depth: 1\n                  });\n                  layer.hooks.beforePickingEncode.call();\n                  layer.renderModels();\n                  layer.hooks.afterPickingEncode.call();\n\n                  var features = _this2.pickBox(layer, box);\n\n                  cb(features);\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function boxPickLayer(_x, _x2, _x3) {\n        return _boxPickLayer.apply(this, arguments);\n      }\n\n      return boxPickLayer;\n    }()\n  }, {\n    key: \"pickBox\",\n    value: function pickBox(layer, box) {\n      var _this3 = this;\n\n      var _box$map = box.map(function (v) {\n        var tmpV = v < 0 ? 0 : v;\n        return Math.floor(tmpV * DOM.DPR / _this3.pickBufferScale);\n      }),\n          _box$map2 = _slicedToArray(_box$map, 4),\n          xMin = _box$map2[0],\n          yMin = _box$map2[1],\n          xMax = _box$map2[2],\n          yMax = _box$map2[3];\n\n      var _this$rendererService4 = this.rendererService,\n          getViewportSize = _this$rendererService4.getViewportSize,\n          readPixels = _this$rendererService4.readPixels,\n          getContainer = _this$rendererService4.getContainer;\n\n      var _this$getContainerSiz3 = this.getContainerSize(getContainer()),\n          width = _this$getContainerSiz3.width,\n          height = _this$getContainerSiz3.height;\n\n      width *= DOM.DPR;\n      height *= DOM.DPR;\n\n      if (xMin > (width - 1) * DOM.DPR / this.pickBufferScale || xMax < 0 || yMin > (height - 1) * DOM.DPR / this.pickBufferScale || yMax < 0) {\n        return [];\n      }\n\n      var pickedColors;\n      var w = Math.min(width / this.pickBufferScale, xMax) - xMin;\n      var h = Math.min(height / this.pickBufferScale, yMax) - yMin;\n      pickedColors = readPixels({\n        x: xMin,\n        y: Math.floor(height / this.pickBufferScale - (yMax + 1)),\n        width: w,\n        height: h,\n        data: new Uint8Array(w * h * 4),\n        framebuffer: this.pickingFBO\n      });\n      var features = [];\n      var featuresIdMap = {};\n\n      for (var i = 0; i < pickedColors.length / 4; i = i + 1) {\n        var color = pickedColors.slice(i * 4, i * 4 + 4);\n        var pickedFeatureIdx = decodePickingColor(color);\n\n        if (pickedFeatureIdx !== -1 && !featuresIdMap[pickedFeatureIdx]) {\n          var rawFeature = layer.getSource().getFeatureById(pickedFeatureIdx);\n          features.push(_objectSpread(_objectSpread({}, rawFeature), {}, {\n            pickedFeatureIdx: pickedFeatureIdx\n          }));\n          featuresIdMap[pickedFeatureIdx] = true;\n        }\n      }\n\n      return features;\n    }\n  }, {\n    key: \"getContainerSize\",\n    value: function getContainerSize(container) {\n      if (!!container.getContext) {\n        return {\n          width: container.width / DOM.DPR,\n          height: container.height / DOM.DPR\n        };\n      } else {\n        return container.getBoundingClientRect();\n      }\n    }\n  }, {\n    key: \"pickingAllLayer\",\n    value: function () {\n      var _pickingAllLayer = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(target) {\n        var t;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.alreadyInPicking || this.layerService.alreadyInRendering || this.interactionService.indragging || !this.layerService.getShaderPickStat())) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                this.alreadyInPicking = true;\n                t = new Date().getTime();\n\n                if (!(t - this.lastPickTime > 10 || target.type === 'contextmenu' || target.type === 'click')) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 7;\n                return this.pickingLayers(target);\n\n              case 7:\n                this.lastPickTime = t;\n                this.layerService.renderLayers();\n                this.alreadyInPicking = false;\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function pickingAllLayer(_x4) {\n        return _pickingAllLayer.apply(this, arguments);\n      }\n\n      return pickingAllLayer;\n    }()\n  }, {\n    key: \"resizePickingFBO\",\n    value: function resizePickingFBO() {\n      var getContainer = this.rendererService.getContainer;\n\n      var _this$getContainerSiz4 = this.getContainerSize(getContainer()),\n          width = _this$getContainerSiz4.width,\n          height = _this$getContainerSiz4.height;\n\n      width *= DOM.DPR;\n      height *= DOM.DPR;\n\n      if (this.width !== width || this.height !== height) {\n        this.pickingFBO.resize({\n          width: Math.round(width / this.pickBufferScale),\n          height: Math.round(height / this.pickBufferScale)\n        });\n        this.width = width;\n        this.height = height;\n      }\n    }\n  }, {\n    key: \"pickingLayers\",\n    value: function () {\n      var _pickingLayers = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(target) {\n        var _this4 = this;\n\n        var _this$rendererService5, getViewportSize, useFramebuffer, clear, getContainer;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$rendererService5 = this.rendererService, getViewportSize = _this$rendererService5.getViewportSize, useFramebuffer = _this$rendererService5.useFramebuffer, clear = _this$rendererService5.clear, getContainer = _this$rendererService5.getContainer;\n                this.resizePickingFBO();\n                useFramebuffer(this.pickingFBO, function () {\n                  var layers = _this4.layerService.getRenderList();\n\n                  layers.filter(function (layer) {\n                    return layer.needPick(target.type);\n                  }).reverse().some(function (layer) {\n                    clear({\n                      framebuffer: _this4.pickingFBO,\n                      color: [0, 0, 0, 0],\n                      stencil: 0,\n                      depth: 1\n                    });\n                    layer.hooks.beforePickingEncode.call();\n                    layer.renderModels(true);\n                    layer.hooks.afterPickingEncode.call();\n\n                    var isPicked = _this4.pickFromPickingFBO(layer, target);\n\n                    return isPicked && !layer.getLayerConfig().enablePropagation;\n                  });\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function pickingLayers(_x5) {\n        return _pickingLayers.apply(this, arguments);\n      }\n\n      return pickingLayers;\n    }()\n  }, {\n    key: \"triggerHoverOnLayer\",\n    value: function triggerHoverOnLayer(layer, target) {\n      if (isEventCrash(target)) {\n        layer.emit(target.type, target);\n      }\n    }\n  }, {\n    key: \"highlightPickedFeature\",\n    value: function highlightPickedFeature(layer, pickedColors) {\n      var _pickedColors2 = _slicedToArray(pickedColors, 3),\n          r = _pickedColors2[0],\n          g = _pickedColors2[1],\n          b = _pickedColors2[2];\n\n      layer.hooks.beforeHighlight.call([r, g, b]);\n    }\n  }, {\n    key: \"selectFeature\",\n    value: function selectFeature(layer, pickedColors) {\n      var _pickedColors3 = _slicedToArray(pickedColors, 3),\n          r = _pickedColors3[0],\n          g = _pickedColors3[1],\n          b = _pickedColors3[2];\n\n      layer.hooks.beforeSelect.call([r, g, b]);\n    }\n  }]);\n\n  return PickingService;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"rendererService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"interactionService\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"layerService\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { PickingService as default };","map":null,"metadata":{},"sourceType":"module"}