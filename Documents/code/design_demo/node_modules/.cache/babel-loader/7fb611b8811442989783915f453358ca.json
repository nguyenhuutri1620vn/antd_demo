{"ast":null,"code":"import { Graph, Path, Registry, Shape } from '@antv/x6';\nimport { EDGE_PATH_TYPE, XFLOW_SHAPE } from '../constants';\n\nif (!Registry.Connector.registry.exist(EDGE_PATH_TYPE.VERTICAL_NODE)) {\n  Graph.registerConnector(EDGE_PATH_TYPE.VERTICAL_NODE, (s, e) => {\n    const offset = 16;\n    const deltaY = Math.abs(e.y - s.y);\n    const control = Math.floor(deltaY / 3 * 2);\n    const v1 = {\n      x: s.x,\n      y: s.y + offset + control\n    };\n    const v2 = {\n      x: e.x,\n      y: e.y - offset - control\n    };\n    return Path.normalize(`M ${s.x} ${s.y}\n         L ${s.x} ${s.y + offset}\n         C ${v1.x} ${v1.y} ${v2.x} ${v2.y} ${e.x} ${e.y - offset}\n         L ${e.x} ${e.y}\n        `);\n  }, true);\n}\n\nif (!Registry.Connector.registry.exist(EDGE_PATH_TYPE.VERTICAL_GROUP)) {\n  Graph.registerConnector(EDGE_PATH_TYPE.VERTICAL_GROUP, (s, t) => {\n    const offset = 4;\n    const control = Math.abs(t.y - s.y);\n    const v1 = {\n      x: s.x,\n      y: s.y + offset + control\n    };\n    const v2 = {\n      x: t.x,\n      y: t.y - offset - control\n    };\n    return Path.normalize(`M ${s.x} ${s.y}\n       L ${s.x} ${s.y + offset}\n       C ${v1.x} ${v1.y} ${v2.x} ${v2.y} ${t.x} ${t.y - offset}\n       L ${t.x} ${t.y}\n      `);\n  }, true);\n} // TODO: fix this vertical function\n\n\nif (!Registry.Connector.registry.exist(EDGE_PATH_TYPE.HORIRONTAL_NODE)) {\n  Graph.registerConnector(EDGE_PATH_TYPE.HORIRONTAL_NODE, (s, e) => {\n    const offset = 4; // const control = 80;\n\n    const deltaY = Math.abs(e.y - s.y);\n    const control = Math.floor(deltaY / 3 * 2);\n    const v1 = {\n      x: s.x,\n      y: s.y + offset + control\n    };\n    const v2 = {\n      x: e.x,\n      y: e.y - offset - control\n    };\n    return Path.normalize(`M ${s.x} ${s.y}\n         L ${s.x} ${s.y + offset}\n         C ${v1.x} ${v1.y} ${v2.x} ${v2.y} ${e.x} ${e.y - offset}\n         L ${e.x} ${e.y}\n        `);\n  }, true);\n}\n\nlet XFlowEdge = Shape.Edge.registry.get(XFLOW_SHAPE.EDGE);\n\nif (!Shape.Edge.registry.exist(XFLOW_SHAPE.EDGE)) {\n  XFlowEdge = Shape.Edge.registry.register(XFLOW_SHAPE.EDGE, Shape.Edge.define({\n    zIndex: 1,\n    highlight: false,\n    shape: XFLOW_SHAPE.EDGE // https://x6.antv.vision/zh/docs/api/registry/node-anchor\n    // source: {\n    //   anchor: {\n    //     name: 'bottom',\n    //   },\n    // },\n    // target: {\n    //   anchor: {\n    //     name: 'center',\n    //   },\n    // },\n\n  }), true);\n}\n\nexport { EDGE_PATH_TYPE, XFlowEdge };","map":null,"metadata":{},"sourceType":"module"}