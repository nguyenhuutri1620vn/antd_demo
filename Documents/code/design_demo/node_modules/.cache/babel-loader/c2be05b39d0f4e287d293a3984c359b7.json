{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nvar _excluded = [\"id\", \"attributionControl\", \"style\", \"rotation\", \"mapInstance\"],\n    _excluded2 = [\"id\", \"attributionControl\", \"style\", \"rotation\", \"mapInstance\", \"canvas\", \"hasBaseMap\"];\n\nvar _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { CoordinateSystem, MapServiceEvent, TYPES } from '@antv/l7-core';\nimport { Map } from '@antv/l7-map';\nimport { $window, DOM } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { Version } from '../version';\nimport Viewport from './Viewport';\nvar EventMap = {\n  mapmove: 'move',\n  camerachange: 'move',\n  zoomchange: 'zoom',\n  dragging: 'drag'\n};\nimport { MapTheme } from './theme';\nvar LNGLAT_OFFSET_ZOOM_THRESHOLD = 12;\nvar L7MapService = (_dec = injectable(), _dec2 = inject(TYPES.MapConfig), _dec3 = inject(TYPES.IGlobalConfigService), _dec4 = inject(TYPES.ICoordinateSystemService), _dec5 = inject(TYPES.IEventEmitter), _dec(_class = (_class2 = function () {\n  function L7MapService() {\n    var _this = this;\n\n    _classCallCheck(this, L7MapService);\n\n    _defineProperty(this, \"version\", Version.L7MAP);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"bgColor\", 'rgba(0.0, 0.0, 0.0, 0.0)');\n\n    _initializerDefineProperty(this, \"config\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"coordinateSystemService\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"eventEmitter\", _descriptor4, this);\n\n    _defineProperty(this, \"viewport\", void 0);\n\n    _defineProperty(this, \"markerContainer\", void 0);\n\n    _defineProperty(this, \"cameraChangedCallback\", void 0);\n\n    _defineProperty(this, \"$mapContainer\", void 0);\n\n    _defineProperty(this, \"handleMiniCameraChanged\", function (lng, lat, zoom, bearing, pitch) {\n      var _this$config$offsetCo = _this.config.offsetCoordinate,\n          offsetCoordinate = _this$config$offsetCo === void 0 ? true : _this$config$offsetCo;\n\n      _this.viewport.syncWithMapCamera({\n        bearing: bearing,\n        center: [lng, lat],\n        viewportHeight: _this.map.transform.height,\n        pitch: pitch,\n        viewportWidth: _this.map.transform.width,\n        zoom: zoom,\n        cameraHeight: 0\n      });\n\n      if (_this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD && offsetCoordinate) {\n        _this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT_OFFSET);\n      } else {\n        _this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT);\n      }\n\n      _this.cameraChangedCallback(_this.viewport);\n    });\n\n    _defineProperty(this, \"handleCameraChanged\", function () {\n      var _this$map$getCenter = _this.map.getCenter(),\n          lat = _this$map$getCenter.lat,\n          lng = _this$map$getCenter.lng;\n\n      var _this$config$offsetCo2 = _this.config.offsetCoordinate,\n          offsetCoordinate = _this$config$offsetCo2 === void 0 ? true : _this$config$offsetCo2;\n\n      _this.emit('mapchange');\n\n      _this.viewport.syncWithMapCamera({\n        bearing: _this.map.getBearing(),\n        center: [lng, lat],\n        viewportHeight: _this.map.transform.height,\n        pitch: _this.map.getPitch(),\n        viewportWidth: _this.map.transform.width,\n        zoom: _this.map.getZoom(),\n        cameraHeight: 0\n      });\n\n      if (_this.viewport.getZoom() > LNGLAT_OFFSET_ZOOM_THRESHOLD && offsetCoordinate) {\n        _this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT_OFFSET);\n      } else {\n        _this.coordinateSystemService.setCoordinateSystem(CoordinateSystem.LNGLAT);\n      }\n\n      _this.cameraChangedCallback(_this.viewport);\n    });\n  }\n\n  _createClass(L7MapService, [{\n    key: \"setBgColor\",\n    value: function setBgColor(color) {\n      this.bgColor = color;\n    }\n  }, {\n    key: \"addMarkerContainer\",\n    value: function addMarkerContainer() {\n      var container = this.map.getCanvasContainer();\n      this.markerContainer = DOM.create('div', 'l7-marker-container', container);\n      this.markerContainer.setAttribute('tabindex', '-1');\n    }\n  }, {\n    key: \"getMarkerContainer\",\n    value: function getMarkerContainer() {\n      return this.markerContainer;\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, handle) {\n      if (MapServiceEvent.indexOf(type) !== -1) {\n        this.eventEmitter.on(type, handle);\n      } else {\n        this.map.on(EventMap[type] || type, handle);\n      }\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, handle) {\n      this.map.off(EventMap[type] || type, handle);\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.map.getContainer();\n    }\n  }, {\n    key: \"getMapCanvasContainer\",\n    value: function getMapCanvasContainer() {\n      return this.map.getCanvasContainer();\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      var size = this.map.transform;\n      return [size.width, size.height];\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return 'default';\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.map.getZoom();\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom) {\n      return this.map.setZoom(zoom);\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return this.map.getCenter();\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(lnglat) {\n      this.map.setCenter(lnglat);\n    }\n  }, {\n    key: \"getPitch\",\n    value: function getPitch() {\n      return this.map.getPitch();\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.map.getBearing();\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this.map.getBounds().toArray();\n    }\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      return this.map.getMinZoom();\n    }\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      return this.map.getMaxZoom();\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.map.setBearing(rotation);\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn(option, eventData) {\n      this.map.zoomIn(option, eventData);\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut(option, eventData) {\n      this.map.zoomOut(option, eventData);\n    }\n  }, {\n    key: \"setPitch\",\n    value: function setPitch(pitch) {\n      return this.map.setPitch(pitch);\n    }\n  }, {\n    key: \"panTo\",\n    value: function panTo(p) {\n      this.map.panTo(p);\n    }\n  }, {\n    key: \"panBy\",\n    value: function panBy() {\n      var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      this.panTo([x, y]);\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bound, fitBoundsOptions) {\n      this.map.fitBounds(bound, fitBoundsOptions);\n    }\n  }, {\n    key: \"setMaxZoom\",\n    value: function setMaxZoom(max) {\n      this.map.setMaxZoom(max);\n    }\n  }, {\n    key: \"setMinZoom\",\n    value: function setMinZoom(min) {\n      this.map.setMinZoom(min);\n    }\n  }, {\n    key: \"setMapStatus\",\n    value: function setMapStatus(option) {\n      if (option.doubleClickZoom === true) {\n        this.map.doubleClickZoom.enable();\n      }\n\n      if (option.doubleClickZoom === false) {\n        this.map.doubleClickZoom.disable();\n      }\n\n      if (option.dragEnable === false) {\n        this.map.dragPan.disable();\n      }\n\n      if (option.dragEnable === true) {\n        this.map.dragPan.enable();\n      }\n\n      if (option.rotateEnable === false) {\n        this.map.dragRotate.disable();\n      }\n\n      if (option.dragEnable === true) {\n        this.map.dragRotate.enable();\n      }\n\n      if (option.keyboardEnable === false) {\n        this.map.keyboard.disable();\n      }\n\n      if (option.keyboardEnable === true) {\n        this.map.keyboard.enable();\n      }\n\n      if (option.zoomEnable === false) {\n        this.map.scrollZoom.disable();\n      }\n\n      if (option.zoomEnable === true) {\n        this.map.scrollZoom.enable();\n      }\n    }\n  }, {\n    key: \"setZoomAndCenter\",\n    value: function setZoomAndCenter(zoom, center) {\n      this.map.flyTo({\n        zoom: zoom,\n        center: center\n      });\n    }\n  }, {\n    key: \"setMapStyle\",\n    value: function setMapStyle(style) {\n      this.map.setStyle(this.getMapStyle(style));\n    }\n  }, {\n    key: \"pixelToLngLat\",\n    value: function pixelToLngLat(pixel) {\n      return this.map.unproject(pixel);\n    }\n  }, {\n    key: \"lngLatToPixel\",\n    value: function lngLatToPixel(lnglat) {\n      return this.map.project(lnglat);\n    }\n  }, {\n    key: \"containerToLngLat\",\n    value: function containerToLngLat(pixel) {\n      return this.map.unproject(pixel);\n    }\n  }, {\n    key: \"lngLatToContainer\",\n    value: function lngLatToContainer(lnglat) {\n      return this.map.project(lnglat);\n    }\n  }, {\n    key: \"lngLatToMercator\",\n    value: function lngLatToMercator(lnglat, altitude) {\n      throw new Error('not implement');\n    }\n  }, {\n    key: \"getModelMatrix\",\n    value: function getModelMatrix(lnglat, altitude, rotate) {\n      var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];\n      var origin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n        x: 0,\n        y: 0,\n        z: 0\n      };\n      throw new Error('not implement');\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {\n        var _this$config, _this$config$id, id, _this$config$attribut, attributionControl, _this$config$style, style, _this$config$rotation, rotation, mapInstance, rest;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this$config = this.config, _this$config$id = _this$config.id, id = _this$config$id === void 0 ? 'map' : _this$config$id, _this$config$attribut = _this$config.attributionControl, attributionControl = _this$config$attribut === void 0 ? false : _this$config$attribut, _this$config$style = _this$config.style, style = _this$config$style === void 0 ? 'light' : _this$config$style, _this$config$rotation = _this$config.rotation, rotation = _this$config$rotation === void 0 ? 0 : _this$config$rotation, mapInstance = _this$config.mapInstance, rest = _objectWithoutProperties(_this$config, _excluded);\n                this.viewport = new Viewport();\n\n                if (mapInstance) {\n                  this.map = mapInstance;\n                  this.$mapContainer = this.map.getContainer();\n                } else {\n                  this.$mapContainer = this.creatAmapContainer(id);\n                  this.map = new Map(_objectSpread({\n                    container: this.$mapContainer,\n                    style: this.getMapStyle(style),\n                    bearing: rotation\n                  }, rest));\n                }\n\n                this.map.on('load', this.handleCameraChanged);\n                this.map.on('move', this.handleCameraChanged);\n                this.handleCameraChanged();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"initMiniMap\",\n    value: function () {\n      var _initMiniMap = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var _this$config2, _this$config2$id, id, _this$config2$attribu, attributionControl, _this$config2$style, style, _this$config2$rotatio, rotation, mapInstance, _this$config2$canvas, canvas, _this$config2$hasBase, hasBaseMap, rest, center;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this$config2 = this.config, _this$config2$id = _this$config2.id, id = _this$config2$id === void 0 ? 'map' : _this$config2$id, _this$config2$attribu = _this$config2.attributionControl, attributionControl = _this$config2$attribu === void 0 ? false : _this$config2$attribu, _this$config2$style = _this$config2.style, style = _this$config2$style === void 0 ? 'light' : _this$config2$style, _this$config2$rotatio = _this$config2.rotation, rotation = _this$config2$rotatio === void 0 ? 0 : _this$config2$rotatio, mapInstance = _this$config2.mapInstance, _this$config2$canvas = _this$config2.canvas, canvas = _this$config2$canvas === void 0 ? null : _this$config2$canvas, _this$config2$hasBase = _this$config2.hasBaseMap, hasBaseMap = _this$config2$hasBase === void 0 ? false : _this$config2$hasBase, rest = _objectWithoutProperties(_this$config2, _excluded2);\n                this.viewport = new Viewport();\n                this.$mapContainer = canvas;\n                this.map = new Map(_objectSpread({\n                  container: this.$mapContainer,\n                  style: this.getMapStyle(style),\n                  bearing: rotation,\n                  canvas: canvas\n                }, rest));\n\n                if (!hasBaseMap) {\n                  this.map.on('load', this.handleCameraChanged);\n                  this.map.on('move', this.handleCameraChanged);\n                  this.handleCameraChanged();\n                } else {\n                  center = this.map.getCenter();\n                  this.handleMiniCameraChanged(center.lng, center.lat, this.map.getZoom(), this.map.getBearing(), this.map.getPitch());\n                  $window.document.addEventListener('mapCameaParams', function (event) {\n                    var _event$e = event.e,\n                        longitude = _event$e.longitude,\n                        latitude = _event$e.latitude,\n                        scale = _event$e.scale,\n                        bearing = _event$e.bearing,\n                        pitch = _event$e.pitch;\n\n                    _this2.handleMiniCameraChanged(longitude, latitude, scale - 1.25, bearing, pitch);\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function initMiniMap() {\n        return _initMiniMap.apply(this, arguments);\n      }\n\n      return initMiniMap;\n    }()\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this$$mapContainer, _this$$mapContainer$p;\n\n      (_this$$mapContainer = this.$mapContainer) === null || _this$$mapContainer === void 0 ? void 0 : (_this$$mapContainer$p = _this$$mapContainer.parentNode) === null || _this$$mapContainer$p === void 0 ? void 0 : _this$$mapContainer$p.removeChild(this.$mapContainer);\n      this.eventEmitter.removeAllListeners();\n\n      if (this.map) {\n        this.map.remove();\n        this.$mapContainer = null;\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(name) {\n      var _this$eventEmitter;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      (_this$eventEmitter = this.eventEmitter).emit.apply(_this$eventEmitter, [name].concat(args));\n    }\n  }, {\n    key: \"once\",\n    value: function once(name) {\n      var _this$eventEmitter2;\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      (_this$eventEmitter2 = this.eventEmitter).once.apply(_this$eventEmitter2, [name].concat(args));\n    }\n  }, {\n    key: \"getMapContainer\",\n    value: function getMapContainer() {\n      return this.$mapContainer;\n    }\n  }, {\n    key: \"exportMap\",\n    value: function exportMap(type) {\n      var renderCanvas = this.map.getCanvas();\n      var layersPng = type === 'jpg' ? renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/jpeg') : renderCanvas === null || renderCanvas === void 0 ? void 0 : renderCanvas.toDataURL('image/png');\n      return layersPng;\n    }\n  }, {\n    key: \"onCameraChanged\",\n    value: function onCameraChanged(callback) {\n      this.cameraChangedCallback = callback;\n    }\n  }, {\n    key: \"creatAmapContainer\",\n    value: function creatAmapContainer(id) {\n      var $wrapper = id;\n\n      if (typeof id === 'string') {\n        $wrapper = document.getElementById(id);\n      }\n\n      return $wrapper;\n    }\n  }, {\n    key: \"getMapStyle\",\n    value: function getMapStyle(name) {\n      if (typeof name !== 'string') {\n        return name;\n      }\n\n      return MapTheme[name] ? MapTheme[name] : name;\n    }\n  }]);\n\n  return L7MapService;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"config\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"coordinateSystemService\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, \"eventEmitter\", [_dec5], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { L7MapService as default };","map":null,"metadata":{},"sourceType":"module"}