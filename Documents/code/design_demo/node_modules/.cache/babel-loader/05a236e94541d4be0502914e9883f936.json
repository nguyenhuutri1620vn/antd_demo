{"ast":null,"code":"/* eslint-disable jsx-a11y/click-events-have-key-events  */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport React from 'react';\nimport classnames from 'classnames';\nimport addEventListener from 'rc-util/lib/Dom/addEventListener';\nimport { MenubarContext } from './context';\nconst cacheDeactiveMap = new WeakMap();\n\nclass MenubarItemInner extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onDocumentClick = () => {\n      this.deactive();\n    };\n\n    this.onClick = e => {\n      this.props.context.activeMenubar();\n      this.removeDeactive(e.currentTarget.parentElement);\n      this.active();\n    };\n\n    this.onMouseEnter = e => {\n      if (this.props.context.menubarActived && !this.state.active && !this.isPrevMenuHiddening(e)) {\n        const currentTarget = e.currentTarget;\n        const childNodes = currentTarget.parentElement.childNodes;\n        childNodes.forEach(child => {\n          if (child === currentTarget) {\n            this.removeDeactive(child);\n          } else {\n            this.callDeactive(child);\n          }\n        });\n        this.active();\n      }\n    };\n\n    this.onMouseLeave = e => {\n      const relatedTarget = e.relatedTarget;\n      const currentTarget = e.currentTarget;\n\n      if (this.props.context.menubarActived && this.state.active) {\n        const childNodes = currentTarget.parentElement.childNodes;\n        let shoudDeactive = false;\n\n        if (relatedTarget !== window) {\n          for (let i = 0, l = childNodes.length; i < l; i += 1) {\n            const child = childNodes[i];\n\n            if (child === relatedTarget || child.contains(relatedTarget)) {\n              shoudDeactive = true;\n              break;\n            }\n          }\n        }\n\n        if (shoudDeactive) {\n          this.deactive();\n        } else {\n          // 缓存一下，当再次 hover 到其他菜单时被调用\n          this.cacheDeactive(currentTarget);\n        }\n      }\n    };\n\n    this.active = () => {\n      this.setState({\n        active: true\n      });\n\n      if (!this.removeDocClickEvent) {\n        this.removeDocClickEvent = addEventListener(document.documentElement, 'click', this.onDocumentClick).remove;\n      }\n    };\n\n    this.deactive = () => {\n      this.setState({\n        active: false\n      });\n\n      if (this.removeDocClickEvent) {\n        this.removeDocClickEvent();\n        this.removeDocClickEvent = null;\n      }\n    };\n\n    this.popupClassName = `${props.context.prefixCls}-item-dropdown`;\n    this.state = {\n      active: false\n    };\n  }\n\n  isPrevMenuHiddening(e) {\n    const toElement = e.nativeEvent.toElement;\n\n    if (toElement && toElement.className === this.popupClassName) {\n      return true;\n    }\n\n    const currentTarget = e.currentTarget;\n    const childNodes = currentTarget.parentElement.childNodes;\n\n    for (let i = 0, l = childNodes.length; i < l; i += 1) {\n      const child = childNodes[i];\n      const popupElem = child.querySelector(`.${this.popupClassName}`);\n\n      if (popupElem.contains(toElement)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  cacheDeactive(elem) {\n    cacheDeactiveMap.set(elem, this.deactive);\n  }\n\n  callDeactive(elem) {\n    if (cacheDeactiveMap.has(elem)) {\n      cacheDeactiveMap.get(elem)();\n      cacheDeactiveMap.delete(elem);\n    }\n  }\n\n  removeDeactive(elem) {\n    cacheDeactiveMap.delete(elem);\n  }\n\n  render() {\n    const {\n      text,\n      children,\n      hidden\n    } = this.props;\n    const {\n      prefixCls,\n      menubarActived\n    } = this.props.context;\n    const currentMenuActived = menubarActived && this.state.active;\n    const baseCls = `${prefixCls}-item`;\n    return React.createElement(\"div\", {\n      className: classnames(baseCls, {\n        [`${baseCls}-hidden`]: hidden,\n        [`${baseCls}-hover`]: menubarActived,\n        [`${baseCls}-active`]: currentMenuActived\n      }),\n      onMouseEnter: this.onMouseEnter,\n      onMouseLeave: this.onMouseLeave\n    }, React.createElement(\"div\", {\n      className: classnames(`${baseCls}-text`, {\n        [`${baseCls}-text-active`]: currentMenuActived\n      }),\n      onClick: this.onClick\n    }, text), React.createElement(\"div\", {\n      className: this.popupClassName\n    }, children));\n  }\n\n}\n\nexport const MenubarItem = props => React.createElement(MenubarContext.Consumer, null, context => React.createElement(MenubarItemInner, Object.assign({\n  context: context\n}, props)));","map":null,"metadata":{},"sourceType":"module"}