{"ast":null,"code":"import { __rest } from \"tslib\";\nimport React, { useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Empty, Form, Tabs } from 'antd';\nimport { xflowDefaultControls, makeControlMap, getControlFromMap } from './control-map/index';\nexport { FormItemWrapper } from './common/form-item-wrapper';\nconst {\n  TabPane\n} = Tabs;\nexport const SchemaForm = props => {\n  var _a;\n\n  const {\n    schema,\n    form: formInstance,\n    className,\n    triggerUpdate,\n    defaultControlRender,\n    afterUpdatingCb,\n    controlMap: controlMapfromParent\n  } = props,\n        otherProps = __rest(props, [\"schema\", \"form\", \"className\", \"triggerUpdate\", \"defaultControlRender\", \"afterUpdatingCb\", \"controlMap\"]);\n\n  const {\n    tabs\n  } = schema;\n  const [form] = Form.useForm(formInstance);\n  const controlMap = React.useMemo(() => props.controlMap ? props.controlMap : makeControlMap(xflowDefaultControls), [props.controlMap]);\n  const innerTriggerUpdate = useCallback(values => {\n    if (typeof triggerUpdate === 'function') {\n      triggerUpdate(form, values);\n    }\n  }, [form, triggerUpdate]);\n  /** 初次挂载时设置一次值以激活首次联动 */\n\n  useEffect(() => {\n    form.setFieldsValue({});\n  }, [form]);\n  /** 切换标签时激活联动 */\n\n  const onClickTab = useCallback(() => {\n    requestAnimationFrame(() => {\n      form.setFieldsValue({});\n    });\n  }, [form]);\n  return React.createElement(Form, Object.assign({\n    size: \"small\",\n    form: form,\n    layout: \"vertical\",\n    className: classNames('xflow-json-form', className)\n  }, otherProps), React.createElement(Tabs, {\n    type: \"card\",\n    defaultActiveKey: (_a = tabs[0]) === null || _a === void 0 ? void 0 : _a.name,\n    className: classNames({\n      ['tabs']: true,\n      ['xTab']: true,\n      ['singleTab']: (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 1,\n      ['coupleTab']: (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 2,\n      ['ternateTab']: (tabs === null || tabs === void 0 ? void 0 : tabs.length) === 3\n    }),\n    onTabClick: onClickTab\n  }, tabs.map(tab => {\n    const {\n      name: tabName,\n      groups\n    } = tab;\n    return React.createElement(TabPane, {\n      key: tabName,\n      tab: tabName\n    }, groups.length === 0 && React.createElement(Empty, {\n      style: {\n        padding: '24px 0'\n      }\n    }), groups.length > 0 && groups.map(group => {\n      const {\n        controls: groupControls = []\n      } = group;\n\n      if (groupControls.length === 0) {\n        return React.createElement(Empty, {\n          style: {\n            padding: '24px 0'\n          }\n        });\n      }\n\n      return groupControls.map(control => {\n        const {\n          shape,\n          name: controlName\n        } = control;\n        const ControlComponent = getControlFromMap(shape, controlMap, defaultControlRender);\n\n        if (!ControlComponent) {\n          console.error('未找到对应的控件:', shape);\n          return null;\n        }\n\n        return React.createElement(ControlComponent, {\n          key: controlName,\n          form: form,\n          controlSchema: control,\n          triggerUpdate: innerTriggerUpdate,\n          afterUpdatingCb: afterUpdatingCb\n        });\n      });\n    }));\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}