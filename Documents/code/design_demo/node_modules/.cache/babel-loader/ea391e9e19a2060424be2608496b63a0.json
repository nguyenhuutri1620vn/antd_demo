{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { modifyCSS, createDom } from '@antv/dom-util';\nimport { isArray, isString } from '@antv/util';\nimport insertCss from 'insert-css';\nimport Base from '../base';\ntypeof document !== 'undefined' && insertCss(\"\\n  .g6-component-tooltip {\\n    border: 1px solid #e2e2e2;\\n    border-radius: 4px;\\n    font-size: 12px;\\n    color: #545454;\\n    background-color: rgba(255, 255, 255, 0.9);\\n    padding: 10px 8px;\\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\\n  }\\n  .tooltip-type {\\n    padding: 0;\\n    margin: 0;\\n  }\\n  .tooltip-id {\\n    color: #531dab;\\n  }\\n\");\n\nvar Tooltip =\n/** @class */\nfunction (_super) {\n  __extends(Tooltip, _super);\n\n  function Tooltip(config) {\n    return _super.call(this, config) || this;\n  }\n\n  Tooltip.prototype.getDefaultCfgs = function () {\n    return {\n      offsetX: 6,\n      offsetY: 6,\n      // 指定菜单内容，function(e) {...}\n      getContent: function getContent(e) {\n        return \"\\n          <h4 class='tooltip-type'>\\u7C7B\\u578B\\uFF1A\".concat(e.item.getType(), \"</h4>\\n          <span class='tooltip-id'>ID\\uFF1A\").concat(e.item.getID(), \"</span>\\n        \");\n      },\n      shouldBegin: function shouldBegin(e) {\n        return true;\n      },\n      itemTypes: ['node', 'edge', 'combo'],\n      trigger: 'mouseenter',\n      fixToNode: undefined\n    };\n  }; // class-methods-use-this\n\n\n  Tooltip.prototype.getEvents = function () {\n    if (this.get('trigger') === 'click') {\n      return {\n        'node:click': 'onClick',\n        'edge:click': 'onClick',\n        'combo:click': 'onClick',\n        'canvas:click': 'onMouseLeave',\n        afterremoveitem: 'onMouseLeave',\n        contextmenu: 'onMouseLeave',\n        drag: 'onMouseLeave'\n      };\n    }\n\n    return {\n      'node:mouseenter': 'onMouseEnter',\n      'node:mouseleave': 'onMouseLeave',\n      'node:mousemove': 'onMouseMove',\n      'edge:mouseenter': 'onMouseEnter',\n      'edge:mouseleave': 'onMouseLeave',\n      'edge:mousemove': 'onMouseMove',\n      'combo:mouseenter': 'onMouseEnter',\n      'combo:mouseleave': 'onMouseLeave',\n      'combo:mousemove': 'onMouseMove',\n      afterremoveitem: 'onMouseLeave',\n      contextmenu: 'onMouseLeave',\n      'node:drag': 'onMouseLeave'\n    };\n  };\n\n  Tooltip.prototype.init = function () {\n    var self = this;\n    var className = self.get('className') || 'g6-component-tooltip';\n    var tooltip = createDom(\"<div class=\".concat(className, \"></div>\"));\n    var container = self.get('container');\n\n    if (!container) {\n      container = self.get('graph').get('container');\n    }\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n    }\n\n    modifyCSS(tooltip, {\n      position: 'absolute',\n      visibility: 'hidden',\n      display: 'none'\n    });\n    container.appendChild(tooltip);\n\n    if (self.get('trigger') !== 'click') {\n      tooltip.addEventListener('mouseenter', function (e) {\n        modifyCSS(tooltip, {\n          visibility: 'visible',\n          display: 'unset'\n        });\n      });\n      tooltip.addEventListener('mouseleave', function (e) {\n        self.hideTooltip();\n      });\n    }\n\n    self.set('tooltip', tooltip);\n  };\n\n  Tooltip.prototype.onClick = function (e) {\n    var itemTypes = this.get('itemTypes');\n    if (e.item && e.item.getType && itemTypes.indexOf(e.item.getType()) === -1) return;\n    var item = e.item;\n    var graph = this.get('graph'); // 若与上一次同一 item，隐藏该 tooltip\n\n    if (this.currentTarget === item) {\n      this.currentTarget = null;\n      this.hideTooltip();\n      graph.emit('tooltipchange', {\n        item: e.item,\n        action: 'hide'\n      });\n    } else {\n      this.currentTarget = item;\n      this.showTooltip(e);\n      graph.emit('tooltipchange', {\n        item: e.item,\n        action: 'show'\n      });\n    }\n  };\n\n  Tooltip.prototype.onMouseEnter = function (e) {\n    var itemTypes = this.get('itemTypes');\n    if (e.item && e.item.getType && itemTypes.indexOf(e.item.getType()) === -1) return;\n    var item = e.item;\n    var graph = this.get('graph');\n    this.currentTarget = item;\n    this.showTooltip(e);\n    graph.emit('tooltipchange', {\n      item: e.item,\n      action: 'show'\n    });\n  };\n\n  Tooltip.prototype.onMouseMove = function (e) {\n    var itemTypes = this.get('itemTypes');\n    if (e.item && e.item.getType && itemTypes.indexOf(e.item.getType()) === -1) return;\n\n    if (!this.currentTarget || e.item !== this.currentTarget) {\n      return;\n    }\n\n    this.showTooltip(e);\n  };\n\n  Tooltip.prototype.onMouseLeave = function () {\n    this.hideTooltip();\n    var graph = this.get('graph');\n    graph.emit('tooltipchange', {\n      item: this.currentTarget,\n      action: 'hide'\n    });\n    this.currentTarget = null;\n  };\n\n  Tooltip.prototype.clearContainer = function () {\n    var container = this.get('tooltip');\n\n    if (container) {\n      container.innerHTML = '';\n    }\n  };\n\n  Tooltip.prototype.showTooltip = function (e) {\n    if (!e.item) {\n      return;\n    }\n\n    var itemTypes = this.get('itemTypes');\n    if (e.item.getType && itemTypes.indexOf(e.item.getType()) === -1) return;\n    var container = this.get('tooltip');\n    var getContent = this.get('getContent');\n    var tooltip = getContent(e);\n\n    if (isString(tooltip)) {\n      container.innerHTML = tooltip;\n    } else {\n      this.clearContainer();\n      container.appendChild(tooltip);\n    }\n\n    this.updatePosition(e);\n  };\n\n  Tooltip.prototype.hideTooltip = function () {\n    var tooltip = this.get('tooltip');\n\n    if (tooltip) {\n      modifyCSS(tooltip, {\n        visibility: 'hidden',\n        display: 'none'\n      });\n    }\n  };\n\n  Tooltip.prototype.updatePosition = function (e) {\n    var shouldBegin = this.get('shouldBegin');\n    var tooltip = this.get('tooltip');\n\n    if (!shouldBegin(e)) {\n      modifyCSS(tooltip, {\n        visibility: 'hidden',\n        display: 'none'\n      });\n      return;\n    }\n\n    var graph = this.get('graph');\n    var width = graph.get('width');\n    var height = graph.get('height');\n    var offsetX = this.get('offsetX') || 0;\n    var offsetY = this.get('offsetY') || 0; // const mousePos = graph.getPointByClient(e.clientX, e.clientY);\n\n    var point = graph.getPointByClient(e.clientX, e.clientY);\n    var fixToNode = this.get('fixToNode');\n    var item = e.item;\n\n    if (item.getType && item.getType() === 'node' && fixToNode && isArray(fixToNode) && fixToNode.length >= 2) {\n      var itemBBox = item.getBBox();\n      point = {\n        x: itemBBox.minX + itemBBox.width * fixToNode[0],\n        y: itemBBox.minY + itemBBox.height * fixToNode[1]\n      };\n    }\n\n    var _a = graph.getCanvasByPoint(point.x, point.y),\n        x = _a.x,\n        y = _a.y;\n\n    var graphContainer = graph.getContainer();\n    var res = {\n      x: x + graphContainer.offsetLeft + offsetX,\n      y: y + graphContainer.offsetTop + offsetY\n    }; // 先修改为 visible 方可正确计算 bbox\n\n    modifyCSS(tooltip, {\n      visibility: 'visible',\n      display: 'unset'\n    });\n    var bbox = tooltip.getBoundingClientRect();\n\n    if (x + bbox.width + offsetX > width) {\n      res.x -= bbox.width + offsetX;\n    }\n\n    if (y + bbox.height + offsetY > height) {\n      res.y -= bbox.height + offsetY;\n    }\n\n    modifyCSS(tooltip, {\n      left: \"\".concat(res.x, \"px\"),\n      top: \"\".concat(res.y, \"px\")\n    });\n  };\n\n  Tooltip.prototype.hide = function () {\n    this.onMouseLeave();\n  };\n\n  Tooltip.prototype.destroy = function () {\n    var tooltip = this.get('tooltip');\n\n    if (tooltip) {\n      var container = this.get('container');\n\n      if (!container) {\n        container = this.get('graph').get('container');\n      }\n\n      if (isString(container)) {\n        container = document.getElementById(container);\n      }\n\n      container.removeChild(tooltip);\n    }\n  };\n\n  return Tooltip;\n}(Base);\n\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}