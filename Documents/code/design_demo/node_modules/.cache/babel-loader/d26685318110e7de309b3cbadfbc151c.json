{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsDelEdge;\n\n(function (NsDelEdge) {\n  /** Command: 用于注册named factory */\n  NsDelEdge.command = XFlowEdgeCommands.DEL_EDGE;\n  /** hookName */\n\n  NsDelEdge.hookKey = 'delEdge';\n  let ErrEnum;\n\n  (function (ErrEnum) {\n    ErrEnum[\"EDGE_NOT_EXIST\"] = \"edge is not exist\";\n    ErrEnum[\"EDGE_INVALID_CELL\"] = \"this is not a valid cell\";\n    ErrEnum[\"X6_DELETE_FAILED\"] = \"x6 throw err when call delete edge\";\n    ErrEnum[\"SERVICE_REJECT\"] = \"service reject to delete\";\n  })(ErrEnum = NsDelEdge.ErrEnum || (NsDelEdge.ErrEnum = {}));\n})(NsDelEdge || (NsDelEdge = {}));\n\nlet DelEdgeCommand =\n/** 创建节点命令 */\nclass DelEdgeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.delEdge.call(\n      /** 执行 hooks pipeline处理args */\n      args,\n      /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          edgeConfig,\n          x6Edge,\n          deleteEdgeService,\n          commandService,\n          options\n        } = handlerArgs;\n        let edgeCell = x6Edge;\n        /** 没有edgeCell时查找cell */\n\n        if (!edgeCell) {\n          edgeCell = yield this.findEdgeById(edgeConfig);\n\n          if (!edgeCell) {\n            console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeConfig);\n            return {\n              err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n            };\n          }\n        }\n\n        const isEdge = edgeCell && edgeCell.isEdge();\n\n        if (!isEdge) {\n          console.error(NsDelEdge.ErrEnum.EDGE_NOT_EXIST, edgeCell);\n          return {\n            err: NsDelEdge.ErrEnum.EDGE_NOT_EXIST\n          };\n        }\n\n        if (deleteEdgeService) {\n          /** 需要请求接口 */\n          const canDelete = yield deleteEdgeService(handlerArgs);\n\n          if (!canDelete) {\n            return {\n              err: NsDelEdge.ErrEnum.SERVICE_REJECT\n            };\n          }\n        }\n\n        try {\n          const targetCell = edgeCell.getTargetCell();\n          const sourceCell = edgeCell.getSourceCell();\n          const sourcePortId = edgeCell.getSourcePortId();\n          const targetPortId = edgeCell.getTargetPortId();\n          const source = sourceCell.id;\n          const target = targetCell.id;\n          /** 执行remove */\n\n          edgeCell.remove(Object.assign(Object.assign({}, options), {\n            isCommand: true\n          }));\n          /** 创建 undo */\n\n          const undo = Disposable.create(() => {\n            commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n              edgeConfig: {\n                source,\n                target,\n                sourcePortId,\n                targetPortId\n              }\n            });\n          });\n          /** add undo */\n\n          this.ctx.addUndo(undo);\n          return {\n            err: null,\n            edgeConfig: {\n              source,\n              target,\n              sourcePortId,\n              targetPortId\n            },\n            targetCell,\n            sourceCell,\n            sourcePortId,\n            targetPortId\n          };\n        } catch (error) {\n          console.error(NsDelEdge.ErrEnum.X6_DELETE_FAILED, error);\n          return {\n            err: NsDelEdge.ErrEnum.X6_DELETE_FAILED\n          };\n        }\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.findEdgeById = edge => __awaiter(this, void 0, void 0, function* () {\n      const graph = yield this.ctx.getX6Graph();\n      const cell = graph.getCellById(edge.id);\n      return cell;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], DelEdgeCommand.prototype, \"init\", null);\n\nDelEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelEdge.command.id\n  }\n})\n/** 创建节点命令 */\n], DelEdgeCommand);\nexport { DelEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}