{"ast":null,"code":"import WebWorker from './work';\nexport var LayoutWorker = function LayoutWorker(workerScriptURL) {\n  if (workerScriptURL === void 0) {\n    workerScriptURL = 'https://unpkg.com/@antv/layout@latest/dist/layout.min.js';\n  }\n\n  function workerCode() {\n    var LAYOUT_MESSAGE = {\n      // run layout\n      RUN: 'LAYOUT_RUN',\n      // layout ended with success\n      END: 'LAYOUT_END',\n      // layout error\n      ERROR: 'LAYOUT_ERROR',\n      // layout tick, used in force directed layout\n      TICK: 'LAYOUT_TICK',\n      GPURUN: 'GPU_LAYOUT_RUN',\n      GPUEND: 'GPU_LAYOUT_END'\n    }; // @ts-ignore\n\n    layout.registerLayout('grid', layout.GridLayout); // @ts-ignore\n\n    layout.registerLayout('random', layout.RandomLayout); // @ts-ignore\n\n    layout.registerLayout('force', layout.ForceLayout); // @ts-ignore\n\n    layout.registerLayout('circular', layout.CircularLayout); // @ts-ignore\n\n    layout.registerLayout('dagre', layout.DagreLayout); // @ts-ignore\n\n    layout.registerLayout('radial', layout.RadialLayout); // @ts-ignore\n\n    layout.registerLayout('concentric', layout.ConcentricLayout); // @ts-ignore\n\n    layout.registerLayout('mds', layout.MDSLayout); // @ts-ignore\n\n    layout.registerLayout('fruchterman', layout.FruchtermanLayout); // @ts-ignore\n\n    layout.registerLayout('fruchterman-gpu', layout.FruchtermanGPULayout); // @ts-ignore\n\n    layout.registerLayout('gForce', layout.GForceLayout); // @ts-ignore\n\n    layout.registerLayout('gForce-gpu', layout.GForceGPULayout); // @ts-ignore\n\n    layout.registerLayout('comboForce', layout.ComboForceLayout); // @ts-ignore\n\n    layout.registerLayout('forceAtlas2', layout.ForceAtlas2Layout);\n\n    function isLayoutMessage(event) {\n      var type = event.data.type;\n      return type === LAYOUT_MESSAGE.RUN || type === LAYOUT_MESSAGE.GPURUN;\n    }\n\n    function handleLayoutMessage(event) {\n      var _this = this;\n\n      var type = event.data.type;\n\n      switch (type) {\n        case LAYOUT_MESSAGE.RUN:\n          {\n            var _a = event.data,\n                nodes_1 = _a.nodes,\n                edges = _a.edges,\n                _b = _a.layoutCfg,\n                layoutCfg = _b === void 0 ? {} : _b;\n            var layoutType = layoutCfg.type; // @ts-ignore\n\n            var LayoutClass = layout.getLayoutByName(layoutType);\n\n            if (!LayoutClass) {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \".concat(layoutType, \" not found\")\n              });\n              break;\n            }\n\n            var layoutMethod_1;\n\n            layoutCfg.onLayoutEnd = function () {\n              _this.postMessage({\n                type: LAYOUT_MESSAGE.END,\n                nodes: nodes_1\n              });\n\n              layoutMethod_1 === null || layoutMethod_1 === void 0 ? void 0 : layoutMethod_1.destroy();\n            };\n\n            layoutMethod_1 = new LayoutClass(layoutCfg);\n            layoutMethod_1.init({\n              nodes: nodes_1,\n              edges: edges\n            });\n            layoutMethod_1.execute();\n            break;\n          }\n\n        case LAYOUT_MESSAGE.GPURUN:\n          {\n            var _c = event.data,\n                nodes = _c.nodes,\n                edges = _c.edges,\n                _d = _c.layoutCfg,\n                layoutCfg = _d === void 0 ? {} : _d,\n                canvas = _c.canvas;\n            var layoutType = layoutCfg.type; // @ts-ignore\n\n            var LayoutClass = layout.getLayoutByName(layoutType);\n\n            if (!LayoutClass) {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \".concat(layoutType, \" not found\")\n              });\n              break;\n            }\n\n            if (layoutType.split('-')[1] !== 'gpu') {\n              this.postMessage({\n                type: LAYOUT_MESSAGE.ERROR,\n                message: \"layout \".concat(layoutType, \" does not support GPU\")\n              });\n              break;\n            }\n\n            var layoutMethod = new LayoutClass(layoutCfg);\n            layoutMethod.init({\n              nodes: nodes,\n              edges: edges\n            });\n            layoutMethod.executeWithWorker(canvas, this);\n            break;\n          }\n\n        default:\n          break;\n      }\n    }\n\n    onmessage = function onmessage(event) {\n      if (isLayoutMessage(event)) {\n        handleLayoutMessage(event);\n      }\n    };\n  }\n\n  var layoutWorker = new WebWorker(workerCode, workerScriptURL);\n  return layoutWorker;\n};","map":null,"metadata":{},"sourceType":"module"}