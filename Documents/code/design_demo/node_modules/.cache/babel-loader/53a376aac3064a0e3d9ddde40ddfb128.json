{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Path } from '../../geometry';\nimport { normalize } from './util';\nexport const async = _a => {\n  var {\n    width,\n    height,\n    offset,\n    open,\n    flip\n  } = _a,\n      attrs = __rest(_a, [\"width\", \"height\", \"offset\", \"open\", \"flip\"]);\n\n  let h = height || 6;\n  const w = width || 10;\n  const opened = open === true;\n  const fliped = flip === true;\n  const result = Object.assign(Object.assign({}, attrs), {\n    tagName: 'path'\n  });\n\n  if (fliped) {\n    h = -h;\n  }\n\n  const path = new Path();\n  path.moveTo(0, h).lineTo(w, 0);\n\n  if (!opened) {\n    path.lineTo(w, h);\n    path.close();\n  } else {\n    result.fill = 'none';\n  }\n\n  result.d = normalize(path.serialize(), {\n    x: offset || -w / 2,\n    y: h / 2\n  });\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}