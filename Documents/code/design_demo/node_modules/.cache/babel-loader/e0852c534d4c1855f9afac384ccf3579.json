{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { RxModel, NsModel } from '../common/rx-model';\nimport { Deferred } from '../common/deferred';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IModelOptionProvider, IModelService, IModelContribution } from './interface';\nimport { contrib, Contribution, singleton, inject } from 'mana-syringe';\nlet ModelRegistry = class ModelRegistry {\n  constructor() {\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** Deferred Model Map */\n\n    this.deferredModelMap = new Map();\n    /**\n     * 注册model\n     * @param options IModelOptions<T>\n     */\n\n    this.registerModel = options => {\n      const {\n        id,\n        getInitialValue,\n        modelFactory\n      } = options;\n      const toDispose = new DisposableCollection();\n      const defer = this.ensureModel(id);\n\n      if (defer.isResolved) {\n        console.error(options, 'model has been registerd');\n        return;\n      }\n\n      const initialValue = getInitialValue ? getInitialValue() : NsModel.EMPTY_VALUE;\n      const model = modelFactory ? modelFactory() : new RxModel(initialValue);\n\n      if (NsModel.isValidValue(initialValue)) {\n        defer.resolve(model);\n      }\n\n      if (options.watchChange) {\n        /** 绑定watch事件 */\n        options.watchChange(model, this).then(d => {\n          /** createModel 后 resolve */\n          if (!defer.isResolved) {\n            defer.resolve(model);\n          }\n\n          this.toDispose.pushAll([d, toDispose]);\n          toDispose.push(d);\n        });\n      }\n\n      return toDispose;\n    };\n    /**\n     * 查找 model\n     * @param token: Token<T>\n     */\n\n\n    this.findDeferredModel = token => {\n      return this.deferredModelMap.get(token);\n    };\n    /**\n     *  消费Model: await model resolve\n     * @param token: Token<T>\n     */\n\n\n    this.awaitModel = token => {\n      const defer = this.ensureModel(token);\n      return defer.promise;\n    };\n    /**\n     * 注册 定义在IModelOptionProvider中的Model\n     */\n\n\n    this.registerRuntimeModel = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        modelRegisterFunc\n      } = yield this.modelOptionProvider.getOption();\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n\n      if (modelRegisterFunc) {\n        modelRegisterFunc(this, graphInstance);\n      }\n    });\n    /**\n     * 确保调用时有可用的Model\n     * @param id ModelId\n     */\n\n\n    this.ensureModel = token => {\n      const existDeferred = this.deferredModelMap.get(token);\n\n      if (existDeferred) {\n        return existDeferred;\n      }\n      /** 注册ModelDeferred */\n\n\n      const newDeferred = new Deferred();\n      this.deferredModelMap.set(token, newDeferred);\n      this.toDispose.push(Disposable.create(() => this.deferredModelMap.delete(token)));\n      return newDeferred;\n    };\n  }\n  /** app启动时，收集Model扩展点的注册项 */\n\n\n  onStart() {\n    const contributions = this.contributionProvider.getContributions();\n\n    for (const contribution of contributions) {\n      contribution.registerModel(this);\n    }\n\n    this.registerRuntimeModel();\n  }\n  /** app停止的逻辑 */\n\n\n  onStop() {\n    this.toDispose.dispose();\n  }\n\n};\n\n__decorate([contrib(IModelContribution), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"contributionProvider\", void 0);\n\n__decorate([inject(IModelOptionProvider), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"modelOptionProvider\", void 0);\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], ModelRegistry.prototype, \"graphProvider\", void 0);\n\nModelRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IModelService]\n})], ModelRegistry);\nexport { ModelRegistry };","map":null,"metadata":{},"sourceType":"module"}