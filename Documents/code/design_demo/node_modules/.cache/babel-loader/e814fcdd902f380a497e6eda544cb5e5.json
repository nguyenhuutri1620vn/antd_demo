{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nexport var NsUpdateNodePort;\n\n(function (NsUpdateNodePort) {\n  /** Command: 用于注册named factory */\n  NsUpdateNodePort.command = XFlowNodeCommands.UPDATE_NODE_PORT;\n  /** hookName */\n\n  NsUpdateNodePort.hookKey = 'updateNodePort';\n})(NsUpdateNodePort || (NsUpdateNodePort = {}));\n\nlet UpdateNodePort =\n/** 创建节点命令 */\nclass UpdateNodePort {\n  constructor() {\n    this.getCell = (graph, node) => {\n      if (typeof node === 'string') {\n        return graph.getCellById(node);\n      }\n\n      return node;\n    };\n\n    this.getNodeConfig = x6Node => {\n      const data = x6Node.getData();\n      const position = x6Node.getPosition();\n      const size = x6Node.getSize();\n      return Object.assign(Object.assign(Object.assign({}, data), position), size);\n    };\n\n    this.updatePortsOfNodeConfig = (cell, ports, options) => {\n      const nodeConfig = this.getNodeConfig(cell);\n\n      if (this.isNodeAnchors(nodeConfig.ports)) {\n        nodeConfig.ports = [...ports];\n      }\n\n      if (this.isPortMetaData(nodeConfig.ports)) {\n        nodeConfig.ports.items = [...ports];\n      }\n\n      cell.setData(nodeConfig, options);\n    };\n    /** 执行Cmd */\n\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const graph = yield ctx.getX6Graph();\n      const result = yield hooks.updateNodePort.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          node,\n          updatePorts,\n          options,\n          commandService\n        } = handlerArgs;\n        const cell = this.getCell(graph, node);\n\n        if (!cell || cell.isEdge()) {\n          console.error('node_is _not_exsit', node);\n          return {\n            err: 'node_is _not_exsit'\n          };\n        }\n\n        const currentPorts = cell.getPorts();\n        const nextPorts = yield updatePorts([...currentPorts], cell, graph);\n\n        if (nextPorts === false) {\n          return {\n            err: 'service rejected'\n          };\n        }\n\n        cell.setPropByPath('ports/items', nextPorts, Object.assign({\n          rewrite: true\n        }, options));\n        /** update nodeConfig */\n\n        this.updatePortsOfNodeConfig(cell, nextPorts, options);\n        /** add undo */\n\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          commandService.executeCommand(XFlowNodeCommands.UPDATE_NODE_PORT.id, {\n            node,\n            updatePorts: () => __awaiter(this, void 0, void 0, function* () {\n              return currentPorts;\n            })\n          });\n        })));\n        return {\n          ports: nextPorts\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isNodeAnchors(ports) {\n    return Array.isArray(ports);\n  }\n\n  isPortMetaData(ports) {\n    return ports.items && Array.isArray(ports.items);\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], UpdateNodePort.prototype, \"contextProvider\", void 0);\n\nUpdateNodePort = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsUpdateNodePort.command.id\n  }\n})\n/** 创建节点命令 */\n], UpdateNodePort);\nexport { UpdateNodePort };","map":null,"metadata":{},"sourceType":"module"}