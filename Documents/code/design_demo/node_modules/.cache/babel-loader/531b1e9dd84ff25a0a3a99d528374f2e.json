{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { TYPES } from '@antv/l7-core';\nimport { anchorTranslate, anchorType, applyAnchorClass, bindAll, DOM } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\n\nvar Popup = function (_EventEmitter) {\n  _inherits(Popup, _EventEmitter);\n\n  var _super = _createSuper(Popup);\n\n  function Popup(cfg) {\n    var _this;\n\n    _classCallCheck(this, Popup);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"popupOption\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"mapsService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"sceneSerive\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lngLat\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"content\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"closeButton\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"timeoutInstance\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"container\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"tip\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scene\", void 0);\n\n    _this.popupOption = _objectSpread(_objectSpread({}, _this.getdefault()), cfg);\n    bindAll(['update', 'onClickClose', 'remove'], _assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Popup, [{\n    key: \"addTo\",\n    value: function addTo(scene) {\n      var _this2 = this;\n\n      this.mapsService = scene.get(TYPES.IMapService);\n      this.sceneSerive = scene.get(TYPES.ISceneService);\n      this.mapsService.on('camerachange', this.update);\n      this.mapsService.on('viewchange', this.update);\n      this.scene = scene;\n      this.update();\n\n      if (this.popupOption.closeOnClick) {\n        this.timeoutInstance = setTimeout(function () {\n          _this2.mapsService.on('click', _this2.onClickClose);\n        }, 30);\n      }\n\n      this.emit('open');\n      return this;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.remove();\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      this.addTo(this.scene);\n    }\n  }, {\n    key: \"setHTML\",\n    value: function setHTML(html) {\n      var frag = window.document.createDocumentFragment();\n      var temp = window.document.createElement('body');\n      var child;\n      temp.innerHTML = html;\n\n      while (true) {\n        child = temp.firstChild;\n\n        if (!child) {\n          break;\n        }\n\n        frag.appendChild(child);\n      }\n\n      return this.setDOMContent(frag);\n    }\n  }, {\n    key: \"setLnglat\",\n    value: function setLnglat(lngLat) {\n      this.lngLat = lngLat;\n\n      if (Array.isArray(lngLat)) {\n        this.lngLat = {\n          lng: lngLat[0],\n          lat: lngLat[1]\n        };\n      }\n\n      if (this.mapsService) {\n        this.mapsService.on('camerachange', this.update);\n        this.mapsService.on('viewchange', this.update);\n      }\n\n      this.update();\n      return this;\n    }\n  }, {\n    key: \"getLnglat\",\n    value: function getLnglat() {\n      return this.lngLat;\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      return this.setDOMContent(window.document.createTextNode(text));\n    }\n  }, {\n    key: \"setMaxWidth\",\n    value: function setMaxWidth(maxWidth) {\n      this.popupOption.maxWidth = maxWidth;\n      this.update();\n      return this;\n    }\n  }, {\n    key: \"setDOMContent\",\n    value: function setDOMContent(htmlNode) {\n      this.createContent();\n      this.content.appendChild(htmlNode);\n      this.update();\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      if (this.content) {\n        this.removeDom(this.content);\n      }\n\n      if (this.container) {\n        this.removeDom(this.container);\n        delete this.container;\n      }\n\n      if (this.mapsService) {\n        this.mapsService.off('camerachange', this.update);\n        this.mapsService.off('viewchange', this.update);\n        this.mapsService.off('click', this.onClickClose);\n        delete this.mapsService;\n      }\n\n      clearTimeout(this.timeoutInstance);\n      this.emit('close');\n      return this;\n    }\n  }, {\n    key: \"isOpen\",\n    value: function isOpen() {\n      return !!this.mapsService;\n    }\n  }, {\n    key: \"createContent\",\n    value: function createContent() {\n      if (this.content) {\n        DOM.remove(this.content);\n      }\n\n      this.content = DOM.create('div', 'l7-popup-content', this.container);\n\n      if (this.popupOption.closeButton) {\n        this.closeButton = DOM.create('button', 'l7-popup-close-button', this.content);\n\n        if (this.popupOption.closeButtonOffsets) {\n          this.closeButton.style.right = this.popupOption.closeButtonOffsets[0] + 'px';\n          this.closeButton.style.top = this.popupOption.closeButtonOffsets[1] + 'px';\n        }\n\n        this.closeButton.setAttribute('aria-label', 'Close popup');\n        this.closeButton.innerHTML = '&#215;';\n        this.closeButton.addEventListener('click', this.onClickClose);\n      }\n    }\n  }, {\n    key: \"creatDom\",\n    value: function creatDom(tagName, className, container) {\n      var el = window.document.createElement(tagName);\n\n      if (className !== undefined) {\n        el.className = className;\n      }\n\n      if (container) {\n        container.appendChild(el);\n      }\n\n      return el;\n    }\n  }, {\n    key: \"removeDom\",\n    value: function removeDom(node) {\n      if (node.parentNode) {\n        node.parentNode.removeChild(node);\n      }\n    }\n  }, {\n    key: \"getdefault\",\n    value: function getdefault() {\n      return {\n        closeButton: true,\n        closeOnClick: true,\n        maxWidth: '240px',\n        offsets: [0, 0],\n        anchor: anchorType.BOTTOM,\n        className: '',\n        stopPropagation: true\n      };\n    }\n  }, {\n    key: \"onClickClose\",\n    value: function onClickClose(e) {\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      }\n\n      this.remove();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this3 = this;\n\n      var hasPosition = this.lngLat;\n      var _this$popupOption = this.popupOption,\n          className = _this$popupOption.className,\n          maxWidth = _this$popupOption.maxWidth,\n          anchor = _this$popupOption.anchor;\n\n      if (!this.mapsService || !hasPosition || !this.content) {\n        return;\n      }\n\n      var popupContainer = this.mapsService.getMarkerContainer();\n\n      if (!this.container && popupContainer) {\n        this.container = this.creatDom('div', 'l7-popup', popupContainer);\n        this.tip = this.creatDom('div', 'l7-popup-tip', this.container);\n        this.container.appendChild(this.content);\n\n        if (className) {\n          className.split(' ').forEach(function (name) {\n            return _this3.container.classList.add(name);\n          });\n        }\n\n        var stopPropagation = this.popupOption.stopPropagation;\n\n        if (stopPropagation) {\n          ['mousemove', 'mousedown', 'mouseup', 'click', 'dblclick'].forEach(function (type) {\n            _this3.container.addEventListener(type, function (e) {\n              e.stopPropagation();\n            });\n          });\n        }\n\n        this.container.style.whiteSpace = 'nowrap';\n      }\n\n      if (maxWidth && this.container.style.maxWidth !== maxWidth) {\n        this.container.style.maxWidth = maxWidth;\n      }\n\n      this.updatePosition();\n      DOM.setTransform(this.container, \"\".concat(anchorTranslate[anchor]));\n      applyAnchorClass(this.container, anchor, 'popup');\n    }\n  }, {\n    key: \"updatePosition\",\n    value: function updatePosition() {\n      if (!this.mapsService) {\n        return;\n      }\n\n      var _this$lngLat = this.lngLat,\n          lng = _this$lngLat.lng,\n          lat = _this$lngLat.lat;\n      var offsets = this.popupOption.offsets;\n      var pos = this.mapsService.lngLatToContainer([lng, lat]);\n      this.container.style.left = pos.x + offsets[0] + 'px';\n      this.container.style.top = pos.y - offsets[1] + 'px';\n    }\n  }]);\n\n  return Popup;\n}(EventEmitter);\n\nexport { Popup as default };","map":null,"metadata":{},"sourceType":"module"}