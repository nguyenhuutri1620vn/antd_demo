{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _isNumber from \"lodash/isNumber\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { AttributeType, gl } from '@antv/l7-core';\nimport { rgb2arr } from '@antv/l7-utils';\nimport BaseModel from '../../core/BaseModel';\nimport { LineTriangulation } from '../../core/triangulation';\nvar line_frag = \"#define LineTypeSolid 0.0\\n#define Animate 0.0\\n#define LineTexture 1.0\\n\\nuniform float u_opacity : 1.0;\\nuniform float u_textureBlend;\\nuniform float u_iconStepCount;\\n\\nvarying vec4 v_color;\\n\\n// line texture\\nuniform float u_line_texture;\\nuniform sampler2D u_texture;\\nuniform vec2 u_textSize;\\n\\n// dash\\nuniform float u_dash_offset : 0.0;\\nuniform float u_dash_ratio : 0.1;\\n\\nvarying vec2 v_iconMapUV;\\nvarying float v_blur;\\n\\nuniform float u_linearColor: 0;\\nuniform vec4 u_sourceColor;\\nuniform vec4 u_targetColor;\\n\\n#pragma include \\\"picking\\\"\\n\\nuniform float u_time;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ]; // \\u63A7\\u5236\\u8FD0\\u52A8\\n\\nvarying mat4 styleMappingMat;\\n// [animate, duration, interval, trailLength],\\nvoid main() {\\n  float opacity = styleMappingMat[0][0];\\n  float animateSpeed = 0.0; // \\u8FD0\\u52A8\\u901F\\u5EA6\\n  float d_distance_ratio = styleMappingMat[3].r; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  float v = styleMappingMat[3].a;\\n\\n  if(u_linearColor == 1.0) { // \\u4F7F\\u7528\\u6E10\\u53D8\\u989C\\u8272\\n    gl_FragColor = mix(u_sourceColor, u_targetColor, v);\\n  } else { // \\u4F7F\\u7528 color \\u65B9\\u6CD5\\u4F20\\u5165\\u7684\\u989C\\u8272\\n     gl_FragColor = v_color;\\n  }\\n\\n  gl_FragColor.a *= opacity; // \\u5168\\u5C40\\u900F\\u660E\\u5EA6\\n  if(u_aimate.x == Animate) {\\n      animateSpeed = u_time / u_aimate.y;\\n       float alpha =1.0 - fract( mod(1.0- d_distance_ratio, u_aimate.z)* (1.0/ u_aimate.z) + animateSpeed);\\n      alpha = (alpha + u_aimate.w -1.0) / u_aimate.w;\\n      alpha = smoothstep(0., 1., alpha);\\n      gl_FragColor.a *= alpha;\\n  }\\n\\n  if(u_line_texture == LineTexture) { // while load texture\\n    float aDistance = styleMappingMat[3].g;      // \\u5F53\\u524D\\u9876\\u70B9\\u7684\\u8DDD\\u79BB\\n    float d_texPixelLen = styleMappingMat[3].b;  // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n    float u = fract(mod(aDistance, d_texPixelLen)/d_texPixelLen - animateSpeed);\\n    float v = styleMappingMat[3].a;  // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C\\n\\n    // \\u8BA1\\u7B97\\u7EB9\\u7406\\u95F4\\u9694 start\\n    float flag = 0.0;\\n    if(u > 1.0/u_iconStepCount) {\\n      flag = 1.0;\\n    }\\n    u = fract(u*u_iconStepCount);\\n    // \\u8BA1\\u7B97\\u7EB9\\u7406\\u95F4\\u9694 end\\n\\n    vec2 uv= v_iconMapUV / u_textSize + vec2(u, v) / u_textSize * 64.;\\n    vec4 pattern = texture2D(u_texture, uv);\\n\\n    // Tip: \\u5224\\u65AD\\u7EB9\\u7406\\u95F4\\u9694\\n    if(flag > 0.0) {\\n      pattern = vec4(0.0);\\n    }\\n\\n    if(u_textureBlend == 0.0) { // normal\\n      pattern.a = 0.0;\\n      gl_FragColor = filterColor(gl_FragColor + pattern);\\n    } else { // replace\\n        pattern.a *= opacity;\\n        if(gl_FragColor.a <= 0.0) {\\n          pattern.a = 0.0;\\n        }\\n        gl_FragColor = filterColor(pattern);\\n    }\\n  }\\n  \\n\\n  // blur - AA\\n  if(v < v_blur) {\\n    gl_FragColor.a = mix(0.0, gl_FragColor.a, v/v_blur);\\n  } else if(v > 1.0 - v_blur) {\\n    gl_FragColor.a = mix(gl_FragColor.a, 0.0, (v - (1.0 - v_blur))/v_blur);\\n  }\\n\\n  gl_FragColor = filterColor(gl_FragColor);\\n\\n    \\n  \\n  \\n}\\n\";\nvar line_vert = \"#define LineTypeSolid 0.0\\n#define LineTypeDash 1.0\\n#define Animate 0.0\\n\\nattribute float a_Miter;\\nattribute vec4 a_Color;\\nattribute vec2 a_Size;\\nattribute vec3 a_Normal;\\nattribute vec3 a_Position;\\nattribute vec2 a_iconMapUV;\\n\\n// dash line\\nattribute float a_Total_Distance;\\nattribute float a_Distance;\\n\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nuniform vec4 u_aimate: [ 0, 2., 1.0, 0.2 ];\\nuniform float u_icon_step: 100;\\nuniform float u_heightfixed;\\n\\n#pragma include \\\"projection\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"picking\\\"\\n\\nvarying vec4 v_color;\\nvarying float v_blur;\\n\\n// texV \\u7EBF\\u56FE\\u5C42 - \\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\uFF08\\u7EBF\\u7684\\u5BBD\\u5EA6\\u65B9\\u5411\\uFF09\\nvarying vec2 v_iconMapUV;\\n\\n\\nuniform float u_linearColor: 0;\\n\\nuniform float u_opacity: 1.0;\\nvarying mat4 styleMappingMat; // \\u7528\\u4E8E\\u5C06\\u5728\\u9876\\u70B9\\u7740\\u8272\\u5668\\u4E2D\\u8BA1\\u7B97\\u597D\\u7684\\u6837\\u5F0F\\u503C\\u4F20\\u9012\\u7ED9\\u7247\\u5143\\n\\n#pragma include \\\"styleMapping\\\"\\n#pragma include \\\"light\\\"\\n#pragma include \\\"styleMappingCalOpacity\\\"\\n\\nvoid main() {\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n  styleMappingMat = mat4(\\n    0.0, 0.0, 0.0, 0.0, // opacity - strokeOpacity - strokeWidth - empty\\n    0.0, 0.0, 0.0, 0.0, // strokeR - strokeG - strokeB - strokeA\\n    0.0, 0.0, 0.0, 0.0, // offsets[0] - offsets[1]\\n    0.0, 0.0, 0.0, 0.0  // distance_ratio/distance/pixelLen/texV\\n  );\\n\\n  float rowCount = u_cellTypeLayout[0][0];    // \\u5F53\\u524D\\u7684\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u884C\\n  float columnCount = u_cellTypeLayout[0][1]; // \\u5F53\\u770B\\u5230\\u6570\\u636E\\u7EB9\\u7406\\u6709\\u51E0\\u5217\\n  float columnWidth = 1.0/columnCount;  // \\u5217\\u5BBD\\n  float rowHeight = 1.0/rowCount;       // \\u884C\\u9AD8\\n  float cellCount = calCellCount(); // opacity - strokeOpacity - strokeWidth - stroke - offsets\\n  float id = a_vertexId; // \\u7B2Cn\\u4E2A\\u9876\\u70B9\\n  float cellCurrentRow = floor(id * cellCount / columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u884C\\n  float cellCurrentColumn = mod(id * cellCount, columnCount) + 1.0; // \\u8D77\\u59CB\\u70B9\\u5728\\u7B2C\\u51E0\\u5217\\n  \\n  // cell \\u56FA\\u5B9A\\u987A\\u5E8F opacity -> strokeOpacity -> strokeWidth -> stroke ... \\n  // \\u6309\\u987A\\u5E8F\\u4ECE cell \\u4E2D\\u53D6\\u503C\\u3001\\u82E5\\u6CA1\\u6709\\u5219\\u81EA\\u52A8\\u5F80\\u4E0B\\u53D6\\u503C\\n  float textureOffset = 0.0; // \\u5728 cell \\u4E2D\\u53D6\\u503C\\u7684\\u504F\\u79FB\\u91CF\\n\\n  vec2 opacityAndOffset = calOpacityAndOffset(cellCurrentRow, cellCurrentColumn, columnCount, textureOffset, columnWidth, rowHeight);\\n  styleMappingMat[0][0] = opacityAndOffset.r;\\n  textureOffset = opacityAndOffset.g;\\n  // cal style mapping - \\u6570\\u636E\\u7EB9\\u7406\\u6620\\u5C04\\u90E8\\u5206\\u7684\\u8BA1\\u7B97\\n\\n  float d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  float d_texPixelLen;    // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n\\n  v_iconMapUV = a_iconMapUV;\\n  if(u_heightfixed < 1.0) {     // \\u9AD8\\u5EA6\\u968F zoom \\u8C03\\u6574\\n    d_texPixelLen = project_pixel(u_icon_step);\\n  } else {\\n    d_texPixelLen = u_icon_step;\\n  }\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) {\\n    d_texPixelLen *= 10.0;\\n  }\\n\\n  if(u_aimate.x == Animate || u_linearColor == 1.0) {\\n      d_distance_ratio = a_Distance / a_Total_Distance;\\n  }\\n\\n  float miter = (a_Miter + 1.0)/2.0;\\n  // \\u8BBE\\u7F6E\\u6570\\u636E\\u96C6\\u7684\\u53C2\\u6570\\n  styleMappingMat[3][0] = d_distance_ratio; // \\u5F53\\u524D\\u70B9\\u4F4D\\u8DDD\\u79BB\\u5360\\u7EBF\\u603B\\u957F\\u7684\\u6BD4\\u4F8B\\n  styleMappingMat[3][1] = a_Distance;       // \\u5F53\\u524D\\u9876\\u70B9\\u7684\\u8DDD\\u79BB\\n  styleMappingMat[3][2] = d_texPixelLen;    // \\u8D34\\u56FE\\u7684\\u50CF\\u7D20\\u957F\\u5EA6\\uFF0C\\u6839\\u636E\\u5730\\u56FE\\u5C42\\u7EA7\\u7F29\\u653E\\n  styleMappingMat[3][3] = miter;          // \\u7EBF\\u56FE\\u5C42\\u8D34\\u56FE\\u90E8\\u5206\\u7684 v \\u5750\\u6807\\u503C 0 - 1\\n\\n  vec4 project_pos = project_position(vec4(a_Position.xy, 0, 1.0));\\n\\n  float originSize = a_Size.x;  // \\u56FA\\u5B9A\\u9AD8\\u5EA6\\n  if(u_heightfixed < 1.0) {     // \\u9AD8\\u5EA6\\u968F zoom \\u8C03\\u6574\\n    originSize = project_float_pixel(a_Size.x);\\n  }\\n\\n  float wallHeight = originSize * miter;\\n  float lightWeight = calc_lighting(vec4(project_pos.xy, wallHeight, 1.0));\\n\\n  v_blur = min(project_float_pixel(2.0) / originSize, 0.05);\\n\\n  // v_lightWeight = lightWeight;\\n  v_color = vec4(a_Color.rgb * lightWeight, a_Color.w);\\n  // v_color = a_Color;\\n\\n  if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n    gl_Position = u_Mvp * (vec4(project_pos.xy, wallHeight, 1.0));\\n  } else {\\n    gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy, wallHeight, 1.0));\\n  }\\n\\n  setPickingColor(a_PickingColor);\\n}\\n\";\n\nvar LineWallModel = function (_BaseModel) {\n  _inherits(LineWallModel, _BaseModel);\n\n  var _super = _createSuper(LineWallModel);\n\n  function LineWallModel() {\n    var _this;\n\n    _classCallCheck(this, LineWallModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"texture\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"updateTexture\", function () {\n      var createTexture2D = _this.rendererService.createTexture2D;\n\n      if (_this.texture) {\n        _this.texture.update({\n          data: _this.iconService.getCanvas()\n        });\n\n        _this.layer.render();\n\n        return;\n      }\n\n      _this.texture = createTexture2D({\n        data: _this.iconService.getCanvas(),\n        mag: gl.NEAREST,\n        min: gl.NEAREST,\n        premultiplyAlpha: false,\n        width: 1024,\n        height: _this.iconService.canvasHeight || 128\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(LineWallModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      var _ref = this.layer.getLayerConfig(),\n          opacity = _ref.opacity,\n          sourceColor = _ref.sourceColor,\n          targetColor = _ref.targetColor,\n          _ref$textureBlend = _ref.textureBlend,\n          textureBlend = _ref$textureBlend === void 0 ? 'normal' : _ref$textureBlend,\n          _ref$heightfixed = _ref.heightfixed,\n          heightfixed = _ref$heightfixed === void 0 ? false : _ref$heightfixed,\n          _ref$lineTexture = _ref.lineTexture,\n          lineTexture = _ref$lineTexture === void 0 ? false : _ref$lineTexture,\n          _ref$iconStep = _ref.iconStep,\n          iconStep = _ref$iconStep === void 0 ? 100 : _ref$iconStep,\n          _ref$iconStepCount = _ref.iconStepCount,\n          iconStepCount = _ref$iconStepCount === void 0 ? 1 : _ref$iconStepCount;\n\n      if (this.rendererService.getDirty()) {\n        this.texture.bind();\n      }\n\n      var useLinearColor = 0;\n      var sourceColorArr = [0, 0, 0, 0];\n      var targetColorArr = [0, 0, 0, 0];\n\n      if (sourceColor && targetColor) {\n        sourceColorArr = rgb2arr(sourceColor);\n        targetColorArr = rgb2arr(targetColor);\n        useLinearColor = 1;\n      }\n\n      if (this.dataTextureTest && this.dataTextureNeedUpdate({\n        opacity: opacity\n      })) {\n        this.judgeStyleAttributes({\n          opacity: opacity\n        });\n        var encodeData = this.layer.getEncodedData();\n\n        var _this$calDataFrame = this.calDataFrame(this.cellLength, encodeData, this.cellProperties),\n            data = _this$calDataFrame.data,\n            width = _this$calDataFrame.width,\n            height = _this$calDataFrame.height;\n\n        this.rowCount = height;\n        this.dataTexture = this.cellLength > 0 && data.length > 0 ? this.createTexture2D({\n          flipY: true,\n          data: data,\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: width,\n          height: height\n        }) : this.createTexture2D({\n          flipY: true,\n          data: [1],\n          format: gl.LUMINANCE,\n          type: gl.FLOAT,\n          width: 1,\n          height: 1\n        });\n      }\n\n      return {\n        u_heightfixed: Number(heightfixed),\n        u_dataTexture: this.dataTexture,\n        u_cellTypeLayout: this.getCellTypeLayout(),\n        u_opacity: _isNumber(opacity) ? opacity : 1.0,\n        u_textureBlend: textureBlend === 'normal' ? 0.0 : 1.0,\n        u_texture: this.texture,\n        u_line_texture: lineTexture ? 1.0 : 0.0,\n        u_iconStepCount: iconStepCount,\n        u_icon_step: iconStep,\n        u_textSize: [1024, this.iconService.canvasHeight || 128],\n        u_linearColor: useLinearColor,\n        u_sourceColor: sourceColorArr,\n        u_targetColor: targetColorArr\n      };\n    }\n  }, {\n    key: \"getAnimateUniforms\",\n    value: function getAnimateUniforms() {\n      var _ref2 = this.layer.getLayerConfig(),\n          animateOption = _ref2.animateOption;\n\n      return {\n        u_aimate: this.animateOption2Array(animateOption),\n        u_time: this.layer.getLayerAnimateTime()\n      };\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      this.updateTexture();\n      this.iconService.on('imageUpdate', this.updateTexture);\n      return this.buildModels();\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      var _this$texture, _this$dataTexture;\n\n      (_this$texture = this.texture) === null || _this$texture === void 0 ? void 0 : _this$texture.destroy();\n      (_this$dataTexture = this.dataTexture) === null || _this$dataTexture === void 0 ? void 0 : _this$dataTexture.destroy();\n      this.iconService.off('imageUpdate', this.updateTexture);\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return [this.layer.buildLayerModel({\n        moduleName: 'linewall',\n        vertexShader: line_vert,\n        fragmentShader: line_frag,\n        triangulation: LineTriangulation,\n        primitive: gl.TRIANGLES,\n        blend: this.getBlend(),\n        depth: {\n          enable: false\n        }\n      })];\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      var _this2 = this;\n\n      var _ref3 = this.layer.getLayerConfig(),\n          _ref3$lineType = _ref3.lineType,\n          lineType = _ref3$lineType === void 0 ? 'solid' : _ref3$lineType;\n\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Distance',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[3]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'total_distance',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Total_Distance',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[5]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'size',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Size',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var _feature$size = feature.size,\n                size = _feature$size === void 0 ? 1 : _feature$size;\n            return Array.isArray(size) ? [size[0], size[1]] : [size, 0];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'normal',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Normal',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 3,\n          update: function update(feature, featureIdx, vertex, attributeIdx, normal) {\n            return normal;\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'miter',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_Miter',\n          buffer: {\n            usage: gl.STATIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 1,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            return [vertex[4]];\n          }\n        }\n      });\n      this.styleAttributeService.registerStyleAttribute({\n        name: 'uv',\n        type: AttributeType.Attribute,\n        descriptor: {\n          name: 'a_iconMapUV',\n          buffer: {\n            usage: gl.DYNAMIC_DRAW,\n            data: [],\n            type: gl.FLOAT\n          },\n          size: 2,\n          update: function update(feature, featureIdx, vertex, attributeIdx) {\n            var iconMap = _this2.iconService.getIconMap();\n\n            var texture = feature.texture;\n\n            var _ref4 = iconMap[texture] || {\n              x: 0,\n              y: 0\n            },\n                x = _ref4.x,\n                y = _ref4.y;\n\n            return [x, y];\n          }\n        }\n      });\n    }\n  }]);\n\n  return LineWallModel;\n}(BaseModel);\n\nexport { LineWallModel as default };","map":null,"metadata":{},"sourceType":"module"}