{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport Mousetrap from 'mousetrap';\nimport { Dom, FunctionExt } from '../util';\nimport { Disposable } from '../common';\nexport class Keyboard extends Disposable {\n  constructor(options) {\n    super();\n    this.options = options;\n    const scroller = this.graph.scroller.widget;\n    this.container = scroller ? scroller.container : this.graph.container;\n\n    if (options.global) {\n      this.target = document;\n    } else {\n      this.target = this.container;\n\n      if (!this.disabled) {\n        // ensure the container focusable\n        this.target.setAttribute('tabindex', '-1');\n      } // change to mouseup eventï¼Œprevent page stalling caused by focus\n\n\n      this.graph.on('cell:mouseup', this.focus, this);\n      this.graph.on('blank:mouseup', this.focus, this);\n    }\n\n    this.mousetrap = Keyboard.createMousetrap(this);\n  }\n\n  get graph() {\n    return this.options.graph;\n  }\n\n  get disabled() {\n    return this.options.enabled !== true;\n  }\n\n  enable() {\n    if (this.disabled) {\n      this.options.enabled = true;\n      this.graph.options.keyboard.enabled = true;\n\n      if (this.target instanceof HTMLElement) {\n        this.target.setAttribute('tabindex', '-1');\n      }\n    }\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.options.enabled = false;\n      this.graph.options.keyboard.enabled = false;\n\n      if (this.target instanceof HTMLElement) {\n        this.target.removeAttribute('tabindex');\n      }\n    }\n  }\n\n  on(keys, callback, action) {\n    this.mousetrap.bind(this.getKeys(keys), callback, action);\n  }\n\n  off(keys, action) {\n    this.mousetrap.unbind(this.getKeys(keys), action);\n  }\n\n  focus(e) {\n    const isInputEvent = this.isInputEvent(e.e);\n\n    if (isInputEvent) {\n      return;\n    }\n\n    const target = this.target;\n    target.focus({\n      preventScroll: true\n    });\n  }\n\n  getKeys(keys) {\n    return (Array.isArray(keys) ? keys : [keys]).map(key => this.formatkey(key));\n  }\n\n  formatkey(key) {\n    const formated = key.toLowerCase().replace(/\\s/g, '').replace('delete', 'del').replace('cmd', 'command');\n    const formatFn = this.options.format;\n\n    if (formatFn) {\n      return FunctionExt.call(formatFn, this.graph, formated);\n    }\n\n    return formated;\n  }\n\n  isGraphEvent(e) {\n    const target = e.srcElement || e.target;\n\n    if (target) {\n      if (target === this.target || target === document.body) {\n        return true;\n      }\n\n      return Dom.contains(this.container, target);\n    }\n\n    return false;\n  }\n\n  isInputEvent(e) {\n    const target = e.target;\n    const tagName = target && target.tagName.toLowerCase();\n    return tagName === 'input';\n  }\n\n  isEnabledForEvent(e) {\n    const allowed = !this.disabled && this.isGraphEvent(e);\n    const isInputEvent = this.isInputEvent(e);\n\n    if (allowed) {\n      const code = e.keyCode || e.which;\n\n      if (isInputEvent && (code === 8 || code === 46)) {\n        return false;\n      }\n\n      if (this.options.guard) {\n        return FunctionExt.call(this.options.guard, this.graph, e);\n      }\n    }\n\n    return allowed;\n  }\n\n  dispose() {\n    this.mousetrap.reset();\n  }\n\n}\n\n__decorate([Disposable.dispose()], Keyboard.prototype, \"dispose\", null);\n\n(function (Keyboard) {\n  function createMousetrap(keyboard) {\n    const mousetrap = new Mousetrap(keyboard.target);\n    const stopCallback = mousetrap.stopCallback;\n\n    mousetrap.stopCallback = (e, elem, combo) => {\n      if (keyboard.isEnabledForEvent(e)) {\n        if (stopCallback) {\n          return stopCallback.call(mousetrap, e, elem, combo);\n        }\n\n        return false;\n      }\n\n      return true;\n    };\n\n    return mousetrap;\n  }\n\n  Keyboard.createMousetrap = createMousetrap;\n})(Keyboard || (Keyboard = {}));","map":null,"metadata":{},"sourceType":"module"}