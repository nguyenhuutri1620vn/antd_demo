{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, head, last } from '@antv/util';\nimport Continuous from './base';\n/**\n * 分段度量\n */\n\nvar Quantize =\n/** @class */\nfunction (_super) {\n  __extends(Quantize, _super);\n\n  function Quantize() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'quantize';\n    return _this;\n  }\n\n  Quantize.prototype.invert = function (value) {\n    var ticks = this.ticks;\n    var length = ticks.length;\n    var percent = this.getInvertPercent(value);\n    var minIndex = Math.floor(percent * (length - 1)); // 最后一个\n\n    if (minIndex >= length - 1) {\n      return last(ticks);\n    } // 超出左边界， 则取第一个\n\n\n    if (minIndex < 0) {\n      return head(ticks);\n    }\n\n    var minTick = ticks[minIndex];\n    var nextTick = ticks[minIndex + 1]; // 比当前值小的 tick 在度量上的占比\n\n    var minIndexPercent = minIndex / (length - 1);\n    var maxIndexPercent = (minIndex + 1) / (length - 1);\n    return minTick + (percent - minIndexPercent) / (maxIndexPercent - minIndexPercent) * (nextTick - minTick);\n  };\n\n  Quantize.prototype.initCfg = function () {\n    this.tickMethod = 'r-pretty';\n    this.tickCount = 5;\n    this.nice = true;\n  };\n\n  Quantize.prototype.calculateTicks = function () {\n    var ticks = _super.prototype.calculateTicks.call(this);\n\n    if (!this.nice) {\n      // 如果 nice = false ,补充 min, max\n      if (last(ticks) !== this.max) {\n        ticks.push(this.max);\n      }\n\n      if (head(ticks) !== this.min) {\n        ticks.unshift(this.min);\n      }\n    }\n\n    return ticks;\n  }; // 计算当前值在刻度中的占比\n\n\n  Quantize.prototype.getScalePercent = function (value) {\n    var ticks = this.ticks; // 超出左边界\n\n    if (value < head(ticks)) {\n      return 0;\n    } // 超出右边界\n\n\n    if (value > last(ticks)) {\n      return 1;\n    }\n\n    var minIndex = 0;\n    each(ticks, function (tick, index) {\n      if (value >= tick) {\n        minIndex = index;\n      } else {\n        return false;\n      }\n    });\n    return minIndex / (ticks.length - 1);\n  };\n\n  return Quantize;\n}(Continuous);\n\nexport default Quantize;","map":null,"metadata":{},"sourceType":"module"}