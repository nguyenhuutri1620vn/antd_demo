{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { mat4, vec3 } from 'gl-matrix';\nvar DEGREES_TO_RADIANS = Math.PI / 180;\n\nvar Viewport = function () {\n  function Viewport() {\n    _classCallCheck(this, Viewport);\n\n    _defineProperty(this, \"projectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewMatrix\", mat4.create());\n\n    _defineProperty(this, \"viewProjectionMatrix\", mat4.create());\n\n    _defineProperty(this, \"ViewProjectionMatrixUncentered\", mat4.create());\n\n    _defineProperty(this, \"viewUncenteredMatrix\", mat4.create());\n\n    _defineProperty(this, \"zoom\", void 0);\n\n    _defineProperty(this, \"center\", void 0);\n  }\n\n  _createClass(Viewport, [{\n    key: \"syncWithMapCamera\",\n    value: function syncWithMapCamera(mapCamera) {\n      var _mapCamera$zoom = mapCamera.zoom,\n          zoom = _mapCamera$zoom === void 0 ? 1 : _mapCamera$zoom,\n          _mapCamera$pitch = mapCamera.pitch,\n          pitch = _mapCamera$pitch === void 0 ? 0 : _mapCamera$pitch,\n          _mapCamera$bearing = mapCamera.bearing,\n          bearing = _mapCamera$bearing === void 0 ? 0 : _mapCamera$bearing,\n          _mapCamera$center = mapCamera.center,\n          center = _mapCamera$center === void 0 ? [0, 0] : _mapCamera$center,\n          _mapCamera$offsetOrig = mapCamera.offsetOrigin,\n          offsetOrigin = _mapCamera$offsetOrig === void 0 ? [0, 0] : _mapCamera$offsetOrig,\n          _mapCamera$cameraHeig = mapCamera.cameraHeight,\n          cameraHeight = _mapCamera$cameraHeig === void 0 ? 1 : _mapCamera$cameraHeig,\n          _mapCamera$aspect = mapCamera.aspect,\n          aspect = _mapCamera$aspect === void 0 ? 1 : _mapCamera$aspect,\n          _mapCamera$near = mapCamera.near,\n          near = _mapCamera$near === void 0 ? 0.1 : _mapCamera$near,\n          _mapCamera$far = mapCamera.far,\n          far = _mapCamera$far === void 0 ? 1000 : _mapCamera$far,\n          _mapCamera$fov = mapCamera.fov,\n          fov = _mapCamera$fov === void 0 ? 0 : _mapCamera$fov;\n      this.zoom = zoom;\n      this.center = center;\n      var pitchInRadians = pitch * DEGREES_TO_RADIANS;\n      var rotationInRadians = (360 - bearing) * DEGREES_TO_RADIANS;\n      mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\n      var eye = vec3.fromValues(cameraHeight * Math.sin(pitchInRadians) * Math.sin(rotationInRadians), -cameraHeight * Math.sin(pitchInRadians) * Math.cos(rotationInRadians), cameraHeight * Math.cos(pitchInRadians));\n      var up = vec3.fromValues(-Math.cos(pitchInRadians) * Math.sin(rotationInRadians), Math.cos(pitchInRadians) * Math.cos(rotationInRadians), Math.sin(pitchInRadians));\n      mat4.lookAt(this.viewMatrix, eye, vec3.fromValues(0, 0, 0), up);\n      this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n      mat4.translate(this.viewMatrix, this.viewMatrix, vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0));\n      mat4.multiply(this.viewProjectionMatrix, this.projectionMatrix, this.viewMatrix);\n      mat4.multiply(this.ViewProjectionMatrixUncentered, this.projectionMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.zoom;\n    }\n  }, {\n    key: \"getZoomScale\",\n    value: function getZoomScale() {\n      return 524288;\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var _this$center = _slicedToArray(this.center, 2),\n          lng = _this$center[0],\n          lat = _this$center[1];\n\n      return [lng, lat];\n    }\n  }, {\n    key: \"getProjectionMatrix\",\n    value: function getProjectionMatrix() {\n      return this.projectionMatrix;\n    }\n  }, {\n    key: \"getModelMatrix\",\n    value: function getModelMatrix() {\n      return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    }\n  }, {\n    key: \"getViewMatrix\",\n    value: function getViewMatrix() {\n      return this.viewMatrix;\n    }\n  }, {\n    key: \"getViewMatrixUncentered\",\n    value: function getViewMatrixUncentered() {\n      return this.viewUncenteredMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrix\",\n    value: function getViewProjectionMatrix() {\n      return this.viewProjectionMatrix;\n    }\n  }, {\n    key: \"getViewProjectionMatrixUncentered\",\n    value: function getViewProjectionMatrixUncentered() {\n      return this.ViewProjectionMatrixUncentered;\n    }\n  }, {\n    key: \"getFocalDistance\",\n    value: function getFocalDistance() {\n      return 1;\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat, scale) {\n      var maxs = 85.0511287798;\n      var lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);\n      var zoomScale = 256 << 20;\n      var d = Math.PI / 180;\n      var x = lngLat[0] * d;\n      var y = lat * d;\n      y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n      var a = 0.5 / Math.PI;\n      var b = 0.5;\n      var c = -0.5 / Math.PI;\n      d = 0.5;\n      x = zoomScale * (a * x + b) - 215440491;\n      y = -(zoomScale * (c * y + d) - 106744817);\n      return [x, y];\n    }\n  }]);\n\n  return Viewport;\n}();\n\nexport { Viewport as default };","map":null,"metadata":{},"sourceType":"module"}