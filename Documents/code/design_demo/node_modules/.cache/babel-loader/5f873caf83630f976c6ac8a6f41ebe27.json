{"ast":null,"code":"const adjust = g => {\n  var _a;\n\n  const rankDir = (_a = g.graph().rankdir) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapWidthHeight(g);\n  }\n};\n\nconst undo = g => {\n  var _a;\n\n  const rankDir = (_a = g.graph().rankdir) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n\n  if (rankDir === \"bt\" || rankDir === \"rl\") {\n    reverseY(g);\n  }\n\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n};\n\nconst swapWidthHeight = g => {\n  g.nodes().forEach(v => {\n    swapWidthHeightOne(g.node(v));\n  });\n  g.edges().forEach(e => {\n    swapWidthHeightOne(g.edge(e));\n  });\n};\n\nconst swapWidthHeightOne = attrs => {\n  const w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n};\n\nconst reverseY = g => {\n  g.nodes().forEach(v => {\n    reverseYOne(g.node(v));\n  });\n  g.edges().forEach(e => {\n    var _a;\n\n    const edge = g.edge(e);\n    (_a = edge.points) === null || _a === void 0 ? void 0 : _a.forEach(point => reverseYOne(point));\n\n    if (edge.hasOwnProperty(\"y\")) {\n      reverseYOne(edge);\n    }\n  });\n};\n\nconst reverseYOne = attrs => {\n  attrs.y = -attrs.y;\n};\n\nconst swapXY = g => {\n  g.nodes().forEach(v => {\n    swapXYOne(g.node(v));\n  });\n  g.edges().forEach(e => {\n    var _a;\n\n    const edge = g.edge(e);\n    (_a = edge.points) === null || _a === void 0 ? void 0 : _a.forEach(point => swapXYOne(point));\n\n    if (edge.hasOwnProperty(\"x\")) {\n      swapXYOne(edge);\n    }\n  });\n};\n\nconst swapXYOne = attrs => {\n  const x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n};\n\nexport default {\n  adjust,\n  undo\n};","map":null,"metadata":{},"sourceType":"module"}