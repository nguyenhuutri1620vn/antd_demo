{"ast":null,"code":"import * as d3Force from 'd3-force';\nimport forceGrid from './forceGrid';\nimport mysqlWorkbench from './mysqlWorkbench';\nimport { DagreLayout } from '../dagre';\nexport default function layout(data, options) {\n  const {\n    nodes,\n    edges\n  } = data;\n  const width = options.width;\n  const height = options.height;\n  if (!(nodes === null || nodes === void 0 ? void 0 : nodes.length)) return Promise.resolve(); // 筛选非叶子节点，做Dagre布局\n\n  const noLeafNodes = [];\n  nodes.forEach(node => {\n    const relateEdges = edges.filter(edge => {\n      return edge.source === node.id || edge.target === node.id;\n    });\n\n    if (relateEdges.length > 1) {\n      const temp = Object.assign({}, node);\n      delete temp.size;\n      noLeafNodes.push(temp);\n    }\n  });\n  const noLeafEdge = [];\n  edges.forEach(edge => {\n    const sourceNode = noLeafNodes.find(node => node.id === edge.source);\n    const targetNode = noLeafNodes.find(node => node.id === edge.target);\n\n    if (sourceNode && targetNode) {\n      noLeafEdge.push(edge);\n    }\n  });\n  const graphLayout = new DagreLayout({\n    type: 'dagre',\n    ranksep: options.nodeMinGap,\n    nodesep: options.nodeMinGap\n  });\n  const {\n    nodes: nodesTmp\n  } = graphLayout.layout({\n    nodes: noLeafNodes,\n    edges: noLeafEdge\n  }); // 布局后，坐标同步\n\n  nodes.forEach(n => {\n    const found = (nodesTmp || []).find(temp => temp.id === n.id);\n    n.x = (found === null || found === void 0 ? void 0 : found.x) || width / 2;\n    n.y = (found === null || found === void 0 ? void 0 : found.y) || height / 2;\n  });\n  const copyNodes = JSON.parse(JSON.stringify(nodes));\n  const copyEdges = JSON.parse(JSON.stringify(edges));\n  const simulation = d3Force.forceSimulation().nodes(copyNodes).force(\"link\", d3Force.forceLink(copyEdges).id(d => d.id).distance(d => {\n    const edgeInfo = noLeafEdge.find(edge => edge.source === d.source && edge.target === d.target);\n\n    if (edgeInfo) {\n      return 30;\n    }\n\n    return 20;\n  })).force(\"charge\", d3Force.forceManyBody()).force(\"center\", d3Force.forceCenter(width / 2, height / 2)).force(\"x\", d3Force.forceX(width / 2)).force(\"y\", d3Force.forceY(height / 2)).alpha(0.3).alphaDecay(0.08).alphaMin(0.001);\n  const layoutPromise = new Promise(resolve => {\n    simulation.on('end', () => {\n      // 坐标信息同步到nodes,edges中\n      nodes.forEach(node => {\n        const nodeInfo = copyNodes.find(item => item.id === node.id);\n\n        if (nodeInfo) {\n          node.x = nodeInfo.x;\n          node.y = nodeInfo.y;\n        }\n      });\n      const minX = Math.min(...nodes.map(node => node.x));\n      const maxX = Math.max(...nodes.map(node => node.x));\n      const minY = Math.min(...nodes.map(node => node.y));\n      const maxY = Math.max(...nodes.map(node => node.y));\n      const scalex = width / (maxX - minX);\n      const scaley = height / (maxY - minY);\n      nodes.forEach(node => {\n        if (node.x !== undefined && scalex < 1) {\n          node.x = (node.x - minX) * scalex;\n        }\n\n        if (node.y !== undefined && scaley < 1) {\n          node.y = (node.y - minY) * scaley;\n        }\n      }); // 这一步就执行缩小空间。且不考虑节点size\n\n      nodes.forEach(node => {\n        node.sizeTemp = node.size;\n        node.size = [10, 10];\n      });\n      mysqlWorkbench(nodes, edges);\n      nodes.forEach(node => {\n        node.size = node.sizeTemp || [];\n        delete node.sizeTemp;\n      }); // 进行网格对齐+节点大小扩增\n\n      forceGrid({\n        nodes,\n        edges\n      }, options);\n      resolve();\n    });\n  });\n  return layoutPromise;\n}","map":null,"metadata":{},"sourceType":"module"}