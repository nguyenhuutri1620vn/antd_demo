{"ast":null,"code":"import React from 'react';\nimport { Spin } from 'antd';\nimport classnames from 'classnames';\nimport { usePositionStyle } from '@antv/xflow-core'; // component\n\nimport { Toolbar } from '@antv/x6-react-components';\nimport { ToolbarGroup } from './toolbar-group';\nimport { useToolbarModel } from '../service';\nimport classNames from 'classnames';\n/** render toolbar */\n\nconst ToolbarRender = props => {\n  const {\n    idx,\n    groups,\n    layout,\n    toolbarOptions\n  } = props;\n  const {\n    hoverEffect = true\n  } = toolbarOptions;\n  return React.createElement(Toolbar, {\n    hoverEffect: hoverEffect\n  }, groups.map((g, gIdx) => {\n    const key = idx + gIdx;\n    return React.createElement(ToolbarGroup, {\n      key: key,\n      group: g,\n      layout: layout\n    });\n  }));\n};\n\nconst InnerRender = props => {\n  const {\n    isModelReady,\n    state\n  } = useToolbarModel(props);\n  const positionStyle = usePositionStyle(props.position);\n  const {\n    mainGroups = [],\n    extraGroups = [],\n    layout,\n    customRender\n  } = state;\n  const containerClz = classNames(props.className, layout, 'xflow-toolbar');\n  const clz = classnames({\n    [layout]: true,\n    ['xflow-toolbar-root']: true\n  }); // loading\n\n  if (!isModelReady) {\n    return React.createElement(\"div\", {\n      className: containerClz,\n      style: Object.assign(Object.assign({}, positionStyle), props.style)\n    }, React.createElement(Spin, {\n      spinning: true,\n      size: \"small\"\n    }));\n  } // render custom component\n\n\n  if (customRender) {\n    return React.createElement(\"div\", {\n      className: containerClz,\n      style: Object.assign(Object.assign({}, positionStyle), props.style)\n    }, React.createElement(customRender, {\n      config: state\n    }));\n  } // render toolbars\n\n\n  return React.createElement(\"div\", {\n    className: containerClz,\n    style: Object.assign(Object.assign({}, positionStyle), props.style)\n  }, React.createElement(\"div\", {\n    className: clz\n  }, mainGroups.length > 0 && React.createElement(ToolbarRender, {\n    idx: \"mainGroups\",\n    groups: mainGroups,\n    layout: layout,\n    toolbarOptions: state\n  }), extraGroups.length > 0 && React.createElement(ToolbarRender, {\n    idx: \"extraGroups\",\n    groups: extraGroups,\n    layout: layout,\n    toolbarOptions: state\n  })));\n};\n/** connect 数据 */\n\n\nexport const XFlowToolbar = React.memo(InnerRender);","map":null,"metadata":{},"sourceType":"module"}