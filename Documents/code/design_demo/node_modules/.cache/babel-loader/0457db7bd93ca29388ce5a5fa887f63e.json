{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { DOM } from '@antv/l7-utils';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nvar ControlService = (_dec = injectable(), _dec(_class = function () {\n  function ControlService() {\n    _classCallCheck(this, ControlService);\n\n    _defineProperty(this, \"container\", void 0);\n\n    _defineProperty(this, \"controlCorners\", void 0);\n\n    _defineProperty(this, \"controlContainer\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mapsService\", void 0);\n\n    _defineProperty(this, \"controls\", []);\n\n    _defineProperty(this, \"unAddControls\", []);\n  }\n\n  _createClass(ControlService, [{\n    key: \"init\",\n    value: function init(cfg, sceneContainer) {\n      this.container = cfg.container;\n      this.scene = sceneContainer;\n      this.mapsService = sceneContainer.get(TYPES.IMapService);\n      this.initControlPos();\n    }\n  }, {\n    key: \"addControl\",\n    value: function addControl(ctr, sceneContainer) {\n      var mapsService = sceneContainer.get(TYPES.IMapService);\n\n      if (mapsService.map) {\n        ctr.addTo(this.scene);\n        this.controls.push(ctr);\n      } else {\n        this.unAddControls.push(ctr);\n      }\n    }\n  }, {\n    key: \"getControlByName\",\n    value: function getControlByName(name) {\n      return this.controls.find(function (ctr) {\n        return ctr.controlOption.name === name;\n      });\n    }\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(ctr) {\n      var index = this.controls.indexOf(ctr);\n\n      if (index > -1) {\n        this.controls.splice(index, 1);\n      }\n\n      ctr.remove();\n      return this;\n    }\n  }, {\n    key: \"addControls\",\n    value: function addControls() {\n      var _this = this;\n\n      this.unAddControls.forEach(function (ctr) {\n        ctr.addTo(_this.scene);\n\n        _this.controls.push(ctr);\n      });\n      this.unAddControls = [];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator = _createForOfIteratorHelper(this.controls),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var ctr = _step.value;\n          ctr.remove();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.controls = [];\n      this.clearControlPos();\n    }\n  }, {\n    key: \"initControlPos\",\n    value: function initControlPos() {\n      var corners = this.controlCorners = {};\n      var l = 'l7-';\n      var container = this.controlContainer = DOM.create('div', l + 'control-container', this.container);\n\n      function createCorner() {\n        var vSideList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var className = vSideList.map(function (item) {\n          return l + item;\n        }).join(' ');\n        corners[vSideList.join('')] = DOM.create('div', className, container);\n      }\n\n      createCorner(['top', 'left']);\n      createCorner(['top', 'right']);\n      createCorner(['bottom', 'left']);\n      createCorner(['bottom', 'right']);\n      createCorner(['top', 'center']);\n      createCorner(['right', 'center']);\n      createCorner(['left', 'center']);\n      createCorner(['bottom', 'center']);\n    }\n  }, {\n    key: \"clearControlPos\",\n    value: function clearControlPos() {\n      for (var i in this.controlCorners) {\n        if (this.controlCorners[i]) {\n          DOM.remove(this.controlCorners[i]);\n        }\n      }\n\n      if (this.controlContainer) {\n        DOM.remove(this.controlContainer);\n      }\n\n      delete this.controlCorners;\n      delete this.controlContainer;\n    }\n  }]);\n\n  return ControlService;\n}()) || _class);\nexport { ControlService as default };","map":null,"metadata":{},"sourceType":"module"}