{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport LngLat, { earthRadius } from '../geo/lng_lat';\nvar earthCircumfrence = 2 * Math.PI * earthRadius;\n\nfunction circumferenceAtLatitude(latitude) {\n  return earthCircumfrence * Math.cos(latitude * Math.PI / 180);\n}\n\nexport function mercatorXfromLng(lng) {\n  return (180 + lng) / 360;\n}\nexport function mercatorYfromLat(lat) {\n  return (180 - 180 / Math.PI * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))) / 360;\n}\nexport function mercatorZfromAltitude(altitude, lat) {\n  return altitude / circumferenceAtLatitude(lat);\n}\nexport function lngFromMercatorX(x) {\n  return x * 360 - 180;\n}\nexport function latFromMercatorY(y) {\n  var y2 = 180 - y * 360;\n  return 360 / Math.PI * Math.atan(Math.exp(y2 * Math.PI / 180)) - 90;\n}\nexport function altitudeFromMercatorZ(z, y) {\n  return z * circumferenceAtLatitude(latFromMercatorY(y));\n}\nexport function mercatorScale(lat) {\n  return 1 / Math.cos(lat * Math.PI / 180);\n}\n\nvar MercatorCoordinate = function () {\n  function MercatorCoordinate(x, y) {\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n    _classCallCheck(this, MercatorCoordinate);\n\n    _defineProperty(this, \"x\", void 0);\n\n    _defineProperty(this, \"y\", void 0);\n\n    _defineProperty(this, \"z\", void 0);\n\n    this.x = +x;\n    this.y = +y;\n    this.z = +z;\n  }\n\n  _createClass(MercatorCoordinate, [{\n    key: \"toLngLat\",\n    value: function toLngLat() {\n      return new LngLat(lngFromMercatorX(this.x), latFromMercatorY(this.y));\n    }\n  }, {\n    key: \"toAltitude\",\n    value: function toAltitude() {\n      return altitudeFromMercatorZ(this.z, this.y);\n    }\n  }, {\n    key: \"meterInMercatorCoordinateUnits\",\n    value: function meterInMercatorCoordinateUnits() {\n      return 1 / earthCircumfrence * mercatorScale(latFromMercatorY(this.y));\n    }\n  }], [{\n    key: \"fromLngLat\",\n    value: function fromLngLat(lngLatLike) {\n      var altitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var lngLat = LngLat.convert(lngLatLike);\n      return new MercatorCoordinate(mercatorXfromLng(lngLat.lng), mercatorYfromLat(lngLat.lat), mercatorZfromAltitude(altitude, lngLat.lat));\n    }\n  }]);\n\n  return MercatorCoordinate;\n}();\n\nexport { MercatorCoordinate as default };","map":null,"metadata":{},"sourceType":"module"}