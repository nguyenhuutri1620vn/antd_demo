{"ast":null,"code":"import { __awaiter, __decorate, __rest } from \"tslib\";\nimport { singleton } from 'mana-syringe';\nimport { DisposableCollection, Disposable, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { IHookContribution } from '@antv/xflow-core';\nimport { NsAddEdgeEvent } from '../../config-graph';\nimport { getProps } from '../../utils';\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nlet FlowHooksContribution = class FlowHooksContribution {\n  constructor() {\n    this.toDispose = new DisposableCollection();\n\n    this.registerHookHub = () => __awaiter(this, void 0, void 0, function* () {\n      return Disposable.create(() => {});\n    });\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [hooks.afterGraphInit.registerHook({\n        name: 'call add edge to replace temp edge',\n        handler: handlerArgs => __awaiter(this, void 0, void 0, function* () {\n          const {\n            commandService,\n            graph\n          } = handlerArgs;\n          graph.on(NsAddEdgeEvent.EVENT_NAME, args => __awaiter(this, void 0, void 0, function* () {\n            const {\n              edge\n            } = args,\n                  edgeConfig = __rest(args, [\"edge\"]);\n\n            const config = {\n              edgeConfig: Object.assign(Object.assign({}, edgeConfig), {\n                // renderKey: FLOWCHART_EDGE, // 暂不支持\n                source: {\n                  cell: edgeConfig.source,\n                  port: edgeConfig.sourcePortId\n                },\n                target: {\n                  cell: edgeConfig.target,\n                  port: edgeConfig.targetPortId\n                },\n                zIndex: 1,\n                attrs: {\n                  line: {\n                    stroke: '#A2B1C3',\n                    targetMarker: {\n                      name: 'block',\n                      width: 12,\n                      height: 8\n                    },\n                    strokeDasharray: '5 5',\n                    strokeWidth: 1\n                  }\n                },\n                data: Object.assign({}, edgeConfig)\n              })\n            };\n            yield commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, config);\n            const onAddEdge = getProps('onAddEdge');\n\n            if (typeof onAddEdge === 'function') {\n              onAddEdge(config);\n            }\n\n            args.edge.remove();\n          }));\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return Disposable.create(() => {});\n    });\n  }\n\n};\nFlowHooksContribution = __decorate([singleton({\n  contrib: IHookContribution\n})], FlowHooksContribution);\nexport { FlowHooksContribution };","map":null,"metadata":{},"sourceType":"module"}