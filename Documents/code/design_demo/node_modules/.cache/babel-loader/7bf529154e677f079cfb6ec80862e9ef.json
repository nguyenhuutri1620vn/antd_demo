{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { useXFlowApp, getNodeReactComponent } from '@antv/xflow-core';\nimport { Addon } from '@antv/x6';\nimport { XFlowNode } from '../../canvas-dag-extension/x6-extension/node';\nexport const defaultNodeFactory = args => {\n  return new XFlowNode(args);\n};\nexport const useGraphDnd = props => {\n  const {\n    x6NodeFactory,\n    dndOptions,\n    onNodeDrop\n  } = props;\n  const {\n    graphProvider,\n    modelService,\n    commandService\n  } = useXFlowApp();\n  const [graphConfig, setConfig] = React.useState();\n  const [dnd, setDnd] = React.useState();\n  const [graph, setGraph] = React.useState();\n  /** 引用 graph 配置 */\n\n  React.useEffect(() => {\n    graphProvider.getGraphInstance().then(x6Graph => {\n      setGraph(x6Graph);\n    });\n    graphProvider.getGraphOptions().then(x6GraphConfig => {\n      setConfig(x6GraphConfig);\n    });\n  }, [graphProvider, setGraph, setConfig]);\n  /** 初始化 Dnd 实例 */\n\n  React.useEffect(() => {\n    if (!graph) {\n      return;\n    }\n\n    const dndInstance = new Addon.Dnd(Object.assign(Object.assign({\n      scaled: false,\n      animation: false\n    }, dndOptions), {\n      target: graph,\n\n      /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n       * 在validateNode时调用command添加\n       */\n      validateNode: droppingNode => __awaiter(void 0, void 0, void 0, function* () {\n        const nodeConfig = Object.assign(Object.assign({}, droppingNode.getData()), droppingNode.getPosition());\n\n        if (onNodeDrop) {\n          yield onNodeDrop(nodeConfig, commandService, modelService);\n        } else {\n          console.error('onNodeDrop method is required in NodeTree Panel');\n        }\n\n        return false;\n      })\n    }));\n    setDnd(dndInstance);\n    return () => {\n      dndInstance.dispose();\n    };\n  }, [commandService, modelService, dndOptions, graph, onNodeDrop]);\n  /** 开始拖拽 */\n\n  const onMouseDown = React.useCallback(nodeConfig => e => {\n    if (!graph || !dnd || !graphConfig) {\n      return;\n    }\n\n    if (nodeConfig.isDisabled) {\n      return;\n    } // 获取节点组件\n\n\n    const renderKey = graphConfig.nodeTypeParser(nodeConfig);\n    const reactComponent = nodeConfig.renderComponent ? nodeConfig.renderComponent : graphConfig.nodeRender.get(renderKey); // 包裹节点组件\n\n    const wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n    const nodeData = {\n      data: nodeConfig,\n      width: nodeConfig.width || 180,\n      height: nodeConfig.height || 40,\n      view: graphConfig.graphId,\n      component: wrappedComponent\n    };\n    const x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n    dnd.start(x6Node, e.nativeEvent);\n  }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n  return {\n    graphConfig,\n    onMouseDown,\n    modelService,\n    commandService\n  };\n};","map":null,"metadata":{},"sourceType":"module"}