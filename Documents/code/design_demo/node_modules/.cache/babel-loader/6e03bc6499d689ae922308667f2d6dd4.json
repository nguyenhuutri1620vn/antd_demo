{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { Node as X6Node } from '@antv/x6';\nimport { XFlowNodeCommands } from '../constant';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { ReactShape } from '@antv/x6-react-shape';\nexport var NsUpdateNode;\n\n(function (NsUpdateNode) {\n  NsUpdateNode.command = XFlowNodeCommands.UPDATE_NODE;\n  NsUpdateNode.hookKey = 'updateNode';\n  NsUpdateNode.XFlowNodeSetOptions = {\n    overwrite: true\n  };\n  NsUpdateNode.NODE_WIDTH = 200;\n  NsUpdateNode.NODE_HEIGHT = 40;\n})(NsUpdateNode || (NsUpdateNode = {}));\n\nlet UpdateNodeCommand =\n/** 节点更新命令 */\nclass UpdateNodeCommand {\n  constructor() {\n    this.setNodeConfig = (x6Node, nodeConfig, options) => {\n      x6Node.setData(nodeConfig, options);\n      x6Node.setPosition((nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.x) || 0, (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.y) || 0);\n      x6Node.setSize((nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.width) || NsUpdateNode.NODE_WIDTH, (nodeConfig === null || nodeConfig === void 0 ? void 0 : nodeConfig.height) || NsUpdateNode.NODE_HEIGHT); // SVG 元素更新label\n\n      if (!(x6Node instanceof ReactShape) && !!x6Node.getAttrByPath('text/text')) {\n        x6Node.setAttrByPath('text/text', nodeConfig.label);\n      } // 支持nodeAttrs\n\n\n      if (nodeConfig.attrs) {\n        x6Node.setAttrs(nodeConfig.attrs);\n      } // 更新ports\n\n\n      if (Array.isArray(nodeConfig.ports)) {\n        x6Node.setPropByPath('ports/items', nodeConfig.ports, Object.assign({\n          rewrite: true\n        }, options));\n      }\n    };\n\n    this.getNodeConfig = x6Node => {\n      const data = x6Node.getData();\n      const position = x6Node.getPosition();\n      const size = x6Node.getSize();\n      return Object.assign(Object.assign(Object.assign({}, data), position), size);\n    };\n\n    this.getNodeCell = (x6Graph, handlerArgs) => {\n      const {\n        nodeConfig,\n        setNodeConfig\n      } = handlerArgs;\n      let nodeId = '';\n\n      if (setNodeConfig && setNodeConfig.node && typeof setNodeConfig.node === 'string') {\n        nodeId = setNodeConfig.node;\n      } else if (nodeConfig && nodeConfig.id && typeof nodeConfig.id === 'string') {\n        nodeId = nodeConfig.id;\n      }\n\n      if (nodeId) {\n        return x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(nodeId);\n      }\n\n      if (setNodeConfig && setNodeConfig.node instanceof X6Node) {\n        return setNodeConfig.node;\n      }\n    };\n\n    this.getNextNodeConfig = (handlerArgs, x6Node) => __awaiter(this, void 0, void 0, function* () {\n      if (handlerArgs && handlerArgs.setNodeConfig && handlerArgs.setNodeConfig.callback) {\n        const nodeData = this.getNodeConfig(x6Node);\n        return handlerArgs.setNodeConfig.callback(nodeData);\n      }\n\n      return handlerArgs.nodeConfig;\n    });\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.updateNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          options = NsUpdateNode.XFlowNodeSetOptions\n        } = handlerArgs;\n        const graph = yield this.ctx.getX6Graph();\n        const x6Node = this.getNodeCell(graph, handlerArgs);\n        const nextNodeConfig = yield this.getNextNodeConfig(handlerArgs, x6Node);\n        this.setNodeConfig(x6Node, nextNodeConfig, options);\n        return {\n          nodeConfig: nextNodeConfig,\n          nodeCell: x6Node\n        };\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], UpdateNodeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], UpdateNodeCommand.prototype, \"init\", null);\n\nUpdateNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsUpdateNode.command.id\n  }\n})\n/** 节点更新命令 */\n], UpdateNodeCommand);\nexport { UpdateNodeCommand };","map":null,"metadata":{},"sourceType":"module"}