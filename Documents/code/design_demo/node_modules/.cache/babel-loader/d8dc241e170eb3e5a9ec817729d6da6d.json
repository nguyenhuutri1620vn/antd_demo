{"ast":null,"code":"import { __assign } from \"tslib\";\nimport Shape from '../shape';\nimport Global from '../../global';\n/**\n * 基本的图片，可以添加文本，默认文本在图片的下面\n */\n\nShape.registerNode('image', {\n  options: {\n    img: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eD7nT6tmYgAAAAAAAAAAAABkARQnAQ',\n    size: 200,\n    labelCfg: {\n      style: {\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    clipCfg: {\n      show: false,\n      type: 'circle',\n      // circle\n      r: 50,\n      // ellipse\n      rx: 50,\n      ry: 35,\n      // rect\n      width: 50,\n      height: 35,\n      // polygon\n      points: [[30, 12], [12, 30], [30, 48], [48, 30]],\n      // path\n      path: [['M', 25, 25], ['L', 50, 25], ['A', 12.5, 12.5, 0, 1, 1, 50, 50], ['A', 12.5, 12.5, 0, 1, 0, 50, 50], ['L', 25, 75], ['Z']],\n      // 坐标\n      x: 0,\n      y: 0 // clip 的属性样式\n      // style: {\n      //   lineWidth: 1\n      // },\n\n    }\n  },\n  shapeType: 'image',\n  labelPosition: 'bottom',\n  drawShape: function drawShape(cfg, group) {\n    var shapeType = this.shapeType;\n    var style = this.getShapeStyle(cfg);\n    delete style.fill;\n    var shape = group.addShape(shapeType, {\n      attrs: style,\n      className: \"\".concat(this.type, \"-keyShape\"),\n      name: \"\".concat(this.type, \"-keyShape\"),\n      draggable: true\n    });\n    this.drawClip(cfg, shape);\n    return shape;\n  },\n  drawClip: function drawClip(cfg, shape) {\n    var clip = (this.mergeStyle || this.getOptions(cfg)).clipCfg;\n\n    if (!clip.show) {\n      return;\n    } // 支持 circle、rect、ellipse、Polygon 及自定义 path clip\n\n\n    var type = clip.type,\n        x = clip.x,\n        y = clip.y,\n        style = clip.style;\n\n    if (type === 'circle') {\n      var r = clip.r;\n      shape.setClip({\n        type: 'circle',\n        attrs: __assign({\n          r: r,\n          x: x,\n          y: y\n        }, style)\n      });\n    } else if (type === 'rect') {\n      var width = clip.width,\n          height = clip.height;\n      var rectX = x - width / 2;\n      var rectY = y - height / 2;\n      shape.setClip({\n        type: 'rect',\n        attrs: __assign({\n          x: rectX,\n          y: rectY,\n          width: width,\n          height: height\n        }, style)\n      });\n    } else if (type === 'ellipse') {\n      var rx = clip.rx,\n          ry = clip.ry;\n      shape.setClip({\n        type: 'ellipse',\n        attrs: __assign({\n          x: x,\n          y: y,\n          rx: rx,\n          ry: ry\n        }, style)\n      });\n    } else if (type === 'polygon') {\n      var points = clip.points;\n      shape.setClip({\n        type: 'polygon',\n        attrs: __assign({\n          points: points\n        }, style)\n      });\n    } else if (type === 'path') {\n      var path = clip.path;\n      shape.setClip({\n        type: 'path',\n        attrs: __assign({\n          path: path\n        }, style)\n      });\n    }\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var _a = this.mergeStyle || this.getOptions(cfg),\n        defaultStyle = _a.style,\n        img = _a.img;\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (defaultStyle) {\n      width = defaultStyle.width || size[0];\n      height = defaultStyle.height || size[1];\n    }\n\n    var style = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height,\n      img: img\n    }, defaultStyle);\n\n    return style;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    var shapeClassName = \"\".concat(this.itemType, \"-shape\");\n    var shape = group['shapeMap'][shapeClassName] || group.find(function (element) {\n      return element.get('className') === shapeClassName;\n    }) || item.getKeyShape();\n    var shapeStyle = this.getShapeStyle(cfg);\n\n    if (shape && !shape.destroyed) {\n      shape.attr(shapeStyle);\n    }\n  }\n}, 'single-node');","map":null,"metadata":{},"sourceType":"module"}