{"ast":null,"code":"import { G6Event } from '@antv/g6-core';\nimport Util from '../util';\nvar cloneEvent = Util.cloneEvent,\n    isNaN = Util.isNaN;\nvar abs = Math.abs;\nvar DRAG_OFFSET = 10;\nvar ALLOW_EVENTS = ['shift', 'ctrl', 'alt', 'control'];\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      direction: 'both',\n      enableOptimize: false,\n      // drag-canvas 可拖动的扩展范围，默认为 0，即最多可以拖动一屏的位置\n      // 当设置的值大于 0 时，即拖动可以超过一屏\n      // 当设置的值小于 0 时，相当于缩小了可拖动范围\n      // 具体实例可参考：https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IFfoS67_HssAAAAAAAAAAAAAARQnAQ\n      scalableRange: 0,\n      allowDragOnItem: false\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      dragstart: 'onMouseDown',\n      drag: 'onMouseMove',\n      dragend: 'onMouseUp',\n      'canvas:click': 'onMouseUp',\n      keyup: 'onKeyUp',\n      focus: 'onKeyUp',\n      keydown: 'onKeyDown',\n      touchstart: 'onTouchStart',\n      touchmove: 'onTouchMove',\n      touchend: 'onMouseUp'\n    };\n  },\n  updateViewport: function updateViewport(e) {\n    var origin = this.origin;\n    var clientX = +e.clientX;\n    var clientY = +e.clientY;\n\n    if (isNaN(clientX) || isNaN(clientY)) {\n      return;\n    }\n\n    var dx = clientX - origin.x;\n    var dy = clientY - origin.y;\n\n    if (this.get('direction') === 'x') {\n      dy = 0;\n    } else if (this.get('direction') === 'y') {\n      dx = 0;\n    }\n\n    this.origin = {\n      x: clientX,\n      y: clientY\n    };\n    var width = this.graph.get('width');\n    var height = this.graph.get('height');\n    var graphCanvasBBox = this.graph.get('canvas').getCanvasBBox();\n    var expandWidth = this.scalableRange;\n    var expandHeight = this.scalableRange; // 若 scalableRange 是 0~1 的小数，则作为比例考虑\n\n    if (expandWidth < 1 && expandWidth > -1) {\n      expandWidth = width * expandWidth;\n      expandHeight = height * expandHeight;\n    }\n\n    if (graphCanvasBBox.minX <= width + expandWidth && graphCanvasBBox.minX + dx > width + expandWidth || graphCanvasBBox.maxX + expandWidth >= 0 && graphCanvasBBox.maxX + expandWidth + dx < 0) {\n      dx = 0;\n    }\n\n    if (graphCanvasBBox.minY <= height + expandHeight && graphCanvasBBox.minY + dy > height + expandHeight || graphCanvasBBox.maxY + expandHeight >= 0 && graphCanvasBBox.maxY + expandHeight + dy < 0) {\n      dy = 0;\n    }\n\n    this.graph.translate(dx, dy);\n  },\n  onTouchStart: function onTouchStart(e) {\n    var self = this;\n    var touches = e.originalEvent.touches;\n    var event1 = touches[0];\n    var event2 = touches[1]; // 如果是双指操作，不允许拖拽画布\n\n    if (event1 && event2) {\n      return;\n    }\n\n    e.preventDefault();\n    self.onMouseDown(e);\n  },\n  onMouseDown: function onMouseDown(e) {\n    var self = this;\n    var event = e.originalEvent;\n\n    if (event && e.name !== G6Event.TOUCHSTART && event.button !== 0) {\n      return;\n    }\n\n    if (e.name !== G6Event.TOUCHSTART && typeof window !== 'undefined' && window.event && !window.event.buttons && !window.event.button) {\n      return;\n    }\n\n    if (!this.shouldBegin.call(this, e)) {\n      return;\n    }\n\n    if (self.keydown) return;\n    var target = e.target;\n    var targetIsCanvas = target && target.isCanvas && target.isCanvas();\n    if (!this.allowDragOnItem && !targetIsCanvas) return;\n    self.origin = {\n      x: e.clientX,\n      y: e.clientY\n    };\n    self.dragging = false;\n\n    if (this.enableOptimize) {\n      // 拖动 canvas 过程中隐藏所有的边及label\n      var graph = this.graph;\n      var edges = graph.getEdges();\n\n      for (var i = 0, len = edges.length; i < len; i++) {\n        var shapes = edges[i].get('group').get('children');\n        if (!shapes) continue;\n        shapes.forEach(function (shape) {\n          shape.set('ori-visibility', shape.get('ori-visibility') || shape.get('visible'));\n          shape.hide();\n        });\n      }\n\n      var nodes = graph.getNodes();\n\n      for (var j = 0, nodeLen = nodes.length; j < nodeLen; j++) {\n        var container = nodes[j].getContainer();\n        var children = container.get('children');\n\n        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n          var child = children_1[_i];\n          var isKeyShape = child.get('isKeyShape');\n\n          if (!isKeyShape) {\n            child.set('ori-visibility', child.get('ori-visibility') || child.get('visible'));\n            child.hide();\n          }\n        }\n      }\n    }\n  },\n  onTouchMove: function onTouchMove(e) {\n    var self = this;\n    var touches = e.originalEvent.touches;\n    var event1 = touches[0];\n    var event2 = touches[1]; // 如果是双指操作，不允许拖拽画布，结束拖拽\n\n    if (event1 && event2) {\n      this.onMouseUp(e);\n      return;\n    }\n\n    e.preventDefault();\n    self.onMouseMove(e);\n  },\n  onMouseMove: function onMouseMove(e) {\n    var graph = this.graph;\n    if (this.keydown) return;\n    var target = e.target;\n    var targetIsCanvas = target && target.isCanvas && target.isCanvas();\n    if (!this.allowDragOnItem && !targetIsCanvas) return;\n    e = cloneEvent(e);\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.dragging) {\n      if (abs(this.origin.x - e.clientX) + abs(this.origin.y - e.clientY) < DRAG_OFFSET) {\n        return;\n      }\n\n      if (this.shouldBegin.call(this, e)) {\n        e.type = 'dragstart';\n        graph.emit('canvas:dragstart', e);\n        this.originPosition = {\n          x: e.clientX,\n          y: e.clientY\n        };\n        this.dragging = true;\n      }\n    } else {\n      e.type = 'drag';\n      graph.emit('canvas:drag', e);\n    }\n\n    if (this.shouldUpdate.call(this, e)) {\n      this.updateViewport(e);\n    }\n  },\n  onMouseUp: function onMouseUp(e) {\n    var _a, _b;\n\n    var graph = this.graph;\n    if (this.keydown) return;\n    var currentZoom = graph.getZoom();\n    var modeController = graph.get('modeController');\n    var zoomCanvas = (_b = (_a = modeController === null || modeController === void 0 ? void 0 : modeController.modes[modeController.mode]) === null || _a === void 0 ? void 0 : _a.filter(function (behavior) {\n      return behavior.type === 'zoom-canvas';\n    })) === null || _b === void 0 ? void 0 : _b[0];\n    var optimizeZoom = zoomCanvas ? zoomCanvas.optimizeZoom || 0.1 : 0;\n\n    if (this.enableOptimize) {\n      // 拖动结束后显示所有的边\n      var edges = graph.getEdges();\n\n      for (var i = 0, len = edges.length; i < len; i++) {\n        var shapes = edges[i].get('group').get('children');\n        if (!shapes) continue;\n        shapes.forEach(function (shape) {\n          var oriVis = shape.get('ori-visibility');\n          if (oriVis) shape.show();\n        });\n      }\n\n      if (currentZoom > optimizeZoom) {\n        var nodes = graph.getNodes();\n\n        for (var j = 0, nodeLen = nodes.length; j < nodeLen; j++) {\n          var container = nodes[j].getContainer();\n          var children = container.get('children');\n\n          for (var _i = 0, children_2 = children; _i < children_2.length; _i++) {\n            var child = children_2[_i];\n            var isKeyShape = child.get('isKeyShape');\n\n            if (!isKeyShape) {\n              var oriVis = child.get('ori-visibility');\n              if (oriVis) child.show();\n            }\n          }\n        }\n      }\n    }\n\n    if (!this.dragging) {\n      this.origin = null;\n      return;\n    }\n\n    e = cloneEvent(e);\n\n    if (this.shouldEnd.call(this, e)) {\n      this.updateViewport(e);\n    }\n\n    e.type = 'dragend';\n    e.dx = e.clientX - this.originPosition.x;\n    e.dy = e.clientY - this.originPosition.y;\n    graph.emit('canvas:dragend', e);\n    this.endDrag();\n  },\n  endDrag: function endDrag() {\n    this.origin = null;\n    this.dragging = false;\n    this.dragbegin = false;\n  },\n  onKeyDown: function onKeyDown(e) {\n    var self = this;\n    var code = e.key;\n\n    if (!code) {\n      return;\n    }\n\n    if (ALLOW_EVENTS.indexOf(code.toLowerCase()) > -1) {\n      self.keydown = true;\n    } else {\n      self.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    this.keydown = false;\n    this.origin = null;\n    this.dragging = false;\n    this.dragbegin = false;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}