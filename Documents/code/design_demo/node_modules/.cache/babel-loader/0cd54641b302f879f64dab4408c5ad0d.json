{"ast":null,"code":"import { DIRECTION } from '../constant';\n/**\n * @ignore\n * 方位常量转实际的 bbox 位置大小\n * @param parentBBox\n * @param bbox\n * @param direction\n */\n\nexport function directionToPosition(parentBBox, bbox, direction) {\n  if (direction === DIRECTION.TOP) {\n    return [parentBBox.minX + parentBBox.width / 2 - bbox.width / 2, parentBBox.minY];\n  }\n\n  if (direction === DIRECTION.BOTTOM) {\n    return [parentBBox.minX + parentBBox.width / 2 - bbox.width / 2, parentBBox.maxY - bbox.height];\n  }\n\n  if (direction === DIRECTION.LEFT) {\n    return [parentBBox.minX, parentBBox.minY + parentBBox.height / 2 - bbox.height / 2];\n  }\n\n  if (direction === DIRECTION.RIGHT) {\n    return [parentBBox.maxX - bbox.width, parentBBox.minY + parentBBox.height / 2 - bbox.height / 2];\n  }\n\n  if (direction === DIRECTION.TOP_LEFT || direction === DIRECTION.LEFT_TOP) {\n    return [parentBBox.tl.x, parentBBox.tl.y];\n  }\n\n  if (direction === DIRECTION.TOP_RIGHT || direction === DIRECTION.RIGHT_TOP) {\n    return [parentBBox.tr.x - bbox.width, parentBBox.tr.y];\n  }\n\n  if (direction === DIRECTION.BOTTOM_LEFT || direction === DIRECTION.LEFT_BOTTOM) {\n    return [parentBBox.bl.x, parentBBox.bl.y - bbox.height];\n  }\n\n  if (direction === DIRECTION.BOTTOM_RIGHT || direction === DIRECTION.RIGHT_BOTTOM) {\n    return [parentBBox.br.x - bbox.width, parentBBox.br.y - bbox.height];\n  }\n\n  return [0, 0];\n}\n/**\n * get direction after coordinate transpose\n * @param direction\n * @param coordinate\n * @returns direction after transpose or not\n */\n\nfunction getTransposedDirection(direction, coordinate) {\n  if (coordinate.isTransposed) {\n    switch (direction) {\n      case DIRECTION.BOTTOM:\n        return DIRECTION.LEFT;\n\n      case DIRECTION.LEFT:\n        return DIRECTION.BOTTOM;\n\n      case DIRECTION.RIGHT:\n        return DIRECTION.TOP;\n\n      case DIRECTION.TOP:\n        return DIRECTION.RIGHT;\n    }\n  }\n\n  return direction;\n}\n\nfunction reflectX(direct) {\n  if (direct === DIRECTION.LEFT) {\n    return DIRECTION.RIGHT;\n  }\n\n  if (direct === DIRECTION.RIGHT) {\n    return DIRECTION.LEFT;\n  }\n\n  return direct;\n}\n\nfunction reflectY(direct) {\n  if (direct === DIRECTION.TOP) {\n    return DIRECTION.BOTTOM;\n  }\n\n  if (direct === DIRECTION.BOTTOM) {\n    return DIRECTION.TOP;\n  }\n\n  return direct;\n}\n/**\n * get direction after coordinate.scale\n * @param direction\n * @param coordinate\n */\n\n\nfunction getScaleDirection(direction, coordinate) {\n  var x = coordinate.matrix[0];\n  var y = coordinate.matrix[4];\n  var d = direction;\n\n  if (x < 0) {\n    d = reflectX(d);\n  }\n\n  if (y < 0) {\n    d = reflectY(d);\n  }\n\n  return d;\n}\n/**\n *\n * @param direction\n * @param coordinate\n */\n\n\nfunction getReflectDirection(direction, coordinate) {\n  var d = direction;\n\n  if (coordinate.isReflect('x')) {\n    d = reflectX(d);\n  }\n\n  if (coordinate.isReflect('y')) {\n    d = reflectY(d);\n  }\n\n  return d;\n}\n/**\n * @ignore\n * get direction after coordinate translate\n * @param direction\n * @param coordinate\n */\n\n\nexport function getTranslateDirection(direction, coordinate) {\n  var d = direction;\n  d = getTransposedDirection(d, coordinate);\n  d = getScaleDirection(d, coordinate);\n  d = getReflectDirection(d, coordinate);\n  return d;\n}","map":null,"metadata":{},"sourceType":"module"}