{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tooltip = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar l7_component_1 = require(\"@antv/l7-component\");\n\nvar event_emitter_1 = (0, tslib_1.__importDefault)(require(\"@antv/event-emitter\"));\n\nvar util_1 = require(\"@antv/util\");\n\nvar l7plot_component_1 = require(\"@antv/l7plot-component\");\n\nvar lodash_es_1 = require(\"lodash-es\");\n\nvar types_1 = require(\"../types\");\n\nvar utils_1 = require(\"../utils\");\n\nvar TRIGGER_LIST = ['mousemove', 'click'];\n\nvar Tooltip =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(Tooltip, _super);\n\n  function Tooltip(scene, interactionLayers, options) {\n    var _this = _super.call(this) || this;\n    /**\n     * tooltip 是否可见\n     */\n\n\n    _this.currentVisible = false;\n\n    _this.interactionTriggerHander = function (event) {\n      var feature = event.feature,\n          featureId = event.featureId;\n      var _a = _this.options,\n          title = _a.title,\n          customTitle = _a.customTitle,\n          items = _a.items,\n          customItems = _a.customItems; // is GeoJson type\n\n      var isGeoFeature = feature.type === 'Feature' && feature.geometry && feature.properties; // parse GeoJson properties\n\n      var properties = isGeoFeature ? feature.properties : feature;\n      var tooltipItems = [];\n\n      if (customItems) {\n        var items_1 = customItems(feature);\n\n        if (Array.isArray(items_1)) {\n          tooltipItems = items_1;\n        } else {\n          throw new Error('customItems return array');\n        }\n      } else if (items) {\n        items.forEach(function (item) {\n          if ((0, util_1.isString)(item)) {\n            var name_1 = item.split('.').pop() || item;\n            var value = (0, lodash_es_1.get)(properties, item);\n\n            if (value !== undefined) {\n              tooltipItems.push({\n                name: name_1,\n                value: value\n              });\n            }\n          } else {\n            var field = item.field,\n                alias = item.alias,\n                customValue = item.customValue;\n            var name_2 = alias || field.split('.').pop() || field;\n            var value = (0, lodash_es_1.get)(properties, field);\n\n            if (value !== undefined) {\n              tooltipItems.push({\n                name: name_2,\n                value: customValue ? customValue(value, properties, featureId) : value\n              });\n            }\n          }\n        });\n      }\n\n      var componentOptions = {\n        title: customTitle ? customTitle(properties) : title,\n        items: tooltipItems\n      };\n\n      _this.updateTooltip(event, componentOptions);\n    };\n\n    _this.interactionUntriggerHander = function () {\n      _this.hideTooltip();\n    };\n\n    _this.scene = scene;\n    _this.interactionLayers = interactionLayers;\n    _this.options = (0, utils_1.deepAssign)({}, _this.getDefaultOptions(), options);\n    var _a = _this.options,\n        offsets = _a.offsets,\n        title = _a.title,\n        showTitle = _a.showTitle,\n        customContent = _a.customContent,\n        domStyles = _a.domStyles,\n        anchor = _a.anchor,\n        className = _a.className;\n    _this.marker = new l7_component_1.Marker({\n      offsets: offsets,\n      anchor: anchor,\n      draggable: false\n    });\n    _this.tooltipComponent = new l7plot_component_1.Tooltip({\n      title: title,\n      showTitle: showTitle,\n      items: [],\n      customContent: customContent,\n      domStyles: domStyles,\n      className: className\n    });\n\n    _this.setComponent();\n\n    _this.initInteractionEvent();\n\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  Tooltip.prototype.getDefaultOptions = function () {\n    return {\n      showTitle: true,\n      showComponent: true,\n      items: [],\n      offsets: [15, 0],\n      trigger: 'mousemove',\n      anchor: types_1.TooltipAnchorType['TOP-LEFT']\n    };\n  };\n  /**\n   * 更新 tooltip 组件\n   */\n\n\n  Tooltip.prototype.update = function (options) {\n    this.marker.remove();\n    this.currentVisible = false;\n    this.options = (0, utils_1.deepAssign)({}, this.options, options);\n    var _a = this.options,\n        offsets = _a.offsets,\n        showTitle = _a.showTitle,\n        customContent = _a.customContent,\n        domStyles = _a.domStyles,\n        anchor = _a.anchor,\n        className = _a.className;\n    this.marker = new l7_component_1.Marker({\n      offsets: offsets,\n      anchor: anchor,\n      draggable: false\n    });\n    this.tooltipComponent.update({\n      showTitle: showTitle,\n      customContent: customContent,\n      domStyles: domStyles,\n      className: className\n    });\n    this.setComponent();\n  };\n\n  Tooltip.prototype.initInteractionEvent = function () {\n    var _this = this;\n\n    var trigger = this.options.trigger || 'mousemove';\n\n    if (!TRIGGER_LIST.includes(trigger)) {\n      throw new Error('trigger is mousemove or click');\n    }\n\n    this.interactionLayers.forEach(function (_a) {\n      var layer = _a.layer;\n      layer.on(trigger, _this.interactionTriggerHander);\n      layer.on(\"un\".concat(trigger), _this.interactionUntriggerHander);\n    });\n  };\n\n  Tooltip.prototype.unBindInteractionEvent = function () {\n    var _this = this;\n\n    var trigger = this.options.trigger || 'mousemove';\n    this.interactionLayers.forEach(function (_a) {\n      var layer = _a.layer;\n      layer.off(trigger, _this.interactionTriggerHander);\n      layer.off(\"un\".concat(trigger), _this.interactionUntriggerHander);\n    });\n  };\n\n  Tooltip.prototype.updateTooltip = function (mouseEvent, componentOptions) {\n    var lngLat = mouseEvent.lngLat,\n        x = mouseEvent.x,\n        y = mouseEvent.y;\n\n    if (this.options.showComponent) {\n      this.updateComponent(componentOptions);\n      this.setPostion(lngLat);\n    }\n\n    if (this.currentVisible) {\n      var event_1 = {\n        type: 'tooltip:change',\n        data: componentOptions,\n        lngLat: lngLat,\n        x: x,\n        y: y\n      };\n      this.emit('tooltip:change', event_1);\n    } else {\n      this.showTooltip();\n      var event_2 = {\n        type: 'tooltip:show',\n        data: componentOptions,\n        lngLat: lngLat,\n        x: x,\n        y: y\n      };\n      this.emit('tooltip:show', event_2);\n    }\n  };\n  /**\n   * tooltip 添加到地图上\n   */\n\n\n  Tooltip.prototype.showTooltip = function () {\n    if (this.currentVisible) return;\n\n    if (this.options.showComponent) {\n      this.scene.addMarker(this.marker);\n    }\n\n    this.currentVisible = true;\n  };\n  /**\n   * tooltip 从地图上移除\n   */\n\n\n  Tooltip.prototype.hideTooltip = function () {\n    if (!this.currentVisible) return;\n\n    if (this.options.showComponent) {\n      this.marker.remove();\n    }\n\n    this.currentVisible = false;\n    var event = {\n      type: 'tooltip:hide'\n    };\n    this.emit('tooltip:hide', event);\n  };\n  /**\n   * 更新 tooltip 组件\n   */\n\n\n  Tooltip.prototype.updateComponent = function (componentOptions) {\n    if (!(0, util_1.isEqual)(this.lastComponentOptions, componentOptions)) {\n      this.tooltipComponent.update(componentOptions);\n      this.lastComponentOptions = componentOptions;\n    }\n  };\n  /**\n   * 设置 tooltip 内容\n   */\n\n\n  Tooltip.prototype.setComponent = function () {\n    var tooltip = this.tooltipComponent.getContainer();\n    var container = window.document.createElement('div');\n    container.style.cursor = 'auto';\n    container.style.userSelect = 'text';\n    container.className = 'l7plot-tooltip-container'; // stopPropagation\n\n    ['mousemove', 'mousedown', 'mouseup', 'click', 'dblclick'].forEach(function (type) {\n      container.addEventListener(type, function (e) {\n        return e.stopPropagation();\n      });\n    });\n    container.appendChild(tooltip);\n    this.marker.setElement(container);\n  };\n  /**\n   * 设置 tooltip 位置\n   */\n\n\n  Tooltip.prototype.setPostion = function (position) {\n    this.marker.setLnglat(position);\n  };\n  /**\n   * 销毁\n   */\n\n\n  Tooltip.prototype.destroy = function () {\n    this.unBindInteractionEvent();\n    this.off();\n    this.marker.remove();\n    this.tooltipComponent.destroy();\n  };\n\n  return Tooltip;\n}(event_emitter_1.default);\n\nexports.Tooltip = Tooltip;","map":null,"metadata":{},"sourceType":"script"}