{"ast":null,"code":"import React, { useReducer } from 'react';\nexport var Portal;\n\n(function (Portal) {\n  let active = false;\n  let dispatch;\n\n  const reducer = (state, action) => {\n    const payload = action.payload;\n\n    switch (action.type) {\n      case 'add':\n        {\n          const index = state.findIndex(item => item.id === payload.id);\n\n          if (index >= 0) {\n            state[index] = payload;\n            return [...state];\n          }\n\n          return [...state, payload];\n        }\n\n      case 'remove':\n        {\n          const index = state.findIndex(item => item.id === payload.id);\n\n          if (index >= 0) {\n            const result = [...state];\n            result.splice(index, 1);\n            return result;\n          }\n\n          break;\n        }\n\n      default:\n        {\n          break;\n        }\n    }\n\n    return state;\n  };\n\n  function connect(id, portal) {\n    if (active) {\n      dispatch({\n        type: 'add',\n        payload: {\n          id,\n          portal\n        }\n      });\n    }\n  }\n\n  Portal.connect = connect;\n\n  function disconnect(id) {\n    if (active) {\n      dispatch({\n        type: 'remove',\n        payload: {\n          id\n        }\n      });\n    }\n  }\n\n  Portal.disconnect = disconnect;\n\n  function isActive() {\n    return active;\n  }\n\n  Portal.isActive = isActive;\n\n  function getProvider() {\n    // eslint-disable-next-line react/display-name\n    return () => {\n      active = true;\n      const [items, mutate] = useReducer(reducer, []);\n      dispatch = mutate; // eslint-disable-next-line react/no-children-prop\n\n      return React.createElement(React.Fragment, {\n        children: items.map(item => item.portal)\n      });\n    };\n  }\n\n  Portal.getProvider = getProvider;\n})(Portal || (Portal = {}));","map":null,"metadata":{},"sourceType":"module"}