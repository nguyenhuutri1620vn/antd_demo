{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { ManaSyringe, ICommandHandler, ICommandContextProvider, delay } from '@antv/xflow-core';\nimport { XFlowDagCommands, GRAPH_STATUS_INFO, EDGE_PROCESSING_CLASSNAME } from '../constants';\nexport var NsGraphStatusCommand;\n\n(function (NsGraphStatusCommand) {\n  /** Command: 获取执行状态 */\n  NsGraphStatusCommand.MODEL = GRAPH_STATUS_INFO;\n  /** Command: 用于注册 named factory */\n\n  NsGraphStatusCommand.command = XFlowDagCommands.QUERY_GRAPH_STATUS;\n  /** hookName */\n\n  NsGraphStatusCommand.hookKey = 'queryGraphStatus';\n  /** 状态 类型 */\n\n  let StatusEnum;\n\n  (function (StatusEnum) {\n    StatusEnum[\"SUCCESS\"] = \"success\";\n    StatusEnum[\"PROCESSING\"] = \"processing\";\n    StatusEnum[\"ERROR\"] = \"error\";\n    StatusEnum[\"DEFAULT\"] = \"default\";\n    StatusEnum[\"WARNING\"] = \"warning\";\n  })(StatusEnum = NsGraphStatusCommand.StatusEnum || (NsGraphStatusCommand.StatusEnum = {}));\n  /** 按status 分类  */\n\n\n  NsGraphStatusCommand.initStatusMap = () => ({\n    [NsGraphStatusCommand.StatusEnum.DEFAULT]: [],\n    [NsGraphStatusCommand.StatusEnum.PROCESSING]: [],\n    [NsGraphStatusCommand.StatusEnum.ERROR]: [],\n    [NsGraphStatusCommand.StatusEnum.WARNING]: [],\n    [NsGraphStatusCommand.StatusEnum.SUCCESS]: []\n  });\n  /** 接口返回 类型 */\n\n\n  NsGraphStatusCommand.groupByStatus = data => {\n    const seed = NsGraphStatusCommand.initStatusMap();\n    return Object.entries(data).reduce((acc, _ref) => {\n      let [nodeId, value] = _ref;\n      acc[value.status].push(nodeId);\n      return acc;\n    }, seed);\n  };\n  /** diff status */\n\n\n  NsGraphStatusCommand.statusDiff = (cur, next) => {\n    const items = new Set([...cur, ...next]);\n    const diff = {\n      current: [],\n      add: [],\n      remove: []\n    };\n    items.forEach(item => {\n      if (next.includes(item) && !cur.includes(item)) {\n        diff.add.push(item);\n      }\n\n      if (!next.includes(item) && cur.includes(item)) {\n        diff.remove.push(item);\n      }\n    });\n    return diff;\n  };\n\n  NsGraphStatusCommand.shouldStop = info => __awaiter(this, void 0, void 0, function* () {\n    return [StatusEnum.ERROR, StatusEnum.SUCCESS].includes(info.graphStatus);\n  });\n})(NsGraphStatusCommand || (NsGraphStatusCommand = {}));\n/** 创建节点命令 */\n\n\nlet QueryGraphStatusCommand = class QueryGraphStatusCommand {\n  constructor() {\n    /** 状态缓存 */\n    this.statusInfo = NsGraphStatusCommand.initStatusMap();\n    /** 获取Model */\n\n    this.getStatusModel = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const modelService = ctx.getModelService();\n      const statusModel = yield GRAPH_STATUS_INFO.getModel(modelService);\n      return statusModel;\n    });\n    /** 更新Model数据 */\n\n\n    this.updateModelValue = callback => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      statusModel.setValue(callback);\n    });\n    /** 停止Looping的flag */\n\n\n    this.stopCurrentStatusLooping = () => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      const {\n        subscription\n      } = yield statusModel.getValidValue();\n      subscription.dispose();\n    });\n    /** 设置停止looping的方法 */\n\n\n    this.addStopDispose = () => __awaiter(this, void 0, void 0, function* () {\n      const statusModel = yield this.getStatusModel();\n      const {\n        subscription\n      } = yield statusModel.getValidValue();\n      subscription.push({\n        dispose: () => {\n          /** 重制processing的边的状态 */\n          this.updateEdges(this.statusInfo, NsGraphStatusCommand.initStatusMap());\n          this.isLooping = false;\n        }\n      });\n    });\n    /** 更新Graph的数据 */\n\n\n    this.updateGraph = (curStatusInfo, nextStatusMap, statusMap) => {\n      /** 更新节点 */\n      this.updateNodes(curStatusInfo, nextStatusMap, statusMap);\n      /** 更新边 */\n\n      this.updateEdges(curStatusInfo, nextStatusMap);\n    };\n    /** 更新节点数据 */\n\n\n    this.updateNodeData = (id, data) => {\n      const cell = this.x6Graph.getCellById(id);\n\n      if (!cell) {\n        return;\n      }\n\n      cell.setData(Object.assign(Object.assign(Object.assign(Object.assign({}, cell.getData()), cell.getSize()), cell.getPosition()), data));\n    };\n    /** 更新连线数据 */\n\n\n    this.updateNodes = (curStatusInfo, nextStatusMap, statusMap) => {\n      Object.keys(curStatusInfo).forEach(status => {\n        const nodes = NsGraphStatusCommand.statusDiff(curStatusInfo[status], nextStatusMap[status]);\n        nodes.add.forEach(id => {\n          this.updateNodeData(id, statusMap[id]);\n        });\n        nodes.remove.forEach(id => {\n          this.updateNodeData(id, statusMap[id]);\n        });\n      });\n    };\n    /** 更新节点数据 */\n\n\n    this.updateEdges = (curStatusInfo, nextStatusMap) => {\n      const runningNodes = NsGraphStatusCommand.statusDiff(curStatusInfo.processing, nextStatusMap.processing);\n      const edges = this.x6Graph.getEdges();\n      edges.forEach(edge => {\n        var _a;\n\n        const view = (_a = this.x6Graph) === null || _a === void 0 ? void 0 : _a.findViewByCell(edge.id);\n        const target = edge.getTargetCellId();\n\n        if (!target) {\n          return;\n        }\n\n        const targetNodeId = target.toString();\n\n        if (!view) {\n          return;\n        }\n\n        if (runningNodes.add.includes(targetNodeId)) {\n          /** 新增className */\n          return view.addClass(EDGE_PROCESSING_CLASSNAME);\n        } else if (runningNodes.remove.includes(targetNodeId)) {\n          /** 移除className */\n          return view.removeClass(EDGE_PROCESSING_CLASSNAME);\n        }\n      });\n    };\n    /** 执行Cmd */\n\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks(); // 引用\n\n      this.x6Graph = yield ctx.getX6Graph();\n      const result = yield hooks.queryGraphStatus.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        var _this = this;\n\n        const {\n          graphStatusService,\n          shouldStop = NsGraphStatusCommand.shouldStop,\n          doOnce\n        } = handlerArgs; // 取消已有的循环\n\n        yield this.stopCurrentStatusLooping(); // 循环函数\n\n        const loopFunction = function (service) {\n          let loopInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10000;\n          return __awaiter(_this, void 0, void 0, function* () {\n            // 查询服务端状态\n            const data = yield service(handlerArgs); // 更新全局状态\n\n            this.updateModelValue(state => {\n              Object.entries(data.statusMap).forEach(_ref2 => {\n                let [key, value] = _ref2;\n                state.statusMap.set(key, value);\n              });\n              state.graphStatus = data.graphStatus;\n            }); // 更新图上状态\n\n            const statusGroupMap = NsGraphStatusCommand.groupByStatus(data.statusMap);\n            this.updateGraph(this.statusInfo, statusGroupMap, data.statusMap); // 缓存当前状态作为对比数据\n\n            this.statusInfo = statusGroupMap; // 延迟\n\n            yield delay(loopInterval); // 判断是否循环\n\n            if (!this.isLooping) {\n              return;\n            } // 判断是否循环\n\n\n            if (shouldStop) {\n              const isStop = yield shouldStop(data, handlerArgs);\n\n              if (isStop) {\n                return;\n              }\n            } // 执行下次调用\n\n\n            yield loopFunction(service, loopInterval);\n          });\n        }; // 从参数更新循环的FLAG\n\n\n        this.isLooping = handlerArgs.loop === undefined ? true : handlerArgs.loop; // 添加可以停止loop的回调\n\n        yield this.addStopDispose(); // 执行\n\n        if (doOnce) {\n          yield doOnce(handlerArgs);\n        }\n\n        loopFunction(graphStatusService, handlerArgs.loopInterval);\n        return {};\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([ManaSyringe.inject(ICommandContextProvider), __metadata(\"design:type\", Object)], QueryGraphStatusCommand.prototype, \"contextProvider\", void 0);\n\nQueryGraphStatusCommand = __decorate([ManaSyringe.injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphStatusCommand.command.id\n  }\n})], QueryGraphStatusCommand);\nexport { QueryGraphStatusCommand };\nexport const execCmd = () => {};","map":null,"metadata":{},"sourceType":"module"}