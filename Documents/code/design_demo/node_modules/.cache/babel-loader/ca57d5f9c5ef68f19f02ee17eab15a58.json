{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { ManaSyringe, DisposableCollection, NsGraph, Disposable, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { IGraphCommandFactory, IHookContribution, IModelContribution, IGraphCommandContribution } from '@antv/xflow-core';\nimport { HookHub } from '@antv/xflow-hook';\nimport { XFlowNode } from '../x6-extension/node';\nimport { XFlowEdge } from '../x6-extension/edge';\nimport { GRAPH_STATUS_INFO } from '../constants';\nimport { NsGraphStatusCommand } from './command';\nimport { LayoutEnum } from '../interface';\nimport { IComponentConfig } from '../interface';\nexport var NsAddEdgeEvent;\n\n(function (NsAddEdgeEvent) {\n  NsAddEdgeEvent.EVENT_NAME = 'ADD_EDGE_CMD_EVENT';\n})(NsAddEdgeEvent || (NsAddEdgeEvent = {}));\n\nexport var DAG_DEFAULT_CONIFG;\n\n(function (DAG_DEFAULT_CONIFG) {\n  DAG_DEFAULT_CONIFG.router = {\n    name: 'manhattan'\n  };\n  DAG_DEFAULT_CONIFG.connector = {\n    name: 'rounded',\n    args: {\n      radius: 15\n    }\n  };\n})(DAG_DEFAULT_CONIFG || (DAG_DEFAULT_CONIFG = {}));\n\nexport const ANT_PREFIX = 'ant';\nexport const getDagOptions = props => {\n  const {\n    layout = LayoutEnum.TOP_BOTTOM,\n    router = DAG_DEFAULT_CONIFG.router,\n    connector = DAG_DEFAULT_CONIFG.connector\n  } = props;\n  const targetPortType = layout === LayoutEnum.TOP_BOTTOM ? NsGraph.AnchorGroup.TOP : NsGraph.AnchorGroup.LEFT;\n  const dagOptions = {\n    grid: false,\n    keyboard: {\n      enabled: true\n    },\n    // 点选/框选配置（详细文档：https://X6.antv.vision/zh/docs/tutorial/basic/selection）\n    selecting: {\n      enabled: true,\n      multiple: true,\n      selectCellOnMoved: true,\n      showNodeSelectionBox: false,\n      // 框选可以选中edge\n      rubberEdge: true,\n      // 框选可以选中node\n      rubberNode: true,\n      movable: true\n    },\n    connecting: {\n      //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n      sourceAnchor: layout === LayoutEnum.TOP_BOTTOM ? 'bottom' : 'right',\n      //链接桩的位置 https://x6.antv.vision/zh/docs/api/registry/node-anchor\n      targetAnchor: layout === LayoutEnum.TOP_BOTTOM ? 'center' : 'left',\n      connectionPoint: 'anchor',\n      snap: {\n        radius: 20\n      },\n      router: router,\n      connector: connector,\n      highlight: true,\n      dangling: false,\n\n      createEdge() {\n        /* eslint-disable-next-line @typescript-eslint/no-this-alias */\n        const graph = this;\n        const edge = new XFlowEdge({\n          attrs: {\n            line: {\n              strokeDasharray: '5 5',\n              stroke: '#888',\n              strokeWidth: 1,\n              targetMarker: {\n                name: 'block',\n                args: {\n                  size: '6'\n                }\n              }\n            }\n          }\n        });\n\n        const addEdge = args => {\n          const {\n            isNew\n          } = args;\n          const edgeCell = args.edge;\n          /** 没有edge:connected时，会导致graph.once的事件没有执行 */\n\n          if (isNew && edgeCell.isEdge() && edgeCell === edge) {\n            const portId = edgeCell.getTargetPortId();\n            const targetNode = edgeCell.getTargetCell();\n\n            if (targetNode && targetNode.isNode()) {\n              targetNode.setPortProp(portId, 'connected', false);\n              edgeCell.attr({\n                line: {\n                  strokeDasharray: '',\n                  targetMarker: '',\n                  stroke: '#d5d5d5'\n                }\n              });\n              const targetPortId = edgeCell.getTargetPortId();\n              const sourcePortId = edgeCell.getSourcePortId();\n              const sourceCellId = edgeCell.getSourceCellId();\n              const targetCellId = edgeCell.getTargetCellId();\n              graph.trigger(NsAddEdgeEvent.EVENT_NAME, {\n                targetPortId,\n                sourcePortId,\n                source: sourceCellId,\n                target: targetCellId,\n                edge: edge\n              });\n            }\n          }\n        };\n\n        graph.once('edge:connected', addEdge);\n        return edge;\n      },\n\n      validateEdge: args => {\n        var _a;\n\n        const {\n          edge\n        } = args;\n        return !!((_a = edge === null || edge === void 0 ? void 0 : edge.target) === null || _a === void 0 ? void 0 : _a.port);\n      },\n\n      // 是否触发交互事件\n      validateMagnet(_ref) {\n        let {\n          magnet\n        } = _ref;\n        return magnet.getAttribute('port-group') !== targetPortType;\n      },\n\n      // 显示可用的链接桩\n      validateConnection(_ref2) {\n        let {\n          sourceView,\n          targetView,\n          sourceMagnet,\n          targetMagnet\n        } = _ref2;\n\n        // 不允许连接到自己\n        if (sourceView === targetView) {\n          return false;\n        } // 只能从上游节点的输出链接桩创建连接\n\n\n        if (!sourceMagnet || sourceMagnet.getAttribute('port-group') === targetPortType) {\n          return false;\n        } // 只能连接到下游节点的输入桩\n\n\n        if (!targetMagnet || targetMagnet.getAttribute('port-group') !== targetPortType) {\n          return false;\n        }\n\n        const node = targetView.cell; // 判断目标链接桩是否可连接\n\n        const portId = targetMagnet.getAttribute('port');\n        const port = node.getPort(portId);\n        return !(port && port.connected);\n      }\n\n    },\n    highlighting: {\n      nodeAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAdsorbed: {\n        name: 'className',\n        args: {\n          className: 'adsorbed'\n        }\n      }\n    },\n    scaling: {\n      max: 1.05,\n      min: 0.01\n    }\n  };\n  return dagOptions;\n};\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\nlet DagHooksContribution = class DagHooksContribution {\n  constructor() {\n    /** 注册Command */\n    this.registerGraphCommands = commands => {\n      commands.registerCommand(NsGraphStatusCommand.command, {\n        createCommand: this.commandFactory\n      });\n    };\n    /** 注册Hub */\n\n\n    this.toDispose = new DisposableCollection();\n    /** 注册Hook */\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      const disposables = [hooks.addNode.registerHook({\n        name: 'dag-add-node',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const cellFactory = nodeConfig => __awaiter(this, void 0, void 0, function* () {\n            const node = new XFlowNode(Object.assign({}, nodeConfig));\n            return node;\n          });\n\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'dag-add-edge',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const {\n            layout = LayoutEnum.TOP_BOTTOM\n          } = yield this.propConfig.getConfig();\n\n          const cellFactory = edgeConfig => __awaiter(this, void 0, void 0, function* () {\n            const cell = new XFlowEdge(Object.assign(Object.assign({}, edgeConfig), {\n              id: edgeConfig.id,\n              source: {\n                cell: edgeConfig.source,\n                port: edgeConfig.sourcePortId,\n                anchor: {\n                  name: layout === LayoutEnum.TOP_BOTTOM ? 'bottom' : 'right'\n                }\n              },\n              target: {\n                cell: edgeConfig.target,\n                port: edgeConfig.targetPortId,\n                anchor: {\n                  name: layout === LayoutEnum.TOP_BOTTOM ? 'center' : 'right'\n                }\n              },\n              attrs: {\n                line: {\n                  strokeDasharray: '',\n                  targetMarker: '',\n                  stroke: '#d5d5d5',\n                  strokeWidth: 1\n                }\n              },\n              data: Object.assign({}, edgeConfig)\n            }));\n            return cell;\n          });\n\n          args.cellFactory = cellFactory;\n        })\n      }), hooks.addEdge.registerHook({\n        name: 'after add edge, set target port props',\n        handler: (handlerArgs, handler) => __awaiter(this, void 0, void 0, function* () {\n          const main = args => __awaiter(this, void 0, void 0, function* () {\n            const res = yield handler(args);\n\n            if (res && res.edgeCell) {\n              const targetNode = res.edgeCell.getTargetCell();\n              const portId = res.edgeCell.getTargetPortId();\n              targetNode.setPortProp(portId, 'connected', true);\n            }\n\n            return res;\n          });\n\n          return main;\n        })\n      }), hooks.delEdge.registerHook({\n        name: 'afetr del edge, reset target node port props',\n        handler: (args, handler) => __awaiter(this, void 0, void 0, function* () {\n          const newHandler = handlerArgs => __awaiter(this, void 0, void 0, function* () {\n            const result = yield handler(handlerArgs);\n            const {\n              targetCell,\n              targetPortId\n            } = result;\n\n            if (targetCell && targetCell.isNode() && targetPortId) {\n              targetCell.setPortProp(targetPortId, 'connected', false);\n            }\n\n            return result;\n          });\n\n          return newHandler;\n        })\n      }), hooks.afterGraphInit.registerHook({\n        name: 'call add edge to replace temp edge',\n        handler: handlerArgs => __awaiter(this, void 0, void 0, function* () {\n          const {\n            commandService,\n            graph\n          } = handlerArgs;\n          graph.on(NsAddEdgeEvent.EVENT_NAME, args => {\n            commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, {\n              edgeConfig: args\n            });\n            args.edge.remove();\n          });\n        })\n      }), hooks.graphOptions.registerHook({\n        name: 'dag-extension-x6-options',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const props = yield this.propConfig.getConfig();\n          const dagOptions = getDagOptions(props);\n          Object.assign(args, dagOptions);\n        })\n      })];\n      toDispose.pushAll(disposables);\n      return Disposable.create(() => {});\n    });\n    /** 注册Hub */\n\n\n    this.registerHookHub = registry => __awaiter(this, void 0, void 0, function* () {\n      return registry.registerHookHub(NsGraphStatusCommand.hookKey, new HookHub());\n    });\n  }\n  /** 扩展Model */\n\n\n  registerModel(registry) {\n    /** node status map */\n    registry.registerModel({\n      id: GRAPH_STATUS_INFO.id,\n      getInitialValue: () => ({\n        statusMap: new Map(),\n        subscription: new DisposableCollection(),\n        graphStatus: GRAPH_STATUS_INFO.StatusEnum.DEFAULT\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          subscription\n        } = yield self.getValidValue();\n        return subscription;\n      })\n    });\n  }\n\n};\n\n__decorate([ManaSyringe.inject(IGraphCommandFactory), __metadata(\"design:type\", Function)], DagHooksContribution.prototype, \"commandFactory\", void 0);\n\n__decorate([ManaSyringe.inject(IComponentConfig), __metadata(\"design:type\", Object)], DagHooksContribution.prototype, \"propConfig\", void 0);\n\nDagHooksContribution = __decorate([ManaSyringe.singleton({\n  contrib: [IHookContribution, IModelContribution, IGraphCommandContribution]\n})], DagHooksContribution);\nexport { DagHooksContribution };","map":null,"metadata":{},"sourceType":"module"}