{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { createModule } from '../module';\nimport { insertCss } from '@antv/xflow-core';\nimport { XFlowAppExtensionMoudle, usePositionStyle } from '@antv/xflow-core';\nimport { SimpleNodeView } from '../x6-node-view';\n/** 配置类型 */\n\nexport const CONFIG_TYPE = 'CanvasMiniMap';\n/** 获取默认配置 */\n\nexport const getDefaultMinimapOptions = () => {\n  return {\n    grid: false,\n    enabled: true,\n    width: 200,\n    height: 120,\n    padding: 8,\n    graphOptions: {\n      async: true,\n\n      getCellView(cell) {\n        if (cell.isNode()) {\n          return SimpleNodeView;\n        }\n      },\n\n      createCellView(cell) {\n        if (cell.isEdge()) {\n          return null;\n        }\n      }\n\n    }\n  };\n};\nexport const CanvasMiniMap = props => {\n  const {\n    nodeFillColor,\n    borderColor = '#ced4de',\n    handlerColor = 'rgba(0,0,0,.3)',\n    miniMapClz = '',\n    position = {\n      bottom: 12,\n      right: 12\n    },\n    minimapOptions = {}\n  } = props;\n  /** x6画布的dom节点 */\n\n  const minimapRef = React.useRef(null);\n  const minimapConfigRef = React.useRef(props.minimapOptions);\n  const classNameSet = React.useMemo(() => {\n    return new Set([miniMapClz, 'xflow-minimap', 'minimap-instacne-' + Date.now().toString()]);\n  }, [miniMapClz]);\n  const getConfig = React.useMemo(() => () => __awaiter(void 0, void 0, void 0, function* () {\n    return Object.assign(Object.assign(Object.assign({}, getDefaultMinimapOptions()), minimapConfigRef.current), {\n      container: minimapRef.current\n    });\n  }), [minimapRef]);\n  const style = usePositionStyle(position);\n  React.useEffect(() => {\n    /** 设置minimap容器 */\n    minimapConfigRef.current = minimapOptions;\n  }, [minimapConfigRef, minimapOptions]);\n  React.useEffect(() => {\n    /** 设置Node样式 */\n    if (nodeFillColor) {\n      SimpleNodeView.setNodeFillColor(nodeFillColor);\n    }\n  }, [nodeFillColor]);\n  React.useEffect(() => {\n    const containerSelector = Array.from(classNameSet).reduce((acc, clz) => clz ? `${acc}.${clz}` : acc, '');\n    const cssString = `\n      ${containerSelector} .x6-widget-minimap-viewport {\n        border: 1px solid ${borderColor};\n        margin: 0;\n      }\n      ${containerSelector} .x6-widget-minimap-viewport-zoom {\n        border: 1px solid ${handlerColor}; \n      }\n    `;\n    const $style = insertCss(cssString);\n    return () => {\n      document.head.removeChild($style);\n    };\n  }, [borderColor, classNameSet, handlerColor]);\n  const clzName = Array.from(classNameSet).join(' ');\n  return React.createElement(XFlowAppExtensionMoudle, {\n    config: {\n      getConfig,\n      CONFIG_TYPE\n    },\n    createModule: createModule\n  }, React.createElement(\"div\", {\n    ref: minimapRef,\n    className: clzName,\n    style: style\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}