{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { $document } from '../document';\nimport { Event } from '../Event';\nimport { getCanvas } from '../register';\n\nvar TouchEvent = function (_Event) {\n  _inherits(TouchEvent, _Event);\n\n  var _super = _createSuper(TouchEvent);\n\n  function TouchEvent(type) {\n    var _this;\n\n    _classCallCheck(this, TouchEvent);\n\n    _this = _super.call(this, type);\n\n    _defineProperty(_assertThisInitialized(_this), \"touches\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"targetTouches\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"changedTouches\", void 0);\n\n    _this.touches = [];\n    _this.targetTouches = [];\n    _this.changedTouches = [];\n    _this.target = getCanvas();\n    _this.currentTarget = getCanvas();\n    return _this;\n  }\n\n  return _createClass(TouchEvent);\n}(Event);\n\nfunction mapEvent(event) {\n  var _ref = event || {},\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y,\n      _ref$clientX = _ref.clientX,\n      clientX = _ref$clientX === void 0 ? 0 : _ref$clientX,\n      _ref$clientY = _ref.clientY,\n      clientY = _ref$clientY === void 0 ? 0 : _ref$clientY;\n\n  if (Object.keys(event).indexOf('x') !== -1) {\n    event.pageX = event.clientX = x;\n    event.pageY = event.clientY = y;\n  } else {\n    event.x = clientX;\n    event.y = clientY;\n  }\n}\n\nfunction eventHandlerFactory(type) {\n  return function (rawEvent) {\n    var event = new TouchEvent(type);\n    event.changedTouches = rawEvent.changedTouches;\n    event.touches = rawEvent.touches;\n    event.targetTouches = Array.prototype.slice.call(rawEvent.touches);\n    event.timeStamp = rawEvent.timeStamp;\n    event.changedTouches.forEach(function (e) {\n      return mapEvent(e);\n    });\n    event.touches.forEach(function (e) {\n      return mapEvent(e);\n    });\n    event.targetTouches.forEach(function (e) {\n      return mapEvent(e);\n    });\n    $document.dispatchEvent(event);\n  };\n}\n\nfunction eventMapHandlerFactory(type) {\n  return function (rawEvent) {\n    rawEvent.type = type;\n    $document.dispatchEvent(rawEvent);\n  };\n}\n\nvar dispatchTouchStart = eventHandlerFactory('touchstart');\nvar dispatchTouchMove = eventHandlerFactory('touchmove');\nvar dispatchTouchEnd = eventHandlerFactory('touchend');\nvar dispatchMapCameraParams = eventMapHandlerFactory('mapCameaParams');\nexport { dispatchTouchStart, dispatchTouchMove, dispatchTouchEnd, dispatchMapCameraParams };","map":null,"metadata":{},"sourceType":"module"}