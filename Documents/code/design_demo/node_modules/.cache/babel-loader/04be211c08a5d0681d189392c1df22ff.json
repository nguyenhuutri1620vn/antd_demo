{"ast":null,"code":"import { NumberExt } from '../util/number';\nexport class Color {\n  constructor(color, g, b, a) {\n    if (color == null) {\n      return this.set(255, 255, 255, 1);\n    }\n\n    if (typeof color === 'number') {\n      return this.set(color, g, b, a);\n    }\n\n    if (typeof color === 'string') {\n      return Color.fromString(color) || this;\n    }\n\n    if (Array.isArray(color)) {\n      return this.set(color);\n    }\n\n    this.set(color.r, color.g, color.b, color.a == null ? 1 : color.a);\n  }\n\n  blend(start, end, weight) {\n    this.set(start.r + (end.r - start.r) * weight, start.g + (end.g - start.g) * weight, start.b + (end.b - start.b) * weight, start.a + (end.a - start.a) * weight);\n  }\n\n  lighten(amount) {\n    const rgba = Color.lighten(this.toArray(), amount);\n    this.r = rgba[0];\n    this.g = rgba[1];\n    this.b = rgba[2];\n    this.a = rgba[3];\n  }\n\n  darken(amount) {\n    this.lighten(-amount);\n  }\n\n  set(arg0, arg1, arg2, arg3) {\n    const r = Array.isArray(arg0) ? arg0[0] : arg0;\n    const g = Array.isArray(arg0) ? arg0[1] : arg1;\n    const b = Array.isArray(arg0) ? arg0[2] : arg2;\n    const a = Array.isArray(arg0) ? arg0[3] : arg3;\n    this.r = Math.round(NumberExt.clamp(r, 0, 255));\n    this.g = Math.round(NumberExt.clamp(g, 0, 255));\n    this.b = Math.round(NumberExt.clamp(b, 0, 255));\n    this.a = a == null ? 1 : NumberExt.clamp(a, 0, 1);\n    return this;\n  }\n\n  toHex() {\n    const hex = ['r', 'g', 'b'].map(key => {\n      const str = this[key].toString(16);\n      return str.length < 2 ? `0${str}` : str;\n    });\n    return `#${hex.join('')}`;\n  }\n\n  toRGBA() {\n    return this.toArray();\n  }\n\n  toHSLA() {\n    return Color.rgba2hsla(this.r, this.g, this.b, this.a);\n  }\n\n  toCSS(ignoreAlpha) {\n    const rgb = `${this.r},${this.g},${this.b},`;\n    return ignoreAlpha ? `rgb(${rgb})` : `rgba(${rgb},${this.a})`;\n  }\n\n  toGrey() {\n    return Color.makeGrey(Math.round((this.r + this.g + this.b) / 3), this.a);\n  }\n\n  toArray() {\n    return [this.r, this.g, this.b, this.a];\n  }\n\n  toString() {\n    return this.toCSS();\n  }\n\n}\n\n(function (Color) {\n  function fromArray(arr) {\n    return new Color(arr);\n  }\n\n  Color.fromArray = fromArray;\n\n  function fromHex(color) {\n    return new Color([...hex2rgb(color), 1]);\n  }\n\n  Color.fromHex = fromHex;\n\n  function fromRGBA(color) {\n    const matches = color.toLowerCase().match(/^rgba?\\(([\\s.,0-9]+)\\)/);\n\n    if (matches) {\n      const arr = matches[1].split(/\\s*,\\s*/).map(v => parseInt(v, 10));\n      return new Color(arr);\n    }\n\n    return null;\n  }\n\n  Color.fromRGBA = fromRGBA;\n\n  function hue2rgb(m1, m2, h) {\n    if (h < 0) {\n      ++h; // eslint-disable-line\n    }\n\n    if (h > 1) {\n      --h; // eslint-disable-line\n    }\n\n    const h6 = 6 * h;\n\n    if (h6 < 1) {\n      return m1 + (m2 - m1) * h6;\n    }\n\n    if (2 * h < 1) {\n      return m2;\n    }\n\n    if (3 * h < 2) {\n      return m1 + (m2 - m1) * (2 / 3 - h) * 6;\n    }\n\n    return m1;\n  }\n\n  function fromHSLA(color) {\n    const matches = color.toLowerCase().match(/^hsla?\\(([\\s.,0-9]+)\\)/);\n\n    if (matches) {\n      const arr = matches[2].split(/\\s*,\\s*/);\n      const h = (parseFloat(arr[0]) % 360 + 360) % 360 / 360;\n      const s = parseFloat(arr[1]) / 100;\n      const l = parseFloat(arr[2]) / 100;\n      const a = arr[3] == null ? 1 : parseInt(arr[3], 10);\n      return new Color(hsla2rgba(h, s, l, a));\n    }\n\n    return null;\n  }\n\n  Color.fromHSLA = fromHSLA;\n\n  function fromString(color) {\n    if (color.startsWith('#')) {\n      return fromHex(color);\n    }\n\n    if (color.startsWith('rgb')) {\n      return fromRGBA(color);\n    }\n\n    const preset = Color.named[color];\n\n    if (preset) {\n      return fromHex(preset);\n    }\n\n    return fromHSLA(color);\n  }\n\n  Color.fromString = fromString;\n\n  function makeGrey(g, a) {\n    return Color.fromArray([g, g, g, a]);\n  }\n\n  Color.makeGrey = makeGrey;\n\n  function rgba2hsla(arg0, arg1, arg2, arg3) {\n    const r = Array.isArray(arg0) ? arg0[0] : arg0;\n    const g = Array.isArray(arg0) ? arg0[1] : arg1;\n    const b = Array.isArray(arg0) ? arg0[2] : arg2;\n    const a = Array.isArray(arg0) ? arg0[3] : arg3;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const l = (max + min) / 2;\n    let h = 0;\n    let s = 0;\n\n    if (min !== max) {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n\n        default:\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return [h, s, l, a == null ? 1 : a];\n  }\n\n  Color.rgba2hsla = rgba2hsla;\n\n  function hsla2rgba(arg0, arg1, arg2, arg3) {\n    const h = Array.isArray(arg0) ? arg0[0] : arg0;\n    const s = Array.isArray(arg0) ? arg0[1] : arg1;\n    const l = Array.isArray(arg0) ? arg0[2] : arg2;\n    const a = Array.isArray(arg0) ? arg0[3] : arg3;\n    const m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;\n    const m1 = 2 * l - m2;\n    return [hue2rgb(m1, m2, h + 1 / 3) * 256, hue2rgb(m1, m2, h) * 256, hue2rgb(m1, m2, h - 1 / 3) * 256, a == null ? 1 : a];\n  }\n\n  Color.hsla2rgba = hsla2rgba;\n\n  function random(ignoreAlpha) {\n    return new Color(Math.round(Math.random() * 256), Math.round(Math.random() * 256), Math.round(Math.random() * 256), ignoreAlpha ? undefined : parseFloat(Math.random().toFixed(2)));\n  }\n\n  Color.random = random;\n\n  function randomHex() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n\n    for (let i = 0; i < 6; i += 1) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n\n    return color;\n  }\n\n  Color.randomHex = randomHex;\n\n  function randomRGBA(ignoreAlpha) {\n    return random(ignoreAlpha).toString();\n  }\n\n  Color.randomRGBA = randomRGBA;\n\n  function invert(color, bw) {\n    if (typeof color === 'string') {\n      const pound = color[0] === '#';\n      const [r, g, b] = hex2rgb(color);\n\n      if (bw) {\n        // http://stackoverflow.com/a/3943023/112731\n        return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#ffffff';\n      }\n\n      return `${pound ? '#' : ''}${rgb2hex(255 - r, 255 - g, 255 - b)}`;\n    }\n\n    const r = color[0];\n    const g = color[1];\n    const b = color[2];\n    const a = color[3];\n\n    if (bw) {\n      return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? [0, 0, 0, a] : [255, 255, 255, a];\n    }\n\n    return [255 - r, 255 - g, 255 - b, a];\n  }\n\n  Color.invert = invert;\n\n  function hex2rgb(hex) {\n    const color = hex.indexOf('#') === 0 ? hex : `#${hex}`;\n    let val = Number(`0x${color.substr(1)}`);\n\n    if (!(color.length === 4 || color.length === 7) || Number.isNaN(val)) {\n      throw new Error('Invalid hex color.');\n    }\n\n    const bits = color.length === 4 ? 4 : 8;\n    const mask = (1 << bits) - 1;\n    const bgr = ['b', 'g', 'r'].map(() => {\n      const c = val & mask;\n      val >>= bits;\n      return bits === 4 ? 17 * c : c;\n    });\n    return [bgr[2], bgr[1], bgr[0]];\n  }\n\n  function rgb2hex(r, g, b) {\n    const pad = hex => hex.length < 2 ? `0${hex}` : hex;\n\n    return `${pad(r.toString(16))}${pad(g.toString(16))}${pad(b.toString(16))}`;\n  }\n\n  function lighten(color, amt) {\n    return lum(color, amt);\n  }\n\n  Color.lighten = lighten;\n\n  function darken(color, amt) {\n    return lum(color, -amt);\n  }\n\n  Color.darken = darken;\n\n  function lum(color, amt) {\n    if (typeof color === 'string') {\n      const pound = color[0] === '#';\n      const num = parseInt(pound ? color.substr(1) : color, 16);\n      const r = NumberExt.clamp((num >> 16) + amt, 0, 255);\n      const g = NumberExt.clamp((num >> 8 & 0x00ff) + amt, 0, 255);\n      const b = NumberExt.clamp((num & 0x0000ff) + amt, 0, 255);\n      return `${pound ? '#' : ''}${(b | g << 8 | r << 16).toString(16)}`;\n    }\n\n    const hex = rgb2hex(color[0], color[1], color[2]);\n    const arr = hex2rgb(lum(hex, amt));\n    return [arr[0], arr[1], arr[2], color[3]];\n  }\n})(Color || (Color = {}));\n\n(function (Color) {\n  Color.named = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    burntsienna: '#ea7e5d',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n  };\n})(Color || (Color = {}));","map":null,"metadata":{},"sourceType":"module"}