{"ast":null,"code":"import React from 'react';\nexport const AppContext = React.createContext({\n  cell: null,\n  x6Graph: null,\n  commands: null,\n  modelService: null\n});\nexport const useAppContext = () => React.useContext(AppContext);\nexport function getNodeReactComponent(Component, commands, modelService) {\n  return function (x6Node) {\n    /* eslint-disable-next-line  */\n    const x6Graph = this;\n    const nodeData = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getData();\n    const size = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getSize();\n    const position = x6Node === null || x6Node === void 0 ? void 0 : x6Node.getPosition();\n\n    const WrappedComponent = () => {\n      return React.createElement(AppContext.Provider, {\n        value: {\n          cell: x6Node,\n          x6Graph,\n          commands,\n          modelService\n        }\n      }, React.createElement(Component, {\n        cell: x6Node,\n        data: nodeData,\n        size,\n        position\n      }));\n    };\n\n    return React.createElement(WrappedComponent, null);\n  };\n}\nexport function getEdgeReactComponent(Component, commands, modelService) {\n  return function (x6Edge) {\n    /* eslint-disable-next-line  */\n    const x6Graph = this;\n    const edgeData = x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.getData();\n\n    const WrappedComponent = () => {\n      return React.createElement(AppContext.Provider, {\n        value: {\n          cell: x6Edge,\n          x6Graph,\n          commands,\n          modelService\n        }\n      }, React.createElement(Component, {\n        data: edgeData,\n        cell: x6Edge\n      }));\n    };\n\n    return React.createElement(WrappedComponent, null);\n  };\n}\n/** 获取节点选中状态 */\n\nexport const useIsNodeSelected = () => {\n  const [isSelected, setIsSelected] = React.useState(false);\n  const {\n    x6Graph,\n    cell\n  } = useAppContext();\n  React.useEffect(() => {\n    const handler = _ref => {\n      let {\n        added,\n        removed\n      } = _ref;\n      const isAdded = added.filter(selectedCell => selectedCell.isNode()).some(node => {\n        node.id === cell.id;\n      });\n\n      if (isAdded) {\n        cell.setData(Object.assign(Object.assign({}, cell.getData()), {\n          isNodeSelected: true\n        }));\n        setIsSelected(true);\n        return;\n      }\n\n      const isRemoved = removed.filter(selectedCell => selectedCell.isNode()).some(node => {\n        node.id === cell.id;\n      });\n\n      if (isRemoved) {\n        cell.setData(Object.assign(Object.assign({}, cell.getData()), {\n          isNodeSelected: false\n        }));\n        setIsSelected(false);\n        return;\n      }\n    };\n\n    x6Graph.on('selection:changed', handler);\n    return () => {\n      x6Graph.off('selection:changed', handler);\n    };\n    /* eslint-disable-next-line  */\n  }, [x6Graph]);\n  return [isSelected];\n};","map":null,"metadata":{},"sourceType":"module"}