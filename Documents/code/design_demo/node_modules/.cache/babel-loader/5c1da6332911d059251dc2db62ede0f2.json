{"ast":null,"code":"import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../../utils/createLoading';\nimport ErrorBoundary from '../../errorBoundary';\nimport useGraph from '../hooks/useGraph';\nimport { defaultNodeSize, defaultLabelCfg, defaultStateStyles } from './constants';\nimport { processMinimap, getGraphSize, getGraphId, renderGraph, bindEvents, useProps } from './utils';\nimport { registerCustomItems } from './customItems';\nregisterCustomItems();\nvar defaultNodeStyle = {\n  stroke: '#40a9ff'\n};\nvar defaultNodeAnchorPoints = [[0, 0.5], [1, 0.5]];\nvar defaultEdgeStyle = {\n  stroke: '#ccc',\n  endArrow: {\n    path: G6.Arrow.vee(10, 10),\n    fill: '#ccc'\n  }\n};\nvar defaultLayout = {\n  type: 'indented',\n  direction: 'LR',\n  dropCap: false,\n  indent: 250,\n  getHeight: function () {\n    return 60;\n  },\n  getWidth: function () {\n    return 100;\n  }\n};\nvar defaultProps = {\n  nodeType: 'card-node',\n  edgeType: 'cubic-horizontal',\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n  nodeSize: defaultNodeSize,\n  nodeLabelCfg: defaultLabelCfg,\n  nodeAnchorPoints: defaultNodeAnchorPoints,\n  layout: defaultLayout,\n  nodeStyle: defaultNodeStyle,\n  edgeStyle: defaultEdgeStyle,\n  nodeStateStyles: defaultStateStyles,\n  edgeStateStyles: defaultStateStyles,\n  collapseExpand: true,\n  autoFit: true\n};\nvar graphs = {};\n\nvar IndentedTree = function (props) {\n  var uProps = useProps(props, defaultProps);\n  var data = uProps.data,\n      className = uProps.className,\n      style = uProps.style,\n      width = uProps.width,\n      height = uProps.height,\n      _a = uProps.nodeType,\n      nodeType = _a === void 0 ? 'card-node' : _a,\n      _b = uProps.edgeType,\n      edgeType = _b === void 0 ? 'cubic-horizontal' : _b,\n      _c = uProps.behaviors,\n      behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c,\n      _d = uProps.nodeSize,\n      nodeSize = _d === void 0 ? defaultNodeSize : _d,\n      _e = uProps.nodeLabelCfg,\n      nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e,\n      _f = uProps.nodeAnchorPoints,\n      nodeAnchorPoints = _f === void 0 ? defaultNodeAnchorPoints : _f,\n      _g = uProps.layout,\n      layout = _g === void 0 ? defaultLayout : _g,\n      minimapCfg = uProps.minimapCfg,\n      _h = uProps.nodeStyle,\n      nodeStyle = _h === void 0 ? defaultNodeStyle : _h,\n      _j = uProps.edgeStyle,\n      edgeStyle = _j === void 0 ? defaultEdgeStyle : _j,\n      _k = uProps.nodeStateStyles,\n      nodeStateStyles = _k === void 0 ? defaultStateStyles : _k,\n      _l = uProps.edgeStateStyles,\n      edgeStateStyles = _l === void 0 ? defaultStateStyles : _l,\n      _m = uProps.collapseExpand,\n      collapseExpand = _m === void 0 ? true : _m,\n      _o = uProps.autoFit,\n      autoFit = _o === void 0 ? true : _o,\n      handleNodeClick = uProps.handleNodeClick,\n      graphRef = uProps.graphRef,\n      onReady = uProps.onReady,\n      loading = uProps.loading,\n      loadingTemplate = uProps.loadingTemplate,\n      errorTemplate = uProps.errorTemplate;\n  var graph = React.useRef(null);\n  var graphId = getGraphId(graph);\n  var container = React.useRef(null);\n  useGraph(graphs[graphId], uProps, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n    var graph = graphs[graphId];\n\n    if (!graph) {\n      graph = new G6.TreeGraph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout,\n        fitView: autoFit\n      });\n      graphs[graphId] = graph;\n    }\n\n    if (graphRef) {\n      graphRef.current = graph;\n    }\n\n    processMinimap(minimapCfg, graph);\n    renderGraph(graph, data);\n\n    if (onReady) {\n      onReady(graph);\n    }\n\n    if (collapseExpand) {\n      var onClick_1 = function (e) {\n        var item = e.item;\n\n        if (e.target.get('name') === 'collapse-icon') {\n          graph.updateItem(item, {\n            collapsed: !item.getModel().collapsed\n          });\n          graph.layout();\n        } else if (handleNodeClick) {\n          handleNodeClick(item, graph);\n        }\n      };\n\n      graph.on('node:click', function (e) {\n        onClick_1(e);\n      });\n      graph.on('node:touchstart', function (e) {\n        onClick_1(e);\n      });\n    }\n\n    bindEvents(graph, props);\n    return function () {\n      if (graphs[graphId]) {\n        graphs[graphId].destroy();\n        delete graphs[graphId];\n      }\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, {\n    errorTemplate: errorTemplate\n  }, loading && React.createElement(ChartLoading, {\n    loadingTemplate: loadingTemplate\n  }), React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default IndentedTree;","map":null,"metadata":{},"sourceType":"module"}