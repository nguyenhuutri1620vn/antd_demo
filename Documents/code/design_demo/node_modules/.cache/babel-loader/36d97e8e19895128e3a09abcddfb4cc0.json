{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { filter, isObject, isArray } from '@antv/util';\nimport { flow, findGeometry, log, LEVEL, transformLabel, deepAssign } from '../../utils';\nimport { tooltip, interaction, animation, theme, scale, annotation, state, pattern } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\n/**\n * geometry 配置处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      sectorStyle = options.sectorStyle,\n      color = options.color; // 装载数据\n\n  chart.data(data);\n  flow(interval)(deepAssign({}, params, {\n    options: {\n      marginRatio: 1,\n      interval: {\n        style: sectorStyle,\n        color: color\n      }\n    }\n  }));\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      xField = options.xField;\n  var geometry = findGeometry(chart, 'interval'); // label 为 false 不显示 label\n\n  if (label === false) {\n    geometry.label(false);\n  } else if (isObject(label)) {\n    var callback = label.callback,\n        fields = label.fields,\n        cfg = __rest(label, [\"callback\", \"fields\"]);\n\n    var offset = cfg.offset;\n    var layout = cfg.layout; // 当 label 在 shape 外部显示时，设置 'limit-in-shape' 会\n    // 造成 label 不显示。\n\n    if (offset === undefined || offset >= 0) {\n      layout = layout ? isArray(layout) ? layout : [layout] : [];\n      cfg.layout = filter(layout, function (v) {\n        return v.type !== 'limit-in-shape';\n      });\n      cfg.layout.length || delete cfg.layout;\n    }\n\n    geometry.label({\n      fields: fields || [xField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  } else {\n    log(LEVEL.WARN, label === null, 'the label option must be an Object.');\n    geometry.label({\n      fields: [xField]\n    });\n  }\n\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\n\n\nexport function legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      seriesField = options.seriesField;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (seriesField) {\n    chart.legend(seriesField, legend);\n  }\n\n  return params;\n}\n/**\n * coord 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var radius = options.radius,\n      innerRadius = options.innerRadius,\n      startAngle = options.startAngle,\n      endAngle = options.endAngle;\n  chart.coordinate({\n    type: 'polar',\n    cfg: {\n      radius: radius,\n      innerRadius: innerRadius,\n      startAngle: startAngle,\n      endAngle: endAngle\n    }\n  });\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField; // 为 falsy 则是不显示轴\n\n  if (!xAxis) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (!yAxis) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n/**\n * 玫瑰图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  flow(pattern('sectorStyle'), geometry, meta, label, coordinate, axis, legend, tooltip, interaction, animation, theme, annotation(), state)(params);\n}","map":null,"metadata":{},"sourceType":"module"}