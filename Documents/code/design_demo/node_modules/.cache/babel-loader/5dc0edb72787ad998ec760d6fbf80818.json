{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from 'react';\nimport { useXFlowApp } from '@antv/xflow';\nimport { ToolbarConfig } from './config';\nimport { XFlowToolbar } from './render-components';\nexport var CanvasToolbar = function (props) {\n  var app = useXFlowApp();\n  var hasApp = !!app;\n  /** 获取ContextMenu的配置 */\n\n  var contextMenuConfig = React.useMemo(function () {\n    return props.config ? props.config : new ToolbarConfig();\n  }, [props.config]);\n\n  if (!hasApp) {\n    return null;\n  }\n\n  return React.createElement(XFlowToolbar, __assign({}, props, {\n    config: contextMenuConfig\n  }));\n};\nexport var createToolbarConfig = function (addOptions) {\n  return function (value) {\n    /** bridge config and value */\n    var proxy = React.useMemo(function () {\n      return {\n        getValue: function () {\n          return {};\n        }\n      };\n    }, []);\n\n    proxy.getValue = function () {\n      return value;\n    };\n    /** 生成config */\n\n\n    var toolbarConfig = React.useMemo(function () {\n      var config = new ToolbarConfig();\n      addOptions(config, proxy);\n      return config;\n    }, [proxy]);\n    return toolbarConfig;\n  };\n};","map":null,"metadata":{},"sourceType":"module"}