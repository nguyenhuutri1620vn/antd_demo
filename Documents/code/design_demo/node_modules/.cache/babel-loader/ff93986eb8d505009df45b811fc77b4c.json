{"ast":null,"code":"import { Base } from './base';\nimport { Dom } from '../util';\nimport { Point, Rectangle } from '../geometry';\nexport class CoordManager extends Base {\n  getClientMatrix() {\n    return Dom.createSVGMatrix(this.view.stage.getScreenCTM());\n  }\n  /**\n   * Returns coordinates of the graph viewport, relative to the window.\n   */\n\n\n  getClientOffset() {\n    // see: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n    const rect = this.view.svg.getBoundingClientRect();\n    return new Point(rect.left, rect.top);\n  }\n  /**\n   * Returns coordinates of the graph viewport, relative to the document.\n   */\n\n\n  getPageOffset() {\n    // see: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\n    return this.getClientOffset().translate(window.scrollX, window.scrollY);\n  }\n\n  snapToGrid(x, y) {\n    const p = typeof x === 'number' ? this.clientToLocalPoint(x, y) : this.clientToLocalPoint(x.x, x.y);\n    return p.snapToGrid(this.graph.getGridSize());\n  }\n\n  localToGraphPoint(x, y) {\n    const localPoint = Point.create(x, y);\n    return Dom.transformPoint(localPoint, this.graph.matrix());\n  }\n\n  localToClientPoint(x, y) {\n    const localPoint = Point.create(x, y);\n    return Dom.transformPoint(localPoint, this.getClientMatrix());\n  }\n\n  localToPagePoint(x, y) {\n    const p = typeof x === 'number' ? this.localToGraphPoint(x, y) : this.localToGraphPoint(x);\n    return p.translate(this.getPageOffset());\n  }\n\n  localToGraphRect(x, y, width, height) {\n    const localRect = Rectangle.create(x, y, width, height);\n    return Dom.transformRectangle(localRect, this.graph.matrix());\n  }\n\n  localToClientRect(x, y, width, height) {\n    const localRect = Rectangle.create(x, y, width, height);\n    return Dom.transformRectangle(localRect, this.getClientMatrix());\n  }\n\n  localToPageRect(x, y, width, height) {\n    const rect = typeof x === 'number' ? this.localToGraphRect(x, y, width, height) : this.localToGraphRect(x);\n    return rect.translate(this.getPageOffset());\n  }\n\n  graphToLocalPoint(x, y) {\n    const graphPoint = Point.create(x, y);\n    return Dom.transformPoint(graphPoint, this.graph.matrix().inverse());\n  }\n\n  clientToLocalPoint(x, y) {\n    const clientPoint = Point.create(x, y);\n    return Dom.transformPoint(clientPoint, this.getClientMatrix().inverse());\n  }\n\n  clientToGraphPoint(x, y) {\n    const clientPoint = Point.create(x, y);\n    return Dom.transformPoint(clientPoint, this.graph.matrix().multiply(this.getClientMatrix().inverse()));\n  }\n\n  pageToLocalPoint(x, y) {\n    const pagePoint = Point.create(x, y);\n    const graphPoint = pagePoint.diff(this.getPageOffset());\n    return this.graphToLocalPoint(graphPoint);\n  }\n\n  graphToLocalRect(x, y, width, height) {\n    const graphRect = Rectangle.create(x, y, width, height);\n    return Dom.transformRectangle(graphRect, this.graph.matrix().inverse());\n  }\n\n  clientToLocalRect(x, y, width, height) {\n    const clientRect = Rectangle.create(x, y, width, height);\n    return Dom.transformRectangle(clientRect, this.getClientMatrix().inverse());\n  }\n\n  clientToGraphRect(x, y, width, height) {\n    const clientRect = Rectangle.create(x, y, width, height);\n    return Dom.transformRectangle(clientRect, this.graph.matrix().multiply(this.getClientMatrix().inverse()));\n  }\n\n  pageToLocalRect(x, y, width, height) {\n    const graphRect = Rectangle.create(x, y, width, height);\n    const pageOffset = this.getPageOffset();\n    graphRect.x -= pageOffset.x;\n    graphRect.y -= pageOffset.y;\n    return this.graphToLocalRect(graphRect);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}