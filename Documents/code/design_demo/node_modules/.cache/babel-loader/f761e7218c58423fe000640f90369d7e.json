{"ast":null,"code":"import { Base } from \"../layout/base\";\nimport { isObject } from \"../util\";\nconst map = new Map();\nexport const registerLayout = (name, layoutOverride) => {\n  if (map.get(name)) {\n    console.warn(`The layout with the name ${name} exists already, it will be overridden`);\n  }\n\n  if (isObject(layoutOverride)) {\n    // tslint:disable-next-line: max-classes-per-file\n    class GLayout extends Base {\n      constructor(cfg) {\n        super();\n        const self = this;\n        const props = {};\n        const defaultCfg = self.getDefaultCfg();\n        Object.assign(props, defaultCfg, layoutOverride, cfg);\n        Object.keys(props).forEach(key => {\n          const value = props[key];\n          self[key] = value;\n        });\n      }\n\n    }\n\n    map.set(name, GLayout);\n  } else {\n    map.set(name, layoutOverride);\n  }\n\n  return map.get(name);\n};\nexport const unRegisterLayout = name => {\n  if (map.has(name)) {\n    map.delete(name);\n  }\n};\nexport const getLayoutByName = name => {\n  if (map.has(name)) {\n    return map.get(name);\n  }\n\n  return null;\n};","map":null,"metadata":{},"sourceType":"module"}