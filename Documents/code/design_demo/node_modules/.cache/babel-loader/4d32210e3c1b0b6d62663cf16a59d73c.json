{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor;\n\nimport { mat4, vec4 } from 'gl-matrix';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nimport { getDistanceScales } from '../../utils/project';\nimport { CoordinateSystem } from './ICoordinateSystemService';\nvar VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];\nvar CoordinateSystemService = (_dec = injectable(), _dec2 = inject(TYPES.ICameraService), _dec(_class = (_class2 = function () {\n  function CoordinateSystemService() {\n    _classCallCheck(this, CoordinateSystemService);\n\n    _defineProperty(this, \"needRefresh\", true);\n\n    _initializerDefineProperty(this, \"cameraService\", _descriptor, this);\n\n    _defineProperty(this, \"coordinateSystem\", void 0);\n\n    _defineProperty(this, \"viewportCenter\", void 0);\n\n    _defineProperty(this, \"viewportCenterProjection\", void 0);\n\n    _defineProperty(this, \"pixelsPerDegree\", void 0);\n\n    _defineProperty(this, \"pixelsPerDegree2\", void 0);\n\n    _defineProperty(this, \"pixelsPerMeter\", void 0);\n  }\n\n  _createClass(CoordinateSystemService, [{\n    key: \"refresh\",\n    value: function refresh() {\n      var zoom = this.cameraService.getZoom();\n      var zoomScale = this.cameraService.getZoomScale();\n      var center = this.cameraService.getCenter();\n\n      var _getDistanceScales = getDistanceScales({\n        latitude: center[1],\n        zoom: zoom\n      }),\n          pixelsPerMeter = _getDistanceScales.pixelsPerMeter,\n          pixelsPerDegree = _getDistanceScales.pixelsPerDegree;\n\n      this.viewportCenter = center;\n      this.viewportCenterProjection = [0, 0, 0, 0];\n      this.pixelsPerMeter = pixelsPerMeter;\n      this.pixelsPerDegree = pixelsPerDegree;\n      this.pixelsPerDegree2 = [0, 0, 0];\n\n      if (this.coordinateSystem === CoordinateSystem.LNGLAT || this.coordinateSystem === CoordinateSystem.P20) {\n        this.cameraService.setViewProjectionMatrix(undefined);\n      } else if (this.coordinateSystem === CoordinateSystem.LNGLAT_OFFSET) {\n        this.calculateLnglatOffset(center, zoom);\n      } else if (this.coordinateSystem === CoordinateSystem.P20_OFFSET) {\n        this.calculateLnglatOffset(center, zoom, zoomScale, true);\n      }\n\n      this.needRefresh = false;\n    }\n  }, {\n    key: \"getCoordinateSystem\",\n    value: function getCoordinateSystem() {\n      return this.coordinateSystem;\n    }\n  }, {\n    key: \"setCoordinateSystem\",\n    value: function setCoordinateSystem(coordinateSystem) {\n      this.coordinateSystem = coordinateSystem;\n    }\n  }, {\n    key: \"getViewportCenter\",\n    value: function getViewportCenter() {\n      return this.viewportCenter;\n    }\n  }, {\n    key: \"getViewportCenterProjection\",\n    value: function getViewportCenterProjection() {\n      return this.viewportCenterProjection;\n    }\n  }, {\n    key: \"getPixelsPerDegree\",\n    value: function getPixelsPerDegree() {\n      return this.pixelsPerDegree;\n    }\n  }, {\n    key: \"getPixelsPerDegree2\",\n    value: function getPixelsPerDegree2() {\n      return this.pixelsPerDegree2;\n    }\n  }, {\n    key: \"getPixelsPerMeter\",\n    value: function getPixelsPerMeter() {\n      return this.pixelsPerMeter;\n    }\n  }, {\n    key: \"calculateLnglatOffset\",\n    value: function calculateLnglatOffset(center, zoom, scale, flipY) {\n      var _getDistanceScales2 = getDistanceScales({\n        latitude: center[1],\n        zoom: zoom,\n        scale: scale,\n        flipY: flipY,\n        highPrecision: true\n      }),\n          ppm = _getDistanceScales2.pixelsPerMeter,\n          ppd = _getDistanceScales2.pixelsPerDegree,\n          pixelsPerDegree2 = _getDistanceScales2.pixelsPerDegree2;\n\n      var viewMatrix = this.cameraService.getViewMatrix();\n      var projectionMatrix = this.cameraService.getProjectionMatrix();\n      var viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n      var positionPixels = this.cameraService.projectFlat([Math.fround(center[0]), Math.fround(center[1])], Math.pow(2, zoom));\n      this.viewportCenterProjection = vec4.transformMat4([], [positionPixels[0], positionPixels[1], 0.0, 1.0], viewProjectionMatrix);\n      viewMatrix = this.cameraService.getViewMatrixUncentered() || viewMatrix;\n      viewProjectionMatrix = mat4.multiply([], projectionMatrix, viewMatrix);\n      viewProjectionMatrix = mat4.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);\n      this.cameraService.setViewProjectionMatrix(viewProjectionMatrix);\n      this.pixelsPerMeter = ppm;\n      this.pixelsPerDegree = ppd;\n      this.pixelsPerDegree2 = pixelsPerDegree2;\n    }\n  }]);\n\n  return CoordinateSystemService;\n}(), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"cameraService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { CoordinateSystemService as default };","map":null,"metadata":{},"sourceType":"module"}