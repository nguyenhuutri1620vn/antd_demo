{"ast":null,"code":"import React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ChartLoading from '../../utils/createLoading';\nimport ErrorBoundary from '../../errorBoundary';\nimport useGraph from '../hooks/useGraph';\nimport { deepClone } from '../../utils';\nimport { defaultNodeAnchorPoints, defaultStateStyles, defaultEdgeStyle } from './constants';\nimport { processMinimap, getGraphSize, getGraphId, bindEvents, useProps } from './utils';\nimport { registerCustomItems } from './customItems';\nregisterCustomItems();\nvar defaultNodeSize = [150, 30];\nvar defaultNodeStyle = {\n  stroke: '#72CC4A',\n  fill: '#f00'\n};\nvar defaultLayout = {\n  type: 'dagre',\n  rankdir: 'LR',\n  nodesep: 30,\n  ranksep: 50\n};\nvar defaultLabelCfg = {\n  style: {\n    fill: '#000000A6',\n    fontSize: 10\n  }\n};\nvar defaultProps = {\n  nodeType: 'round-rect',\n  edgeType: 'fund-polyline',\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n  nodeSize: defaultNodeSize,\n  nodeLabelCfg: defaultLabelCfg,\n  edgeLabelCfg: defaultLabelCfg,\n  nodeAnchorPoints: defaultNodeAnchorPoints,\n  layout: defaultLayout,\n  nodeStyle: defaultNodeStyle,\n  edgeStyle: defaultEdgeStyle,\n  nodeStateStyles: defaultStateStyles,\n  edgeStateStyles: defaultStateStyles,\n  colorMap: {},\n  autoFit: true\n};\nvar graphs = {};\n\nvar DagreFundFlowGraph = function (props) {\n  var uProps = useProps(props, defaultProps);\n  var data = uProps.data,\n      className = uProps.className,\n      style = uProps.style,\n      width = uProps.width,\n      height = uProps.height,\n      _a = uProps.nodeType,\n      nodeType = _a === void 0 ? 'round-rect' : _a,\n      _b = uProps.edgeType,\n      edgeType = _b === void 0 ? 'fund-polyline' : _b,\n      _c = uProps.behaviors,\n      behaviors = _c === void 0 ? ['zoom-canvas', 'drag-canvas'] : _c,\n      _d = uProps.nodeSize,\n      nodeSize = _d === void 0 ? defaultNodeSize : _d,\n      _e = uProps.nodeLabelCfg,\n      nodeLabelCfg = _e === void 0 ? defaultLabelCfg : _e,\n      _f = uProps.edgeLabelCfg,\n      edgeLabelCfg = _f === void 0 ? defaultLabelCfg : _f,\n      _g = uProps.nodeAnchorPoints,\n      nodeAnchorPoints = _g === void 0 ? defaultNodeAnchorPoints : _g,\n      _h = uProps.layout,\n      layout = _h === void 0 ? defaultLayout : _h,\n      minimapCfg = uProps.minimapCfg,\n      _j = uProps.nodeStyle,\n      nodeStyle = _j === void 0 ? defaultNodeStyle : _j,\n      _k = uProps.edgeStyle,\n      edgeStyle = _k === void 0 ? defaultEdgeStyle : _k,\n      _l = uProps.nodeStateStyles,\n      nodeStateStyles = _l === void 0 ? defaultStateStyles : _l,\n      _m = uProps.edgeStateStyles,\n      edgeStateStyles = _m === void 0 ? defaultStateStyles : _m,\n      _o = uProps.colorMap,\n      colorMap = _o === void 0 ? {} : _o,\n      _p = uProps.autoFit,\n      autoFit = _p === void 0 ? true : _p,\n      graphRef = uProps.graphRef,\n      onReady = uProps.onReady,\n      loading = uProps.loading,\n      loadingTemplate = uProps.loadingTemplate,\n      errorTemplate = uProps.errorTemplate;\n  var container = React.useRef(null);\n  var graph = React.useRef(null);\n  var graphId = getGraphId(graph);\n  useGraph(graphs[graphId], uProps, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n    var graph = graphs[graphId];\n\n    if (!graph) {\n      graph = new G6.Graph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle,\n          colorMap: colorMap,\n          labelCfg: edgeLabelCfg\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout,\n        fitView: autoFit\n      });\n      graphs[graphId] = graph;\n    }\n\n    if (graphRef) {\n      graphRef.current = graph;\n    }\n\n    processMinimap(minimapCfg, graph);\n    var originData = deepClone(data);\n    graph.data(originData);\n    graph.render();\n\n    if (onReady) {\n      onReady(graph);\n    } // modify the node color according to the in edge\n\n\n    var edges = graph.getEdges(); // @ts-ignore\n\n    edges.forEach(function (edge) {\n      var line = edge.getKeyShape();\n      var stroke = line.attr('stroke');\n      var targetNode = edge.getTarget();\n      targetNode.update({\n        style: {\n          stroke: stroke\n        }\n      });\n    });\n    bindEvents(graph, props);\n    return function () {\n      if (graphs[graphId]) {\n        graphs[graphId].destroy();\n        delete graphs[graphId];\n      }\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, {\n    errorTemplate: errorTemplate\n  }, loading && React.createElement(ChartLoading, {\n    loadingTemplate: loadingTemplate\n  }), React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default DagreFundFlowGraph;","map":null,"metadata":{},"sourceType":"module"}