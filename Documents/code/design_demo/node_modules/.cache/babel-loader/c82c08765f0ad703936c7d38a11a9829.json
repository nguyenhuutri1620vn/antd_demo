{"ast":null,"code":"import React from 'react';\nimport { FunctionExt } from '@antv/x6';\nexport class Wrap extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.scheduledAnimationFrame = false;\n\n    this.throttleUpdateFunc = () => {\n      if (this.scheduledAnimationFrame) {\n        return;\n      }\n\n      this.scheduledAnimationFrame = true;\n      window.requestAnimationFrame(() => {\n        this.setState(state => {\n          this.scheduledAnimationFrame = false;\n          return {\n            tick: state.tick + 1\n          };\n        });\n      });\n    };\n\n    this.onChange = e => {\n      if (Wrap.throttleChangeTypes.includes(e.key)) {\n        this.throttleUpdateFunc();\n        return;\n      } // eslint-disable-next-line react/no-access-state-in-setstate\n\n\n      this.setState({\n        tick: this.state.tick + 1\n      });\n    };\n\n    this.state = {\n      tick: 0\n    };\n  }\n\n  componentDidMount() {\n    this.props.node.on('change:*', this.onChange);\n  }\n\n  componentWillUnmount() {\n    this.props.node.off('change:*', this.onChange);\n  }\n\n  clone(elem) {\n    const {\n      node\n    } = this.props;\n    return typeof elem.type === 'string' ? React.cloneElement(elem) : React.cloneElement(elem, {\n      node\n    });\n  }\n\n  render() {\n    const {\n      graph,\n      node,\n      component\n    } = this.props;\n\n    if (React.isValidElement(component)) {\n      return this.clone(component);\n    }\n\n    if (typeof component === 'function') {\n      // Calling the component function on every change of the node.\n      const ret = FunctionExt.call(component, graph, node);\n\n      if (React.isValidElement(ret)) {\n        return this.clone(ret);\n      }\n    }\n\n    return component;\n  }\n\n}\nWrap.throttleChangeTypes = ['position', 'size'];","map":null,"metadata":{},"sourceType":"module"}