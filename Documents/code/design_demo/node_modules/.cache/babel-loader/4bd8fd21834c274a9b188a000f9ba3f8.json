{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Plot = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar map_1 = require(\"../map\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar text_layer_1 = require(\"../../layers/text-layer\");\n\nvar types_1 = require(\"../../types\");\n\nvar source_1 = require(\"../../adaptor/source\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar theme_1 = require(\"../../theme\");\n\nvar DEFAULT_OPTIONS = {\n  autoFit: false\n};\n\nvar Plot =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(Plot, _super);\n\n  function Plot(container, options) {\n    var _this = this;\n\n    if (typeof container === 'string' || container instanceof Element) {\n      if (options === undefined) {\n        throw new Error('options is undefined');\n      }\n\n      _this = _super.call(this, options) || this;\n      _this.container = _this.createContainer(container);\n      _this.theme = _this.createTheme();\n      _this.scene = _this.createScene();\n\n      _this.registerResources();\n\n      _this.initLayers();\n    } else {\n      _this = _super.call(this, container) || this;\n    }\n\n    return _this;\n  }\n  /**\n   * 初始化图层\n   */\n\n\n  Plot.prototype.initLayers = function () {\n    this.source = this.createSource();\n    this.render();\n    this.inited = true;\n  };\n  /**\n   * 初始化图层事件\n   */\n\n\n  Plot.prototype.initLayersEvent = function () {//\n  };\n  /**\n   * 获取默认配置\n   */\n\n\n  Plot.prototype.getDefaultOptions = function () {\n    return Plot.DefaultOptions;\n  };\n  /**\n   * 创建 source 实例\n   */\n\n\n  Plot.prototype.createSource = function () {\n    var _a = this.options.source,\n        data = _a.data,\n        aggregation = _a.aggregation,\n        sourceCFG = (0, tslib_1.__rest)(_a, [\"data\", \"aggregation\"]);\n    aggregation && source_1.MappingSource.aggregation(sourceCFG, aggregation);\n    var source = new types_1.Source(data, sourceCFG);\n    return source;\n  };\n  /**\n   * 创建数据标签图层\n   */\n\n\n  Plot.prototype.createLabelLayer = function (source, label, plotLayerConfig) {\n    var _a = plotLayerConfig || {},\n        visible = _a.visible,\n        minZoom = _a.minZoom,\n        maxZoom = _a.maxZoom,\n        _b = _a.zIndex,\n        zIndex = _b === void 0 ? 0 : _b;\n\n    var textLayer = new text_layer_1.TextLayer((0, tslib_1.__assign)({\n      name: 'labelLayer',\n      visible: visible,\n      minZoom: minZoom,\n      maxZoom: maxZoom,\n      zIndex: zIndex + 0.1,\n      source: source\n    }, label));\n    return textLayer;\n  };\n  /**\n   * 更新数据标签图层\n   */\n\n\n  Plot.prototype.updateLabelLayer = function (source, label, plotLayerConfig, labelLayer) {\n    if (label) {\n      if (labelLayer) {\n        labelLayer.update((0, tslib_1.__assign)({}, label));\n      } else {\n        labelLayer = this.createLabelLayer(source, label, plotLayerConfig);\n        this.layerGroup.addLayer(labelLayer);\n      }\n    } else if (label === false) {\n      labelLayer && this.layerGroup.removeLayer(labelLayer);\n    }\n  };\n  /**\n   * 渲染\n   */\n\n\n  Plot.prototype.render = function () {\n    var layerGroup = this.createLayers(this.source);\n\n    if (this.inited) {\n      this.layerGroup.removeAllLayer();\n      layerGroup.addTo(this.scene);\n      this.layerGroup = layerGroup; // this.scene.render();\n    } else {\n      this.layerGroup = layerGroup;\n      this.onLayersLoaded();\n      layerGroup.addTo(this.scene);\n    }\n\n    this.initLayersEvent();\n  };\n  /**\n   * 图表图层加载成功\n   */\n\n\n  Plot.prototype.onLayersLoaded = function () {\n    var _this = this;\n\n    var onLoaded = function () {\n      _this.initComponents();\n\n      _this.loaded = true;\n\n      _this.emit('loaded');\n    };\n\n    if (this.scene['sceneService'].loaded) {\n      this.sceneLoaded = true;\n      this.layersLoaded && onLoaded();\n    } else {\n      this.scene.once('loaded', function () {\n        _this.sceneLoaded = true;\n        _this.layersLoaded && onLoaded();\n      });\n    }\n\n    if (this.layerGroup.isEmpty()) {\n      this.layersLoaded = true;\n    } else {\n      this.layerGroup.once('inited-all', function () {\n        _this.layersLoaded = true;\n        _this.sceneLoaded && onLoaded();\n      });\n    }\n  };\n  /**\n   * 挂载到容器\n   * 用于高级图表 L7Plot 挂载单个图表示例\n   */\n\n\n  Plot.prototype.attachToScene = function (scene, theme) {\n    this.scene = scene;\n    this.theme = theme ? theme : (0, theme_1.getTheme)('default');\n    this.registerResources();\n    this.initLayers();\n  };\n  /**\n   * 取消挂载到容器上的 scene\n   * 用于高级图表 L7Plot 挂载单个图表示例\n   */\n\n\n  Plot.prototype.unattachFromScene = function () {\n    var _a;\n\n    this.removeAllLayer();\n    (_a = this.tooltip) === null || _a === void 0 ? void 0 : _a.destroy();\n  };\n  /**\n   * 添加到容器\n   * 用于 L7 Scene 与图表混合使用场景\n   */\n\n\n  Plot.prototype.addToScene = function (scene) {\n    this.attachToScene(scene);\n  };\n  /**\n   * 从容器上移除\n   * 用于 L7 Scene 与图表混合使用场景\n   */\n\n\n  Plot.prototype.removeFromScene = function () {\n    var _a;\n\n    this.removeAllLayer();\n    this.removeScaleControl();\n    this.removeZoomControl();\n    this.removeLayerMenuControl();\n    this.removeLegendControl();\n    (_a = this.tooltip) === null || _a === void 0 ? void 0 : _a.destroy();\n  };\n  /**\n   * 更新: 更新配置且重新渲染\n   */\n\n\n  Plot.prototype.update = function (options) {\n    this.updateOption(options);\n\n    if (options.map && !(0, util_1.isEqual)(this.lastOptions.map, this.options.map)) {\n      this.updateMap(options.map);\n    }\n\n    this.scene.setEnableRender(false);\n\n    if (options.source && !(0, util_1.isEqual)(this.lastOptions.source, this.options.source)) {\n      var _a = options.source,\n          data = _a.data,\n          sourceConfig = (0, tslib_1.__rest)(_a, [\"data\"]);\n      this.changeData(data, sourceConfig);\n    } // this.updateLayers(options);\n\n\n    this.scene.setEnableRender(true);\n    this.render();\n    this.updateComponents();\n    this.emit('update');\n  };\n  /**\n   * 更新: 更新数据\n   */\n\n\n  Plot.prototype.changeData = function (data, cfg) {\n    this.options.source = (0, utils_1.deepAssign)({}, this.options.source, (0, tslib_1.__assign)({\n      data: data\n    }, cfg));\n    var _a = this.options.source,\n        aggregation = _a.aggregation,\n        sourceCFG = (0, tslib_1.__rest)(_a, [\"aggregation\"]);\n    aggregation && source_1.MappingSource.aggregation(sourceCFG, aggregation);\n    this.source.setData(this.options.source.data, sourceCFG); // 更新 legend\n\n    if (this.options.legend) {\n      this.updateLegendControl(this.options.legend);\n    }\n\n    this.emit('change-data');\n  };\n  /**\n   * 默认的 options 配置项\n   */\n\n\n  Plot.DefaultOptions = DEFAULT_OPTIONS;\n  /**\n   * 地图图表类型\n   */\n\n  Plot.PlotType = types_1.PlotType;\n  return Plot;\n}(map_1.Map);\n\nexports.Plot = Plot;","map":null,"metadata":{},"sourceType":"script"}