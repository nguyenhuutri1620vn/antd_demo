{"ast":null,"code":"import { getJudgeFunction } from '../fn';\nimport { requestAnimationFrame } from './animationFrame';\nexport class TouchHandler {\n  constructor(options) {\n    this.didTouchMove = () => {\n      // Fire scroll callback based on computed drag delta.\n      // Also track accummulated delta so we can calculate velocity\n      this.dragAnimationId = null;\n      this.callback(this.deltaX, this.deltaY);\n      this.accumulatedDeltaX += this.deltaX;\n      this.accumulatedDeltaY += this.deltaY;\n      this.deltaX = 0;\n      this.deltaY = 0;\n    };\n\n    this.track = () => {\n      // Compute velocity based on a weighted average of drag over\n      // last 100ms and previous velocity. Combining into a moving average\n      // results in a smoother scroll.\n      const now = Date.now();\n      const elapsed = now - this.lastFrameTimestamp;\n      const oldVelocityX = this.velocityX;\n      const oldVelocityY = this.velocityY; // We compute velocity using a weighted average of the current\n      // velocity and the previous velocity. If the previous velocity\n      // is 0, put the full weight on the last 100ms\n\n      let weight = 0.8;\n\n      if (elapsed < TouchHandler.TRACKER_TIMEOUT) {\n        weight *= elapsed / TouchHandler.TRACKER_TIMEOUT;\n      }\n\n      if (oldVelocityX === 0 && oldVelocityY === 0) {\n        weight = 1;\n      } // Formula for computing weighted average of velocity\n\n\n      this.velocityX = weight * (TouchHandler.TRACKER_TIMEOUT * this.accumulatedDeltaX / (1 + elapsed));\n\n      if (weight < 1) {\n        this.velocityX += (1 - weight) * oldVelocityX;\n      }\n\n      this.velocityY = weight * (TouchHandler.TRACKER_TIMEOUT * this.accumulatedDeltaY / (1 + elapsed));\n\n      if (weight < 1) {\n        this.velocityY += (1 - weight) * oldVelocityY;\n      }\n\n      this.accumulatedDeltaX = 0;\n      this.accumulatedDeltaY = 0;\n      this.lastFrameTimestamp = now;\n    };\n\n    this.startAutoScroll = () => {\n      // To kick off deceleration / momentum scrolling, handle any\n      // scrolling from a drag which was waiting for an animation\n      // frame. Then update our velocity.\n      // Finally start the momentum scrolling handler (autoScroll)\n      this.autoScrollTimestamp = Date.now();\n\n      if (this.deltaX > 0 || this.deltaY > 0) {\n        this.didTouchMove();\n      }\n\n      this.track();\n      this.autoScroll();\n    };\n\n    this.autoScroll = () => {\n      // Compute a scroll delta with an exponential decay based on\n      // time elapsed since drag was released. This is called\n      // recursively on animation frames until the delta is below\n      // a threshold (5 pixels)\n      const elapsed = Date.now() - this.autoScrollTimestamp;\n      const factor = TouchHandler.DECELERATION_AMPLITUDE * Math.exp(-elapsed / TouchHandler.DECELERATION_FACTOR);\n      let deltaX = factor * this.velocityX;\n      let deltaY = factor * this.velocityY;\n\n      if (Math.abs(deltaX) <= 5 || !this.handleScrollX(deltaX, deltaY)) {\n        deltaX = 0;\n      }\n\n      if (Math.abs(deltaY) <= 5 || !this.handleScrollY(deltaY, deltaX)) {\n        deltaY = 0;\n      }\n\n      if (deltaX !== 0 || deltaY !== 0) {\n        this.callback(deltaX, deltaY);\n        requestAnimationFrame(this.autoScroll);\n      }\n    };\n\n    this.trackerId = null;\n    this.dragAnimationId = null;\n    this.deltaX = 0;\n    this.deltaY = 0;\n    this.lastTouchX = 0;\n    this.lastTouchY = 0;\n    this.velocityX = 0;\n    this.velocityY = 0;\n    this.accumulatedDeltaX = 0;\n    this.accumulatedDeltaY = 0;\n    this.lastFrameTimestamp = Date.now();\n    this.autoScrollTimestamp = Date.now();\n    this.callback = options.onTouchScroll;\n    this.handleScrollX = getJudgeFunction(options.shouldHandleScrollX);\n    this.handleScrollY = getJudgeFunction(options.shouldHandleScrollY);\n    this.stopPropagation = getJudgeFunction(options.stopPropagation);\n  }\n\n  onTouchStart(e) {\n    this.lastTouchX = e.touches[0].pageX;\n    this.lastTouchY = e.touches[0].pageY;\n    this.velocityX = 0;\n    this.velocityY = 0;\n    this.accumulatedDeltaX = 0;\n    this.accumulatedDeltaY = 0;\n    this.lastFrameTimestamp = Date.now();\n\n    if (this.trackerId != null) {\n      clearInterval(this.trackerId);\n    }\n\n    this.trackerId = window.setInterval(this.track, TouchHandler.TRACKER_TIMEOUT);\n\n    if (this.stopPropagation()) {\n      e.stopPropagation();\n    }\n  }\n\n  onTouchEnd(e) {\n    this.onTouchCancel(e);\n    requestAnimationFrame(this.startAutoScroll);\n  }\n\n  onTouchCancel(e) {\n    if (this.trackerId != null) {\n      clearInterval(this.trackerId);\n      this.trackerId = null;\n    }\n\n    if (this.stopPropagation()) {\n      e.stopPropagation();\n    }\n  }\n\n  onTouchMove(e) {\n    const moveX = e.touches[0].pageX;\n    const moveY = e.touches[0].pageY; // Compute delta scrolled since last drag\n    // Mobile, scrolling is inverted\n\n    this.deltaX = TouchHandler.MOVE_AMPLITUDE * (this.lastTouchX - moveX);\n    this.deltaY = TouchHandler.MOVE_AMPLITUDE * (this.lastTouchY - moveY);\n    const handleScrollX = this.handleScrollX(this.deltaX, this.deltaY);\n    const handleScrollY = this.handleScrollY(this.deltaY, this.deltaX);\n\n    if (!handleScrollX && !handleScrollY) {\n      return;\n    } // If we can handle scroll update last touch for computing delta\n\n\n    if (handleScrollX) {\n      this.lastTouchX = moveX;\n    } else {\n      this.deltaX = 0;\n    }\n\n    if (handleScrollY) {\n      this.lastTouchY = moveY;\n    } else {\n      this.deltaY = 0;\n    }\n\n    e.preventDefault(); // ensure minimum delta magnitude is met to avoid jitter\n\n    let changed = false;\n\n    if (Math.abs(this.deltaX) > 2 || Math.abs(this.deltaY) > 2) {\n      if (this.stopPropagation()) {\n        e.stopPropagation();\n      }\n\n      changed = true;\n    } // Request animation frame to trigger scroll of computed delta\n\n\n    if (changed && this.dragAnimationId == null) {\n      this.dragAnimationId = requestAnimationFrame(this.didTouchMove);\n    }\n  }\n\n}\n\n(function (TouchHandler) {\n  TouchHandler.MOVE_AMPLITUDE = 1.6;\n  TouchHandler.DECELERATION_AMPLITUDE = 1.6;\n  TouchHandler.DECELERATION_FACTOR = 325;\n  TouchHandler.TRACKER_TIMEOUT = 100;\n})(TouchHandler || (TouchHandler = {}));","map":null,"metadata":{},"sourceType":"module"}