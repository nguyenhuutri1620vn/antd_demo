{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { XFlowNodeCommands, XFlowEdgeCommands } from '@antv/xflow-core';\nimport { get } from 'lodash';\nimport { onConfigChange, getGraphInstance } from './util';\n/** 节点移动时，实时更新位置信息，内置之后可去掉 */\n\nexport const movedNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    node\n  } = e;\n\n  if (!node) {\n    return;\n  }\n\n  const {\n    data\n  } = node; // 更新组内元素，边信息无需更新\n\n  if (data === null || data === void 0 ? void 0 : data.groupChildren) {\n    const x6Graph = getGraphInstance();\n    data === null || data === void 0 ? void 0 : data.groupChildren.forEach(id => __awaiter(void 0, void 0, void 0, function* () {\n      var _a, _b;\n\n      const currentNode = x6Graph.getCellById(id);\n\n      if (currentNode && currentNode.isNode()) {\n        yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n          nodeConfig: Object.assign(Object.assign(Object.assign({}, currentNode.data), (_a = currentNode.getSize) === null || _a === void 0 ? void 0 : _a.call(currentNode)), (_b = currentNode.getPosition) === null || _b === void 0 ? void 0 : _b.call(currentNode))\n        });\n      }\n    }));\n  }\n\n  const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.getSize());\n  yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n    nodeConfig\n  });\n  onConfigChange({\n    type: 'move:node',\n    config: nodeConfig\n  });\n});\n/** 修改节点大小 */\n\nexport const resizeNode = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    node\n  } = e;\n\n  if (!node) {\n    return;\n  }\n\n  const nodeConfig = Object.assign(Object.assign(Object.assign({}, node.data), node.getPosition()), node.size());\n  yield cmds.executeCommand(XFlowNodeCommands.UPDATE_NODE.id, {\n    nodeConfig\n  });\n  onConfigChange({\n    type: 'resize:node',\n    config: nodeConfig\n  });\n});\n\nconst getContainer = e => {\n  var _a;\n\n  let currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;\n\n  if (!currentNode) {\n    return document.getElementsByClassName('xflow-canvas-root');\n  }\n\n  let containter = null;\n\n  while (!containter) {\n    const current = currentNode.getElementsByClassName('xflow-canvas-root');\n\n    if ((current === null || current === void 0 ? void 0 : current.length) > 0) {\n      containter = current;\n    }\n\n    currentNode = currentNode.parentNode;\n  }\n\n  return containter;\n};\n/** 设置 ports visible */\n\n\nexport const changePortsVisible = (visible, e) => {\n  const containers = getContainer(e);\n  Array.from(containers).forEach(container => {\n    var _a, _b;\n\n    const ports = container.querySelectorAll('.x6-port-body');\n    const graph = getGraphInstance(); // 选中中节点时不展示链接桩\n\n    const isSelectedNode = (_b = (_a = graph.getSelectedCells()) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.isNode();\n\n    for (let i = 0, len = ports.length; i < len; i = i + 1) {\n      ports[i].style.visibility = !isSelectedNode && visible ? 'visible' : 'hidden';\n    }\n  });\n};\n/** 添加辅助工具 */\n\nexport const addTools = e => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    edge\n  } = e;\n\n  if (!edge) {\n    return;\n  }\n\n  edge.addTools('vertices', 'ondbclick');\n});\n/** 移除辅助工具 */\n\nexport const removeTools = (e, cmds) => __awaiter(void 0, void 0, void 0, function* () {\n  const {\n    edge\n  } = e;\n\n  if (!edge) {\n    return;\n  }\n\n  if (edge.hasTools('ondbclick')) {\n    cmds.executeCommand(XFlowEdgeCommands.UPDATE_EDGE.id, {\n      edgeConfig: Object.assign(Object.assign({}, get(edge, 'data')), {\n        vertices: edge.getVertices()\n      })\n    });\n    edge.removeTools();\n  }\n});","map":null,"metadata":{},"sourceType":"module"}