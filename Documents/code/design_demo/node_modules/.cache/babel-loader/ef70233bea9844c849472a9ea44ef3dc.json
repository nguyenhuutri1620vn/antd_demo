{"ast":null,"code":"import { Container as Container$1, injectable as injectable$1, inject as inject$1, named as named$1 } from 'inversify';\nexport { decorate, optional, postConstruct, unmanaged } from 'inversify';\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\nvar Reflect$1;\n\n(function (Reflect) {\n  // Metadata Proposal\n  // https://rbuckton.github.io/reflect-metadata/\n  (function (factory) {\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : Function(\"return this;\")();\n    var exporter = makeExporter(Reflect);\n\n    if (typeof root.Reflect === \"undefined\") {\n      root.Reflect = Reflect;\n    } else {\n      exporter = makeExporter(root.Reflect, exporter);\n    }\n\n    factory(exporter);\n\n    function makeExporter(target, previous) {\n      return function (key, value) {\n        if (typeof target[key] !== \"function\") {\n          Object.defineProperty(target, key, {\n            configurable: true,\n            writable: true,\n            value: value\n          });\n        }\n\n        if (previous) previous(key, value);\n      };\n    }\n  })(function (exporter) {\n    var hasOwn = Object.prototype.hasOwnProperty; // feature test for Symbol support\n\n    var supportsSymbol = typeof Symbol === \"function\";\n    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n    var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n    var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n\n    var supportsProto = {\n      __proto__: []\n    } instanceof Array; // feature test for __proto__ support\n\n    var downLevel = !supportsCreate && !supportsProto;\n    var HashMap = {\n      // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n      create: supportsCreate ? function () {\n        return MakeDictionary(Object.create(null));\n      } : supportsProto ? function () {\n        return MakeDictionary({\n          __proto__: null\n        });\n      } : function () {\n        return MakeDictionary({});\n      },\n      has: downLevel ? function (map, key) {\n        return hasOwn.call(map, key);\n      } : function (map, key) {\n        return key in map;\n      },\n      get: downLevel ? function (map, key) {\n        return hasOwn.call(map, key) ? map[key] : undefined;\n      } : function (map, key) {\n        return map[key];\n      }\n    }; // Load global or shim versions of Map, Set, and WeakMap\n\n    var functionPrototype = Object.getPrototypeOf(Function);\n    var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n\n    var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n\n    var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n\n    var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill(); // [[Metadata]] internal slot\n    // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n\n\n    var Metadata = new _WeakMap();\n    /**\n     * Applies a set of decorators to a property of a target object.\n     * @param decorators An array of decorators.\n     * @param target The target object.\n     * @param propertyKey (Optional) The property key to decorate.\n     * @param attributes (Optional) The property descriptor for the target key.\n     * @remarks Decorators are applied in reverse order.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     Example = Reflect.decorate(decoratorsArray, Example);\n     *\n     *     // property (on constructor)\n     *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     Object.defineProperty(Example, \"staticMethod\",\n     *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n     *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n     *\n     *     // method (on prototype)\n     *     Object.defineProperty(Example.prototype, \"method\",\n     *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n     *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n     *\n     */\n\n    function decorate(decorators, target, propertyKey, attributes) {\n      if (!IsUndefined(propertyKey)) {\n        if (!IsArray(decorators)) throw new TypeError();\n        if (!IsObject(target)) throw new TypeError();\n        if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes)) throw new TypeError();\n        if (IsNull(attributes)) attributes = undefined;\n        propertyKey = ToPropertyKey(propertyKey);\n        return DecorateProperty(decorators, target, propertyKey, attributes);\n      } else {\n        if (!IsArray(decorators)) throw new TypeError();\n        if (!IsConstructor(target)) throw new TypeError();\n        return DecorateConstructor(decorators, target);\n      }\n    }\n\n    exporter(\"decorate\", decorate); // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n    // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n\n    /**\n     * A default metadata decorator factory that can be used on a class, class member, or parameter.\n     * @param metadataKey The key for the metadata entry.\n     * @param metadataValue The value for the metadata entry.\n     * @returns A decorator function.\n     * @remarks\n     * If `metadataKey` is already defined for the target and target key, the\n     * metadataValue for that key will be overwritten.\n     * @example\n     *\n     *     // constructor\n     *     @Reflect.metadata(key, value)\n     *     class Example {\n     *     }\n     *\n     *     // property (on constructor, TypeScript only)\n     *     class Example {\n     *         @Reflect.metadata(key, value)\n     *         static staticProperty;\n     *     }\n     *\n     *     // property (on prototype, TypeScript only)\n     *     class Example {\n     *         @Reflect.metadata(key, value)\n     *         property;\n     *     }\n     *\n     *     // method (on constructor)\n     *     class Example {\n     *         @Reflect.metadata(key, value)\n     *         static staticMethod() { }\n     *     }\n     *\n     *     // method (on prototype)\n     *     class Example {\n     *         @Reflect.metadata(key, value)\n     *         method() { }\n     *     }\n     *\n     */\n\n    function metadata(metadataKey, metadataValue) {\n      function decorator(target, propertyKey) {\n        if (!IsObject(target)) throw new TypeError();\n        if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey)) throw new TypeError();\n        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n      }\n\n      return decorator;\n    }\n\n    exporter(\"metadata\", metadata);\n    /**\n     * Define a unique metadata entry on the target.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param metadataValue A value that contains attached metadata.\n     * @param target The target object on which to define metadata.\n     * @param propertyKey (Optional) The property key for the target.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n     *\n     *     // property (on constructor)\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n     *\n     *     // decorator factory as metadata-producing annotation.\n     *     function MyAnnotation(options): Decorator {\n     *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n     *     }\n     *\n     */\n\n    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n      if (!IsObject(target)) throw new TypeError();\n      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n      return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n    }\n\n    exporter(\"defineMetadata\", defineMetadata);\n    /**\n     * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n\n    function hasMetadata(metadataKey, target, propertyKey) {\n      if (!IsObject(target)) throw new TypeError();\n      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n      return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n    }\n\n    exporter(\"hasMetadata\", hasMetadata);\n    /**\n     * Gets a value indicating whether the target object has the provided metadata key defined.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n\n    function hasOwnMetadata(metadataKey, target, propertyKey) {\n      if (!IsObject(target)) throw new TypeError();\n      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n      return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n    }\n\n    exporter(\"hasOwnMetadata\", hasOwnMetadata);\n    /**\n     * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n\n    function getMetadata(metadataKey, target, propertyKey) {\n      if (!IsObject(target)) throw new TypeError();\n      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n      return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n    }\n\n    exporter(\"getMetadata\", getMetadata);\n    /**\n     * Gets the metadata value for the provided metadata key on the target object.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n\n    function getOwnMetadata(metadataKey, target, propertyKey) {\n      if (!IsObject(target)) throw new TypeError();\n      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n      return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n    }\n\n    exporter(\"getOwnMetadata\", getOwnMetadata);\n    /**\n     * Gets the metadata keys defined on the target object or its prototype chain.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns An array of unique metadata keys.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.getMetadataKeys(Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n     *\n     */\n\n    function getMetadataKeys(target, propertyKey) {\n      if (!IsObject(target)) throw new TypeError();\n      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n      return OrdinaryMetadataKeys(target, propertyKey);\n    }\n\n    exporter(\"getMetadataKeys\", getMetadataKeys);\n    /**\n     * Gets the unique metadata keys defined on the target object.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns An array of unique metadata keys.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.getOwnMetadataKeys(Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n     *\n     */\n\n    function getOwnMetadataKeys(target, propertyKey) {\n      if (!IsObject(target)) throw new TypeError();\n      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n      return OrdinaryOwnMetadataKeys(target, propertyKey);\n    }\n\n    exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n    /**\n     * Deletes the metadata entry from the target object with the provided key.\n     * @param metadataKey A key used to store and retrieve metadata.\n     * @param target The target object on which the metadata is defined.\n     * @param propertyKey (Optional) The property key for the target.\n     * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n     * @example\n     *\n     *     class Example {\n     *         // property declarations are not part of ES6, though they are valid in TypeScript:\n     *         // static staticProperty;\n     *         // property;\n     *\n     *         constructor(p) { }\n     *         static staticMethod(p) { }\n     *         method(p) { }\n     *     }\n     *\n     *     // constructor\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n     *\n     *     // property (on constructor)\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n     *\n     *     // property (on prototype)\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n     *\n     *     // method (on constructor)\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n     *\n     *     // method (on prototype)\n     *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n     *\n     */\n\n    function deleteMetadata(metadataKey, target, propertyKey) {\n      if (!IsObject(target)) throw new TypeError();\n      if (!IsUndefined(propertyKey)) propertyKey = ToPropertyKey(propertyKey);\n      var metadataMap = GetOrCreateMetadataMap(target, propertyKey,\n      /*Create*/\n      false);\n      if (IsUndefined(metadataMap)) return false;\n      if (!metadataMap.delete(metadataKey)) return false;\n      if (metadataMap.size > 0) return true;\n      var targetMetadata = Metadata.get(target);\n      targetMetadata.delete(propertyKey);\n      if (targetMetadata.size > 0) return true;\n      Metadata.delete(target);\n      return true;\n    }\n\n    exporter(\"deleteMetadata\", deleteMetadata);\n\n    function DecorateConstructor(decorators, target) {\n      for (var i = decorators.length - 1; i >= 0; --i) {\n        var decorator = decorators[i];\n        var decorated = decorator(target);\n\n        if (!IsUndefined(decorated) && !IsNull(decorated)) {\n          if (!IsConstructor(decorated)) throw new TypeError();\n          target = decorated;\n        }\n      }\n\n      return target;\n    }\n\n    function DecorateProperty(decorators, target, propertyKey, descriptor) {\n      for (var i = decorators.length - 1; i >= 0; --i) {\n        var decorator = decorators[i];\n        var decorated = decorator(target, propertyKey, descriptor);\n\n        if (!IsUndefined(decorated) && !IsNull(decorated)) {\n          if (!IsObject(decorated)) throw new TypeError();\n          descriptor = decorated;\n        }\n      }\n\n      return descriptor;\n    }\n\n    function GetOrCreateMetadataMap(O, P, Create) {\n      var targetMetadata = Metadata.get(O);\n\n      if (IsUndefined(targetMetadata)) {\n        if (!Create) return undefined;\n        targetMetadata = new _Map();\n        Metadata.set(O, targetMetadata);\n      }\n\n      var metadataMap = targetMetadata.get(P);\n\n      if (IsUndefined(metadataMap)) {\n        if (!Create) return undefined;\n        metadataMap = new _Map();\n        targetMetadata.set(P, metadataMap);\n      }\n\n      return metadataMap;\n    } // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n\n\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\n      var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n      if (hasOwn) return true;\n      var parent = OrdinaryGetPrototypeOf(O);\n      if (!IsNull(parent)) return OrdinaryHasMetadata(MetadataKey, parent, P);\n      return false;\n    } // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n\n\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n      var metadataMap = GetOrCreateMetadataMap(O, P,\n      /*Create*/\n      false);\n      if (IsUndefined(metadataMap)) return false;\n      return ToBoolean(metadataMap.has(MetadataKey));\n    } // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n\n\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\n      var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n      if (hasOwn) return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n      var parent = OrdinaryGetPrototypeOf(O);\n      if (!IsNull(parent)) return OrdinaryGetMetadata(MetadataKey, parent, P);\n      return undefined;\n    } // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n\n\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n      var metadataMap = GetOrCreateMetadataMap(O, P,\n      /*Create*/\n      false);\n      if (IsUndefined(metadataMap)) return undefined;\n      return metadataMap.get(MetadataKey);\n    } // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n\n\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n      var metadataMap = GetOrCreateMetadataMap(O, P,\n      /*Create*/\n      true);\n      metadataMap.set(MetadataKey, MetadataValue);\n    } // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n\n\n    function OrdinaryMetadataKeys(O, P) {\n      var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n      var parent = OrdinaryGetPrototypeOf(O);\n      if (parent === null) return ownKeys;\n      var parentKeys = OrdinaryMetadataKeys(parent, P);\n      if (parentKeys.length <= 0) return ownKeys;\n      if (ownKeys.length <= 0) return parentKeys;\n      var set = new _Set();\n      var keys = [];\n\n      for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n        var key = ownKeys_1[_i];\n        var hasKey = set.has(key);\n\n        if (!hasKey) {\n          set.add(key);\n          keys.push(key);\n        }\n      }\n\n      for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n        var key = parentKeys_1[_a];\n        var hasKey = set.has(key);\n\n        if (!hasKey) {\n          set.add(key);\n          keys.push(key);\n        }\n      }\n\n      return keys;\n    } // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n    // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n\n\n    function OrdinaryOwnMetadataKeys(O, P) {\n      var keys = [];\n      var metadataMap = GetOrCreateMetadataMap(O, P,\n      /*Create*/\n      false);\n      if (IsUndefined(metadataMap)) return keys;\n      var keysObj = metadataMap.keys();\n      var iterator = GetIterator(keysObj);\n      var k = 0;\n\n      while (true) {\n        var next = IteratorStep(iterator);\n\n        if (!next) {\n          keys.length = k;\n          return keys;\n        }\n\n        var nextValue = IteratorValue(next);\n\n        try {\n          keys[k] = nextValue;\n        } catch (e) {\n          try {\n            IteratorClose(iterator);\n          } finally {\n            throw e;\n          }\n        }\n\n        k++;\n      }\n    } // 6 ECMAScript Data Typ0es and Values\n    // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n\n\n    function Type(x) {\n      if (x === null) return 1\n      /* Null */\n      ;\n\n      switch (typeof x) {\n        case \"undefined\":\n          return 0\n          /* Undefined */\n          ;\n\n        case \"boolean\":\n          return 2\n          /* Boolean */\n          ;\n\n        case \"string\":\n          return 3\n          /* String */\n          ;\n\n        case \"symbol\":\n          return 4\n          /* Symbol */\n          ;\n\n        case \"number\":\n          return 5\n          /* Number */\n          ;\n\n        case \"object\":\n          return x === null ? 1\n          /* Null */\n          : 6\n          /* Object */\n          ;\n\n        default:\n          return 6\n          /* Object */\n          ;\n      }\n    } // 6.1.1 The Undefined Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n\n\n    function IsUndefined(x) {\n      return x === undefined;\n    } // 6.1.2 The Null Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n\n\n    function IsNull(x) {\n      return x === null;\n    } // 6.1.5 The Symbol Type\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n\n\n    function IsSymbol(x) {\n      return typeof x === \"symbol\";\n    } // 6.1.7 The Object Type\n    // https://tc39.github.io/ecma262/#sec-object-type\n\n\n    function IsObject(x) {\n      return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n    } // 7.1 Type Conversion\n    // https://tc39.github.io/ecma262/#sec-type-conversion\n    // 7.1.1 ToPrimitive(input [, PreferredType])\n    // https://tc39.github.io/ecma262/#sec-toprimitive\n\n\n    function ToPrimitive(input, PreferredType) {\n      switch (Type(input)) {\n        case 0\n        /* Undefined */\n        :\n          return input;\n\n        case 1\n        /* Null */\n        :\n          return input;\n\n        case 2\n        /* Boolean */\n        :\n          return input;\n\n        case 3\n        /* String */\n        :\n          return input;\n\n        case 4\n        /* Symbol */\n        :\n          return input;\n\n        case 5\n        /* Number */\n        :\n          return input;\n      }\n\n      var hint = PreferredType === 3\n      /* String */\n      ? \"string\" : PreferredType === 5\n      /* Number */\n      ? \"number\" : \"default\";\n      var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n\n      if (exoticToPrim !== undefined) {\n        var result = exoticToPrim.call(input, hint);\n        if (IsObject(result)) throw new TypeError();\n        return result;\n      }\n\n      return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n    } // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n    // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n\n\n    function OrdinaryToPrimitive(O, hint) {\n      if (hint === \"string\") {\n        var toString_1 = O.toString;\n\n        if (IsCallable(toString_1)) {\n          var result = toString_1.call(O);\n          if (!IsObject(result)) return result;\n        }\n\n        var valueOf = O.valueOf;\n\n        if (IsCallable(valueOf)) {\n          var result = valueOf.call(O);\n          if (!IsObject(result)) return result;\n        }\n      } else {\n        var valueOf = O.valueOf;\n\n        if (IsCallable(valueOf)) {\n          var result = valueOf.call(O);\n          if (!IsObject(result)) return result;\n        }\n\n        var toString_2 = O.toString;\n\n        if (IsCallable(toString_2)) {\n          var result = toString_2.call(O);\n          if (!IsObject(result)) return result;\n        }\n      }\n\n      throw new TypeError();\n    } // 7.1.2 ToBoolean(argument)\n    // https://tc39.github.io/ecma262/2016/#sec-toboolean\n\n\n    function ToBoolean(argument) {\n      return !!argument;\n    } // 7.1.12 ToString(argument)\n    // https://tc39.github.io/ecma262/#sec-tostring\n\n\n    function ToString(argument) {\n      return \"\" + argument;\n    } // 7.1.14 ToPropertyKey(argument)\n    // https://tc39.github.io/ecma262/#sec-topropertykey\n\n\n    function ToPropertyKey(argument) {\n      var key = ToPrimitive(argument, 3\n      /* String */\n      );\n      if (IsSymbol(key)) return key;\n      return ToString(key);\n    } // 7.2 Testing and Comparison Operations\n    // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n    // 7.2.2 IsArray(argument)\n    // https://tc39.github.io/ecma262/#sec-isarray\n\n\n    function IsArray(argument) {\n      return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === \"[object Array]\";\n    } // 7.2.3 IsCallable(argument)\n    // https://tc39.github.io/ecma262/#sec-iscallable\n\n\n    function IsCallable(argument) {\n      // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n      return typeof argument === \"function\";\n    } // 7.2.4 IsConstructor(argument)\n    // https://tc39.github.io/ecma262/#sec-isconstructor\n\n\n    function IsConstructor(argument) {\n      // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n      return typeof argument === \"function\";\n    } // 7.2.7 IsPropertyKey(argument)\n    // https://tc39.github.io/ecma262/#sec-ispropertykey\n\n\n    function IsPropertyKey(argument) {\n      switch (Type(argument)) {\n        case 3\n        /* String */\n        :\n          return true;\n\n        case 4\n        /* Symbol */\n        :\n          return true;\n\n        default:\n          return false;\n      }\n    } // 7.3 Operations on Objects\n    // https://tc39.github.io/ecma262/#sec-operations-on-objects\n    // 7.3.9 GetMethod(V, P)\n    // https://tc39.github.io/ecma262/#sec-getmethod\n\n\n    function GetMethod(V, P) {\n      var func = V[P];\n      if (func === undefined || func === null) return undefined;\n      if (!IsCallable(func)) throw new TypeError();\n      return func;\n    } // 7.4 Operations on Iterator Objects\n    // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n\n\n    function GetIterator(obj) {\n      var method = GetMethod(obj, iteratorSymbol);\n      if (!IsCallable(method)) throw new TypeError(); // from Call\n\n      var iterator = method.call(obj);\n      if (!IsObject(iterator)) throw new TypeError();\n      return iterator;\n    } // 7.4.4 IteratorValue(iterResult)\n    // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n\n\n    function IteratorValue(iterResult) {\n      return iterResult.value;\n    } // 7.4.5 IteratorStep(iterator)\n    // https://tc39.github.io/ecma262/#sec-iteratorstep\n\n\n    function IteratorStep(iterator) {\n      var result = iterator.next();\n      return result.done ? false : result;\n    } // 7.4.6 IteratorClose(iterator, completion)\n    // https://tc39.github.io/ecma262/#sec-iteratorclose\n\n\n    function IteratorClose(iterator) {\n      var f = iterator[\"return\"];\n      if (f) f.call(iterator);\n    } // 9.1 Ordinary Object Internal Methods and Internal Slots\n    // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n    // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n    // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n\n\n    function OrdinaryGetPrototypeOf(O) {\n      var proto = Object.getPrototypeOf(O);\n      if (typeof O !== \"function\" || O === functionPrototype) return proto; // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n      // Try to determine the superclass constructor. Compatible implementations\n      // must either set __proto__ on a subclass constructor to the superclass constructor,\n      // or ensure each class has a valid `constructor` property on its prototype that\n      // points back to the constructor.\n      // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n      // This is the case when in ES6 or when using __proto__ in a compatible browser.\n\n      if (proto !== functionPrototype) return proto; // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n\n      var prototype = O.prototype;\n      var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n      if (prototypeProto == null || prototypeProto === Object.prototype) return proto; // If the constructor was not a function, then we cannot determine the heritage.\n\n      var constructor = prototypeProto.constructor;\n      if (typeof constructor !== \"function\") return proto; // If we have some kind of self-reference, then we cannot determine the heritage.\n\n      if (constructor === O) return proto; // we have a pretty good guess at the heritage.\n\n      return constructor;\n    } // naive Map shim\n\n\n    function CreateMapPolyfill() {\n      var cacheSentinel = {};\n      var arraySentinel = [];\n\n      var MapIterator =\n      /** @class */\n      function () {\n        function MapIterator(keys, values, selector) {\n          this._index = 0;\n          this._keys = keys;\n          this._values = values;\n          this._selector = selector;\n        }\n\n        MapIterator.prototype[\"@@iterator\"] = function () {\n          return this;\n        };\n\n        MapIterator.prototype[iteratorSymbol] = function () {\n          return this;\n        };\n\n        MapIterator.prototype.next = function () {\n          var index = this._index;\n\n          if (index >= 0 && index < this._keys.length) {\n            var result = this._selector(this._keys[index], this._values[index]);\n\n            if (index + 1 >= this._keys.length) {\n              this._index = -1;\n              this._keys = arraySentinel;\n              this._values = arraySentinel;\n            } else {\n              this._index++;\n            }\n\n            return {\n              value: result,\n              done: false\n            };\n          }\n\n          return {\n            value: undefined,\n            done: true\n          };\n        };\n\n        MapIterator.prototype.throw = function (error) {\n          if (this._index >= 0) {\n            this._index = -1;\n            this._keys = arraySentinel;\n            this._values = arraySentinel;\n          }\n\n          throw error;\n        };\n\n        MapIterator.prototype.return = function (value) {\n          if (this._index >= 0) {\n            this._index = -1;\n            this._keys = arraySentinel;\n            this._values = arraySentinel;\n          }\n\n          return {\n            value: value,\n            done: true\n          };\n        };\n\n        return MapIterator;\n      }();\n\n      return (\n        /** @class */\n        function () {\n          function Map() {\n            this._keys = [];\n            this._values = [];\n            this._cacheKey = cacheSentinel;\n            this._cacheIndex = -2;\n          }\n\n          Object.defineProperty(Map.prototype, \"size\", {\n            get: function () {\n              return this._keys.length;\n            },\n            enumerable: true,\n            configurable: true\n          });\n\n          Map.prototype.has = function (key) {\n            return this._find(key,\n            /*insert*/\n            false) >= 0;\n          };\n\n          Map.prototype.get = function (key) {\n            var index = this._find(key,\n            /*insert*/\n            false);\n\n            return index >= 0 ? this._values[index] : undefined;\n          };\n\n          Map.prototype.set = function (key, value) {\n            var index = this._find(key,\n            /*insert*/\n            true);\n\n            this._values[index] = value;\n            return this;\n          };\n\n          Map.prototype.delete = function (key) {\n            var index = this._find(key,\n            /*insert*/\n            false);\n\n            if (index >= 0) {\n              var size = this._keys.length;\n\n              for (var i = index + 1; i < size; i++) {\n                this._keys[i - 1] = this._keys[i];\n                this._values[i - 1] = this._values[i];\n              }\n\n              this._keys.length--;\n              this._values.length--;\n\n              if (key === this._cacheKey) {\n                this._cacheKey = cacheSentinel;\n                this._cacheIndex = -2;\n              }\n\n              return true;\n            }\n\n            return false;\n          };\n\n          Map.prototype.clear = function () {\n            this._keys.length = 0;\n            this._values.length = 0;\n            this._cacheKey = cacheSentinel;\n            this._cacheIndex = -2;\n          };\n\n          Map.prototype.keys = function () {\n            return new MapIterator(this._keys, this._values, getKey);\n          };\n\n          Map.prototype.values = function () {\n            return new MapIterator(this._keys, this._values, getValue);\n          };\n\n          Map.prototype.entries = function () {\n            return new MapIterator(this._keys, this._values, getEntry);\n          };\n\n          Map.prototype[\"@@iterator\"] = function () {\n            return this.entries();\n          };\n\n          Map.prototype[iteratorSymbol] = function () {\n            return this.entries();\n          };\n\n          Map.prototype._find = function (key, insert) {\n            if (this._cacheKey !== key) {\n              this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n            }\n\n            if (this._cacheIndex < 0 && insert) {\n              this._cacheIndex = this._keys.length;\n\n              this._keys.push(key);\n\n              this._values.push(undefined);\n            }\n\n            return this._cacheIndex;\n          };\n\n          return Map;\n        }()\n      );\n\n      function getKey(key, _) {\n        return key;\n      }\n\n      function getValue(_, value) {\n        return value;\n      }\n\n      function getEntry(key, value) {\n        return [key, value];\n      }\n    } // naive Set shim\n\n\n    function CreateSetPolyfill() {\n      return (\n        /** @class */\n        function () {\n          function Set() {\n            this._map = new _Map();\n          }\n\n          Object.defineProperty(Set.prototype, \"size\", {\n            get: function () {\n              return this._map.size;\n            },\n            enumerable: true,\n            configurable: true\n          });\n\n          Set.prototype.has = function (value) {\n            return this._map.has(value);\n          };\n\n          Set.prototype.add = function (value) {\n            return this._map.set(value, value), this;\n          };\n\n          Set.prototype.delete = function (value) {\n            return this._map.delete(value);\n          };\n\n          Set.prototype.clear = function () {\n            this._map.clear();\n          };\n\n          Set.prototype.keys = function () {\n            return this._map.keys();\n          };\n\n          Set.prototype.values = function () {\n            return this._map.values();\n          };\n\n          Set.prototype.entries = function () {\n            return this._map.entries();\n          };\n\n          Set.prototype[\"@@iterator\"] = function () {\n            return this.keys();\n          };\n\n          Set.prototype[iteratorSymbol] = function () {\n            return this.keys();\n          };\n\n          return Set;\n        }()\n      );\n    } // naive WeakMap shim\n\n\n    function CreateWeakMapPolyfill() {\n      var UUID_SIZE = 16;\n      var keys = HashMap.create();\n      var rootKey = CreateUniqueKey();\n      return (\n        /** @class */\n        function () {\n          function WeakMap() {\n            this._key = CreateUniqueKey();\n          }\n\n          WeakMap.prototype.has = function (target) {\n            var table = GetOrCreateWeakMapTable(target,\n            /*create*/\n            false);\n            return table !== undefined ? HashMap.has(table, this._key) : false;\n          };\n\n          WeakMap.prototype.get = function (target) {\n            var table = GetOrCreateWeakMapTable(target,\n            /*create*/\n            false);\n            return table !== undefined ? HashMap.get(table, this._key) : undefined;\n          };\n\n          WeakMap.prototype.set = function (target, value) {\n            var table = GetOrCreateWeakMapTable(target,\n            /*create*/\n            true);\n            table[this._key] = value;\n            return this;\n          };\n\n          WeakMap.prototype.delete = function (target) {\n            var table = GetOrCreateWeakMapTable(target,\n            /*create*/\n            false);\n            return table !== undefined ? delete table[this._key] : false;\n          };\n\n          WeakMap.prototype.clear = function () {\n            // NOTE: not a real clear, just makes the previous data unreachable\n            this._key = CreateUniqueKey();\n          };\n\n          return WeakMap;\n        }()\n      );\n\n      function CreateUniqueKey() {\n        var key;\n\n        do key = \"@@WeakMap@@\" + CreateUUID(); while (HashMap.has(keys, key));\n\n        keys[key] = true;\n        return key;\n      }\n\n      function GetOrCreateWeakMapTable(target, create) {\n        if (!hasOwn.call(target, rootKey)) {\n          if (!create) return undefined;\n          Object.defineProperty(target, rootKey, {\n            value: HashMap.create()\n          });\n        }\n\n        return target[rootKey];\n      }\n\n      function FillRandomBytes(buffer, size) {\n        for (var i = 0; i < size; ++i) buffer[i] = Math.random() * 0xff | 0;\n\n        return buffer;\n      }\n\n      function GenRandomBytes(size) {\n        if (typeof Uint8Array === \"function\") {\n          if (typeof crypto !== \"undefined\") return crypto.getRandomValues(new Uint8Array(size));\n          if (typeof msCrypto !== \"undefined\") return msCrypto.getRandomValues(new Uint8Array(size));\n          return FillRandomBytes(new Uint8Array(size), size);\n        }\n\n        return FillRandomBytes(new Array(size), size);\n      }\n\n      function CreateUUID() {\n        var data = GenRandomBytes(UUID_SIZE); // mark as random - RFC 4122 § 4.4\n\n        data[6] = data[6] & 0x4f | 0x40;\n        data[8] = data[8] & 0xbf | 0x80;\n        var result = \"\";\n\n        for (var offset = 0; offset < UUID_SIZE; ++offset) {\n          var byte = data[offset];\n          if (offset === 4 || offset === 6 || offset === 8) result += \"-\";\n          if (byte < 16) result += \"0\";\n          result += byte.toString(16).toLowerCase();\n        }\n\n        return result;\n      }\n    } // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n\n\n    function MakeDictionary(obj) {\n      obj.__ = undefined;\n      delete obj.__;\n      return obj;\n    }\n  });\n})(Reflect$1 || (Reflect$1 = {}));\n\nvar Syringe;\n\n(function (Syringe) {\n  /**\r\n   * 定义注入标识，默认允许多重注入\r\n   */\n  Syringe.defineToken = function (name) {\n    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      multiple: true\n    };\n    return new Syringe.DefinedToken(name, option);\n  };\n\n  var DefinedToken =\n  /**\r\n   * 兼容 inversify identifier\r\n   */\n  function DefinedToken(name) {\n    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DefinedToken);\n\n    this.prototype = {};\n    this.name = void 0;\n    this.multiple = void 0;\n    this.symbol = void 0;\n    var _option$multiple = option.multiple,\n        multiple = _option$multiple === void 0 ? false : _option$multiple;\n    this.name = name;\n    this.symbol = Symbol(this.name);\n    this.multiple = multiple;\n  };\n\n  Syringe.DefinedToken = DefinedToken;\n\n  function isModule(data) {\n    return !!data && _typeof(data) === 'object' && 'id' in data && 'registry' in data;\n  }\n\n  Syringe.isModule = isModule;\n  var Lifecycle;\n\n  (function (Lifecycle) {\n    Lifecycle[\"singleton\"] = \"singleton\";\n    Lifecycle[\"transient\"] = \"transient\";\n  })(Lifecycle = Syringe.Lifecycle || (Syringe.Lifecycle = {}));\n\n  Syringe.ClassOptionSymbol = Symbol('SyringeClassOptionSymbol');\n  Syringe.DefaultOption = {\n    lifecycle: Lifecycle.transient\n  };\n})(Syringe || (Syringe = {})); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nvar Utils;\n\n(function (Utils) {\n  function maybeArrayToArray(maybeArray) {\n    if (!(maybeArray instanceof Array)) {\n      if (maybeArray !== undefined) {\n        return [maybeArray];\n      }\n\n      return [];\n    }\n\n    return maybeArray;\n  }\n\n  Utils.maybeArrayToArray = maybeArrayToArray;\n\n  function isClass(data) {\n    return !!(data && typeof data === 'function' && 'prototype' in data);\n  }\n\n  Utils.isClass = isClass;\n\n  function isDefinedToken(data) {\n    return !!(data && _typeof(data) === 'object' && 'symbol' in data && 'multiple' in data);\n  }\n\n  Utils.isDefinedToken = isDefinedToken;\n\n  function isInjectOption(data) {\n    return !!(data && _typeof(data) === 'object' && 'token' in data);\n  }\n\n  Utils.isInjectOption = isInjectOption;\n\n  function isNamedToken(data) {\n    return !!(data && _typeof(data) === 'object' && 'token' in data && 'named' in data);\n  }\n\n  Utils.isNamedToken = isNamedToken;\n\n  function isMultipleEnabled(token) {\n    return Utils.isDefinedToken(token) && token.multiple;\n  }\n\n  Utils.isMultipleEnabled = isMultipleEnabled;\n})(Utils || (Utils = {}));\n\nfunction bindSingleton(toBind) {\n  return toBind.inSingletonScope();\n}\n\nfunction bindTransient(toBind) {\n  return toBind.inTransientScope();\n}\n\nfunction bindLifecycle(toBind, option) {\n  if (option.lifecycle === Syringe.Lifecycle.singleton) {\n    return bindSingleton(toBind);\n  }\n\n  return bindTransient(toBind);\n}\n\nfunction bindNamed(toBind, named) {\n  toBind.whenTargetNamed(namedToIdentifier(named));\n}\n\nfunction bindGeneralToken(token, context) {\n  return context.container.bind(tokenToIdentifier(token));\n}\n\nfunction bindMonoToken(token, context) {\n  var parent = context.container.parent;\n  var bindFromParent = parent && parent.isBound(tokenToIdentifier(token));\n\n  if (context.container.isBound(tokenToIdentifier(token)) && !bindFromParent) {\n    return context.container.rebind(tokenToIdentifier(token));\n  }\n\n  return context.container.bind(tokenToIdentifier(token));\n}\n\nfunction isInversifyContext(data) {\n  return data && _typeof(data) === 'object' && 'container' in data && 'inversify' in data;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction namedToIdentifier(named) {\n  if (Utils.isDefinedToken(named)) {\n    return named.symbol;\n  }\n\n  return named;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction tokenToIdentifier(token) {\n  if (Utils.isDefinedToken(token)) {\n    return token.symbol;\n  }\n\n  return token;\n}\n\nvar GlobalContainer = new Container$1();\n\nfunction injectable() {\n  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var decorator = injectable$1();\n  return function (target) {\n    Reflect.defineMetadata(Syringe.ClassOptionSymbol, _objectSpread2(_objectSpread2({}, option), {}, {\n      target: target\n    }), target);\n    decorator(target);\n  };\n}\n\nfunction singleton() {\n  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return injectable(_objectSpread2(_objectSpread2({}, option), {}, {\n    lifecycle: Syringe.Lifecycle.singleton\n  }));\n}\n\nfunction transient() {\n  var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return injectable(_objectSpread2(_objectSpread2({}, option), {}, {\n    lifecycle: Syringe.Lifecycle.transient\n  }));\n}\n\nfunction inject(token) {\n  return inject$1(tokenToIdentifier(token));\n}\n\nfunction named(name) {\n  return named$1(namedToIdentifier(name));\n}\n\nvar OptionSymbol = Symbol('SyringeOptionSymbol');\n\nvar registerSideOption = function registerSideOption(option, target) {\n  Reflect.defineMetadata(OptionSymbol, option, target);\n};\n\nfunction toRegistryOption(options) {\n  var token = Utils.maybeArrayToArray(options.token);\n  var useClass = Utils.maybeArrayToArray(options.useClass);\n  var useDynamic = Utils.maybeArrayToArray(options.useDynamic);\n  var useFactory = Utils.maybeArrayToArray(options.useFactory);\n  var contrib = Utils.maybeArrayToArray(options.contrib);\n  var lifecycle = options.lifecycle || Syringe.Lifecycle.transient;\n  var generalOption = {\n    token: token,\n    useClass: useClass,\n    lifecycle: contrib.length > 0 ? Syringe.Lifecycle.singleton : lifecycle,\n    contrib: contrib,\n    useDynamic: useDynamic,\n    useFactory: useFactory\n  };\n\n  if ('useValue' in options) {\n    generalOption.useValue = options.useValue;\n  }\n\n  return generalOption;\n}\n\nvar Register = /*#__PURE__*/function () {\n  function Register(context, token, option) {\n    _classCallCheck(this, Register);\n\n    this.token = void 0;\n    this.rawToken = void 0;\n    this.named = void 0;\n    this.generalToken = void 0;\n    this.option = void 0;\n    this.context = void 0;\n    this.mutiple = void 0;\n    this.context = context;\n    this.token = token;\n    this.option = option;\n    this.rawToken = Utils.isNamedToken(token) ? token.token : token;\n    this.named = Utils.isNamedToken(token) ? token.named : undefined;\n    this.mutiple = !!this.named || Utils.isMultipleEnabled(this.rawToken);\n    this.generalToken = this.rawToken;\n  }\n  /**\r\n   * multi or mono register\r\n   * mono bind 优先级 useValue > useDynamic > useFactory > useClass\r\n   */\n\n\n  _createClass(Register, [{\n    key: \"resolve\",\n    value: function resolve() {\n      var _this = this;\n\n      var context = this.context;\n\n      if (!isInversifyContext(context)) {\n        return;\n      }\n\n      if (this.mutiple) {\n        this.resolveMutilple(context);\n      } else {\n        this.resolveMono(context);\n\n        if (!this.named && this.option.contrib.length > 0) {\n          this.option.contrib.forEach(function (contribution) {\n            if (Utils.isMultipleEnabled(contribution)) {\n              bindGeneralToken(contribution, context).toService(_this.generalToken);\n            } else {\n              bindMonoToken(contribution, context).toService(_this.generalToken);\n            }\n          });\n        }\n      }\n    } // eslint-disable-next-line consistent-return\n\n  }, {\n    key: \"resolveMono\",\n    value: function resolveMono(context) {\n      var _this2 = this;\n\n      if ('useValue' in this.option) {\n        return bindMonoToken(this.generalToken, context).toConstantValue(this.option.useValue);\n      }\n\n      if (this.option.useDynamic.length > 0) {\n        var dynamic = this.option.useDynamic[this.option.useDynamic.length - 1];\n        return bindLifecycle(bindMonoToken(this.generalToken, context).toDynamicValue(function () {\n          return dynamic({\n            container: _this2.context\n          });\n        }), this.option);\n      }\n\n      if (this.option.useFactory.length > 0) {\n        var factrory = this.option.useFactory[this.option.useFactory.length - 1];\n        return bindMonoToken(this.generalToken, context).toFactory(function () {\n          return factrory({\n            container: _this2.context\n          });\n        });\n      }\n\n      if (this.option.useClass.length > 0) {\n        var newable = this.option.useClass[this.option.useClass.length - 1];\n        return bindLifecycle(bindMonoToken(this.generalToken, context).to(newable), this.option);\n      }\n    }\n  }, {\n    key: \"resolveMutilple\",\n    value: function resolveMutilple(context) {\n      var _this3 = this;\n\n      var classesList = this.option.useClass.map(function (newable) {\n        return bindLifecycle(bindGeneralToken(_this3.generalToken, context).to(newable), _this3.option);\n      });\n      var dynamicList = this.option.useDynamic.map(function (dynamic) {\n        return bindLifecycle(bindGeneralToken(_this3.generalToken, context).toDynamicValue(function () {\n          return dynamic({\n            container: _this3.context\n          });\n        }), _this3.option);\n      });\n      var factoryList = this.option.useFactory.map(function (factrory) {\n        return bindGeneralToken(_this3.generalToken, context).toFactory(function () {\n          return factrory({\n            container: _this3.context\n          });\n        });\n      });\n      var valueToBind = 'useValue' in this.option ? bindGeneralToken(this.generalToken, context).toConstantValue(this.option.useValue) : undefined;\n\n      if (this.named) {\n        classesList.forEach(function (tobind) {\n          return _this3.named && bindNamed(tobind, _this3.named);\n        });\n        dynamicList.forEach(function (tobind) {\n          return _this3.named && bindNamed(tobind, _this3.named);\n        });\n        factoryList.forEach(function (tobind) {\n          return _this3.named && bindNamed(tobind, _this3.named);\n        });\n\n        if (valueToBind) {\n          bindNamed(valueToBind, this.named);\n        }\n      }\n    }\n  }], [{\n    key: \"resolveTarget\",\n    value: // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    /**\r\n     * 注册目标 token，合并 token 配置后基于配置注册\r\n     */\n    function resolveTarget(context, target) {\n      var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      try {\n        try {\n          var sideOption = Reflect.getMetadata(OptionSymbol, target);\n\n          if (sideOption) {\n            Register.resolveOption(context, sideOption);\n          }\n        } catch (ex) {// noop\n        } // 当 target 为类时，将其插入 useClass 配置中\n\n\n        if (Utils.isClass(target)) {\n          if (!option.useClass) {\n            option.useClass = [target];\n          } else {\n            var classes = Utils.maybeArrayToArray(option.useClass);\n            classes.unshift(target);\n            option.useClass = classes;\n          }\n        }\n\n        var mixedOption;\n\n        try {\n          mixedOption = Reflect.getMetadata(Syringe.ClassOptionSymbol, target);\n        } catch (ex) {// noop\n        }\n\n        mixedOption = _objectSpread2(_objectSpread2({}, mixedOption || {}), option);\n\n        if (!mixedOption.token) {\n          mixedOption.token = [target];\n        } else {\n          var tokens = Utils.maybeArrayToArray(mixedOption.token);\n          tokens.unshift(target);\n          mixedOption.token = tokens;\n        }\n\n        Register.resolveOption(context, mixedOption);\n      } catch (ex) {// noop\n      }\n    }\n    /**\r\n     * 基于配置注册\r\n     */\n\n  }, {\n    key: \"resolveOption\",\n    value: function resolveOption(context, baseOption) {\n      var parsedOption = toRegistryOption(_objectSpread2(_objectSpread2({}, Register.globalConfig), baseOption));\n\n      if (parsedOption.useClass.length === 0 && parsedOption.useDynamic.length === 0 && parsedOption.useFactory.length === 0 && !('useValue' in parsedOption)) {\n        return;\n      }\n\n      parsedOption.token.forEach(function (token) {\n        var register = new Register(context, token, _objectSpread2({}, parsedOption));\n        register.resolve();\n      });\n    }\n  }]);\n\n  return Register;\n}();\n\nRegister.globalConfig = Syringe.DefaultOption;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nvar Container = /*#__PURE__*/function () {\n  function Container(inversifyContainer) {\n    _classCallCheck(this, Container);\n\n    this.loadedModules = [];\n    this.container = void 0;\n    this.inversify = true;\n    this.parent = void 0;\n\n    if (inversifyContainer) {\n      this.container = inversifyContainer;\n    } else {\n      this.container = new Container$1();\n    }\n  }\n\n  _createClass(Container, [{\n    key: \"load\",\n    value: function load(module, force) {\n      if (force || !this.loadedModules.includes(module.id)) {\n        module.registry(this.register.bind(this), this.resolveContext());\n        this.loadedModules.push(module.id);\n      }\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(token) {\n      return this.container.unbind(tokenToIdentifier(token));\n    }\n  }, {\n    key: \"get\",\n    value: function get(token) {\n      return this.container.get(tokenToIdentifier(token));\n    }\n  }, {\n    key: \"getNamed\",\n    value: function getNamed(token, named) {\n      return this.container.getNamed(tokenToIdentifier(token), namedToIdentifier(named));\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(token) {\n      return this.container.getAll(tokenToIdentifier(token));\n    }\n  }, {\n    key: \"getAllNamed\",\n    value: function getAllNamed(token, named) {\n      return this.container.getAllNamed(tokenToIdentifier(token), namedToIdentifier(named));\n    }\n  }, {\n    key: \"isBound\",\n    value: function isBound(token) {\n      return this.container.isBound(tokenToIdentifier(token));\n    }\n  }, {\n    key: \"isBoundNamed\",\n    value: function isBoundNamed(token, named) {\n      return this.container.isBoundNamed(tokenToIdentifier(token), namedToIdentifier(named));\n    }\n  }, {\n    key: \"createChild\",\n    value: function createChild() {\n      var childContainer = this.container.createChild();\n      var child = new Container(childContainer);\n      child.parent = this;\n      return child;\n    }\n  }, {\n    key: \"register\",\n    value: function register(token) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (Utils.isInjectOption(token)) {\n        Register.resolveOption(this, token);\n      } else {\n        Register.resolveTarget(this, token, options);\n      }\n    }\n  }, {\n    key: \"resolveContext\",\n    value: function resolveContext() {\n      return {\n        container: this\n      };\n    }\n  }], [{\n    key: \"config\",\n    value: function config(option) {\n      Register.globalConfig = option;\n    }\n  }]);\n\n  return Container;\n}();\n\nvar GlobalContainer$1 = new Container(GlobalContainer);\nvar register = GlobalContainer$1.register.bind(GlobalContainer$1);\nvar Provider = Syringe.defineToken('ContributionProvider');\n\nvar DefaultContributionProvider = /*#__PURE__*/function () {\n  function DefaultContributionProvider(serviceIdentifier, container, option) {\n    _classCallCheck(this, DefaultContributionProvider);\n\n    this.option = {\n      recursive: false,\n      cache: true\n    };\n    this.services = void 0;\n    this.serviceIdentifier = void 0;\n    this.container = void 0;\n    this.container = container;\n    this.serviceIdentifier = serviceIdentifier;\n\n    if (option) {\n      this.option = _objectSpread2(_objectSpread2({}, this.option), option);\n    }\n  }\n\n  _createClass(DefaultContributionProvider, [{\n    key: \"setServices\",\n    value: function setServices(recursive) {\n      var currentServices = [];\n      var currentContainer = this.container;\n\n      while (currentContainer) {\n        if (currentContainer.isBound(this.serviceIdentifier)) {\n          var list = currentContainer.getAll(this.serviceIdentifier);\n          currentServices.push.apply(currentServices, _toConsumableArray(list));\n        }\n\n        currentContainer = recursive ? currentContainer.parent : undefined;\n      }\n\n      return currentServices;\n    }\n  }, {\n    key: \"getContributions\",\n    value: function getContributions() {\n      var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _this$option$option = _objectSpread2(_objectSpread2({}, this.option), option),\n          cache = _this$option$option.cache,\n          recursive = _this$option$option.recursive;\n\n      if (!cache || this.services === undefined) {\n        this.services = this.setServices(!!recursive);\n      }\n\n      return this.services;\n    }\n  }]);\n\n  return DefaultContributionProvider;\n}();\n\nfunction contributionInjectOption(token, option) {\n  return {\n    token: {\n      token: Provider,\n      named: token\n    },\n    useDynamic: function useDynamic(ctx) {\n      return new DefaultContributionProvider(token, ctx.container, option);\n    },\n    lifecycle: Syringe.Lifecycle.singleton\n  };\n}\n\nfunction contributionRegister(registerMethod, identifier, option) {\n  registerMethod({\n    token: {\n      token: Provider,\n      named: identifier\n    },\n    useDynamic: function useDynamic(ctx) {\n      return new DefaultContributionProvider(identifier, ctx.container, option);\n    },\n    lifecycle: Syringe.Lifecycle.singleton\n  });\n}\n\nvar SyringeModule = /*#__PURE__*/function () {\n  function SyringeModule(registry) {\n    _classCallCheck(this, SyringeModule);\n\n    this.id = void 0;\n    this.baseRegistry = void 0;\n    this.optionCollection = void 0;\n    SyringeModule.moduleId += 1;\n    this.id = SyringeModule.moduleId;\n    this.baseRegistry = registry;\n  }\n\n  _createClass(SyringeModule, [{\n    key: \"registry\",\n    get:\n    /**\r\n     * @readonly\r\n     * module unique id\r\n     */\n\n    /**\r\n     * Exposed registration function\r\n     */\n    function get() {\n      var _this = this;\n\n      return function (register, ctx) {\n        if (_this.baseRegistry) {\n          _this.baseRegistry(register, ctx);\n        }\n\n        if (_this.optionCollection) {\n          _this.optionCollection.forEach(function (option) {\n            return register(option);\n          });\n        }\n      };\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      if (!this.optionCollection) {\n        this.optionCollection = [];\n      }\n\n      return this.optionCollection;\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      var _this2 = this;\n\n      for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {\n        options[_key] = arguments[_key];\n      }\n\n      options.forEach(function (option) {\n        return _this2.options.push(option);\n      });\n      return this;\n    }\n  }, {\n    key: \"contribution\",\n    value: function contribution() {\n      var _this3 = this;\n\n      for (var _len2 = arguments.length, tokens = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        tokens[_key2] = arguments[_key2];\n      }\n\n      tokens.forEach(function (token) {\n        return _this3.options.push(contributionInjectOption(token));\n      });\n      return this;\n    }\n  }]);\n\n  return SyringeModule;\n}();\n\nSyringeModule.moduleId = 0;\n\nfunction Module(register) {\n  return new SyringeModule(register);\n}\n\nvar contrib = function contrib(token) {\n  return function ( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  target, targetKey, index) {\n    named(token)(target, targetKey, index);\n    inject(Provider)(target, targetKey, index);\n  };\n};\n\nvar Contribution;\n\n(function (Contribution) {\n  Contribution.Provider = Provider;\n  Contribution.register = contributionRegister;\n})(Contribution || (Contribution = {}));\n\nexport { Container, Contribution, DefaultContributionProvider, GlobalContainer$1 as GlobalContainer, Module, OptionSymbol, Provider, Syringe, SyringeModule, Utils, contrib, inject, injectable, named, register, registerSideOption, singleton, transient };","map":null,"metadata":{},"sourceType":"module"}