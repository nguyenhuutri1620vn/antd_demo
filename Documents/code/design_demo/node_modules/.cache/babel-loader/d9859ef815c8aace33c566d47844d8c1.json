{"ast":null,"code":"import { Registry } from '../../registry';\nimport { Markup } from '../../view';\nimport { Node } from '../../model/node';\nimport { NodeView } from '../../view/node';\nimport { Base } from '../base';\nexport class HTML extends Base {\n  get html() {\n    return this.getHTML();\n  }\n\n  set html(val) {\n    this.setHTML(val);\n  }\n\n  getHTML() {\n    return this.store.get('html');\n  }\n\n  setHTML(html) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (html == null) {\n      this.removeHTML(options);\n    } else {\n      this.store.set('html', html, options);\n    }\n\n    return this;\n  }\n\n  removeHTML() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.store.remove('html', options);\n  }\n\n}\n\n(function (HTML) {\n  class View extends NodeView {\n    init() {\n      super.init();\n      this.cell.on('change:*', () => {\n        const shouldUpdate = this.graph.hook.shouldUpdateHTMLComponent(this.cell);\n\n        if (shouldUpdate) {\n          this.renderHTMLComponent();\n        }\n      });\n    }\n\n    confirmUpdate(flag) {\n      const ret = super.confirmUpdate(flag);\n      return this.handleAction(ret, View.action, () => this.renderHTMLComponent());\n    }\n\n    renderHTMLComponent() {\n      const container = this.selectors.foContent;\n\n      if (container) {\n        const $wrap = this.$(container).empty();\n        const component = this.graph.hook.getHTMLComponent(this.cell);\n\n        if (component) {\n          if (typeof component === 'string') {\n            $wrap.html(component);\n          } else {\n            $wrap.append(component);\n          }\n        }\n      }\n    }\n\n  }\n\n  HTML.View = View;\n\n  (function (View) {\n    View.action = 'html';\n    View.config({\n      bootstrap: [View.action],\n      actions: {\n        html: View.action\n      }\n    });\n    NodeView.registry.register('html-view', View);\n  })(View = HTML.View || (HTML.View = {}));\n})(HTML || (HTML = {}));\n\n(function (HTML) {\n  HTML.config({\n    view: 'html-view',\n    markup: [{\n      tagName: 'rect',\n      selector: 'body'\n    }, Object.assign({}, Markup.getForeignObjectMarkup()), {\n      tagName: 'text',\n      selector: 'label'\n    }],\n    attrs: {\n      body: {\n        fill: 'none',\n        stroke: 'none',\n        refWidth: '100%',\n        refHeight: '100%'\n      },\n      fo: {\n        refWidth: '100%',\n        refHeight: '100%'\n      }\n    }\n  });\n  Node.registry.register('html', HTML);\n})(HTML || (HTML = {}));\n\n(function (HTML) {\n  HTML.componentRegistry = Registry.create({\n    type: 'html componnet'\n  });\n})(HTML || (HTML = {}));","map":null,"metadata":{},"sourceType":"module"}