{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isDate, isNil, isNumber, isString } from '@antv/util';\nimport { timeFormat, toTimeStamp } from '../util/time';\nimport Linear from './linear';\n/**\n * 时间度量\n * @class\n */\n\nvar Time =\n/** @class */\nfunction (_super) {\n  __extends(Time, _super);\n\n  function Time() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'time';\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  Time.prototype.getText = function (value, index) {\n    var numberValue = this.translate(value);\n    var formatter = this.formatter;\n    return formatter ? formatter(numberValue, index) : timeFormat(numberValue, this.mask);\n  };\n  /**\n   * @override\n   */\n\n\n  Time.prototype.scale = function (value) {\n    var v = value;\n\n    if (isString(v) || isDate(v)) {\n      v = this.translate(v);\n    }\n\n    return _super.prototype.scale.call(this, v);\n  };\n  /**\n   * 将时间转换成数字\n   * @override\n   */\n\n\n  Time.prototype.translate = function (v) {\n    return toTimeStamp(v);\n  };\n\n  Time.prototype.initCfg = function () {\n    this.tickMethod = 'time-pretty';\n    this.mask = 'YYYY-MM-DD';\n    this.tickCount = 7;\n    this.nice = false;\n  };\n\n  Time.prototype.setDomain = function () {\n    var values = this.values; // 是否设置了 min, max，而不是直接取 this.min, this.max\n\n    var minConfig = this.getConfig('min');\n    var maxConfig = this.getConfig('max'); // 如果设置了 min,max 则转换成时间戳\n\n    if (!isNil(minConfig) || !isNumber(minConfig)) {\n      this.min = this.translate(this.min);\n    }\n\n    if (!isNil(maxConfig) || !isNumber(maxConfig)) {\n      this.max = this.translate(this.max);\n    } // 没有设置 min, max 时\n\n\n    if (values && values.length) {\n      // 重新计算最大最小值\n      var timeStamps_1 = [];\n      var min_1 = Infinity; // 最小值\n\n      var secondMin_1 = min_1; // 次小值\n\n      var max_1 = 0; // 使用一个循环，计算min,max,secondMin\n\n      each(values, function (v) {\n        var timeStamp = toTimeStamp(v);\n\n        if (isNaN(timeStamp)) {\n          throw new TypeError(\"Invalid Time: \" + v + \" in time scale!\");\n        }\n\n        if (min_1 > timeStamp) {\n          secondMin_1 = min_1;\n          min_1 = timeStamp;\n        } else if (secondMin_1 > timeStamp) {\n          secondMin_1 = timeStamp;\n        }\n\n        if (max_1 < timeStamp) {\n          max_1 = timeStamp;\n        }\n\n        timeStamps_1.push(timeStamp);\n      }); // 存在多个值时，设置最小间距\n\n      if (values.length > 1) {\n        this.minTickInterval = secondMin_1 - min_1;\n      }\n\n      if (isNil(minConfig)) {\n        this.min = min_1;\n      }\n\n      if (isNil(maxConfig)) {\n        this.max = max_1;\n      }\n    }\n  };\n\n  return Time;\n}(Linear);\n\nexport default Time;","map":null,"metadata":{},"sourceType":"module"}