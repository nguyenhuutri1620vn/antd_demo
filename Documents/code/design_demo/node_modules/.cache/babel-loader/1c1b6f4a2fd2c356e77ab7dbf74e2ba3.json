{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Base } from './base';\nexport class ClipboardManager extends Base {\n  get commonOptions() {\n    const _a = this.instanceOptions,\n          {\n      enabled\n    } = _a,\n          others = __rest(_a, [\"enabled\"]);\n\n    return others;\n  }\n\n  get instanceOptions() {\n    return this.options.clipboard;\n  }\n\n  get cells() {\n    return this.widget.cells;\n  }\n\n  get disabled() {\n    return this.instanceOptions.enabled !== true;\n  }\n\n  init() {\n    this.widget = this.graph.hook.createClipboard();\n    this.widget.deserialize(this.instanceOptions);\n  }\n\n  enable() {\n    if (this.disabled) {\n      this.instanceOptions.enabled = true;\n    }\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.instanceOptions.enabled = false;\n    }\n  }\n\n  copy(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!this.disabled) {\n      this.widget.copy(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n    }\n  }\n\n  cut(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!this.disabled) {\n      this.widget.cut(cells, this.graph, Object.assign(Object.assign({}, this.commonOptions), options));\n    }\n  }\n\n  paste() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let graph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.graph;\n\n    if (!this.disabled) {\n      return this.widget.paste(graph, Object.assign(Object.assign({}, this.commonOptions), options));\n    }\n\n    return [];\n  }\n\n  clean(force) {\n    if (!this.disabled || force) {\n      this.widget.clean();\n    }\n  }\n\n  isEmpty() {\n    return this.widget.isEmpty();\n  }\n\n  dispose() {\n    this.clean(true);\n  }\n\n}\n\n__decorate([Base.dispose()], ClipboardManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}