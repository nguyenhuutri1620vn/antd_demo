{"ast":null,"code":"import line from './line';\nimport { distance } from './util';\n\nfunction analyzePoints(points) {\n  // 计算每段的长度和总的长度\n  var totalLength = 0;\n  var segments = [];\n\n  for (var i = 0; i < points.length - 1; i++) {\n    var from = points[i];\n    var to = points[i + 1];\n    var length_1 = distance(from[0], from[1], to[0], to[1]);\n    var seg = {\n      from: from,\n      to: to,\n      length: length_1\n    };\n    segments.push(seg);\n    totalLength += length_1;\n  }\n\n  return {\n    segments: segments,\n    totalLength: totalLength\n  };\n}\n\nexport function lengthOfSegment(points) {\n  if (points.length < 2) {\n    return 0;\n  }\n\n  var totalLength = 0;\n\n  for (var i = 0; i < points.length - 1; i++) {\n    var from = points[i];\n    var to = points[i + 1];\n    totalLength += distance(from[0], from[1], to[0], to[1]);\n  }\n\n  return totalLength;\n}\n/**\n * 按照比例在数据片段中获取点\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n * @return {object} 点的坐标\n */\n\nexport function pointAtSegments(points, t) {\n  // 边界判断\n  if (t > 1 || t < 0 || points.length < 2) {\n    return null;\n  }\n\n  var _a = analyzePoints(points),\n      segments = _a.segments,\n      totalLength = _a.totalLength; // 多个点有可能重合\n\n\n  if (totalLength === 0) {\n    return {\n      x: points[0][0],\n      y: points[0][1]\n    };\n  } // 计算比例\n\n\n  var startRatio = 0;\n  var point = null;\n\n  for (var i = 0; i < segments.length; i++) {\n    var seg = segments[i];\n    var from = seg.from,\n        to = seg.to;\n    var currentRatio = seg.length / totalLength;\n\n    if (t >= startRatio && t <= startRatio + currentRatio) {\n      var localRatio = (t - startRatio) / currentRatio;\n      point = line.pointAt(from[0], from[1], to[0], to[1], localRatio);\n      break;\n    }\n\n    startRatio += currentRatio;\n  }\n\n  return point;\n}\n/**\n * 按照比例在数据片段中获取切线的角度\n * @param {array} points 点的集合\n * @param {number} t 百分比 0-1\n */\n\nexport function angleAtSegments(points, t) {\n  // 边界判断\n  if (t > 1 || t < 0 || points.length < 2) {\n    return 0;\n  }\n\n  var _a = analyzePoints(points),\n      segments = _a.segments,\n      totalLength = _a.totalLength; // 计算比例\n\n\n  var startRatio = 0;\n  var angle = 0;\n\n  for (var i = 0; i < segments.length; i++) {\n    var seg = segments[i];\n    var from = seg.from,\n        to = seg.to;\n    var currentRatio = seg.length / totalLength;\n\n    if (t >= startRatio && t <= startRatio + currentRatio) {\n      angle = Math.atan2(to[1] - from[1], to[0] - from[0]);\n      break;\n    }\n\n    startRatio += currentRatio;\n  }\n\n  return angle;\n}\nexport function distanceAtSegment(points, x, y) {\n  var minDistance = Infinity;\n\n  for (var i = 0; i < points.length - 1; i++) {\n    var point = points[i];\n    var nextPoint = points[i + 1];\n    var distance_1 = line.pointDistance(point[0], point[1], nextPoint[0], nextPoint[1], x, y);\n\n    if (distance_1 < minDistance) {\n      minDistance = distance_1;\n    }\n  }\n\n  return minDistance;\n}","map":null,"metadata":{},"sourceType":"module"}