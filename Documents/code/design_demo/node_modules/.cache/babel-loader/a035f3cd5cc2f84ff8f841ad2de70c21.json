{"ast":null,"code":"import { clone } from '@antv/util';\nimport degree from './degree';\n/**\n *  k-core算法 找出符合指定核心度的紧密关联的子图结构\n * @param graphData 图数据\n * @param k 核心度数\n */\n\nvar kCore = function kCore(graphData, k) {\n  var _a;\n\n  if (k === void 0) {\n    k = 1;\n  }\n\n  var data = clone(graphData);\n  var _b = data.nodes,\n      nodes = _b === void 0 ? [] : _b;\n  var _c = data.edges,\n      edges = _c === void 0 ? [] : _c;\n\n  var _loop_1 = function _loop_1() {\n    // 获取图中节点的度数\n    var degrees = degree({\n      nodes: nodes,\n      edges: edges\n    });\n    var nodeIds = Object.keys(degrees); // 按照度数进行排序\n\n    nodeIds.sort(function (a, b) {\n      var _a, _b;\n\n      return ((_a = degrees[a]) === null || _a === void 0 ? void 0 : _a.degree) - ((_b = degrees[b]) === null || _b === void 0 ? void 0 : _b.degree);\n    });\n    var minIndexId = nodeIds[0];\n\n    if (!nodes.length || ((_a = degrees[minIndexId]) === null || _a === void 0 ? void 0 : _a.degree) >= k) {\n      return \"break\";\n    }\n\n    var originIndex = nodes.findIndex(function (node) {\n      return node.id === minIndexId;\n    }); // 移除度数小于k的节点\n\n    nodes.splice(originIndex, 1); // 移除度数小于k的节点相关的边\n\n    edges = edges.filter(function (edge) {\n      return !(edge.source === minIndexId || edge.target === minIndexId);\n    });\n  };\n\n  while (true) {\n    var state_1 = _loop_1();\n\n    if (state_1 === \"break\") break;\n  }\n\n  return {\n    nodes: nodes,\n    edges: edges\n  };\n};\n\nexport default kCore;","map":null,"metadata":{},"sourceType":"module"}