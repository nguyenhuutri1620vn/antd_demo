{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { Logo } from '@antv/l7-component';\nimport { createLayerContainer, createSceneContainer, SceneEventList, TYPES } from '@antv/l7-core';\nimport { ReglRendererService } from '@antv/l7-renderer';\nimport { DOM, isMini } from '@antv/l7-utils';\n\nvar Scene = function () {\n  function Scene(config) {\n    _classCallCheck(this, Scene);\n\n    _defineProperty(this, \"sceneService\", void 0);\n\n    _defineProperty(this, \"mapService\", void 0);\n\n    _defineProperty(this, \"controlService\", void 0);\n\n    _defineProperty(this, \"layerService\", void 0);\n\n    _defineProperty(this, \"iconService\", void 0);\n\n    _defineProperty(this, \"markerService\", void 0);\n\n    _defineProperty(this, \"popupService\", void 0);\n\n    _defineProperty(this, \"fontService\", void 0);\n\n    _defineProperty(this, \"interactionService\", void 0);\n\n    _defineProperty(this, \"container\", void 0);\n\n    var id = config.id,\n        map = config.map,\n        canvas = config.canvas,\n        hasBaseMap = config.hasBaseMap;\n    var sceneContainer = createSceneContainer();\n    this.container = sceneContainer;\n    map.setContainer(sceneContainer, id, canvas, hasBaseMap);\n    sceneContainer.bind(TYPES.IRendererService).to(ReglRendererService).inSingletonScope();\n    this.sceneService = sceneContainer.get(TYPES.ISceneService);\n    this.mapService = sceneContainer.get(TYPES.IMapService);\n    this.iconService = sceneContainer.get(TYPES.IIconService);\n    this.fontService = sceneContainer.get(TYPES.IFontService);\n    this.controlService = sceneContainer.get(TYPES.IControlService);\n    this.layerService = sceneContainer.get(TYPES.ILayerService);\n    this.markerService = sceneContainer.get(TYPES.IMarkerService);\n    this.interactionService = sceneContainer.get(TYPES.IInteractionService);\n    this.popupService = sceneContainer.get(TYPES.IPopupService);\n\n    if (isMini) {\n      this.sceneService.initMiniScene(config);\n    } else {\n      this.initComponent(id);\n      this.sceneService.init(config);\n      this.initControl();\n    }\n  }\n\n  _createClass(Scene, [{\n    key: \"map\",\n    get: function get() {\n      return this.mapService.map;\n    }\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this.sceneService.loaded;\n    }\n  }, {\n    key: \"getServiceContainer\",\n    value: function getServiceContainer() {\n      return this.container;\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.mapService.getSize();\n    }\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      return this.mapService.getMinZoom();\n    }\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      return this.mapService.getMaxZoom();\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return this.mapService.getType();\n    }\n  }, {\n    key: \"getMapContainer\",\n    value: function getMapContainer() {\n      return this.mapService.getMapContainer();\n    }\n  }, {\n    key: \"getMapCanvasContainer\",\n    value: function getMapCanvasContainer() {\n      return this.mapService.getMapCanvasContainer();\n    }\n  }, {\n    key: \"getMapService\",\n    value: function getMapService() {\n      return this.mapService;\n    }\n  }, {\n    key: \"exportPng\",\n    value: function exportPng(type) {\n      return this.sceneService.exportPng(type);\n    }\n  }, {\n    key: \"exportMap\",\n    value: function exportMap(type) {\n      return this.sceneService.exportPng(type);\n    }\n  }, {\n    key: \"registerRenderService\",\n    value: function registerRenderService(render) {\n      var _this = this;\n\n      if (this.sceneService.loaded) {\n        var renderSerivce = new render(this);\n        renderSerivce.init();\n      } else {\n        this.on('loaded', function () {\n          var renderSerivce = new render(_this);\n          renderSerivce.init();\n        });\n      }\n    }\n  }, {\n    key: \"setBgColor\",\n    value: function setBgColor(color) {\n      this.mapService.setBgColor(color);\n    }\n  }, {\n    key: \"addLayer\",\n    value: function addLayer(layer) {\n      var layerContainer = createLayerContainer(this.container);\n      layer.setContainer(layerContainer, this.container);\n      this.sceneService.addLayer(layer);\n    }\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      return this.layerService.getLayers();\n    }\n  }, {\n    key: \"getLayer\",\n    value: function getLayer(id) {\n      return this.layerService.getLayer(id);\n    }\n  }, {\n    key: \"getLayerByName\",\n    value: function getLayerByName(name) {\n      return this.layerService.getLayerByName(name);\n    }\n  }, {\n    key: \"removeLayer\",\n    value: function removeLayer(layer, parentLayer) {\n      this.layerService.remove(layer, parentLayer);\n    }\n  }, {\n    key: \"removeAllLayer\",\n    value: function removeAllLayer() {\n      this.layerService.removeAllLayers();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.sceneService.render();\n    }\n  }, {\n    key: \"setEnableRender\",\n    value: function setEnableRender(flag) {\n      this.layerService.setEnableRender(flag);\n    }\n  }, {\n    key: \"addIconFont\",\n    value: function addIconFont(name, fontUnicode) {\n      this.fontService.addIconFont(name, fontUnicode);\n    }\n  }, {\n    key: \"addIconFonts\",\n    value: function addIconFonts(options) {\n      var _this2 = this;\n\n      options.forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            name = _ref2[0],\n            fontUnicode = _ref2[1];\n\n        _this2.fontService.addIconFont(name, fontUnicode);\n      });\n    }\n  }, {\n    key: \"addFontFace\",\n    value: function addFontFace(fontFamily, fontPath) {\n      this.sceneService.addFontFace(fontFamily, fontPath);\n    }\n  }, {\n    key: \"addImage\",\n    value: function addImage(id, img) {\n      if (!isMini) {\n        this.iconService.addImage(id, img);\n      } else {\n        this.iconService.addImageMini(id, img, this.sceneService);\n      }\n    }\n  }, {\n    key: \"hasImage\",\n    value: function hasImage(id) {\n      return this.iconService.hasImage(id);\n    }\n  }, {\n    key: \"removeImage\",\n    value: function removeImage(id) {\n      this.iconService.removeImage(id);\n    }\n  }, {\n    key: \"addIconFontGlyphs\",\n    value: function addIconFontGlyphs(fontFamily, glyphs) {\n      this.fontService.addIconGlyphs(glyphs);\n    }\n  }, {\n    key: \"addControl\",\n    value: function addControl(ctr) {\n      this.controlService.addControl(ctr, this.container);\n    }\n  }, {\n    key: \"removeControl\",\n    value: function removeControl(ctr) {\n      this.controlService.removeControl(ctr);\n    }\n  }, {\n    key: \"getControlByName\",\n    value: function getControlByName(name) {\n      return this.controlService.getControlByName(name);\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      this.markerService.addMarker(marker);\n    }\n  }, {\n    key: \"addMarkerLayer\",\n    value: function addMarkerLayer(layer) {\n      this.markerService.addMarkerLayer(layer);\n    }\n  }, {\n    key: \"removeMarkerLayer\",\n    value: function removeMarkerLayer(layer) {\n      this.markerService.removeMarkerLayer(layer);\n    }\n  }, {\n    key: \"removeAllMakers\",\n    value: function removeAllMakers() {\n      this.markerService.removeAllMarkers();\n    }\n  }, {\n    key: \"addPopup\",\n    value: function addPopup(popup) {\n      this.popupService.addPopup(popup);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, handle) {\n      SceneEventList.indexOf(type) === -1 ? this.mapService.on(type, handle) : this.sceneService.on(type, handle);\n    }\n  }, {\n    key: \"once\",\n    value: function once(type, handle) {\n      SceneEventList.indexOf(type) === -1 ? this.mapService.once(type, handle) : this.sceneService.once(type, handle);\n    }\n  }, {\n    key: \"off\",\n    value: function off(type, handle) {\n      SceneEventList.indexOf(type) === -1 ? this.mapService.off(type, handle) : this.sceneService.off(type, handle);\n    }\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      return this.mapService.getZoom();\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter(options) {\n      return this.mapService.getCenter(options);\n    }\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(center, options) {\n      return this.mapService.setCenter(center, options);\n    }\n  }, {\n    key: \"getPitch\",\n    value: function getPitch() {\n      return this.mapService.getPitch();\n    }\n  }, {\n    key: \"setPitch\",\n    value: function setPitch(pitch) {\n      return this.mapService.setPitch(pitch);\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.mapService.getRotation();\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds() {\n      return this.mapService.getBounds();\n    }\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.mapService.setRotation(rotation);\n    }\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      this.mapService.zoomIn();\n    }\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      this.mapService.zoomOut();\n    }\n  }, {\n    key: \"panTo\",\n    value: function panTo(p) {\n      this.mapService.panTo(p);\n    }\n  }, {\n    key: \"panBy\",\n    value: function panBy(x, y) {\n      this.mapService.panBy(x, y);\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer() {\n      return this.mapService.getContainer();\n    }\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom) {\n      this.mapService.setZoom(zoom);\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bound, options) {\n      var _this$sceneService$ge = this.sceneService.getSceneConfig(),\n          fitBoundsOptions = _this$sceneService$ge.fitBoundsOptions,\n          animate = _this$sceneService$ge.animate;\n\n      this.mapService.fitBounds(bound, options || _objectSpread(_objectSpread({}, fitBoundsOptions), {}, {\n        animate: animate\n      }));\n    }\n  }, {\n    key: \"setZoomAndCenter\",\n    value: function setZoomAndCenter(zoom, center) {\n      this.mapService.setZoomAndCenter(zoom, center);\n    }\n  }, {\n    key: \"setMapStyle\",\n    value: function setMapStyle(style) {\n      this.mapService.setMapStyle(style);\n    }\n  }, {\n    key: \"setMapStatus\",\n    value: function setMapStatus(options) {\n      this.mapService.setMapStatus(options);\n    }\n  }, {\n    key: \"pixelToLngLat\",\n    value: function pixelToLngLat(pixel) {\n      return this.mapService.pixelToLngLat(pixel);\n    }\n  }, {\n    key: \"lngLatToPixel\",\n    value: function lngLatToPixel(lnglat) {\n      return this.mapService.lngLatToPixel(lnglat);\n    }\n  }, {\n    key: \"containerToLngLat\",\n    value: function containerToLngLat(pixel) {\n      return this.mapService.containerToLngLat(pixel);\n    }\n  }, {\n    key: \"lngLatToContainer\",\n    value: function lngLatToContainer(lnglat) {\n      return this.mapService.lngLatToContainer(lnglat);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.sceneService.destroy();\n    }\n  }, {\n    key: \"registerPostProcessingPass\",\n    value: function registerPostProcessingPass(constructor, name) {\n      this.container.bind(TYPES.IPostProcessingPass).to(constructor).whenTargetNamed(name);\n    }\n  }, {\n    key: \"enableShaderPick\",\n    value: function enableShaderPick() {\n      this.layerService.enableShaderPick();\n    }\n  }, {\n    key: \"diasbleShaderPick\",\n    value: function diasbleShaderPick() {\n      this.layerService.disableShaderPick();\n    }\n  }, {\n    key: \"getPointSizeRange\",\n    value: function getPointSizeRange() {\n      return this.sceneService.getPointSizeRange();\n    }\n  }, {\n    key: \"initComponent\",\n    value: function initComponent(id) {\n      this.controlService.init({\n        container: DOM.getContainer(id)\n      }, this.container);\n      this.markerService.init(this.container);\n      this.popupService.init(this.container);\n    }\n  }, {\n    key: \"initControl\",\n    value: function initControl() {\n      var _this$sceneService$ge2 = this.sceneService.getSceneConfig(),\n          logoVisible = _this$sceneService$ge2.logoVisible,\n          logoPosition = _this$sceneService$ge2.logoPosition;\n\n      if (logoVisible) {\n        this.addControl(new Logo({\n          position: logoPosition\n        }));\n      }\n    }\n  }]);\n\n  return Scene;\n}();\n\nexport { Scene };","map":null,"metadata":{},"sourceType":"module"}