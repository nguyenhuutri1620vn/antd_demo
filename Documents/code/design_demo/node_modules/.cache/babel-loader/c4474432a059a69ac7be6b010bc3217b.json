{"ast":null,"code":"import { round } from '../util';\n\nfunction rotate(x, y, rad) {\n  return {\n    x: x * Math.cos(rad) - y * Math.sin(rad),\n    y: x * Math.sin(rad) + y * Math.cos(rad)\n  };\n}\n\nfunction q2c(x1, y1, ax, ay, x2, y2) {\n  const v13 = 1 / 3;\n  const v23 = 2 / 3;\n  return [v13 * x1 + v23 * ax, v13 * y1 + v23 * ay, v13 * x2 + v23 * ax, v13 * y2 + v23 * ay, x2, y2];\n}\n\nfunction a2c(x1, y1, rx, ry, angle, largeArcFlag, sweepFlag, x2, y2, recursive) {\n  // for more information of where this math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  const v120 = Math.PI * 120 / 180;\n  const rad = Math.PI / 180 * (+angle || 0);\n  let res = [];\n  let xy;\n  let f1;\n  let f2;\n  let cx;\n  let cy;\n\n  if (!recursive) {\n    xy = rotate(x1, y1, -rad);\n    x1 = xy.x; // eslint-disable-line\n\n    y1 = xy.y; // eslint-disable-line\n\n    xy = rotate(x2, y2, -rad);\n    x2 = xy.x; // eslint-disable-line\n\n    y2 = xy.y; // eslint-disable-line\n\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = x * x / (rx * rx) + y * y / (ry * ry);\n\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx = h * rx; // eslint-disable-line\n\n      ry = h * ry; // eslint-disable-line\n    }\n\n    const rx2 = rx * rx;\n    const ry2 = ry * ry;\n    const k = (largeArcFlag === sweepFlag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));\n    cx = k * rx * y / ry + (x1 + x2) / 2;\n    cy = k * -ry * x / rx + (y1 + y2) / 2;\n    f1 = Math.asin((y1 - cy) / ry);\n    f2 = Math.asin((y2 - cy) / ry);\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1;\n    }\n\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2;\n    }\n\n    if (sweepFlag && f1 > f2) {\n      f1 -= Math.PI * 2;\n    }\n\n    if (!sweepFlag && f2 > f1) {\n      f2 -= Math.PI * 2;\n    }\n  } else {\n    f1 = recursive[0];\n    f2 = recursive[1];\n    cx = recursive[2];\n    cy = recursive[3];\n  }\n\n  let df = f2 - f1;\n\n  if (Math.abs(df) > v120) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n    f2 = f1 + v120 * (sweepFlag && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2); // eslint-disable-line\n\n    y2 = cy + ry * Math.sin(f2); // eslint-disable-line\n\n    res = a2c(x2, y2, rx, ry, angle, 0, sweepFlag, x2old, y2old, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = 4 / 3 * (rx * t);\n  const hy = 4 / 3 * (ry * t);\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(res);\n  }\n\n  {\n    res = [m2, m3, m4].concat(res).join().split(',');\n    const newres = [];\n    const ii = res.length;\n\n    for (let i = 0; i < ii; i += 1) {\n      newres[i] = i % 2 ? rotate(+res[i - 1], +res[i], rad).y : rotate(+res[i], +res[i + 1], rad).x;\n    }\n\n    return newres;\n  }\n}\n\nfunction parse(pathData) {\n  if (!pathData) {\n    return null;\n  }\n\n  const spaces = '\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000\\u2028\\u2029'; // https://regexper.com/#%28%5Ba-z%5D%29%5B%5Cs%2C%5D*%28%28-%3F%5Cd*%5C.%3F%5C%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*%29%2B%29\n\n  const segmentReg = new RegExp(`([a-z])[${spaces},]*((-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?[${spaces}]*,?[${spaces}]*)+)`, // eslint-disable-line\n  'ig'); // https://regexper.com/#%28-%3F%5Cd*%5C.%3F%5Cd*%28%3F%3Ae%5B%5C-%2B%5D%3F%5Cd%2B%29%3F%29%5B%5Cs%5D*%2C%3F%5B%5Cs%5D*\n\n  const commandParamReg = new RegExp( // eslint-disable-next-line\n  `(-?\\\\d*\\\\.?\\\\d*(?:e[\\\\-+]?\\\\d+)?)[${spaces}]*,?[${spaces}]*`, 'ig');\n  const paramsCount = {\n    a: 7,\n    c: 6,\n    h: 1,\n    l: 2,\n    m: 2,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    z: 0\n  };\n  const segmetns = [];\n  pathData.replace(segmentReg, (input, cmd, args) => {\n    const params = [];\n    let command = cmd.toLowerCase();\n    args.replace(commandParamReg, (a, b) => {\n      if (b) {\n        params.push(+b);\n      }\n\n      return a;\n    });\n\n    if (command === 'm' && params.length > 2) {\n      segmetns.push([cmd, ...params.splice(0, 2)]);\n      command = 'l';\n      cmd = cmd === 'm' ? 'l' : 'L'; // eslint-disable-line\n    }\n\n    const count = paramsCount[command];\n\n    while (params.length >= count) {\n      segmetns.push([cmd, ...params.splice(0, count)]);\n\n      if (!count) {\n        break;\n      }\n    }\n\n    return input;\n  });\n  return segmetns;\n}\n\nfunction abs(pathString) {\n  const pathArray = parse(pathString); // if invalid string, return 'M 0 0'\n\n  if (!pathArray || !pathArray.length) {\n    return [['M', 0, 0]];\n  }\n\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n  const segments = [];\n\n  for (let i = 0, ii = pathArray.length; i < ii; i += 1) {\n    const r = [];\n    segments.push(r);\n    const segment = pathArray[i];\n    const command = segment[0];\n\n    if (command !== command.toUpperCase()) {\n      r[0] = command.toUpperCase();\n\n      switch (r[0]) {\n        case 'A':\n          r[1] = segment[1];\n          r[2] = segment[2];\n          r[3] = segment[3];\n          r[4] = segment[4];\n          r[5] = segment[5];\n          r[6] = +segment[6] + x;\n          r[7] = +segment[7] + y;\n          break;\n\n        case 'V':\n          r[1] = +segment[1] + y;\n          break;\n\n        case 'H':\n          r[1] = +segment[1] + x;\n          break;\n\n        case 'M':\n          mx = +segment[1] + x;\n          my = +segment[2] + y;\n\n          for (let j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y);\n          }\n\n          break;\n\n        default:\n          for (let j = 1, jj = segment.length; j < jj; j += 1) {\n            r[j] = +segment[j] + (j % 2 ? x : y);\n          }\n\n          break;\n      }\n    } else {\n      for (let j = 0, jj = segment.length; j < jj; j += 1) {\n        r[j] = segment[j];\n      }\n    }\n\n    switch (r[0]) {\n      case 'Z':\n        x = +mx;\n        y = +my;\n        break;\n\n      case 'H':\n        x = r[1];\n        break;\n\n      case 'V':\n        y = r[1];\n        break;\n\n      case 'M':\n        mx = r[r.length - 2];\n        my = r[r.length - 1];\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        break;\n\n      default:\n        x = r[r.length - 2];\n        y = r[r.length - 1];\n        break;\n    }\n  }\n\n  return segments;\n}\n\nfunction normalize(path) {\n  const pathArray = abs(path);\n  const attrs = {\n    x: 0,\n    y: 0,\n    bx: 0,\n    by: 0,\n    X: 0,\n    Y: 0,\n    qx: null,\n    qy: null\n  };\n\n  function processPath(path, d, pcom) {\n    let nx;\n    let ny;\n\n    if (!path) {\n      return ['C', d.x, d.y, d.x, d.y, d.x, d.y];\n    }\n\n    if (!(path[0] in {\n      T: 1,\n      Q: 1\n    })) {\n      d.qx = null;\n      d.qy = null;\n    }\n\n    switch (path[0]) {\n      case 'M':\n        d.X = path[1];\n        d.Y = path[2];\n        break;\n\n      case 'A':\n        if (parseFloat(path[1]) === 0 || parseFloat(path[2]) === 0) {\n          // https://www.w3.org/TR/SVG/paths.html#ArcOutOfRangeParameters\n          // \"If either rx or ry is 0, then this arc is treated as a\n          // straight line segment (a \"lineto\") joining the endpoints.\"\n          return ['L', path[6], path[7]];\n        }\n\n        return ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\n      case 'S':\n        if (pcom === 'C' || pcom === 'S') {\n          // In 'S' case we have to take into account, if the previous command is C/S.\n          nx = d.x * 2 - d.bx; // And reflect the previous\n\n          ny = d.y * 2 - d.by; // command's control point relative to the current point.\n        } else {\n          // or some else or nothing\n          nx = d.x;\n          ny = d.y;\n        }\n\n        return ['C', nx, ny].concat(path.slice(1));\n\n      case 'T':\n        if (pcom === 'Q' || pcom === 'T') {\n          // In 'T' case we have to take into account, if the previous command is Q/T.\n          d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\n          d.qy = d.y * 2 - d.qy; // to case 'S'.\n        } else {\n          // or something else or nothing\n          d.qx = d.x;\n          d.qy = d.y;\n        }\n\n        return ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\n      case 'Q':\n        d.qx = path[1];\n        d.qy = path[2];\n        return ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\n      case 'H':\n        return ['L'].concat(path[1], d.y);\n\n      case 'V':\n        return ['L'].concat(d.x, path[1]);\n\n      case 'L':\n        break;\n\n      case 'Z':\n        break;\n\n      default:\n        break;\n    }\n\n    return path;\n  }\n\n  function fixArc(pp, i) {\n    if (pp[i].length > 7) {\n      pp[i].shift();\n      const pi = pp[i];\n\n      while (pi.length) {\n        // if created multiple 'C's, their original seg is saved\n        commands[i] = 'A';\n        i += 1; // eslint-disable-line\n\n        pp.splice(i, 0, ['C'].concat(pi.splice(0, 6)));\n      }\n\n      pp.splice(i, 1);\n      ii = pathArray.length;\n    }\n  }\n\n  const commands = []; // path commands of original path p\n\n  let prevCommand = ''; // holder for previous path command of original path\n\n  let ii = pathArray.length;\n\n  for (let i = 0; i < ii; i += 1) {\n    let command = ''; // temporary holder for original path command\n\n    if (pathArray[i]) {\n      command = pathArray[i][0]; // save current path command\n    }\n\n    if (command !== 'C') {\n      // C is not saved yet, because it may be result of conversion\n      commands[i] = command; // Save current path command\n\n      if (i > 0) {\n        prevCommand = commands[i - 1]; // Get previous path command pcom\n      }\n    } // Previous path command is inputted to processPath\n\n\n    pathArray[i] = processPath(pathArray[i], attrs, prevCommand);\n\n    if (commands[i] !== 'A' && command === 'C') {\n      commands[i] = 'C'; // 'A' is the only command\n    } // which may produce multiple 'C's\n    // so we have to make sure that 'C' is also 'C' in original path\n\n\n    fixArc(pathArray, i); // fixArc adds also the right amount of 'A's to pcoms\n\n    const seg = pathArray[i];\n    const seglen = seg.length;\n    attrs.x = seg[seglen - 2];\n    attrs.y = seg[seglen - 1];\n    attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;\n    attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;\n  } // make sure normalized path data string starts with an M segment\n\n\n  if (!pathArray[0][0] || pathArray[0][0] !== 'M') {\n    pathArray.unshift(['M', 0, 0]);\n  }\n\n  return pathArray;\n}\n/**\n * Converts provided SVG path data string into a normalized path data string.\n *\n * The normalization uses a restricted subset of path commands; all segments\n * are translated into lineto, curveto, moveto, and closepath segments.\n *\n * Relative path commands are changed into their absolute counterparts,\n * and chaining of coordinates is disallowed.\n *\n * The function will always return a valid path data string; if an input\n * string cannot be normalized, 'M 0 0' is returned.\n */\n\n\nexport function normalizePathData(pathData) {\n  return normalize(pathData).map(segment => segment.map(item => typeof item === 'string' ? item : round(item, 2))).join(',').split(',').join(' ');\n}","map":null,"metadata":{},"sourceType":"module"}