{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"../../util\");\n\nvar Point =\n/** @class */\nfunction () {\n  /**\n   * 平面坐标\n   * @param x x坐标\n   * @param y y坐标\n   * @param round 是否取整\n   */\n  function Point(x, y, round) {\n    this.x = round ? Math.round(x) : x;\n    this.y = round ? Math.round(y) : y;\n  }\n\n  Point.prototype.clone = function () {\n    return new Point(this.x, this.y);\n  };\n\n  Point.prototype.add = function (point, y, round) {\n    return this.clone()._add(toPoint(point, y, round));\n  };\n\n  Point.prototype._add = function (point) {\n    this.x += point.x;\n    this.y += point.y;\n    return this;\n  };\n\n  Point.prototype.subtract = function (point, y, round) {\n    return this.clone()._subtract(toPoint(point, y, round));\n  };\n\n  Point.prototype._subtract = function (point) {\n    this.x -= point.x;\n    this.y -= point.y;\n    return this;\n  };\n\n  Point.prototype.divideBy = function (num) {\n    return this.clone()._divideBy(num);\n  };\n\n  Point.prototype._divideBy = function (num) {\n    this.x /= num;\n    this.y /= num;\n    return this;\n  };\n\n  Point.prototype.multiplyBy = function (num) {\n    return this.clone()._multiplyBy(num);\n  };\n\n  Point.prototype._multiplyBy = function (num) {\n    this.x *= num;\n    this.y *= num;\n    return this;\n  };\n\n  Point.prototype.scaleBy = function (point) {\n    return new Point(this.x * point.x, this.y * point.y);\n  };\n\n  Point.prototype.unscaleBy = function (point) {\n    return new Point(this.x / point.x, this.y / point.y);\n  };\n\n  Point.prototype.round = function () {\n    return this.clone()._round();\n  };\n\n  Point.prototype._round = function () {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    return this;\n  };\n\n  Point.prototype.floor = function () {\n    return this.clone()._floor();\n  };\n\n  Point.prototype._floor = function () {\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    return this;\n  };\n\n  Point.prototype.ceil = function () {\n    return this.clone()._ceil();\n  };\n\n  Point.prototype._ceil = function () {\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    return this;\n  };\n\n  Point.prototype.trunc = function () {\n    return this.clone()._trunc();\n  };\n\n  Point.prototype._trunc = function () {\n    this.x = util_1.trunc(this.x);\n    this.y = util_1.trunc(this.y);\n    return this;\n  };\n\n  Point.prototype.distanceTo = function (point) {\n    var newPoint = toPoint(point);\n    var x = newPoint.x - this.x;\n    var y = newPoint.y - this.y;\n    return Math.sqrt(x * x + y * y);\n  };\n\n  Point.prototype.equals = function (point, threshold) {\n    var newPoint = toPoint(point);\n    var margin = Math.max(Math.abs(this.x - newPoint.x), Math.abs(this.y - newPoint.y));\n    return margin <= (threshold === undefined ? 1.0e-9 : threshold);\n  };\n\n  Point.prototype.contains = function (point) {\n    var newPoint = toPoint(point);\n    return Math.abs(newPoint.x) <= Math.abs(this.x) && Math.abs(newPoint.y) <= Math.abs(this.y);\n  };\n\n  Point.prototype.toString = function () {\n    return \"Point(\" + util_1.formatNum(this.x) + \", \" + util_1.formatNum(this.y) + \")\";\n  };\n\n  return Point;\n}();\n\nexports.Point = Point;\n\nfunction toPoint(x, y, round) {\n  if (x instanceof Point) {\n    return x;\n  }\n\n  if (Array.isArray(x)) {\n    return new Point(x[0], x[1]);\n  }\n\n  if (x === undefined || x === null) {\n    return x;\n  }\n\n  if (typeof x === 'object' && 'x' in x && 'y' in x) {\n    return new Point(x.x, x.y);\n  }\n\n  return new Point(x, y, round);\n}\n\nexports.toPoint = toPoint;","map":null,"metadata":{},"sourceType":"script"}