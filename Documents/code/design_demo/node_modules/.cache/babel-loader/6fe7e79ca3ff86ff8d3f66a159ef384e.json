{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { Canvas as GCanvas } from '@antv/g-canvas';\nimport { Canvas as GSVGCanvas } from '@antv/g-svg';\nimport { ext } from '@antv/matrix-util';\nimport { clone, deepMix, each, isString, isNumber } from '@antv/util';\nimport { AbstractGraph } from '@antv/g6-core';\nimport Global from '../global';\nimport { LayoutController, EventController } from './controller';\nimport { createDom } from '@antv/dom-util';\nvar transform = ext.transform;\nvar SVG = 'svg';\n\nvar Graph =\n/** @class */\nfunction (_super) {\n  __extends(Graph, _super);\n\n  function Graph(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    var defaultNode = _this.get('defaultNode');\n\n    if (!defaultNode) {\n      _this.set('defaultNode', {\n        type: 'circle'\n      });\n    }\n\n    if (!defaultNode.type) {\n      defaultNode.type = 'circle';\n\n      _this.set('defaultNode', defaultNode);\n    }\n\n    _this.destroyed = false;\n    return _this;\n  }\n\n  Graph.prototype.initLayoutController = function () {\n    var layoutController = new LayoutController(this);\n    this.set({\n      layoutController: layoutController\n    });\n  };\n\n  Graph.prototype.initEventController = function () {\n    var eventController = new EventController(this);\n    this.set({\n      eventController: eventController\n    });\n  };\n\n  Graph.prototype.initCanvas = function () {\n    var container = this.get('container');\n\n    if (typeof container === 'string') {\n      container = document.getElementById(container);\n      this.set('container', container);\n    }\n\n    if (!container) {\n      throw new Error('invalid container');\n    }\n\n    var clientWidth = container.clientWidth,\n        clientHeight = container.clientHeight;\n    var width = this.get('width') || clientWidth;\n    var height = this.get('height') || clientHeight;\n\n    if (!this.get('width') && !this.get('height')) {\n      this.set('width', clientWidth);\n      this.set('height', clientHeight);\n    }\n\n    var renderer = this.get('renderer');\n    var canvas;\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: container,\n        width: width,\n        height: height\n      });\n    } else {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n    }\n\n    this.set('canvas', canvas);\n  };\n\n  Graph.prototype.initPlugins = function () {\n    var self = this;\n    each(self.get('plugins'), function (plugin) {\n      if (!plugin.destroyed && plugin.initPlugin) {\n        plugin.initPlugin(self);\n      }\n    });\n  };\n  /**\n  * 增加图片下载水印功能\n  */\n\n\n  Graph.prototype.downloadImageWatermark = function (watermarker, context, width, height) {\n    return __awaiter(this, void 0, void 0, function () {\n      var watermarkStr, watermarkbase64, img;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            watermarkStr = watermarker.style.backgroundImage;\n            watermarkbase64 = watermarkStr.slice(5, watermarkStr.length - 2);\n            img = new Image();\n            img.src = watermarkbase64;\n            return [4\n            /*yield*/\n            , new Promise(function (resolve) {\n              img.onload = function () {\n                var pat = context.createPattern(img, \"repeat\");\n                context.rect(0, 0, width, height);\n                context.fillStyle = pat;\n                context.fill();\n                resolve('');\n              };\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * 用于生成图片 (异步callback)\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {string} backgroundColor 图片背景色\n   * @return {string} 图片 dataURL\n   */\n\n\n  Graph.prototype.asyncToDataUrl = function (type, backgroundColor, callback, widths, heights, vCanvasEl) {\n    var _this = this;\n\n    var watermarker = document.querySelector('.g6-graph-watermarker');\n    var canvas = this.get('canvas');\n    var renderer = canvas.getRenderer();\n    var canvasDom = vCanvasEl || canvas.get('el');\n    var dataURL = '';\n    if (!type) type = 'image/png';\n    setTimeout(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var cloneNode, svgDocType, svgDoc, svgData, imageData, context, width, height, compositeOperation, pixelRatio;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!(renderer === 'svg')) return [3\n              /*break*/\n              , 1];\n              cloneNode = canvasDom.cloneNode(true);\n              svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n              svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n              svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n              svgData = new XMLSerializer().serializeToString(svgDoc);\n              dataURL = \"data:image/svg+xml;charset=utf8,\".concat(encodeURIComponent(svgData));\n              return [3\n              /*break*/\n              , 4];\n\n            case 1:\n              imageData = void 0;\n              context = canvasDom.getContext('2d');\n              width = widths || this.get('width');\n              height = heights || this.get('height');\n              compositeOperation = void 0;\n              if (!watermarker) return [3\n              /*break*/\n              , 3];\n              return [4\n              /*yield*/\n              , this.downloadImageWatermark(watermarker, context, width, height)];\n\n            case 2:\n              _a.sent();\n\n              _a.label = 3;\n\n            case 3:\n              if (backgroundColor) {\n                pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n\n                try {\n                  imageData = context.getImageData(0, 0, width * pixelRatio, height * pixelRatio);\n                  compositeOperation = context.globalCompositeOperation;\n                  context.globalCompositeOperation = 'destination-over';\n                  context.fillStyle = backgroundColor;\n                  context.fillRect(0, 0, width, height);\n                } catch (error) {\n                  console.error('Download image failed. Out of memory at ImageData creation');\n                }\n              }\n\n              dataURL = canvasDom.toDataURL(type);\n\n              if (backgroundColor) {\n                context.clearRect(0, 0, width, height);\n                context.putImageData(imageData, 0, 0);\n                context.globalCompositeOperation = compositeOperation;\n              }\n\n              _a.label = 4;\n\n            case 4:\n              if (callback) callback(dataURL);\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }, 16);\n  };\n  /**\n   * 返回可见区域的图的 dataUrl，用于生成图片\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {string} backgroundColor 图片背景色\n   * @return {string} 图片 dataURL\n   */\n\n\n  Graph.prototype.toDataURL = function (type, backgroundColor) {\n    var canvas = this.get('canvas');\n    var renderer = canvas.getRenderer();\n    var canvasDom = canvas.get('el');\n    if (!type) type = 'image/png';\n    var dataURL = '';\n\n    if (renderer === 'svg') {\n      var cloneNode = canvasDom.cloneNode(true);\n      var svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n      var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n      svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n      var svgData = new XMLSerializer().serializeToString(svgDoc);\n      dataURL = \"data:image/svg+xml;charset=utf8,\".concat(encodeURIComponent(svgData));\n    } else {\n      var imageData = void 0;\n      var context = canvasDom.getContext('2d');\n      var width = this.get('width');\n      var height = this.get('height');\n      var compositeOperation = void 0;\n\n      if (backgroundColor) {\n        var pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n\n        try {\n          imageData = context.getImageData(0, 0, width * pixelRatio, height * pixelRatio);\n          compositeOperation = context.globalCompositeOperation;\n          context.globalCompositeOperation = 'destination-over';\n          context.fillStyle = backgroundColor;\n          context.fillRect(0, 0, width, height);\n        } catch (error) {\n          console.error('Download image failed. Out of memory at ImageData creation');\n        }\n      }\n\n      dataURL = canvasDom.toDataURL(type);\n\n      if (backgroundColor) {\n        context.clearRect(0, 0, width, height);\n        context.putImageData(imageData, 0, 0);\n        context.globalCompositeOperation = compositeOperation;\n      }\n    }\n\n    return dataURL;\n  };\n  /**\n   * 返回整个图（包括超出可见区域的部分）的 dataUrl，用于生成图片\n   * @param {Function} callback 异步生成 dataUrl 完成后的回调函数，在这里处理生成的 dataUrl 字符串\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {Object} imageConfig 图片配置项，包括背景色和上下左右的 padding\n   */\n\n\n  Graph.prototype.toFullDataURL = function (callback, type, imageConfig) {\n    var bbox = this.get('group').getCanvasBBox();\n    var height = bbox.height;\n    var width = bbox.width;\n    var renderer = this.get('renderer');\n    var vContainerDOM = createDom('<div id=\"virtual-image\"></div>');\n    var backgroundColor = imageConfig ? imageConfig.backgroundColor : undefined;\n    var padding = imageConfig ? imageConfig.padding : undefined;\n    if (!padding) padding = [0, 0, 0, 0];else if (isNumber(padding)) padding = [padding, padding, padding, padding];\n    var vHeight = height + padding[0] + padding[2];\n    var vWidth = width + padding[1] + padding[3];\n    var canvasOptions = {\n      container: vContainerDOM,\n      height: vHeight,\n      width: vWidth,\n      quickHit: true\n    };\n    var vCanvas = renderer === 'svg' ? new GSVGCanvas(canvasOptions) : new GCanvas(canvasOptions);\n    var group = this.get('group');\n    var vGroup = group.clone();\n    var matrix = clone(vGroup.getMatrix());\n    if (!matrix) matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var centerX = (bbox.maxX + bbox.minX) / 2;\n    var centerY = (bbox.maxY + bbox.minY) / 2;\n    matrix = transform(matrix, [['t', -centerX, -centerY], ['t', width / 2 + padding[3], height / 2 + padding[0]]]);\n    vGroup.resetMatrix();\n    vGroup.setMatrix(matrix);\n    vCanvas.add(vGroup);\n    var vCanvasEl = vCanvas.get('el');\n    var dataURL = '';\n    if (!type) type = 'image/png';\n    setTimeout(function () {\n      if (renderer === 'svg') {\n        var cloneNode = vCanvasEl.cloneNode(true);\n        var svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n        var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n        svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n        var svgData = new XMLSerializer().serializeToString(svgDoc);\n        dataURL = \"data:image/svg+xml;charset=utf8,\".concat(encodeURIComponent(svgData));\n      } else {\n        var imageData = void 0;\n        var context = vCanvasEl.getContext('2d');\n        var compositeOperation = void 0;\n\n        if (backgroundColor) {\n          var pixelRatio = typeof window !== 'undefined' ? window.devicePixelRatio : 1;\n\n          try {\n            imageData = context.getImageData(0, 0, vWidth * pixelRatio, vHeight * pixelRatio);\n            compositeOperation = context.globalCompositeOperation;\n            context.globalCompositeOperation = 'destination-over';\n            context.fillStyle = backgroundColor;\n            context.fillRect(0, 0, vWidth, vHeight);\n          } catch (error) {\n            console.error('Download image failed. Out of memory at ImageData creation');\n          }\n        }\n\n        dataURL = vCanvasEl.toDataURL(type);\n\n        if (backgroundColor) {\n          context.clearRect(0, 0, vWidth, vHeight);\n          context.putImageData(imageData, 0, 0);\n          context.globalCompositeOperation = compositeOperation;\n        }\n      }\n\n      if (callback) callback(dataURL);\n    }, 16);\n  };\n  /**\n   * 导出包含全图的图片\n   * @param {String} name 图片的名称\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {Object} imageConfig 图片配置项，包括背景色和上下左右的 padding\n   */\n\n\n  Graph.prototype.downloadFullImage = function (name, type, imageConfig) {\n    var _this = this;\n\n    var bbox = this.get('group').getCanvasBBox();\n    var height = bbox.height;\n    var width = bbox.width;\n    var renderer = this.get('renderer');\n    var vContainerDOM = createDom('<div id=\"virtual-image\"></div>');\n    var watermarker = document.querySelector('.g6-graph-watermarker');\n    var backgroundColor = imageConfig ? imageConfig.backgroundColor : undefined;\n    var padding = imageConfig ? imageConfig.padding : undefined;\n    if (!padding) padding = [0, 0, 0, 0];else if (isNumber(padding)) padding = [padding, padding, padding, padding];\n    var vHeight = height + padding[0] + padding[2];\n    var vWidth = width + padding[1] + padding[3];\n\n    if (watermarker) {\n      var _a = this.get('graphWaterMarker').cfg || {},\n          wmWidth = _a.width,\n          wmHeight = _a.height;\n\n      vHeight = Math.ceil(vHeight / wmHeight) * wmHeight;\n      vWidth = Math.ceil(vWidth / wmWidth) * wmWidth;\n    }\n\n    var canvasOptions = {\n      container: vContainerDOM,\n      height: vHeight,\n      width: vWidth\n    };\n    var vCanvas = renderer === 'svg' ? new GSVGCanvas(canvasOptions) : new GCanvas(canvasOptions);\n    var group = this.get('group');\n    var vGroup = group.clone();\n    var matrix = clone(vGroup.getMatrix());\n    if (!matrix) matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var centerX = (bbox.maxX + bbox.minX) / 2;\n    var centerY = (bbox.maxY + bbox.minY) / 2;\n    matrix = transform(matrix, [['t', -centerX, -centerY], ['t', width / 2 + padding[3], height / 2 + padding[0]]]);\n    vGroup.resetMatrix();\n    vGroup.setMatrix(matrix);\n    vCanvas.add(vGroup);\n    var vCanvasEl = vCanvas.get('el');\n    if (!type) type = 'image/png';\n    this.asyncToDataUrl(type, backgroundColor, function (dataURL) {\n      var link = document.createElement('a');\n      var fileName = (name || 'graph') + (renderer === 'svg' ? '.svg' : \".\".concat(type.split('/')[1]));\n\n      _this.dataURLToImage(dataURL, renderer, link, fileName);\n\n      var e = document.createEvent('MouseEvents');\n      e.initEvent('click', false, false);\n      link.dispatchEvent(e);\n    }, vWidth, vHeight, vCanvasEl);\n  };\n  /**\n   * 画布导出图片，图片仅包含画布可见区域部分内容\n   * @param {String} name 图片的名称\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {string} backgroundColor 图片背景色\n   */\n\n\n  Graph.prototype.downloadImage = function (name, type, backgroundColor) {\n    var _this = this;\n\n    var self = this;\n\n    if (self.isAnimating()) {\n      self.stopAnimate();\n    }\n\n    var canvas = self.get('canvas');\n    var renderer = canvas.getRenderer();\n    if (!type) type = 'image/png';\n    var fileName = (name || 'graph') + (renderer === 'svg' ? '.svg' : type.split('/')[1]);\n    var link = document.createElement('a');\n    self.asyncToDataUrl(type, backgroundColor, function (dataURL) {\n      _this.dataURLToImage(dataURL, renderer, link, fileName);\n\n      var e = document.createEvent('MouseEvents');\n      e.initEvent('click', false, false);\n      link.dispatchEvent(e);\n    });\n  };\n\n  Graph.prototype.dataURLToImage = function (dataURL, renderer, link, fileName) {\n    if (!dataURL || dataURL === 'data:') {\n      console.error('Download image failed. The graph is too large or there is invalid attribute values in graph items');\n      return;\n    }\n\n    if (typeof window !== 'undefined') {\n      if (window.Blob && window.URL && renderer !== 'svg') {\n        var arr = dataURL.split(',');\n        var mime = '';\n\n        if (arr && arr.length > 0) {\n          var match = arr[0].match(/:(.*?);/); // eslint-disable-next-line prefer-destructuring\n\n          if (match && match.length >= 2) mime = match[1];\n        }\n\n        var bstr = atob(arr[1]);\n        var n = bstr.length;\n        var u8arr = new Uint8Array(n);\n\n        while (n--) {\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n\n        var blobObj_1 = new Blob([u8arr], {\n          type: mime\n        });\n\n        if (window.navigator.msSaveBlob) {\n          window.navigator.msSaveBlob(blobObj_1, fileName);\n        } else {\n          link.addEventListener('click', function () {\n            link.download = fileName;\n            link.href = window.URL.createObjectURL(blobObj_1);\n          });\n        }\n      } else {\n        link.addEventListener('click', function () {\n          link.download = fileName;\n          link.href = dataURL;\n        });\n      }\n    }\n  };\n  /**\n   * 添加插件\n   * @param {object} plugin 插件实例\n   */\n\n\n  Graph.prototype.addPlugin = function (plugin) {\n    var self = this;\n\n    if (plugin.destroyed) {\n      return;\n    }\n\n    self.get('plugins').push(plugin);\n    plugin.initPlugin(self);\n  };\n  /**\n   * 添加插件\n   * @param {object} plugin 插件实例\n   */\n\n\n  Graph.prototype.removePlugin = function (plugin) {\n    var plugins = this.get('plugins');\n    var index = plugins.indexOf(plugin);\n\n    if (index >= 0) {\n      plugin.destroyPlugin();\n      plugins.splice(index, 1);\n    }\n  };\n  /**\n   * 设置图片水印\n   * @param {string} imgURL 图片水印的url地址\n   * @param {WaterMarkerConfig} config 文本水印的配置项\n   */\n\n\n  Graph.prototype.setImageWaterMarker = function (imgURL, config) {\n    if (imgURL === void 0) {\n      imgURL = Global.waterMarkerImage;\n    }\n\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n    }\n\n    if (!container.style.position) {\n      container.style.position = 'relative';\n    }\n\n    var canvas = this.get('graphWaterMarker');\n    var waterMarkerConfig = deepMix({}, Global.imageWaterMarkerConfig, config);\n    var width = waterMarkerConfig.width,\n        height = waterMarkerConfig.height,\n        compatible = waterMarkerConfig.compatible,\n        image = waterMarkerConfig.image;\n\n    if (!canvas) {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height,\n        capture: false\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n      this.set('graphWaterMarker', canvas);\n    }\n\n    canvas.get('el').style.display = 'none';\n    var ctx = canvas.get('context');\n    var rotate = image.rotate,\n        x = image.x,\n        y = image.y; // 旋转20度\n\n    ctx.rotate(-rotate * Math.PI / 180);\n    var img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.src = imgURL;\n\n    img.onload = function () {\n      ctx.drawImage(img, x, y, image.width, image.height); // 恢复旋转角度\n\n      ctx.rotate(rotate * Math.PI / 180); // 默认按照现代浏览器处理\n\n      if (!compatible) {\n        var box = document.querySelector('.g6-graph-watermarker');\n\n        if (!box) {\n          box = document.createElement('div');\n          box.className = 'g6-graph-watermarker';\n        }\n\n        box.className = 'g6-graph-watermarker';\n\n        if (!canvas.destroyed) {\n          box.style.cssText = \"background-image: url(\".concat(canvas.get('el').toDataURL('image/png'), \");background-repeat:repeat;position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:none;z-index:-1;\");\n          container.appendChild(box);\n        }\n      } else {\n        // 当需要兼容不支持 pointer-events属性的浏览器时，将 compatible 设置为 true\n        container.style.cssText = \"background-image: url(\".concat(canvas.get('el').toDataURL('image/png'), \");background-repeat:repeat;\");\n      }\n    };\n  };\n  /**\n   * 设置文本水印\n   * @param {string[]} texts 水印的文本内容\n   * @param {WaterMarkerConfig} config 文本水印的配置项\n   */\n\n\n  Graph.prototype.setTextWaterMarker = function (texts, config) {\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n    }\n\n    if (!container.style.position) {\n      container.style.position = 'relative';\n    }\n\n    var canvas = this.get('graphWaterMarker');\n    var waterMarkerConfig = deepMix({}, Global.textWaterMarkerConfig, config);\n    var width = waterMarkerConfig.width,\n        height = waterMarkerConfig.height,\n        compatible = waterMarkerConfig.compatible,\n        text = waterMarkerConfig.text;\n\n    if (!canvas) {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height,\n        capture: false\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n      this.set('graphWaterMarker', canvas);\n    }\n\n    canvas.get('el').style.display = 'none';\n    var ctx = canvas.get('context');\n    var rotate = text.rotate,\n        fill = text.fill,\n        fontFamily = text.fontFamily,\n        fontSize = text.fontSize,\n        baseline = text.baseline,\n        x = text.x,\n        y = text.y,\n        lineHeight = text.lineHeight; // 旋转20度\n\n    ctx.rotate(-rotate * Math.PI / 180); // 设置文字样式\n\n    ctx.font = \"\".concat(fontSize, \"px \").concat(fontFamily); // 设置文字颜色\n\n    ctx.fillStyle = fill;\n    ctx.textBaseline = baseline;\n\n    for (var i = texts.length - 1; i >= 0; i--) {\n      // 将文字绘制到画布\n      ctx.fillText(texts[i], x, y + i * lineHeight);\n    } // 恢复旋转角度\n\n\n    ctx.rotate(rotate * Math.PI / 180); // 默认按照现代浏览器处理\n\n    if (!compatible) {\n      var box = document.querySelector('.g6-graph-watermarker');\n\n      if (!box) {\n        box = document.createElement('div');\n        box.className = 'g6-graph-watermarker';\n      }\n\n      box.style.cssText = \"background-image: url(\".concat(canvas.get('el').toDataURL('image/png'), \");background-repeat:repeat;position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:none;z-index:99;\");\n      container.appendChild(box);\n    } else {\n      // 当需要兼容不支持 pointer-events属性的浏览器时，将 compatible 设置为 true\n      container.style.cssText = \"background-image: url(\".concat(canvas.get('el').toDataURL('image/png'), \");background-repeat:repeat;\");\n    }\n  };\n  /**\n   * 销毁画布\n   */\n\n\n  Graph.prototype.destroy = function () {\n    var _a, _b, _c, _d;\n\n    each(this.get('plugins'), function (plugin) {\n      plugin.destroyPlugin();\n    }); // destroy tooltip doms, removed when upgrade G6 4.0\n\n    var tooltipDOMs = this.get('tooltips');\n\n    if (tooltipDOMs) {\n      for (var i = 0; i < tooltipDOMs.length; i++) {\n        var container = tooltipDOMs[i];\n        if (!container) continue;\n        var parent_1 = container.parentElement;\n        if (!parent_1) continue;\n        parent_1.removeChild(container);\n      }\n    }\n\n    (_a = this.get('eventController')) === null || _a === void 0 ? void 0 : _a.destroy();\n    (_b = this.get('layoutController')) === null || _b === void 0 ? void 0 : _b.destroy(); // this.get('eventController').destroy();\n    // this.get('itemController').destroy();\n    // this.get('modeController').destroy();\n    // this.get('viewController').destroy();\n    // this.get('stateController').destroy();\n    // this.get('canvas').destroy();\n\n    (_c = this.get('graphWaterMarker')) === null || _c === void 0 ? void 0 : _c.destroy();\n    (_d = document.querySelector('.g6-graph-watermarker')) === null || _d === void 0 ? void 0 : _d.remove();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  return Graph;\n}(AbstractGraph);\n\nexport default Graph;","map":null,"metadata":{},"sourceType":"module"}