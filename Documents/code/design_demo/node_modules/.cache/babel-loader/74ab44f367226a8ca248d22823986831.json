{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport G6 from '@antv/g6';\nimport { deepClone, Log } from '../../utils';\nvar defaultMinimapCfg = {\n  show: false,\n  size: [150, 100],\n  type: 'keyShape'\n};\nexport var getGraphSize = function (width, height, container) {\n  var CANVAS_WIDTH;\n  var CANVAS_HEIGHT;\n\n  if (container && container.current) {\n    CANVAS_WIDTH = container.current.offsetWidth;\n    CANVAS_HEIGHT = container.current.offsetHeight || 500;\n  }\n\n  if (!width && !CANVAS_WIDTH || !height && !CANVAS_HEIGHT) {\n    Log.warn('请为 Graph 指定 width 与 height！否则将使用默认值 500 * 500');\n    return [500, 500];\n  }\n\n  return [width || CANVAS_WIDTH || 500, height || CANVAS_HEIGHT || 500];\n};\nexport var processMinimap = function (cfg, graph) {\n  if (!graph || graph.destroyed) return;\n\n  if (cfg && cfg.show) {\n    var curMminimapCfg = Object.assign(defaultMinimapCfg, cfg);\n    var minimap = new G6.Minimap(__assign({}, curMminimapCfg));\n    graph.addPlugin(minimap);\n    return minimap;\n  }\n\n  return null;\n};\n\nvar uuid = function () {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}; // 同一页面存在多 graph 时需要指定 graphId\n\n\nexport var getGraphId = function (graph) {\n  if (graph.current) {\n    return graph.current;\n  }\n\n  graph.current = \"IndentedTreeGraph-\".concat(uuid());\n  return graph.current;\n};\nexport var renderGraph = function (graph, data) {\n  var originData = deepClone(data);\n  graph.data(originData);\n  graph.render();\n}; // 事件绑定，兼容历史数据\n\nexport var bindEvents = function (graph, props) {\n  var handleEdgeClick = props.handleEdgeClick,\n      handleEdgeHover = props.handleEdgeHover,\n      handleEdgeUnHover = props.handleEdgeUnHover,\n      handleNodeClick = props.handleNodeClick,\n      handleNodeHover = props.handleNodeHover,\n      handleNodeUnHover = props.handleNodeUnHover,\n      handleCanvasClick = props.handleCanvasClick;\n  graph.on('edge:mouseenter', function (evt) {\n    var item = evt.item;\n    graph.setItemState(item, 'hover', true);\n    handleEdgeHover === null || handleEdgeHover === void 0 ? void 0 : handleEdgeHover(item, graph);\n  });\n  graph.on('edge:mouseleave', function (evt) {\n    var item = evt.item;\n    graph.setItemState(item, 'hover', false);\n    handleEdgeUnHover === null || handleEdgeUnHover === void 0 ? void 0 : handleEdgeUnHover(item, graph);\n  });\n  graph.on('edge:click', function (evt) {\n    var item = evt.item;\n    handleEdgeClick === null || handleEdgeClick === void 0 ? void 0 : handleEdgeClick(item, graph);\n  });\n  graph.on('edge:touchstart', function (evt) {\n    var item = evt.item;\n    handleEdgeClick === null || handleEdgeClick === void 0 ? void 0 : handleEdgeClick(item, graph);\n  });\n  graph.on('node:mouseenter', function (evt) {\n    var item = evt.item;\n    graph.setItemState(item, 'hover', true);\n    handleNodeHover === null || handleNodeHover === void 0 ? void 0 : handleNodeHover(item, graph);\n  });\n  graph.on('node:mouseleave', function (evt) {\n    var item = evt.item;\n    graph.setItemState(item, 'hover', false);\n    handleNodeUnHover === null || handleNodeUnHover === void 0 ? void 0 : handleNodeUnHover(item, graph);\n  });\n  graph.on('node:click', function (evt) {\n    var item = evt.item;\n    handleNodeClick === null || handleNodeClick === void 0 ? void 0 : handleNodeClick(item, graph);\n  });\n  graph.on('canvas:click', function () {\n    handleCanvasClick === null || handleCanvasClick === void 0 ? void 0 : handleCanvasClick(graph);\n  });\n  graph.on('canvas:touchstart', function () {\n    handleCanvasClick === null || handleCanvasClick === void 0 ? void 0 : handleCanvasClick(graph);\n  });\n};\n/**\n * 设置 props 默认值\n * props 会在对应图表和 hooks 里面使用，不想加个很长的赋值表达式。\n * layout 使用 merge\n */\n\nexport var useProps = function (props, defaultProps) {\n  return __assign(__assign(__assign({}, defaultProps), props), {\n    layout: __assign(__assign({}, defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.layout), props === null || props === void 0 ? void 0 : props.layout)\n  });\n};","map":null,"metadata":{},"sourceType":"module"}