{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Dom } from '../util';\nimport { ModifierKey } from '../types';\nimport { Base } from './base';\nexport class ScrollerManager extends Base {\n  get widgetOptions() {\n    return this.options.scroller;\n  }\n\n  get pannable() {\n    if (this.widgetOptions) {\n      if (typeof this.widgetOptions.pannable === 'object') {\n        return this.widgetOptions.pannable.enabled;\n      }\n\n      return !!this.widgetOptions.pannable;\n    }\n\n    return false;\n  }\n\n  init() {\n    this.widget = this.graph.hook.createScroller();\n    this.startListening();\n    this.updateClassName();\n\n    if (this.widget) {\n      this.widget.center();\n    }\n  }\n\n  startListening() {\n    let eventTypes = [];\n    const pannable = this.widgetOptions.pannable;\n\n    if (typeof pannable === 'object') {\n      eventTypes = pannable.eventTypes || [];\n    } else {\n      eventTypes = ['leftMouseDown'];\n    }\n\n    if (eventTypes.includes('leftMouseDown')) {\n      this.graph.on('blank:mousedown', this.preparePanning, this);\n      this.graph.on('node:unhandled:mousedown', this.preparePanning, this);\n      this.graph.on('edge:unhandled:mousedown', this.preparePanning, this);\n    }\n\n    if (eventTypes.includes('rightMouseDown')) {\n      this.onRightMouseDown = this.onRightMouseDown.bind(this);\n      this.view.$(this.widget.container).on('mousedown', this.onRightMouseDown);\n    }\n  }\n\n  stopListening() {\n    let eventTypes = [];\n    const pannable = this.widgetOptions.pannable;\n\n    if (typeof pannable === 'object') {\n      eventTypes = pannable.eventTypes || [];\n    } else {\n      eventTypes = ['leftMouseDown'];\n    }\n\n    if (eventTypes.includes('leftMouseDown')) {\n      this.graph.off('blank:mousedown', this.preparePanning, this);\n      this.graph.off('node:unhandled:mousedown', this.preparePanning, this);\n      this.graph.off('edge:unhandled:mousedown', this.preparePanning, this);\n    }\n\n    if (eventTypes.includes('rightMouseDown')) {\n      this.view.$(this.widget.container).off('mousedown', this.onRightMouseDown);\n    }\n  }\n\n  onRightMouseDown(e) {\n    if (e.button === 2 && this.allowPanning(e, true) && this.widget) {\n      this.updateClassName(true);\n      this.widget.startPanning(e);\n      this.widget.once('pan:stop', () => this.updateClassName(false));\n    }\n  }\n\n  preparePanning(_ref) {\n    let {\n      e\n    } = _ref;\n\n    if (this.widget) {\n      if (this.allowPanning(e, true) || this.allowPanning(e) && !this.graph.selection.allowRubberband(e, true)) {\n        this.updateClassName(true);\n        this.widget.startPanning(e);\n        this.widget.once('pan:stop', () => this.updateClassName(false));\n      }\n    }\n  }\n\n  allowPanning(e, strict) {\n    return this.widget && this.pannable && ModifierKey.isMatch(e, this.widgetOptions.modifiers, strict) && this.graph.hook.allowPanning(e);\n  }\n\n  updateClassName(isPanning) {\n    if (this.widget == null) {\n      return;\n    }\n\n    const container = this.widget.container;\n    const pannable = this.view.prefixClassName('graph-scroller-pannable');\n\n    if (this.pannable) {\n      Dom.addClass(container, pannable);\n      container.dataset.panning = (!!isPanning).toString(); // Use dataset to control scroller panning style to avoid reflow caused by changing classList\n    } else {\n      Dom.removeClass(container, pannable);\n    }\n  }\n\n  enablePanning() {\n    if (!this.pannable) {\n      this.widgetOptions.pannable = true;\n      this.updateClassName(); // if (\n      //   ModifierKey.equals(\n      //     this.graph.options.scroller.modifiers,\n      //     this.graph.options.selecting.modifiers,\n      //   )\n      // ) {\n      //   this.graph.selection.disableRubberband()\n      // }\n    }\n  }\n\n  disablePanning() {\n    if (this.pannable) {\n      this.widgetOptions.pannable = false;\n      this.updateClassName();\n    }\n  }\n\n  lock() {\n    if (this.widget) {\n      this.widget.lock();\n    }\n  }\n\n  unlock() {\n    if (this.widget) {\n      this.widget.unlock();\n    }\n  }\n\n  update() {\n    if (this.widget) {\n      this.widget.update();\n    }\n  }\n\n  enableAutoResize() {\n    if (this.widget) {\n      this.widget.enableAutoResize();\n    }\n  }\n\n  disableAutoResize() {\n    if (this.widget) {\n      this.widget.disableAutoResize();\n    }\n  }\n\n  resize(width, height) {\n    if (this.widget) {\n      this.widget.resize(width, height);\n    }\n  }\n\n  dispose() {\n    if (this.widget) {\n      this.widget.dispose();\n    }\n\n    this.stopListening();\n  }\n\n}\n\n__decorate([Base.dispose()], ScrollerManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}