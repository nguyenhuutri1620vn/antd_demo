{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { FIELD_ORIGIN } from '../constant';\nimport Geometry from './base';\nimport Element from './element';\n/** 引入对应的 ShapeFactory */\n\nimport './shape/line';\nimport { isModelChange } from './util/is-model-change';\nimport { diff } from './util/diff';\n/**\n * Path 几何标记。\n * 用于绘制路径图等。\n */\n\nvar Path =\n/** @class */\nfunction (_super) {\n  __extends(Path, _super);\n\n  function Path(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.type = 'path';\n    _this.shapeType = 'line';\n    var _a = cfg.connectNulls,\n        connectNulls = _a === void 0 ? false : _a,\n        _b = cfg.showSinglePoint,\n        showSinglePoint = _b === void 0 ? true : _b;\n    _this.connectNulls = connectNulls;\n    _this.showSinglePoint = showSinglePoint;\n    return _this;\n  }\n  /**\n   * 创建所有的 Element 实例，对于 Path、Line、Area，一组数据对应一个 Element。\n   * @param mappingData\n   * @param [isUpdate]\n   * @returns elements\n   */\n\n\n  Path.prototype.updateElements = function (mappingDataArray, isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = false;\n    } // Path 的每个 element 对应一组数据\n\n\n    var keyData = new Map();\n    var keyIndex = new Map();\n    var keys = [];\n    var index = 0;\n\n    for (var i = 0; i < mappingDataArray.length; i++) {\n      var mappingData = mappingDataArray[i];\n      var key = this.getElementId(mappingData);\n      keys.push(key);\n      keyData.set(key, mappingData);\n      keyIndex.set(key, index);\n      index++;\n    }\n\n    this.elements = new Array(index);\n\n    var _a = diff(this.lastElementsMap, keys),\n        added = _a.added,\n        updated = _a.updated,\n        removed = _a.removed;\n\n    for (var _i = 0, added_1 = added; _i < added_1.length; _i++) {\n      var key = added_1[_i];\n      var mappingData = keyData.get(key);\n      var shapeFactory = this.getShapeFactory();\n      var shapeCfg = this.getShapeInfo(mappingData);\n      var i = keyIndex.get(key);\n      var element = new Element({\n        shapeFactory: shapeFactory,\n        container: this.container,\n        offscreenGroup: this.getOffscreenGroup(),\n        elementIndex: i\n      });\n      element.geometry = this;\n      element.animate = this.animateOption;\n      element.draw(shapeCfg, isUpdate); // 绘制 shape\n\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (var _b = 0, updated_1 = updated; _b < updated_1.length; _b++) {\n      var key = updated_1[_b];\n      var mappingData = keyData.get(key);\n      var element = this.lastElementsMap[key];\n      var i = keyIndex.get(key);\n      var shapeCfg = this.getShapeInfo(mappingData);\n      var preShapeCfg = element.getModel();\n\n      if (this.isCoordinateChanged || isModelChange(preShapeCfg, shapeCfg)) {\n        element.animate = this.animateOption; // 通过绘制数据的变更来判断是否需要更新，因为用户有可能会修改图形属性映射\n\n        element.update(shapeCfg); // 更新对应的 element\n      }\n\n      this.elementsMap[key] = element;\n      this.elements[i] = element;\n    }\n\n    for (var _c = 0, removed_1 = removed; _c < removed_1.length; _c++) {\n      var key = removed_1[_c];\n      var element = this.lastElementsMap[key]; // 更新动画配置，用户有可能在更新之前有对动画进行配置操作\n\n      element.animate = this.animateOption;\n      element.destroy();\n    }\n  };\n  /**\n   * 获取组成一条线（一组数据）的所有点以及数据\n   * @param mappingData 映射后的数组\n   */\n\n\n  Path.prototype.getPointsAndData = function (mappingData) {\n    var points = [];\n    var data = [];\n\n    for (var i = 0, len = mappingData.length; i < len; i++) {\n      var obj = mappingData[i];\n      points.push({\n        x: obj.x,\n        y: obj.y\n      });\n      data.push(obj[FIELD_ORIGIN]);\n    }\n\n    return {\n      points: points,\n      data: data\n    };\n  };\n\n  Path.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n\n    var _a = this.getPointsAndData(mappingData),\n        points = _a.points,\n        data = _a.data;\n\n    shapeCfg.mappingData = mappingData;\n    shapeCfg.data = data;\n    shapeCfg.isStack = !!this.getAdjust('stack');\n    shapeCfg.points = points;\n    shapeCfg.connectNulls = this.connectNulls;\n    shapeCfg.showSinglePoint = this.showSinglePoint;\n    return shapeCfg;\n  };\n\n  return Path;\n}(Geometry);\n\nexport default Path;","map":null,"metadata":{},"sourceType":"module"}