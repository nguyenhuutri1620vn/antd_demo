{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { registerShape } from '../base';\nimport { getPathPoints } from '../util/get-path-points';\nimport { getStyle } from '../util/get-style';\nimport { getLineMarker } from './util';\n\nvar interpolateCallback = function (point, nextPoint, shapeType) {\n  var x = point.x;\n  var y = point.y;\n  var nextX = nextPoint.x;\n  var nextY = nextPoint.y;\n  var result;\n\n  switch (shapeType) {\n    case 'hv':\n      result = [{\n        x: nextX,\n        y: y\n      }];\n      break;\n\n    case 'vh':\n      result = [{\n        x: x,\n        y: nextY\n      }];\n      break;\n\n    case 'hvh':\n      var middleX = (nextX + x) / 2;\n      result = [{\n        x: middleX,\n        y: y\n      }, {\n        x: middleX,\n        y: nextY\n      }];\n      break;\n\n    case 'vhv':\n      var middleY = (y + nextY) / 2;\n      result = [{\n        x: x,\n        y: middleY\n      }, {\n        x: nextX,\n        y: middleY\n      }];\n      break;\n\n    default:\n      break;\n  }\n\n  return result;\n};\n\nfunction getInterpolatePoints(points, shapeType) {\n  var result = [];\n  each(points, function (point, index) {\n    var nextPoint = points[index + 1];\n    result.push(point);\n\n    if (nextPoint) {\n      var interpolatePoint = interpolateCallback(point, nextPoint, shapeType);\n      result = result.concat(interpolatePoint);\n    }\n  });\n  return result;\n} // 插值的图形path，不考虑null\n\n\nfunction getInterpolatePath(points) {\n  return points.map(function (point, index) {\n    return index === 0 ? ['M', point.x, point.y] : ['L', point.x, point.y];\n  });\n} // 插值的图形\n\n\nfunction getInterpolateShapeAttrs(cfg, shapeType) {\n  var points = getPathPoints(cfg.points, cfg.connectNulls, cfg.showSinglePoint); // 根据 connectNulls 值处理 points\n\n  var path = [];\n  each(points, function (eachLinePoints) {\n    var interpolatePoints = getInterpolatePoints(eachLinePoints, shapeType);\n    path = path.concat(getInterpolatePath(interpolatePoints));\n  });\n  return __assign(__assign({}, getStyle(cfg, true, false, 'lineWidth')), {\n    path: path\n  });\n} // step line\n\n\neach(['hv', 'vh', 'hvh', 'vhv'], function (shapeType) {\n  registerShape('line', shapeType, {\n    draw: function (cfg, container) {\n      var attrs = getInterpolateShapeAttrs(cfg, shapeType);\n      var shape = container.addShape({\n        type: 'path',\n        attrs: attrs,\n        name: 'line'\n      });\n      return shape;\n    },\n    getMarker: function (markerCfg) {\n      return getLineMarker(markerCfg, shapeType);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}