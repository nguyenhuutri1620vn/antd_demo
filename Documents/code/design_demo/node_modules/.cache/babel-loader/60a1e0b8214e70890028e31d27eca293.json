{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/**\n * 基于 G 的时间轴组件\n */\n\n\nimport { Canvas as GCanvas } from '@antv/g-canvas';\nimport { Canvas as GSVGCanvas } from '@antv/g-svg';\nimport { createDom, modifyCSS } from '@antv/dom-util';\nimport Base from '../base';\nimport TrendTimeBar from './trendTimeBar';\nimport TimeBarSlice from './timeBarSlice';\nimport { VALUE_CHANGE } from './constant';\nimport { isString, throttle } from '@antv/util'; // simple 版本默认高度\n\nvar DEFAULT_SIMPLE_HEIGHT = 4; // trend 版本默认高度\n\nvar DEFAULT_TREND_HEIGHT = 26;\n\nvar TimeBar =\n/** @class */\nfunction (_super) {\n  __extends(TimeBar, _super);\n\n  function TimeBar(config) {\n    return _super.call(this, config) || this;\n  }\n\n  TimeBar.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-component-timebar',\n      padding: 10,\n      type: 'trend',\n      trend: {\n        data: [],\n        isArea: false,\n        smooth: true\n      },\n      controllerCfg: {\n        speed: 1,\n        loop: false\n      },\n      slider: {\n        start: 0.1,\n        end: 0.9,\n        minText: 'min',\n        maxText: 'max'\n      },\n      tick: {\n        start: 0.1,\n        end: 0.9,\n        data: []\n      },\n      textStyle: {},\n      filterEdge: false,\n      filterItemTypes: ['node'],\n      containerCSS: {}\n    };\n  };\n  /**\n   * 初始化 TimeBar 的容器\n   */\n\n\n  TimeBar.prototype.initContainer = function () {\n    var graph = this.get('graph');\n    var _a = this._cfgs,\n        width = _a.width,\n        height = _a.height;\n    var className = this.get('className') || 'g6-component-timebar';\n    var container = this.get('container');\n    var graphContainer = this.get('graph').get('container');\n    var timeBarContainer;\n\n    if (!container) {\n      timeBarContainer = createDom(\"<div class='\".concat(className, \"'></div>\"));\n      modifyCSS(timeBarContainer, {\n        position: 'relative'\n      });\n    } else {\n      if (isString(container)) {\n        container = document.getElementById(container);\n      }\n\n      timeBarContainer = container;\n    }\n\n    graphContainer.appendChild(timeBarContainer);\n    this.set('timeBarContainer', timeBarContainer);\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === 'SVG') {\n      canvas = new GSVGCanvas({\n        container: timeBarContainer,\n        width: width,\n        height: height\n      });\n    } else {\n      canvas = new GCanvas({\n        container: timeBarContainer,\n        width: width,\n        height: height\n      });\n    } // 根据传入的参数修改容器 CSS 样式\n\n\n    if (this.get('containerCSS')) modifyCSS(timeBarContainer, this.get('containerCSS'));\n    this.set('canvas', canvas);\n  };\n\n  TimeBar.prototype.init = function () {\n    this.initContainer();\n    var canvas = this.get('canvas');\n    var timeBarGroup = canvas.addGroup({\n      name: 'timebar-group'\n    });\n    this.set('timeBarGroup', timeBarGroup);\n    this.renderTrend();\n    this.initEvent();\n    var fontFamily = typeof window !== 'undefined' ? window.getComputedStyle(document.body, null).getPropertyValue('font-family') || 'Arial, sans-serif' : 'Arial, sans-serif';\n    this.set('fontFamily', fontFamily);\n  };\n\n  TimeBar.prototype.renderTrend = function () {\n    var _this = this;\n\n    var _a = this._cfgs,\n        width = _a.width,\n        x = _a.x,\n        y = _a.y,\n        padding = _a.padding,\n        type = _a.type,\n        trend = _a.trend,\n        slider = _a.slider,\n        controllerCfg = _a.controllerCfg,\n        textStyle = _a.textStyle,\n        tick = _a.tick,\n        backgroundStyle = _a.backgroundStyle,\n        foregroundStyle = _a.foregroundStyle;\n\n    var data = trend.data,\n        other = __rest(trend, [\"data\"]);\n\n    var realWidth = width - 2 * padding;\n    var defaultHeight = type === 'trend' ? DEFAULT_TREND_HEIGHT : DEFAULT_SIMPLE_HEIGHT;\n    var graph = this.get('graph');\n    var group = this.get('timeBarGroup');\n    var canvas = this.get('canvas');\n    var timebar = null;\n\n    if (type === 'trend' || type === 'simple') {\n      var getValue_1 = this.get('getValue');\n      timebar = new TrendTimeBar(__assign(__assign({\n        graph: graph,\n        canvas: canvas,\n        group: group,\n        type: type,\n        x: x + padding,\n        y: type === 'trend' ? y + padding : y + padding + 15,\n        width: realWidth,\n        height: defaultHeight,\n        padding: padding,\n        backgroundStyle: backgroundStyle,\n        foregroundStyle: foregroundStyle,\n        trendCfg: __assign(__assign({}, other), {\n          data: data.map(function (d) {\n            return (getValue_1 === null || getValue_1 === void 0 ? void 0 : getValue_1(d)) || d.value;\n          })\n        })\n      }, slider), {\n        tick: {\n          ticks: data,\n          tickLabelFormatter: tick.tickLabelFormatter,\n          tickLabelStyle: tick.tickLabelStyle,\n          tickLineStyle: tick.tickLineStyle\n        },\n        handlerStyle: __assign(__assign({}, slider.handlerStyle), {\n          height: slider.height || defaultHeight\n        }),\n        controllerCfg: controllerCfg,\n        textStyle: textStyle\n      }));\n    } else if (type === 'tick') {\n      // 刻度时间轴\n      timebar = new TimeBarSlice(__assign({\n        graph: graph,\n        canvas: canvas,\n        group: group,\n        x: x + padding,\n        y: y + padding,\n        width: width,\n        height: 42,\n        padding: 2\n      }, tick));\n    } // 鼠标按下左/右滑块或范围条后在任意地方释放，都触发暂停播放\n\n\n    var handleMouseUp = function handleMouseUp() {\n      var timebarInstance = _this.get('timebar');\n\n      timebarInstance.draggingHandler = false;\n\n      if (timebarInstance.isPlay) {\n        timebarInstance.isPlay = false;\n        timebarInstance.currentHandler = timebarInstance.maxHandlerShape;\n        timebarInstance.changePlayStatus();\n      }\n\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n\n    canvas.on('mousedown', function (e) {\n      if (e.target.get('name') === 'maxHandlerShape-handler' || e.target.get('name') === 'minHandlerShape-handler' || e.target === timebar.foregroundShape) {\n        document.addEventListener('mouseup', handleMouseUp);\n      }\n    });\n    this.set('timebar', timebar);\n  };\n\n  TimeBar.prototype.filterData = function (evt) {\n    var _a;\n\n    var value = evt.value;\n    var trendData = null;\n    var type = this._cfgs.type;\n\n    if (type === 'trend' || type === 'simple') {\n      trendData = this._cfgs.trend.data;\n    } else if (type === 'tick') {\n      trendData = this._cfgs.tick.data;\n    }\n\n    if (!trendData || trendData.length === 0) {\n      console.warn('请配置 TimeBar 组件的数据');\n      return;\n    }\n\n    var rangeChange = this.get('rangeChange');\n    var graph = this.get('graph');\n    var min = Math.round(trendData.length * value[0]);\n    var max = Math.round(trendData.length * value[1]);\n    max = max >= trendData.length ? trendData.length - 1 : max;\n    min = min >= trendData.length ? trendData.length - 1 : min;\n    var tickLabelFormatter = (_a = this._cfgs.tick) === null || _a === void 0 ? void 0 : _a.tickLabelFormatter;\n    var minText = tickLabelFormatter ? tickLabelFormatter(trendData[min]) : trendData[min].date;\n    var maxText = tickLabelFormatter ? tickLabelFormatter(trendData[max]) : trendData[max].date;\n\n    if (type !== 'tick') {\n      var timebar = this.get('timebar');\n      timebar.setText(minText, maxText);\n    }\n\n    if (rangeChange) {\n      rangeChange(graph, minText, maxText);\n    } else {\n      // 自动过滤数据，并渲染 graph\n      if (!this.cacheGraphData || this.cacheGraphData.nodes && this.cacheGraphData.nodes.length === 0) {\n        this.cacheGraphData = graph.get('data'); // graph.save() as GraphData;\n      }\n\n      var filterItemTypes = this.get('filterItemTypes');\n      var changeData = this.get('changeData'); // 过滤不在 min 和 max 范围内的节点\n\n      var getDate_1 = this.get('getDate');\n      var shouldIgnore_1 = this.get('shouldIgnore');\n      var minDate_1 = trendData[min].date,\n          maxDate_1 = trendData[max].date;\n\n      if (changeData || changeData === undefined) {\n        var filterNodes = this.cacheGraphData.nodes;\n        var filterEdges = this.cacheGraphData.edges;\n\n        if (filterItemTypes.includes('node')) {\n          filterNodes = filterNodes.filter(function (node) {\n            var date = +((getDate_1 === null || getDate_1 === void 0 ? void 0 : getDate_1(node)) || node.date);\n            return date >= minDate_1 && date <= maxDate_1 || (shouldIgnore_1 === null || shouldIgnore_1 === void 0 ? void 0 : shouldIgnore_1('node', node, {\n              min: minDate_1,\n              max: maxDate_1\n            }));\n          });\n          var nodeIds_1 = filterNodes.map(function (node) {\n            return node.id;\n          });\n\n          if (filterEdges) {\n            // 过滤 source 或 target 不在 min 和 max 范围内的边\n            filterEdges = filterEdges.filter(function (edge) {\n              return nodeIds_1.includes(edge.source) && nodeIds_1.includes(edge.target) || (shouldIgnore_1 === null || shouldIgnore_1 === void 0 ? void 0 : shouldIgnore_1('edge', edge, {\n                min: minDate_1,\n                max: maxDate_1\n              }));\n            });\n          }\n        }\n\n        if (this.get('filterEdge') || filterItemTypes.includes('edge')) {\n          filterEdges = filterEdges.filter(function (edge) {\n            var date = +((getDate_1 === null || getDate_1 === void 0 ? void 0 : getDate_1(edge)) || edge.date);\n            return date >= minDate_1 && date <= maxDate_1 || (shouldIgnore_1 === null || shouldIgnore_1 === void 0 ? void 0 : shouldIgnore_1('edge', edge, {\n              min: minDate_1,\n              max: maxDate_1\n            }));\n          });\n        }\n\n        graph.changeData({\n          nodes: filterNodes,\n          edges: filterEdges\n        });\n      } else {\n        if (filterItemTypes.includes('node')) {\n          graph.getNodes().forEach(function (node) {\n            var model = node.getModel();\n            if (shouldIgnore_1 === null || shouldIgnore_1 === void 0 ? void 0 : shouldIgnore_1('node', model, {\n              min: minDate_1,\n              max: maxDate_1\n            })) return;\n            var date = +((getDate_1 === null || getDate_1 === void 0 ? void 0 : getDate_1(model)) || model.date);\n\n            if (date < minDate_1 || date > maxDate_1) {\n              graph.hideItem(node);\n            } else {\n              graph.showItem(node);\n            }\n          });\n        }\n\n        if (this.get('filterEdge') || filterItemTypes.includes('edge')) {\n          graph.getEdges().forEach(function (edge) {\n            var model = edge.getModel();\n            if (shouldIgnore_1 === null || shouldIgnore_1 === void 0 ? void 0 : shouldIgnore_1('edge', model, {\n              min: trendData[min].date,\n              max: trendData[max].date\n            })) return;\n            var date = +((getDate_1 === null || getDate_1 === void 0 ? void 0 : getDate_1(model)) || model.date);\n\n            if (date < trendData[min].date || date > trendData[max].date) {\n              graph.hideItem(edge);\n            } else {\n              graph.showItem(edge);\n            }\n          });\n        }\n      }\n    }\n  };\n\n  TimeBar.prototype.initEvent = function () {\n    var _this = this;\n\n    var start = 0;\n    var end = 0;\n    var type = this._cfgs.type;\n\n    if (!type || type === 'trend' || type === 'simple') {\n      start = this._cfgs.slider.start;\n      end = this._cfgs.slider.end;\n    } else if (type === 'tick') {\n      start = this._cfgs.tick.start;\n      end = this._cfgs.tick.end;\n    }\n\n    var graph = this.get('graph');\n    graph.on('afterrender', function (e) {\n      _this.filterData({\n        value: [start, end]\n      });\n    }); // 时间轴的值发生改变的事件\n\n    graph.on(VALUE_CHANGE, throttle(function (e) {\n      _this.filterData(e);\n    }, 200, {\n      trailing: true,\n      leading: true\n    }));\n  };\n\n  TimeBar.prototype.destroy = function () {\n    var timebar = this.get('timebar');\n\n    if (timebar && timebar.destory) {\n      timebar.destory();\n    }\n\n    _super.prototype.destroy.call(this);\n\n    var timeBarContainer = this.get('timeBarContainer');\n\n    if (timeBarContainer) {\n      var container = this.get('container');\n\n      if (!container) {\n        container = this.get('graph').get('container');\n      }\n\n      if (isString(container)) {\n        container = document.getElementById(container);\n      }\n\n      container.removeChild(timeBarContainer);\n    }\n  };\n\n  return TimeBar;\n}(Base);\n\nexport default TimeBar;","map":null,"metadata":{},"sourceType":"module"}