{"ast":null,"code":"import React, { useState, useRef, memo } from 'react';\nimport { render, createPortal } from 'react-dom';\nimport { useXFlowApp } from '@antv/xflow-core';\nimport { Button } from 'antd';\nimport { SketchPicker } from 'react-color';\nimport { PREFIX } from '../constants';\n\nconst ColorPicker = props => {\n  const {\n    label,\n    value = '',\n    onChange\n  } = props;\n  const [show, setShow] = useState(false);\n  const colorRef = useRef(value);\n  const {\n    graphProvider\n  } = useXFlowApp();\n  const graphConfig = useRef();\n  graphProvider.getGraphOptions().then(x6GraphConfig => {\n    graphConfig.current = x6GraphConfig;\n  });\n\n  const PickContainer = () => {\n    return React.createElement(\"div\", {\n      className: `${PREFIX}-pick-color-container`\n    }, React.createElement(\"div\", {\n      className: `${PREFIX}-popover`\n    }, React.createElement(SketchPicker, {\n      onChange: color => {\n        colorRef.current = color.hex;\n      }\n    }), React.createElement(\"div\", {\n      className: \"foolter\"\n    }, React.createElement(Button, {\n      onClick: () => {\n        setShow(false);\n      }\n    }, \"\\u53D6\\u6D88\"), React.createElement(Button, {\n      type: \"primary\",\n      onClick: () => {\n        onChange === null || onChange === void 0 ? void 0 : onChange(colorRef.current);\n        setShow(false);\n      }\n    }, \"\\u786E\\u8BA4\"))));\n  };\n\n  const createPickColorContainer = visible => {\n    const existElements = document.getElementsByClassName(`${PREFIX}-pick-color-container`);\n\n    if (existElements.length) {\n      Array.from(existElements).forEach(ele => {\n        var _a;\n\n        (_a = ele.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(ele);\n      });\n    }\n\n    if (!visible) {\n      return;\n    }\n\n    const div = document.createElement('div');\n    render(createPortal(React.createElement(PickContainer, null), document.getElementsByTagName('body')[0]), div);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"group\"\n  }, label && React.createElement(\"label\", null, label), React.createElement(\"div\", {\n    className: `${PREFIX}-color-container`,\n    onClick: () => {\n      setShow(true);\n    }\n  }, React.createElement(\"div\", {\n    className: `${PREFIX}-color`,\n    style: {\n      backgroundColor: value,\n      height: '100%'\n    }\n  })), createPickColorContainer(show));\n};\n\nexport default memo(ColorPicker, (pre, next) => {\n  return pre.label === next.label && pre.value === next.value;\n});","map":null,"metadata":{},"sourceType":"module"}