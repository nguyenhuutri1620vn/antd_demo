{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Disposable } from './disposable';\nexport class Dictionary extends Disposable {\n  constructor() {\n    super();\n    this.clear();\n  }\n\n  clear() {\n    this.map = new WeakMap();\n    this.arr = [];\n  }\n\n  has(key) {\n    return this.map.has(key);\n  }\n\n  get(key) {\n    return this.map.get(key);\n  }\n\n  set(key, value) {\n    this.map.set(key, value);\n    this.arr.push(key);\n  }\n\n  delete(key) {\n    const index = this.arr.indexOf(key);\n\n    if (index >= 0) {\n      this.arr.splice(index, 1);\n    }\n\n    const ret = this.map.get(key);\n    this.map.delete(key);\n    return ret;\n  }\n\n  each(iterator) {\n    this.arr.forEach(key => {\n      const value = this.map.get(key);\n      iterator(value, key);\n    });\n  }\n\n  dispose() {\n    this.clear();\n  }\n\n}\n\n__decorate([Disposable.dispose()], Dictionary.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}