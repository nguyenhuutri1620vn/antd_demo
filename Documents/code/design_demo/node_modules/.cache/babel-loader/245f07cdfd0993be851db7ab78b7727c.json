{"ast":null,"code":"/*\n * Given a list of entries of the form {v, barycenter, weight} and a\n * constraint graph this function will resolve any conflicts between the\n * constraint graph and the barycenters for the entries. If the barycenters for\n * an entry would violate a constraint in the constraint graph then we coalesce\n * the nodes in the conflict into a new node that respects the contraint and\n * aggregates barycenter and weight information.\n *\n * This implementation is based on the description in Forster, \"A Fast and\n * Simple Hueristic for Constrained Two-Level Crossing Reduction,\" thought it\n * differs in some specific details.\n *\n * Pre-conditions:\n *\n *    1. Each entry has the form {v, barycenter, weight}, or if the node has\n *       no barycenter, then {v}.\n *\n * Returns:\n *\n *    A new list of entries of the form {vs, i, barycenter, weight}. The list\n *    `vs` may either be a singleton or it may be an aggregation of nodes\n *    ordered such that they do not violate constraints from the constraint\n *    graph. The property `i` is the lowest original index of any of the\n *    elements in `vs`.\n */\nconst resolveConflicts = (entries, cg) => {\n  var _a, _b, _c;\n\n  const mappedEntries = {};\n  entries === null || entries === void 0 ? void 0 : entries.forEach((entry, i) => {\n    const tmp = mappedEntries[entry.v] = {\n      i,\n      indegree: 0,\n      \"in\": [],\n      out: [],\n      vs: [entry.v]\n    };\n\n    if (entry.barycenter !== undefined) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n  (_a = cg.edges()) === null || _a === void 0 ? void 0 : _a.forEach(e => {\n    const entryV = mappedEntries[e.v];\n    const entryW = mappedEntries[e.w];\n\n    if (entryV !== undefined && entryW !== undefined) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  }); // @ts-ignore\n\n  const sourceSet = (_c = (_b = Object.values(mappedEntries)).filter) === null || _c === void 0 ? void 0 : _c.call(_b, entry => !entry.indegree);\n  return doResolveConflicts(sourceSet);\n};\n\nconst doResolveConflicts = sourceSet => {\n  var _a, _b;\n\n  const entries = [];\n\n  const handleIn = vEntry => {\n    return uEntry => {\n      if (uEntry.merged) return;\n\n      if (uEntry.barycenter === undefined || vEntry.barycenter === undefined || uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  };\n\n  const handleOut = vEntry => {\n    return wEntry => {\n      wEntry[\"in\"].push(vEntry);\n\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  };\n\n  while (sourceSet === null || sourceSet === void 0 ? void 0 : sourceSet.length) {\n    const entry = sourceSet.pop();\n    entries.push(entry);\n    (_a = entry[\"in\"].reverse()) === null || _a === void 0 ? void 0 : _a.forEach(e => handleIn(entry)(e));\n    (_b = entry.out) === null || _b === void 0 ? void 0 : _b.forEach(e => handleOut(entry)(e));\n  }\n\n  const filtered = entries.filter(entry => !entry.merged);\n  const keys = [\"vs\", \"i\", \"barycenter\", \"weight\"];\n  return filtered.map(entry => {\n    const picked = {};\n    keys === null || keys === void 0 ? void 0 : keys.forEach(key => {\n      if (entry[key] === undefined) return;\n      picked[key] = entry[key];\n    });\n    return picked;\n  });\n};\n\nconst mergeEntries = (target, source) => {\n  var _a;\n\n  let sum = 0;\n  let weight = 0;\n\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n\n  target.vs = (_a = source.vs) === null || _a === void 0 ? void 0 : _a.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n};\n\nexport default resolveConflicts;","map":null,"metadata":{},"sourceType":"module"}