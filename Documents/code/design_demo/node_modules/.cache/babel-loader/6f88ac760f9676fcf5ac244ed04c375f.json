{"ast":null,"code":"/**\n * Root Container\n * @see /dev-docs/IoC 容器、依赖注入与服务说明.md\n */\nimport 'reflect-metadata';\nimport { Container } from 'inversify';\nimport getDecorators from 'inversify-inject-decorators';\nimport { ComponentManager } from './ComponentManager';\nimport { ResourcePool } from './components/framegraph/ResourcePool';\nimport { FrameGraphSystem } from './components/framegraph/System';\nimport { GeometryComponent } from './components/geometry/GeometryComponent';\nimport { GeometrySystem } from './components/geometry/System'; // import { InteractionSystem } from './components/interaction/System';\n\nimport { MaterialComponent } from './components/material/MaterialComponent';\nimport { MaterialSystem } from './components/material/System';\nimport { CullableComponent } from './components/mesh/CullableComponent';\nimport { MeshComponent } from './components/mesh/MeshComponent';\nimport { MeshSystem } from './components/mesh/System';\nimport { CopyPass } from './components/renderer/passes/CopyPass';\nimport { PixelPickingPass } from './components/renderer/passes/PixelPickingPass';\nimport { RenderPass } from './components/renderer/passes/RenderPass';\nimport { RendererSystem } from './components/renderer/System';\nimport { HierarchyComponent } from './components/scenegraph/HierarchyComponent';\nimport { NameComponent } from './components/scenegraph/NameComponent';\nimport { SceneGraphSystem } from './components/scenegraph/System';\nimport { TransformComponent } from './components/scenegraph/TransformComponent';\nimport { IDENTIFIER } from './identifier';\nimport { ConfigService } from './services/config/ConfigService';\nimport { InteractorService } from './services/interactor/IteractorService';\nimport ShaderModuleService from './services/shader-module/ShaderModuleService'; // @see https://github.com/inversify/InversifyJS/blob/master/wiki/container_api.md#defaultscope\n\nexport var container = new Container(); // @see https://github.com/inversify/InversifyJS/blob/master/wiki/inheritance.md#what-can-i-do-when-my-base-class-is-provided-by-a-third-party-module\n// decorate(injectable(), EventEmitter);\n// container.bind(IDENTIFIER.IEventEmitter).to(EventEmitter);\n// 支持使用 new 而非容器实例化的场景，同时禁止 lazyInject cache\n// @see https://github.com/inversify/inversify-inject-decorators#caching-vs-non-caching-behaviour\n\nvar DECORATORS = getDecorators(container, false); // Add babel legacy decorators support\n// @see https://github.com/inversify/InversifyJS/issues/1050\n// @see https://github.com/inversify/InversifyJS/issues/1026#issuecomment-504936034\n\nexport var lazyInject = function lazyInject(serviceIdentifier) {\n  var original = DECORATORS.lazyInject(serviceIdentifier); // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n\n  return function (proto, key, descriptor) {\n    // make it work as usual\n    original.call(this, proto, key); // return link to proto, so own value wont be 'undefined' after component's creation\n\n    if (descriptor) {\n      descriptor.initializer = function () {\n        return proto[key];\n      };\n    }\n  };\n};\nexport var lazyMultiInject = function lazyMultiInject(serviceIdentifier) {\n  var original = DECORATORS.lazyMultiInject(serviceIdentifier); // the 'descriptor' parameter is actually always defined for class fields for Babel, but is considered undefined for TSC\n  // so we just hack it with ?/! combination to avoid \"TS1240: Unable to resolve signature of property decorator when called as an expression\"\n\n  return function (proto, key, descriptor) {\n    // make it work as usual\n    original.call(this, proto, key);\n\n    if (descriptor) {\n      // return link to proto, so own value wont be 'undefined' after component's creation\n      descriptor.initializer = function () {\n        return proto[key];\n      };\n    }\n  };\n};\n/** global services */\n\ncontainer.bind(IDENTIFIER.ShaderModuleService).to(ShaderModuleService).inSingletonScope();\n/**\n * bind global component managers in root container\n */\n\ncontainer.bind(IDENTIFIER.NameComponentManager).toConstantValue(new ComponentManager(NameComponent));\ncontainer.bind(IDENTIFIER.HierarchyComponentManager).toConstantValue(new ComponentManager(HierarchyComponent));\ncontainer.bind(IDENTIFIER.TransformComponentManager).toConstantValue(new ComponentManager(TransformComponent));\ncontainer.bind(IDENTIFIER.MeshComponentManager).toConstantValue(new ComponentManager(MeshComponent));\ncontainer.bind(IDENTIFIER.CullableComponentManager).toConstantValue(new ComponentManager(CullableComponent));\ncontainer.bind(IDENTIFIER.GeometryComponentManager).toConstantValue(new ComponentManager(GeometryComponent));\ncontainer.bind(IDENTIFIER.MaterialComponentManager).toConstantValue(new ComponentManager(MaterialComponent)); // https://github.com/inversify/InversifyJS/blob/master/wiki/hierarchical_di.md#support-for-hierarchical-di-systems\n\nexport function createWorldContainer() {\n  var worldContainer = new Container();\n  worldContainer.parent = container;\n  /**\n   * bind systems\n   */\n\n  worldContainer.bind(IDENTIFIER.Systems).to(SceneGraphSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.SceneGraphSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(FrameGraphSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.FrameGraphSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(MeshSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.MeshSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(GeometrySystem).inSingletonScope().whenTargetNamed(IDENTIFIER.GeometrySystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(MaterialSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.MaterialSystem);\n  worldContainer.bind(IDENTIFIER.Systems).to(RendererSystem).inSingletonScope().whenTargetNamed(IDENTIFIER.RendererSystem); // 资源池\n\n  worldContainer.bind(IDENTIFIER.ResourcePool).to(ResourcePool).inSingletonScope();\n  worldContainer.bind(IDENTIFIER.ConfigService).to(ConfigService).inSingletonScope();\n  worldContainer.bind(IDENTIFIER.InteractorService).to(InteractorService).inSingletonScope();\n  /**\n   * bind render passes\n   */\n\n  worldContainer.bind(IDENTIFIER.RenderPass).to(RenderPass).inSingletonScope().whenTargetNamed(RenderPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPass).to(CopyPass).inSingletonScope().whenTargetNamed(CopyPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPass).to(PixelPickingPass).inSingletonScope().whenTargetNamed(PixelPickingPass.IDENTIFIER);\n  worldContainer.bind(IDENTIFIER.RenderPassFactory).toFactory(function (context) {\n    return function (name) {\n      return context.container.getNamed(IDENTIFIER.RenderPass, name);\n    };\n  });\n  return worldContainer;\n}","map":null,"metadata":{},"sourceType":"module"}