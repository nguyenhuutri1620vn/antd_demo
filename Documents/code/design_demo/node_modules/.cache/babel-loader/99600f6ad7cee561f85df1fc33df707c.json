{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each, isString, mix, isFunction } from '@antv/util';\nimport GroupComponent from '../abstract/group-component';\nimport Theme from '../util/theme';\n\nvar GridBase =\n/** @class */\nfunction (_super) {\n  __extends(GridBase, _super);\n\n  function GridBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GridBase.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      name: 'grid',\n      line: {},\n      alternateColor: null,\n      capture: false,\n      items: [],\n      closed: false,\n      defaultCfg: {\n        line: {\n          type: 'line',\n          style: {\n            lineWidth: 1,\n            stroke: Theme.lineColor\n          }\n        }\n      }\n    });\n  };\n  /**\n   * 获取栅格线的类型\n   * @return {string} 栅格线类型\n   */\n\n\n  GridBase.prototype.getLineType = function () {\n    var line = this.get('line') || this.get('defaultCfg').line;\n    return line.type;\n  };\n\n  GridBase.prototype.renderInner = function (group) {\n    this.drawGrid(group);\n  };\n\n  GridBase.prototype.getAlternatePath = function (prePoints, points) {\n    var regionPath = this.getGridPath(prePoints);\n    var reversePoints = points.slice(0).reverse();\n    var nextPath = this.getGridPath(reversePoints, true);\n    var closed = this.get('closed');\n\n    if (closed) {\n      regionPath = regionPath.concat(nextPath);\n    } else {\n      nextPath[0][0] = 'L'; // 更新第一个节点\n\n      regionPath = regionPath.concat(nextPath);\n      regionPath.push(['Z']);\n    }\n\n    return regionPath;\n  }; // 获取路径的配置项\n\n\n  GridBase.prototype.getPathStyle = function () {\n    return this.get('line').style;\n  }; // 绘制栅格\n\n\n  GridBase.prototype.drawGrid = function (group) {\n    var _this = this;\n\n    var line = this.get('line');\n    var items = this.get('items');\n    var alternateColor = this.get('alternateColor');\n    var preItem = null;\n    each(items, function (item, index) {\n      var id = item.id || index; // 绘制栅格线\n\n      if (line) {\n        var style = _this.getPathStyle();\n\n        style = isFunction(style) ? style(item, index, items) : style;\n\n        var lineId = _this.getElementId(\"line-\" + id);\n\n        var gridPath = _this.getGridPath(item.points);\n\n        _this.addShape(group, {\n          type: 'path',\n          name: 'grid-line',\n          id: lineId,\n          attrs: mix({\n            path: gridPath\n          }, style)\n        });\n      } // 如果存在 alternateColor 则绘制矩形\n      // 从第二个栅格线开始绘制\n\n\n      if (alternateColor && index > 0) {\n        var regionId = _this.getElementId(\"region-\" + id);\n\n        var isEven = index % 2 === 0;\n\n        if (isString(alternateColor)) {\n          // 如果颜色是单值，则是仅绘制偶数时的区域\n          if (isEven) {\n            _this.drawAlternateRegion(regionId, group, preItem.points, item.points, alternateColor);\n          }\n        } else {\n          var color = isEven ? alternateColor[1] : alternateColor[0];\n\n          _this.drawAlternateRegion(regionId, group, preItem.points, item.points, color);\n        }\n      }\n\n      preItem = item;\n    });\n  }; // 绘制栅格线间的间隔\n\n\n  GridBase.prototype.drawAlternateRegion = function (id, group, prePoints, points, color) {\n    var regionPath = this.getAlternatePath(prePoints, points);\n    this.addShape(group, {\n      type: 'path',\n      id: id,\n      name: 'grid-region',\n      attrs: {\n        path: regionPath,\n        fill: color\n      }\n    });\n  };\n\n  return GridBase;\n}(GroupComponent);\n\nexport default GridBase;","map":null,"metadata":{},"sourceType":"module"}