{"ast":null,"code":"import JQuery from 'jquery';\nimport { ObjectExt, StringExt, Dom, Vector } from '../util'; // eslint-disable-next-line\n\nexport var Markup;\n\n(function (Markup) {\n  function isJSONMarkup(markup) {\n    return markup != null && !isStringMarkup(markup);\n  }\n\n  Markup.isJSONMarkup = isJSONMarkup;\n\n  function isStringMarkup(markup) {\n    return markup != null && typeof markup === 'string';\n  }\n\n  Markup.isStringMarkup = isStringMarkup;\n\n  function clone(markup) {\n    return markup == null || isStringMarkup(markup) ? markup : ObjectExt.cloneDeep(markup);\n  }\n\n  Markup.clone = clone;\n  /**\n   * Removes blank space in markup to prevent create empty text node.\n   */\n\n  function sanitize(markup) {\n    return `${markup}`.trim().replace(/[\\r|\\n]/g, ' ').replace(/>\\s+</g, '><');\n  }\n\n  Markup.sanitize = sanitize;\n\n  function parseStringMarkup(markup) {\n    const fragment = document.createDocumentFragment();\n    const groups = {};\n    const selectors = {};\n    const sanitized = sanitize(markup);\n    const nodes = StringExt.sanitizeHTML(sanitized, {\n      raw: true\n    });\n    nodes.forEach(node => {\n      fragment.appendChild(node);\n    });\n    return {\n      fragment,\n      selectors,\n      groups\n    };\n  }\n\n  Markup.parseStringMarkup = parseStringMarkup;\n\n  function parseJSONMarkup(markup) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      ns: Dom.ns.svg\n    };\n    const fragment = document.createDocumentFragment();\n    const groups = {};\n    const selectors = {};\n    const queue = [{\n      markup: Array.isArray(markup) ? markup : [markup],\n      parent: fragment,\n      ns: options.ns\n    }];\n\n    while (queue.length > 0) {\n      const item = queue.pop();\n      let ns = item.ns || Dom.ns.svg;\n      const defines = item.markup;\n      const parentNode = item.parent;\n      defines.forEach(define => {\n        // tagName\n        const tagName = define.tagName;\n\n        if (!tagName) {\n          throw new TypeError('Invalid tagName');\n        } // ns\n\n\n        if (define.ns) {\n          ns = define.ns;\n        }\n\n        const svg = ns === Dom.ns.svg;\n        const node = ns ? Dom.createElementNS(tagName, ns) : Dom.createElement(tagName); // attrs\n\n        const attrs = define.attrs;\n\n        if (attrs) {\n          if (svg) {\n            Dom.attr(node, Dom.kebablizeAttrs(attrs));\n          } else {\n            JQuery(node).attr(attrs);\n          }\n        } // style\n\n\n        const style = define.style;\n\n        if (style) {\n          JQuery(node).css(style);\n        } // classname\n\n\n        const className = define.className;\n\n        if (className != null) {\n          node.setAttribute('class', Array.isArray(className) ? className.join(' ') : className);\n        } // textContent\n\n\n        if (define.textContent) {\n          node.textContent = define.textContent;\n        } // selector\n\n\n        const selector = define.selector;\n\n        if (selector != null) {\n          if (selectors[selector]) {\n            throw new TypeError('Selector must be unique');\n          }\n\n          selectors[selector] = node;\n        } // group\n\n\n        if (define.groupSelector) {\n          let nodeGroups = define.groupSelector;\n\n          if (!Array.isArray(nodeGroups)) {\n            nodeGroups = [nodeGroups];\n          }\n\n          nodeGroups.forEach(name => {\n            if (!groups[name]) {\n              groups[name] = [];\n            }\n\n            groups[name].push(node);\n          });\n        }\n\n        parentNode.appendChild(node); // children\n\n        const children = define.children;\n\n        if (Array.isArray(children)) {\n          queue.push({\n            ns,\n            markup: children,\n            parent: node\n          });\n        }\n      });\n    }\n\n    Object.keys(groups).forEach(groupName => {\n      if (selectors[groupName]) {\n        throw new Error('Ambiguous group selector');\n      }\n\n      selectors[groupName] = groups[groupName];\n    });\n    return {\n      fragment,\n      selectors,\n      groups\n    };\n  }\n\n  Markup.parseJSONMarkup = parseJSONMarkup;\n\n  function createContainer(firstChild) {\n    return firstChild instanceof SVGElement ? Dom.createSvgElement('g') : Dom.createElement('div');\n  }\n\n  function renderMarkup(markup) {\n    if (isStringMarkup(markup)) {\n      const nodes = Vector.createVectors(markup);\n      const count = nodes.length;\n\n      if (count === 1) {\n        return {\n          elem: nodes[0].node\n        };\n      }\n\n      if (count > 1) {\n        const elem = createContainer(nodes[0].node);\n        nodes.forEach(node => {\n          elem.appendChild(node.node);\n        });\n        return {\n          elem\n        };\n      }\n\n      return {};\n    }\n\n    const result = parseJSONMarkup(markup);\n    const fragment = result.fragment;\n    let elem = null;\n\n    if (fragment.childNodes.length > 1) {\n      elem = createContainer(fragment.firstChild);\n      elem.appendChild(fragment);\n    } else {\n      elem = fragment.firstChild;\n    }\n\n    return {\n      elem,\n      selectors: result.selectors\n    };\n  }\n\n  Markup.renderMarkup = renderMarkup;\n\n  function parseLabelStringMarkup(markup) {\n    const children = Vector.createVectors(markup);\n    const fragment = document.createDocumentFragment();\n\n    for (let i = 0, n = children.length; i < n; i += 1) {\n      const currentChild = children[i].node;\n      fragment.appendChild(currentChild);\n    }\n\n    return {\n      fragment,\n      selectors: {}\n    };\n  }\n\n  Markup.parseLabelStringMarkup = parseLabelStringMarkup;\n})(Markup || (Markup = {})); // eslint-disable-next-line\n\n\n(function (Markup) {\n  function getSelector(elem, stop, prev) {\n    if (elem != null) {\n      let selector;\n      const tagName = elem.tagName.toLowerCase();\n\n      if (elem === stop) {\n        if (typeof prev === 'string') {\n          selector = `> ${tagName} > ${prev}`;\n        } else {\n          selector = `> ${tagName}`;\n        }\n\n        return selector;\n      }\n\n      const parent = elem.parentNode;\n\n      if (parent && parent.childNodes.length > 1) {\n        const nth = Dom.index(elem) + 1;\n        selector = `${tagName}:nth-child(${nth})`;\n      } else {\n        selector = tagName;\n      }\n\n      if (prev) {\n        selector += ` > ${prev}`;\n      }\n\n      return getSelector(elem.parentNode, stop, selector);\n    }\n\n    return prev;\n  }\n\n  Markup.getSelector = getSelector;\n\n  function parseNode(node, root, ns) {\n    if (node.nodeName === '#text') {\n      return null;\n    }\n\n    let selector = null;\n    let groupSelector = null; // let classNames: string | null = null\n\n    let attrs = null;\n    let isCSSSelector = false;\n    const markup = {\n      tagName: node.tagName\n    };\n\n    if (node.attributes) {\n      attrs = {};\n\n      for (let i = 0, l = node.attributes.length; i < l; i += 1) {\n        const attr = node.attributes[i];\n        const name = attr.nodeName;\n        const value = attr.nodeValue;\n\n        if (name === 'selector') {\n          selector = value;\n        } else if (name === 'groupSelector') {\n          groupSelector = value;\n        } else if (name === 'class') {\n          markup.attrs = {\n            class: value\n          };\n        } else {\n          attrs[name] = value;\n        }\n      }\n    }\n\n    if (selector == null) {\n      isCSSSelector = true;\n      selector = getSelector(node, root);\n    }\n\n    if (node.namespaceURI) {\n      markup.ns = node.namespaceURI;\n    }\n\n    if (markup.ns == null) {\n      if (['body', 'div', 'section', 'main', 'nav', 'footer', 'span', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'dl', 'center', 'strong', 'pre', 'form', 'select', 'textarea', 'fieldset', 'marquee', 'bgsound', 'iframe', 'frameset'].includes(node.tagName)) {\n        markup.ns = Dom.ns.xhtml;\n      } else if (ns) {\n        markup.ns = ns;\n      }\n    }\n\n    if (selector) {\n      markup.selector = selector;\n    }\n\n    if (groupSelector != null) {\n      markup.groupSelector = groupSelector;\n    }\n\n    return {\n      markup,\n      attrs,\n      isCSSSelector\n    };\n  }\n\n  function xml2json(xml) {\n    const sanitized = Markup.sanitize(xml);\n    const doc = Dom.parseXML(sanitized, {\n      mimeType: 'image/svg+xml'\n    });\n    const nodes = Array.prototype.slice.call(doc.childNodes);\n    const attrMap = {};\n    const markupMap = new WeakMap();\n\n    const parse = (node, root, ns) => {\n      const data = parseNode(node, root, ns);\n\n      if (data == null) {\n        const parent = markupMap.get(node.parentNode);\n\n        if (parent && node.textContent) {\n          parent.textContent = node.textContent;\n        }\n      } else {\n        const {\n          markup,\n          attrs,\n          isCSSSelector\n        } = data;\n        markupMap.set(node, markup);\n\n        if (markup.selector && attrs != null) {\n          if (Object.keys(attrs).length) {\n            attrMap[markup.selector] = attrs;\n          }\n\n          if (isCSSSelector) {\n            delete markup.selector;\n          }\n        }\n\n        if (node.childNodes && node.childNodes.length > 0) {\n          for (let i = 0, l = node.childNodes.length; i < l; i += 1) {\n            const child = node.childNodes[i];\n            const childMarkup = parse(child, root, markup.ns);\n\n            if (childMarkup) {\n              if (markup.children == null) {\n                markup.children = [];\n              }\n\n              markup.children.push(childMarkup);\n            }\n          }\n        }\n\n        return markup;\n      }\n    };\n\n    const markup = nodes.map(node => parse(node, node)).filter(mk => mk != null);\n    return {\n      markup,\n      attrs: attrMap\n    };\n  }\n\n  Markup.xml2json = xml2json;\n})(Markup || (Markup = {})); // eslint-disable-next-line\n\n\n(function (Markup) {\n  function getPortContainerMarkup() {\n    return 'g';\n  }\n\n  Markup.getPortContainerMarkup = getPortContainerMarkup;\n\n  function getPortMarkup() {\n    return {\n      tagName: 'circle',\n      selector: 'circle',\n      attrs: {\n        r: 10,\n        fill: '#FFFFFF',\n        stroke: '#000000'\n      }\n    };\n  }\n\n  Markup.getPortMarkup = getPortMarkup;\n\n  function getPortLabelMarkup() {\n    return {\n      tagName: 'text',\n      selector: 'text',\n      attrs: {\n        fill: '#000000'\n      }\n    };\n  }\n\n  Markup.getPortLabelMarkup = getPortLabelMarkup;\n})(Markup || (Markup = {})); // eslint-disable-next-line\n\n\n(function (Markup) {\n  function getEdgeMarkup() {\n    return Markup.sanitize(`\n    <path class=\"connection\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"source-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"target-marker\" fill=\"black\" stroke=\"black\" d=\"M 0 0 0 0\"/>\n    <path class=\"connection-wrap\" d=\"M 0 0 0 0\"/>\n    <g class=\"labels\"/>\n    <g class=\"vertices\"/>\n    <g class=\"arrowheads\"/>\n    <g class=\"tools\"/>\n  `);\n  }\n\n  Markup.getEdgeMarkup = getEdgeMarkup;\n\n  function getEdgeToolMarkup() {\n    return Markup.sanitize(`\n    <g class=\"edge-tool\">\n      <g class=\"tool-remove\" event=\"edge:remove\">\n        <circle r=\"11\" />\n        <path transform=\"scale(.8) translate(-16, -16)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\" />\n        <title>Remove edge.</title>\n      </g>\n      <g class=\"tool-options\" event=\"edge:options\">\n        <circle r=\"11\" transform=\"translate(25)\"/>\n        <path fill=\"white\" transform=\"scale(.55) translate(29, -16)\" d=\"M31.229,17.736c0.064-0.571,0.104-1.148,0.104-1.736s-0.04-1.166-0.104-1.737l-4.377-1.557c-0.218-0.716-0.504-1.401-0.851-2.05l1.993-4.192c-0.725-0.91-1.549-1.734-2.458-2.459l-4.193,1.994c-0.647-0.347-1.334-0.632-2.049-0.849l-1.558-4.378C17.165,0.708,16.588,0.667,16,0.667s-1.166,0.041-1.737,0.105L12.707,5.15c-0.716,0.217-1.401,0.502-2.05,0.849L6.464,4.005C5.554,4.73,4.73,5.554,4.005,6.464l1.994,4.192c-0.347,0.648-0.632,1.334-0.849,2.05l-4.378,1.557C0.708,14.834,0.667,15.412,0.667,16s0.041,1.165,0.105,1.736l4.378,1.558c0.217,0.715,0.502,1.401,0.849,2.049l-1.994,4.193c0.725,0.909,1.549,1.733,2.459,2.458l4.192-1.993c0.648,0.347,1.334,0.633,2.05,0.851l1.557,4.377c0.571,0.064,1.148,0.104,1.737,0.104c0.588,0,1.165-0.04,1.736-0.104l1.558-4.377c0.715-0.218,1.399-0.504,2.049-0.851l4.193,1.993c0.909-0.725,1.733-1.549,2.458-2.458l-1.993-4.193c0.347-0.647,0.633-1.334,0.851-2.049L31.229,17.736zM16,20.871c-2.69,0-4.872-2.182-4.872-4.871c0-2.69,2.182-4.872,4.872-4.872c2.689,0,4.871,2.182,4.871,4.872C20.871,18.689,18.689,20.871,16,20.871z\"/>\n        <title>Edge options.</title>\n      </g>\n    </g>\n  `);\n  }\n\n  Markup.getEdgeToolMarkup = getEdgeToolMarkup;\n\n  function getEdgeVertexMarkup() {\n    return Markup.sanitize(`\n    <g class=\"vertex-group\" transform=\"translate(<%= x %>, <%= y %>)\">\n      <circle class=\"vertex\" data-index=\"<%= index %>\" r=\"10\" />\n      <path class=\"vertex-remove-area\" data-index=\"<%= index %>\" d=\"M16,5.333c-7.732,0-14,4.701-14,10.5c0,1.982,0.741,3.833,2.016,5.414L2,25.667l5.613-1.441c2.339,1.317,5.237,2.107,8.387,2.107c7.732,0,14-4.701,14-10.5C30,10.034,23.732,5.333,16,5.333z\" transform=\"translate(5, -33)\"/>\n      <path class=\"vertex-remove\" data-index=\"<%= index %>\" transform=\"scale(.8) translate(9.5, -37)\" d=\"M24.778,21.419 19.276,15.917 24.777,10.415 21.949,7.585 16.447,13.087 10.945,7.585 8.117,10.415 13.618,15.917 8.116,21.419 10.946,24.248 16.447,18.746 21.948,24.248z\">\n      <title>Remove vertex.</title>\n      </path>\n    </g>\n  `);\n  }\n\n  Markup.getEdgeVertexMarkup = getEdgeVertexMarkup;\n\n  function getEdgeArrowheadMarkup() {\n    return Markup.sanitize(`\n    <g class=\"arrowhead-group arrowhead-group-<%= end %>\">\n      <path class=\"arrowhead\" data-terminal=\"<%= end %>\" d=\"M 26 0 L 0 13 L 26 26 z\" />\n    </g>\n  `);\n  }\n\n  Markup.getEdgeArrowheadMarkup = getEdgeArrowheadMarkup;\n})(Markup || (Markup = {})); // eslint-disable-next-line\n\n\n(function (Markup) {\n  function getForeignObjectMarkup() {\n    let bare = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return {\n      tagName: 'foreignObject',\n      selector: 'fo',\n      children: [{\n        ns: Dom.ns.xhtml,\n        tagName: 'body',\n        selector: 'foBody',\n        attrs: {\n          xmlns: Dom.ns.xhtml\n        },\n        style: {\n          width: '100%',\n          height: '100%',\n          background: 'transparent'\n        },\n        children: bare ? [] : [{\n          tagName: 'div',\n          selector: 'foContent',\n          style: {\n            width: '100%',\n            height: '100%'\n          }\n        }]\n      }]\n    };\n  }\n\n  Markup.getForeignObjectMarkup = getForeignObjectMarkup;\n})(Markup || (Markup = {}));","map":null,"metadata":{},"sourceType":"module"}