{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { ModifierKey } from '../types';\nimport { Base } from './base';\nexport class SelectionManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.movedMap = new WeakMap();\n    this.unselectMap = new WeakMap();\n  }\n\n  get widgetOptions() {\n    return this.options.selecting;\n  }\n\n  get rubberbandDisabled() {\n    return this.widgetOptions.enabled !== true || this.widgetOptions.rubberband !== true;\n  }\n\n  get disabled() {\n    return this.widgetOptions.enabled !== true;\n  }\n\n  get length() {\n    return this.widget.length;\n  }\n\n  get cells() {\n    return this.widget.cells;\n  }\n\n  init() {\n    this.widget = this.graph.hook.createSelection();\n    this.startListening();\n  }\n\n  startListening() {\n    this.graph.on('blank:mousedown', this.onBlankMouseDown, this);\n    this.graph.on('blank:click', this.onBlankClick, this);\n    this.graph.on('cell:mousemove', this.onCellMouseMove, this);\n    this.graph.on('cell:mouseup', this.onCellMouseUp, this);\n    this.widget.on('box:mousedown', this.onBoxMouseDown, this);\n  }\n\n  stopListening() {\n    this.graph.off('blank:mousedown', this.onBlankMouseDown, this);\n    this.graph.off('blank:click', this.onBlankClick, this);\n    this.graph.off('cell:mousemove', this.onCellMouseMove, this);\n    this.graph.off('cell:mouseup', this.onCellMouseUp, this);\n    this.widget.off('box:mousedown', this.onBoxMouseDown, this);\n  }\n\n  onBlankMouseDown(_ref) {\n    let {\n      e\n    } = _ref;\n\n    if (this.allowRubberband(e, true) || this.allowRubberband(e) && !this.graph.scroller.allowPanning(e, true) && !this.graph.panning.allowPanning(e, true)) {\n      this.startRubberband(e);\n    }\n  }\n\n  onBlankClick() {\n    this.clean();\n  }\n\n  allowRubberband(e, strict) {\n    return !this.rubberbandDisabled && ModifierKey.isMatch(e, this.widgetOptions.modifiers, strict) && this.graph.hook.allowRubberband(e);\n  }\n\n  onCellMouseMove(_ref2) {\n    let {\n      cell\n    } = _ref2;\n    this.movedMap.set(cell, true);\n  }\n\n  onCellMouseUp(_ref3) {\n    let {\n      e,\n      cell\n    } = _ref3;\n    const options = this.widgetOptions;\n    let disabled = this.disabled;\n\n    if (!disabled && this.movedMap.has(cell)) {\n      disabled = options.selectCellOnMoved === false;\n\n      if (!disabled) {\n        disabled = options.selectNodeOnMoved === false && cell.isNode();\n      }\n\n      if (!disabled) {\n        disabled = options.selectEdgeOnMoved === false && cell.isEdge();\n      }\n    }\n\n    if (!disabled) {\n      if (options.multiple === false || !e.ctrlKey && !e.metaKey) {\n        this.reset(cell);\n      } else if (this.unselectMap.has(cell)) {\n        this.unselectMap.delete(cell);\n      } else if (this.isSelected(cell)) {\n        this.unselect(cell);\n      } else {\n        this.select(cell);\n      }\n    }\n\n    this.movedMap.delete(cell);\n  }\n\n  onBoxMouseDown(_ref4) {\n    let {\n      e,\n      cell\n    } = _ref4;\n\n    if (!this.disabled) {\n      if (this.widgetOptions.multiple !== false && (e.ctrlKey || e.metaKey)) {\n        this.unselect(cell);\n        this.unselectMap.set(cell, true);\n      }\n    }\n  }\n\n  isEmpty() {\n    return this.length <= 0;\n  }\n\n  isSelected(cell) {\n    return this.widget.isSelected(cell);\n  }\n\n  getCells(cells) {\n    return (Array.isArray(cells) ? cells : [cells]).map(cell => typeof cell === 'string' ? this.graph.getCellById(cell) : cell).filter(cell => cell != null);\n  }\n\n  select(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const selected = this.getCells(cells);\n\n    if (selected.length) {\n      if (this.isMultiple()) {\n        this.widget.select(selected, options);\n      } else {\n        this.reset(selected.slice(0, 1), options);\n      }\n    }\n\n    return this;\n  }\n\n  unselect(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.widget.unselect(this.getCells(cells), options);\n    return this;\n  }\n\n  reset(cells) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.widget.reset(cells ? this.getCells(cells) : [], options);\n    return this;\n  }\n\n  clean() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.widget.clean(options);\n    return this;\n  }\n\n  enable() {\n    if (this.disabled) {\n      this.widgetOptions.enabled = true;\n    }\n\n    return this;\n  }\n\n  disable() {\n    if (!this.disabled) {\n      this.widgetOptions.enabled = false;\n    }\n\n    return this;\n  }\n\n  startRubberband(e) {\n    if (!this.rubberbandDisabled) {\n      this.widget.startSelecting(e);\n    }\n\n    return this;\n  }\n\n  enableRubberband() {\n    if (this.rubberbandDisabled) {\n      this.widgetOptions.rubberband = true; // if (\n      //   ModifierKey.equals(\n      //     this.graph.options.scroller.modifiers,\n      //     this.graph.options.selecting.modifiers,\n      //   )\n      // ) {\n      //   this.graph.scroller.disablePanning()\n      // }\n    }\n\n    return this;\n  }\n\n  disableRubberband() {\n    if (!this.rubberbandDisabled) {\n      this.widgetOptions.rubberband = false;\n    }\n\n    return this;\n  }\n\n  isMultiple() {\n    return this.widgetOptions.multiple !== false;\n  }\n\n  enableMultiple() {\n    this.widgetOptions.multiple = true;\n    return this;\n  }\n\n  disableMultiple() {\n    this.widgetOptions.multiple = false;\n    return this;\n  }\n\n  setModifiers(modifiers) {\n    this.widgetOptions.modifiers = modifiers;\n    return this;\n  }\n\n  setContent(content) {\n    this.widget.setContent(content);\n    return this;\n  }\n\n  setFilter(filter) {\n    this.widget.setFilter(filter);\n    return this;\n  }\n\n  dispose() {\n    this.stopListening();\n    this.widget.dispose();\n  }\n\n}\n\n__decorate([Base.dispose()], SelectionManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}