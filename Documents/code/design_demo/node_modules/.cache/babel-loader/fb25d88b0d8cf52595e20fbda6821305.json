{"ast":null,"code":"export function round(num) {\n  let precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return Number.isInteger(num) ? num : +num.toFixed(precision);\n}\nexport function random(min, max) {\n  let mmin;\n  let mmax;\n\n  if (max == null) {\n    mmax = min == null ? 1 : min;\n    mmin = 0;\n  } else {\n    mmax = max;\n    mmin = min == null ? 0 : min;\n  }\n\n  if (mmax < mmin) {\n    const temp = mmin;\n    mmin = mmax;\n    mmax = temp;\n  }\n\n  return Math.floor(Math.random() * (mmax - mmin + 1) + mmin);\n}\nexport function clamp(value, min, max) {\n  if (Number.isNaN(value)) {\n    return NaN;\n  }\n\n  if (Number.isNaN(min) || Number.isNaN(max)) {\n    return 0;\n  }\n\n  return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;\n}\nexport function snapToGrid(value, gridSize) {\n  return gridSize * Math.round(value / gridSize);\n}\nexport function containsPoint(rect, point) {\n  return point != null && rect != null && point.x >= rect.x && point.x <= rect.x + rect.width && point.y >= rect.y && point.y <= rect.y + rect.height;\n}\nexport function squaredLength(p1, p2) {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n  return dx * dx + dy * dy;\n}","map":null,"metadata":{},"sourceType":"module"}