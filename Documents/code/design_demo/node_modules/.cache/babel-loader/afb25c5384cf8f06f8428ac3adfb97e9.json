{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nexport var NsUpdateEdge;\n\n(function (NsUpdateEdge) {\n  var _this = this;\n\n  NsUpdateEdge.command = XFlowEdgeCommands.UPDATE_EDGE;\n  NsUpdateEdge.hookKey = 'updateEdge';\n  NsUpdateEdge.XFlowEdgeSetOptions = {\n    overwrite: true\n  };\n\n  NsUpdateEdge.XFlowUpdateLabelService = function (edge, edgeConfig) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : NsUpdateEdge.XFlowEdgeSetOptions;\n    return __awaiter(_this, void 0, void 0, function* () {\n      edge === null || edge === void 0 ? void 0 : edge.setLabelAt(0, (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.label) || edgeConfig, options);\n    });\n  };\n})(NsUpdateEdge || (NsUpdateEdge = {}));\n\nlet UpdateEdgeCommand =\n/** 连线更新命令 */\nclass UpdateEdgeCommand {\n  constructor() {\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.updateEdge.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const {\n          updateEdgeService,\n          updateEdgeLabelService = NsUpdateEdge.XFlowUpdateLabelService,\n          options = NsUpdateEdge.XFlowEdgeSetOptions\n        } = handlerArgs;\n        const edgeConfig = updateEdgeService ? yield updateEdgeService(handlerArgs) : handlerArgs === null || handlerArgs === void 0 ? void 0 : handlerArgs.edgeConfig;\n        const x6Edge = x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.getCellById(edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.id);\n        x6Edge === null || x6Edge === void 0 ? void 0 : x6Edge.setData(edgeConfig, options);\n\n        if (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.label) {\n          // 默认更新edge的第一个label\n          yield updateEdgeLabelService(x6Edge, edgeConfig, options);\n        }\n\n        if (edgeConfig.attrs) {\n          x6Edge.setAttrs(edgeConfig.attrs);\n        }\n\n        return {\n          edgeConfig,\n          edgeCell: x6Edge\n        };\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], UpdateEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], UpdateEdgeCommand.prototype, \"init\", null);\n\nUpdateEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsUpdateEdge.command.id\n  }\n})\n/** 连线更新命令 */\n], UpdateEdgeCommand);\nexport { UpdateEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}