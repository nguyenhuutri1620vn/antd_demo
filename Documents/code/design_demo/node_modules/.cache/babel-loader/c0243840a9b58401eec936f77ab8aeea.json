{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport Supercluster from 'supercluster/dist/supercluster';\nexport function cluster(data, option) {\n  var _option$radius = option.radius,\n      radius = _option$radius === void 0 ? 40 : _option$radius,\n      _option$maxZoom = option.maxZoom,\n      maxZoom = _option$maxZoom === void 0 ? 18 : _option$maxZoom,\n      _option$minZoom = option.minZoom,\n      minZoom = _option$minZoom === void 0 ? 0 : _option$minZoom,\n      _option$zoom = option.zoom,\n      zoom = _option$zoom === void 0 ? 2 : _option$zoom;\n\n  if (data.pointIndex) {\n    var clusterData = data.pointIndex.getClusters(data.extent, Math.floor(zoom));\n    data.dataArray = formatData(clusterData);\n    return data;\n  }\n\n  var pointIndex = new Supercluster({\n    radius: radius,\n    minZoom: minZoom,\n    maxZoom: maxZoom\n  });\n  var geojson = {\n    type: 'FeatureCollection',\n    features: []\n  };\n  geojson.features = data.dataArray.map(function (item) {\n    return {\n      type: 'Feature',\n      geometry: {\n        type: 'Point',\n        coordinates: item.coordinates\n      },\n      properties: _objectSpread({}, item)\n    };\n  });\n  pointIndex.load(geojson.features);\n  return pointIndex;\n}\nexport function formatData(clusterPoint) {\n  return clusterPoint.map(function (point, index) {\n    return _objectSpread({\n      coordinates: point.geometry.coordinates,\n      _id: index + 1\n    }, point.properties);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}