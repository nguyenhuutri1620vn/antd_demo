{"ast":null,"code":"import _regeneratorRuntime from \"/home/trinh/Documents/code/design_demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nvar Disposable;\n\n(function (Disposable) {\n  function is(arg) {\n    return !!arg && _typeof(arg) === 'object' && 'dispose' in arg && typeof arg.dispose === 'function';\n  }\n\n  Disposable.is = is;\n\n  function create(func) {\n    return {\n      dispose: func\n    };\n  }\n\n  Disposable.create = create;\n  Disposable.NONE = create(function () {});\n})(Disposable || (Disposable = {}));\n\nvar _Symbol$iterator;\n\nvar Event;\n\n(function (Event) {\n  Event.None = function () {\n    return Disposable.NONE;\n  };\n\n  function map(event, mapFunc) {\n    return function (listener, context) {\n      return event(function (i) {\n        return listener.call(context, mapFunc(i));\n      }, undefined);\n    };\n  }\n\n  Event.map = map;\n})(Event || (Event = {}));\n\n_Symbol$iterator = Symbol.iterator;\n\nvar CallbackList = /*#__PURE__*/function (_Symbol$iterator2) {\n  function CallbackList() {\n    var mono = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    _classCallCheck(this, CallbackList);\n\n    this.mono = void 0;\n    this._callbacks = void 0;\n    this.mono = mono;\n  }\n\n  _createClass(CallbackList, [{\n    key: \"callbacks\",\n    get: function get() {\n      if (!this._callbacks) {\n        this._callbacks = [];\n      }\n\n      return this._callbacks;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.callbacks.length;\n    }\n  }, {\n    key: \"add\",\n    value: function add(callback) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      this.callbacks.push([callback, context]);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(callback) {\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      if (this.isEmpty()) return;\n      var foundCallbackWithDifferentContext = false;\n\n      for (var i = 0; i < this.length; i += 1) {\n        if (this.callbacks[i][0] === callback) {\n          if (this.callbacks[i][1] === context) {\n            // remove when callback & context match\n            this.callbacks.splice(i, 1);\n            return;\n          }\n\n          foundCallbackWithDifferentContext = true;\n        }\n      }\n\n      if (foundCallbackWithDifferentContext) {\n        throw new Error('You should remove it with the same context you add it');\n      }\n    }\n  }, {\n    key: _Symbol$iterator2,\n    value: function value() {\n      if (this.isEmpty()) {\n        return [][Symbol.iterator]();\n      }\n\n      var callbacks = this.callbacks.slice(0);\n      return callbacks.map(function (callback) {\n        return function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return callback[0].apply(callback[1], args);\n        };\n      })[Symbol.iterator]();\n    }\n  }, {\n    key: \"invoke\",\n    value: function invoke() {\n      var ret = [];\n\n      var _iterator = _createForOfIteratorHelper(this),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var callback = _step.value;\n\n          try {\n            ret.push(callback.apply(void 0, arguments));\n          } catch (e) {\n            console.error(e);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.callbacks.length === 0;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._callbacks = undefined;\n    }\n  }]);\n\n  return CallbackList;\n}(_Symbol$iterator);\n\nvar Emitter = /*#__PURE__*/function () {\n  function Emitter() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Emitter);\n\n    this.options = void 0;\n    this._event = void 0;\n    this._callbacks = void 0;\n    this.disposed = false;\n    this.options = options;\n  }\n\n  _createClass(Emitter, [{\n    key: \"callbacks\",\n    get: function get() {\n      if (!this._callbacks) {\n        this._callbacks = new CallbackList();\n      }\n\n      return this._callbacks;\n    }\n    /**\r\n     * For the public to allow to subscribe\r\n     * to events from this Emitter\r\n     */\n\n  }, {\n    key: \"event\",\n    get: function get() {\n      var _this = this;\n\n      if (!this._event) {\n        this._event = function (listener, thisArgs) {\n          if (_this.options.onFirstListenerAdd && _this.callbacks.isEmpty()) {\n            _this.options.onFirstListenerAdd(_this);\n          }\n\n          _this.callbacks.add(listener, thisArgs);\n\n          var result = {\n            dispose: function dispose() {\n              result.dispose = Emitter.noop;\n\n              if (!_this.disposed) {\n                _this.callbacks.remove(listener, thisArgs);\n\n                result.dispose = Emitter.noop;\n\n                if (_this.options.onLastListenerRemove && _this.callbacks.isEmpty()) {\n                  _this.options.onLastListenerRemove(_this);\n                }\n              }\n            }\n          };\n          return result;\n        };\n      }\n\n      return this._event;\n    }\n  }, {\n    key: \"fire\",\n    value: function fire(event) {\n      if (!this._callbacks) {\n        return;\n      }\n\n      this.callbacks.invoke(event);\n    }\n    /**\r\n     * Process each listener one by one.\r\n     * Return `false` to stop iterating over the listeners, `true` to continue.\r\n     */\n\n  }, {\n    key: \"sequence\",\n    value: function () {\n      var _sequence = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(processor) {\n        var _iterator2, _step2, listener, result;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(this.callbacks);\n                _context.prev = 1;\n\n                _iterator2.s();\n\n              case 3:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 12;\n                  break;\n                }\n\n                listener = _step2.value;\n                _context.next = 7;\n                return processor(listener);\n\n              case 7:\n                result = _context.sent;\n\n                if (result) {\n                  _context.next = 10;\n                  break;\n                }\n\n                return _context.abrupt(\"break\", 12);\n\n              case 10:\n                _context.next = 3;\n                break;\n\n              case 12:\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](1);\n\n                _iterator2.e(_context.t0);\n\n              case 17:\n                _context.prev = 17;\n\n                _iterator2.f();\n\n                return _context.finish(17);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 14, 17, 20]]);\n      }));\n\n      function sequence(_x) {\n        return _sequence.apply(this, arguments);\n      }\n\n      return sequence;\n    }()\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._callbacks) {\n        this._callbacks.dispose();\n\n        this._callbacks = undefined;\n      }\n\n      this.disposed = true;\n    }\n  }]);\n\n  return Emitter;\n}();\n\nEmitter.noop = function () {};\n\nvar shortcutEvent = Object.freeze(Object.assign(function (callback, context) {\n  var handle = setTimeout(callback.bind(context), 0);\n  return {\n    dispose: function dispose() {\n      clearTimeout(handle);\n    }\n  };\n}, {\n  maxListeners: 0\n}));\nvar CancellationToken;\n\n(function (CancellationToken) {\n  CancellationToken.None = Object.freeze({\n    isCancellationRequested: false,\n    onCancellationRequested: Event.None\n  });\n  CancellationToken.Cancelled = Object.freeze({\n    isCancellationRequested: true,\n    onCancellationRequested: shortcutEvent\n  });\n})(CancellationToken || (CancellationToken = {}));\n\nvar MutableToken = /*#__PURE__*/function () {\n  function MutableToken() {\n    _classCallCheck(this, MutableToken);\n\n    this._isCancelled = false;\n    this._emitter = void 0;\n  }\n\n  _createClass(MutableToken, [{\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._isCancelled) {\n        this._isCancelled = true;\n\n        if (this._emitter) {\n          this._emitter.fire(undefined);\n\n          this._emitter = undefined;\n        }\n      }\n    }\n  }, {\n    key: \"isCancellationRequested\",\n    get: function get() {\n      return this._isCancelled;\n    }\n  }, {\n    key: \"onCancellationRequested\",\n    get: function get() {\n      if (this._isCancelled) {\n        return shortcutEvent;\n      }\n\n      if (!this._emitter) {\n        this._emitter = new Emitter();\n      }\n\n      return this._emitter.event;\n    }\n  }]);\n\n  return MutableToken;\n}();\n\nvar CancellationTokenSource = /*#__PURE__*/function () {\n  function CancellationTokenSource() {\n    _classCallCheck(this, CancellationTokenSource);\n\n    this._token = void 0;\n  }\n\n  _createClass(CancellationTokenSource, [{\n    key: \"token\",\n    get: function get() {\n      if (!this._token) {\n        // be lazy and create the token only when\n        // actually needed\n        this._token = new MutableToken();\n      }\n\n      return this._token;\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._token) {\n        // save an object by returning the default\n        // cancelled token when cancellation happens\n        // before someone asks for the token\n        this._token = CancellationToken.Cancelled;\n      } else if (this._token !== CancellationToken.Cancelled) {\n        this._token.cancel();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.cancel();\n    }\n  }]);\n\n  return CancellationTokenSource;\n}();\n\nvar cancelledMessage = 'Cancelled';\n\nfunction cancelled() {\n  return new Error(cancelledMessage);\n}\n\nfunction isCancelled(err) {\n  return !!err && err.message === cancelledMessage;\n}\n\nfunction checkCancelled(token) {\n  if (!!token && token.isCancellationRequested) {\n    throw cancelled();\n  }\n}\n\nvar DisposableCollection = /*#__PURE__*/function () {\n  function DisposableCollection() {\n    _classCallCheck(this, DisposableCollection);\n\n    this.disposables = [];\n    this.onDisposeEmitter = new Emitter();\n    this.disposingElements = false;\n\n    for (var _len = arguments.length, toDispose = new Array(_len), _key = 0; _key < _len; _key++) {\n      toDispose[_key] = arguments[_key];\n    }\n\n    this.pushAll(toDispose);\n  }\n\n  _createClass(DisposableCollection, [{\n    key: \"disposed\",\n    get: function get() {\n      return this.disposables.length === 0;\n    }\n  }, {\n    key: \"onDispose\",\n    get: function get() {\n      return this.onDisposeEmitter.event;\n    }\n  }, {\n    key: \"checkDisposed\",\n    value: function checkDisposed() {\n      if (this.disposed && !this.disposingElements) {\n        this.onDisposeEmitter.fire(undefined);\n        this.onDisposeEmitter.dispose();\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.disposed || this.disposingElements) {\n        return;\n      }\n\n      this.disposingElements = true;\n\n      while (!this.disposed) {\n        try {\n          this.disposables.pop().dispose();\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      this.disposingElements = false;\n      this.checkDisposed();\n    }\n  }, {\n    key: \"push\",\n    value: function push(disposable) {\n      var _this = this;\n\n      var disposables = this.disposables;\n      disposables.push(disposable);\n      var originalDispose = disposable.dispose.bind(disposable);\n      var toRemove = Disposable.create(function () {\n        var index = disposables.indexOf(disposable);\n\n        if (index !== -1) {\n          disposables.splice(index, 1);\n        }\n\n        _this.checkDisposed();\n      });\n\n      disposable.dispose = function () {\n        toRemove.dispose();\n        originalDispose();\n      };\n\n      return toRemove;\n    }\n  }, {\n    key: \"pushAll\",\n    value: function pushAll(disposables) {\n      var _this2 = this;\n\n      return disposables.map(function (disposable) {\n        return _this2.push(disposable);\n      });\n    }\n  }]);\n\n  return DisposableCollection;\n}();\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nvar noop = function noop() {};\n\nvar Deferred = function Deferred() {\n  var _this = this;\n\n  _classCallCheck(this, Deferred);\n\n  this.resolve = noop;\n  this.reject = noop;\n  this.promise = void 0;\n  this.promise = new Promise(function (resolve, reject) {\n    _this.resolve = resolve;\n    _this.reject = reject;\n  });\n};\n/**\r\n * @returns resolves after a specified number of milliseconds\r\n * @throws cancelled if a given token is cancelled before a specified number of milliseconds\r\n */\n\n\nfunction timeout(ms) {\n  var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CancellationToken.None;\n  var deferred = new Deferred();\n  var handle = setTimeout(function () {\n    return deferred.resolve();\n  }, ms);\n  token.onCancellationRequested(function () {\n    clearTimeout(handle);\n    deferred.reject(cancelled());\n  });\n  return deferred.promise;\n}\n\nfunction retry(_x, _x2, _x3) {\n  return _retry.apply(this, arguments);\n}\n\nfunction _retry() {\n  _retry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(task, delay, retries) {\n    var lastError, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            i = 0;\n\n          case 1:\n            if (!(i < retries)) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.prev = 2;\n            _context.next = 5;\n            return task();\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            lastError = _context.t0; // eslint-disable-next-line no-await-in-loop\n\n            _context.next = 13;\n            return timeout(delay);\n\n          case 13:\n            i += 1;\n            _context.next = 1;\n            break;\n\n          case 16:\n            throw lastError;\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n  return _retry.apply(this, arguments);\n}\n\nexport { CancellationToken, CancellationTokenSource, Deferred, Disposable, DisposableCollection, Emitter, Event, cancelled, checkCancelled, isCancelled, retry, timeout };","map":null,"metadata":{},"sourceType":"module"}