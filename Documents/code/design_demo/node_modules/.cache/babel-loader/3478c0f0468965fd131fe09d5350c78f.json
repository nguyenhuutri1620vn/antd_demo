{"ast":null,"code":"import { vec2 } from '@antv/matrix-util';\nimport { catmullRom2Bezier } from '@antv/path-util';\n/**\n * 替换字符串中的字段\n * @param {String} str 模版字符串\n * @param {Object} o json data\n */\n\nvar substitute = function substitute(str, o) {\n  if (!str || !o) {\n    return str;\n  }\n\n  return str.replace(/\\\\?\\{([^{}]+)\\}/g, function (match, name) {\n    if (match.charAt(0) === '\\\\') {\n      return match.slice(1);\n    }\n\n    var res = o[name];\n    if (res === 0) res = '0';\n    return res || '';\n  });\n};\n/**\n * 给定坐标获取三次贝塞尔曲线的 M 及 C 值\n * @param points coordinate set\n */\n\n\nexport var getSpline = function getSpline(points) {\n  var data = [];\n\n  if (points.length < 2) {\n    throw new Error(\"point length must largn than 2, now it's \".concat(points.length));\n  }\n\n  for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n    var point = points_1[_i];\n    var x = point.x,\n        y = point.y;\n    data.push(x);\n    data.push(y);\n  }\n\n  var spliePath = catmullRom2Bezier(data);\n  spliePath.unshift(['M', points[0].x, points[0].y]);\n  return spliePath;\n};\n/**\n * 根据起始点、相对位置、偏移量计算控制点\n * @param  {IPoint} startPoint 起始点，包含 x,y\n * @param  {IPoint} endPoint  结束点, 包含 x,y\n * @param  {Number} percent   相对位置,范围 0-1\n * @param  {Number} offset    偏移量\n * @return {IPoint} 控制点，包含 x,y\n */\n\nexport var getControlPoint = function getControlPoint(startPoint, endPoint, percent, offset) {\n  if (percent === void 0) {\n    percent = 0;\n  }\n\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  var point = {\n    x: (1 - percent) * startPoint.x + percent * endPoint.x,\n    y: (1 - percent) * startPoint.y + percent * endPoint.y\n  };\n  var tangent = [0, 0];\n  vec2.normalize(tangent, [endPoint.x - startPoint.x, endPoint.y - startPoint.y]);\n\n  if (!tangent || !tangent[0] && !tangent[1]) {\n    tangent = [0, 0];\n  }\n\n  var perpendicular = [-tangent[1] * offset, tangent[0] * offset]; // 垂直向量\n\n  point.x += perpendicular[0];\n  point.y += perpendicular[1];\n  return point;\n};\n/**\n * 点集转化为Path多边形\n * @param {Array} points 点集\n * @param {Boolen} z 是否封闭\n * @return {Array} Path\n */\n\nexport var pointsToPolygon = function pointsToPolygon(points, z) {\n  var length = points.length;\n\n  if (!length) {\n    return '';\n  }\n\n  var path = '';\n  var str = '';\n\n  for (var i = 0; i < length; i++) {\n    var item = points[i];\n\n    if (i === 0) {\n      str = 'M{x} {y}';\n    } else {\n      str = 'L{x} {y}';\n    }\n\n    path += substitute(str, item);\n  }\n\n  if (z) {\n    path += 'Z';\n  }\n\n  return path;\n};\nexport var pathToPoints = function pathToPoints(path) {\n  var points = [];\n  path.forEach(function (seg) {\n    var command = seg[0];\n\n    if (command !== 'A') {\n      for (var i = 1; i < seg.length; i = i + 2) {\n        points.push([seg[i], seg[i + 1]]);\n      }\n    } else {\n      var length_1 = seg.length;\n      points.push([seg[length_1 - 2], seg[length_1 - 1]]);\n    }\n  });\n  return points;\n};\n/**\n * 生成平滑的闭合曲线\n * @param points\n */\n\nexport var getClosedSpline = function getClosedSpline(points) {\n  if (points.length < 2) {\n    throw new Error(\"point length must largn than 2, now it's \".concat(points.length));\n  }\n\n  var first = points[0];\n  var second = points[1];\n  var last = points[points.length - 1];\n  var lastSecond = points[points.length - 2];\n  points.unshift(last);\n  points.unshift(lastSecond);\n  points.push(first);\n  points.push(second);\n  var closedPath = [];\n\n  for (var i = 1; i < points.length - 2; i += 1) {\n    var x0 = points[i - 1].x;\n    var y0 = points[i - 1].y;\n    var x1 = points[i].x;\n    var y1 = points[i].y;\n    var x2 = points[i + 1].x;\n    var y2 = points[i + 1].y;\n    var x3 = i !== points.length - 2 ? points[i + 2].x : x2;\n    var y3 = i !== points.length - 2 ? points[i + 2].y : y2;\n    var cp1x = x1 + (x2 - x0) / 6;\n    var cp1y = y1 + (y2 - y0) / 6;\n    var cp2x = x2 - (x3 - x1) / 6;\n    var cp2y = y2 - (y3 - y1) / 6;\n    closedPath.push(['C', cp1x, cp1y, cp2x, cp2y, x2, y2]);\n  }\n\n  closedPath.unshift(['M', last.x, last.y]);\n  return closedPath;\n};\n\nvar vecScaleTo = function vecScaleTo(v, length) {\n  // Vector with direction of v with specified length\n  return vec2.scale([0, 0], vec2.normalize([0, 0], v), length);\n};\n\nvar unitNormal = function unitNormal(p0, p1) {\n  // Returns the unit normal to the line segment from p0 to p1.\n  var n = [p0[1] - p1[1], p1[0] - p0[0]];\n  var nLength = Math.sqrt(n[0] * n[0] + n[1] * n[1]);\n\n  if (nLength === 0) {\n    throw new Error('p0 should not be equal to p1');\n  }\n\n  return [n[0] / nLength, n[1] / nLength];\n};\n\nvar vecFrom = function vecFrom(p0, p1) {\n  // Vector from p0 to p1\n  return [p1[0] - p0[0], p1[1] - p0[1]];\n};\n/**\n * 传入的节点作为多边形顶点，生成有圆角的多边形\n * @param polyPoints 多边形顶点\n * @param padding 在原多边形基础上增加最终轮廓和原多边形的空白间隔\n */\n\n\nexport function roundedHull(polyPoints, padding) {\n  // The rounded hull path around a single point\n  var roundedHull1 = function roundedHull1(points) {\n    var p1 = [points[0][0], points[0][1] - padding];\n    var p2 = [points[0][0], points[0][1] + padding];\n    return \"M \".concat(p1, \" A \").concat(padding, \",\").concat(padding, \",0,0,0,\").concat(p2, \" A \").concat(padding, \",\").concat(padding, \",0,0,0,\").concat(p1);\n  }; // The rounded hull path around two points\n\n\n  var roundedHull2 = function roundedHull2(points) {\n    var offsetVector = vec2.scale([0, 0], unitNormal(points[0], points[1]), padding);\n    var invOffsetVector = vec2.scale([0, 0], offsetVector, -1);\n    var p0 = vec2.add([0, 0], points[0], offsetVector);\n    var p1 = vec2.add([0, 0], points[1], offsetVector);\n    var p2 = vec2.add([0, 0], points[1], invOffsetVector);\n    var p3 = vec2.add([0, 0], points[0], invOffsetVector);\n    return \"M \".concat(p0, \" L \").concat(p1, \" A \").concat([padding, padding, '0,0,0', p2].join(','), \" L \").concat(p3, \" A \").concat([padding, padding, '0,0,0', p0].join(','));\n  }; // 特殊情况处理：节点数小于等于2\n\n\n  if (!polyPoints || polyPoints.length < 1) return '';\n  if (polyPoints.length === 1) return roundedHull1(polyPoints);\n  if (polyPoints.length === 2) return roundedHull2(polyPoints);\n  var segments = new Array(polyPoints.length); // Calculate each offset (outwards) segment of the convex hull.\n\n  for (var segmentIndex = 0; segmentIndex < segments.length; ++segmentIndex) {\n    var p0 = segmentIndex === 0 ? polyPoints[polyPoints.length - 1] : polyPoints[segmentIndex - 1];\n    var p1 = polyPoints[segmentIndex]; // Compute the offset vector for the line segment, with length = padding.\n\n    var offset = vec2.scale([0, 0], unitNormal(p0, p1), padding);\n    segments[segmentIndex] = [vec2.add([0, 0], p0, offset), vec2.add([0, 0], p1, offset)];\n  }\n\n  var arcData = \"A \".concat([padding, padding, '0,0,0,'].join(','));\n  segments = segments.map(function (segment, index) {\n    var pathFragment = '';\n\n    if (index === 0) {\n      pathFragment = \"M \".concat(segments[segments.length - 1][1], \" \");\n    }\n\n    pathFragment += \"\".concat(arcData + segment[0], \" L \").concat(segment[1]);\n    return pathFragment;\n  });\n  return segments.join(' ');\n}\n/**\n * 传入的节点作为多边形顶点，生成平滑的闭合多边形\n * @param polyPoints\n * @param padding\n */\n\nexport function paddedHull(polyPoints, padding) {\n  var pointCount = polyPoints.length;\n\n  var smoothHull1 = function smoothHull1(points) {\n    // Returns the path for a circular hull around a single point.\n    var p1 = [points[0][0], points[0][1] - padding];\n    var p2 = [points[0][0], points[0][1] + padding];\n    return \"M \".concat(p1, \" A \").concat([padding, padding, '0,0,0', p2].join(','), \" A \").concat([padding, padding, '0,0,0', p1].join(','));\n  }; // Returns the path for a rounded hull around two points.\n\n\n  var smoothHull2 = function smoothHull2(points) {\n    var v = vecFrom(points[0], points[1]);\n    var extensionVec = vecScaleTo(v, padding);\n    var extension0 = vec2.add([0, 0], points[0], vec2.scale([0, 0], extensionVec, -1));\n    var extension1 = vec2.add([0, 0], points[1], extensionVec);\n    var tangentHalfLength = 1.2 * padding;\n    var controlDelta = vecScaleTo(vec2.normalize([0, 0], v), tangentHalfLength);\n    var invControlDelta = vec2.scale([0, 0], controlDelta, -1);\n    var control0 = vec2.add([0, 0], extension0, invControlDelta);\n    var control1 = vec2.add([0, 0], extension1, invControlDelta);\n    var control3 = vec2.add([0, 0], extension0, controlDelta); // return [\n    //   ['M', extension0[0], extension0[1]],\n    //   ['C', control0, control1, extension1],\n    //   ['S', control3, extension0],\n    //   'Z',\n    // ];\n\n    return \"M \".concat(extension0, \" C \").concat([control0, control1, extension1].join(','), \" S \").concat([control3, extension0].join(','), \" Z\");\n  }; // Handle special cases\n\n\n  if (!polyPoints || pointCount < 1) return '';\n  if (pointCount === 1) return smoothHull1(polyPoints);\n  if (pointCount === 2) return smoothHull2(polyPoints);\n  var hullPoints = polyPoints.map(function (point, index) {\n    var pNext = polyPoints[(index + 1) % pointCount];\n    return {\n      p: point,\n      v: vec2.normalize([0, 0], vecFrom(point, pNext))\n    };\n  }); // Compute the expanded hull points, and the nearest prior control point for each.\n\n  for (var i = 0; i < hullPoints.length; ++i) {\n    var priorIndex = i > 0 ? i - 1 : pointCount - 1;\n    var extensionVec = vec2.normalize([0, 0], vec2.add([0, 0], hullPoints[priorIndex].v, vec2.scale([0, 0], hullPoints[i].v, -1)));\n    hullPoints[i].p = vec2.add([0, 0], hullPoints[i].p, vec2.scale([0, 0], extensionVec, padding));\n  }\n\n  return hullPoints.map(function (obj) {\n    var point = obj.p;\n    return {\n      x: point[0],\n      y: point[1]\n    };\n  });\n}","map":null,"metadata":{},"sourceType":"module"}