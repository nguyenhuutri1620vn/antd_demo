{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { ManaSyringe, DisposableCollection, MenuItemType, IModelContribution, IModelService, RxModel, Disposable } from '@antv/xflow-core';\nimport { MODELS } from '@antv/xflow-core';\nimport { CONTEXT_MENU_MODEL } from '../interface';\nimport { ContextMenuConfig } from '../config';\nconst {\n  inject,\n  singleton\n} = ManaSyringe;\n/**\n * IModelContribution\n */\n\nlet CanvasContextMenuContribution = class CanvasContextMenuContribution {\n  constructor() {\n    /** 注册 model */\n    this.toDispose = new DisposableCollection();\n    /** 获取 MenuModel */\n\n    this.getMenuModelValue = contextMenuInfo => __awaiter(this, void 0, void 0, function* () {\n      const config = yield this.menuConfig.getConfig();\n      /** 获取坐标 */\n\n      const {\n        anchor,\n        type,\n        cell\n      } = contextMenuInfo;\n      /** 获取Menu */\n\n      const toDispose = new DisposableCollection();\n      this.toDispose.push(toDispose);\n      const data = cell ? cell.getData() : null;\n      const menuModel = new RxModel({\n        id: 'menuroot',\n        type: MenuItemType.Root,\n        submenu: []\n      });\n      toDispose.push(Disposable.create(() => {\n        menuModel.dispose();\n      }));\n      const renderProps = {\n        toDispose,\n        anchor: anchor,\n        target: {\n          data,\n          type\n        },\n        customRender: null,\n        menuModel: menuModel\n      };\n\n      if (config.menuCustomRender) {\n        renderProps.customRender = yield config.menuCustomRender(contextMenuInfo, this.modelService);\n      }\n\n      if (config.menuModelService) {\n        yield config.menuModelService(contextMenuInfo, renderProps.menuModel, this.modelService, toDispose);\n      }\n\n      return renderProps;\n    });\n  }\n  /** 注册 MenuModel */\n\n\n  registerModel(registry) {\n    const toDispose = [registry.registerModel({\n      id: CONTEXT_MENU_MODEL.id,\n      getInitialValue: () => null,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const contextMenuModel = yield MODELS.CONTEXTMENU_TARGET.getModel(modelService);\n        return contextMenuModel.watch(contextMenuInfo => __awaiter(this, void 0, void 0, function* () {\n          const contextMenuValue = yield this.getMenuModelValue(contextMenuInfo);\n          self.setValue(contextMenuValue);\n        }));\n      })\n    })];\n    this.toDispose.pushAll(toDispose);\n  }\n\n};\n\n__decorate([inject(ContextMenuConfig), __metadata(\"design:type\", ContextMenuConfig)], CanvasContextMenuContribution.prototype, \"menuConfig\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], CanvasContextMenuContribution.prototype, \"modelService\", void 0);\n\nCanvasContextMenuContribution = __decorate([singleton({\n  contrib: [IModelContribution]\n})], CanvasContextMenuContribution);\nexport { CanvasContextMenuContribution };","map":null,"metadata":{},"sourceType":"module"}