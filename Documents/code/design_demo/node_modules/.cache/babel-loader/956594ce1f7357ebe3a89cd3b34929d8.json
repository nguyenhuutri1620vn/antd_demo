{"ast":null,"code":"import { getJudgeFunction } from '../fn';\nimport { normalizeWheel } from './normalizeWheel';\nimport { requestAnimationFrame } from './animationFrame';\nexport class WheelHandler {\n  constructor(options) {\n    this.onWheel = e => {\n      const normalizedEvent = normalizeWheel(e);\n      const {\n        pixelX,\n        pixelY\n      } = normalizedEvent;\n      const deltaX = this.deltaX + pixelX;\n      const deltaY = this.deltaY + pixelY;\n      const handleScrollX = this.shouldHandleScrollX(deltaX, deltaY);\n      const handleScrollY = this.shouldHandleScrollY(deltaY, deltaX);\n\n      if (!handleScrollX && !handleScrollY) {\n        return;\n      }\n\n      this.deltaX += handleScrollX ? pixelX : 0;\n      this.deltaY += handleScrollY ? pixelY : 0;\n      let changed;\n\n      if (this.deltaX !== 0 || this.deltaY !== 0) {\n        if (this.stopPropagation()) {\n          e.stopPropagation();\n        }\n\n        changed = true;\n      }\n\n      if (changed === true && this.animationFrameID == null) {\n        this.animationFrameID = requestAnimationFrame(this.didWheel);\n      }\n    };\n\n    this.didWheel = () => {\n      this.animationFrameID = null;\n\n      if (this.callback) {\n        this.callback(this.deltaX, this.deltaY);\n      }\n\n      this.deltaX = 0;\n      this.deltaY = 0;\n    };\n\n    this.callback = options.onWheel;\n    this.stopPropagation = getJudgeFunction(options.stopPropagation);\n    this.shouldHandleScrollX = getJudgeFunction(options.shouldHandleScrollX);\n    this.shouldHandleScrollY = getJudgeFunction(options.shouldHandleScrollY);\n    this.deltaX = 0;\n    this.deltaY = 0;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}