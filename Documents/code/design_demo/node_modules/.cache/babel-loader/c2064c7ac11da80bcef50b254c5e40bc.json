{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Map = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar l7_scene_1 = require(\"@antv/l7-scene\");\n\nvar l7_maps_1 = require(\"@antv/l7-maps\");\n\nvar l7_component_1 = require(\"@antv/l7-component\");\n\nvar event_emitter_1 = (0, tslib_1.__importDefault)(require(\"@antv/event-emitter\"));\n\nvar util_1 = require(\"@antv/util\");\n\nvar tooltip_1 = require(\"../../component/tooltip\");\n\nvar legend_1 = require(\"../../component/legend\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar types_1 = require(\"../../types\");\n\nvar layer_group_1 = require(\"../layer/layer-group\");\n\nvar constants_1 = require(\"./constants\");\n\nvar register_1 = require(\"./register\");\n\nvar theme_1 = require(\"../../theme\");\n\nvar util_2 = require(\"../../theme/util\");\n\nvar DEFAULT_OPTIONS = {\n  map: {\n    type: types_1.BaseMapType.Amap\n  },\n  logo: true\n};\n\nvar Map =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(Map, _super);\n\n  function Map(options) {\n    var _this = _super.call(this) || this;\n    /**\n     * 是否初始化成功\n     */\n\n\n    _this.inited = false;\n    /**\n     * 是否场景加载完成\n     */\n\n    _this.sceneLoaded = false;\n    /**\n     * 是否所有图层加载完成\n     */\n\n    _this.layersLoaded = false;\n    /**\n     * 是否场景与所有图层加载完成\n     */\n\n    _this.loaded = false;\n    /**\n     * 图层组\n     */\n\n    _this.layerGroup = new layer_group_1.LayerGroup();\n    _this.options = (0, utils_1.deepAssign)({}, _this.getDefaultOptions(), options);\n    _this.lastOptions = _this.options;\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  Map.prototype.getDefaultOptions = function () {\n    return Map.DefaultOptions;\n  };\n  /**\n   * 创建 DOM 容器\n   */\n\n\n  Map.prototype.createContainer = function (container) {\n    var _a = this.options,\n        width = _a.width,\n        height = _a.height;\n    var dom = typeof container === 'string' ? document.getElementById(container) : container;\n    dom.style.position || (dom.style.position = 'relative');\n\n    if (width) {\n      dom.style.width || (dom.style.width = \"\".concat(width, \"px\"));\n    }\n\n    if (height) {\n      dom.style.height || (dom.style.height = \"\".concat(height, \"px\"));\n    }\n\n    return dom;\n  };\n  /**\n   * 注册主题\n   */\n\n\n  Map.prototype.createTheme = function () {\n    var theme = (0, util_1.isObject)(this.options.theme) ? (0, utils_1.deepAssign)({}, (0, theme_1.getTheme)('default'), (0, util_2.createTheme)(this.options.theme)) : (0, theme_1.getTheme)(this.options.theme);\n    return theme;\n  };\n  /**\n   * 创建 map 容器\n   */\n\n\n  Map.prototype.createMap = function () {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    var mapConfig = this.options.map ? this.options.map : DEFAULT_OPTIONS.map;\n    var type = mapConfig.type,\n        config = (0, tslib_1.__rest)(mapConfig, [\"type\"]);\n    var options = Object.assign({\n      style: this.theme['mapStyle']\n    }, config);\n    return type === types_1.BaseMapType.Amap ? new l7_maps_1.GaodeMap(options) : new l7_maps_1.Mapbox(options);\n  };\n  /**\n   * 创建 scene 实例\n   */\n\n\n  Map.prototype.createScene = function () {\n    var _a = this.options,\n        logo = _a.logo,\n        antialias = _a.antialias,\n        preserveDrawingBuffer = _a.preserveDrawingBuffer;\n    var logoConfig = (0, util_1.isBoolean)(logo) ? {\n      logoVisible: logo\n    } : {\n      logoVisible: logo === null || logo === void 0 ? void 0 : logo.visible,\n      logoPosition: logo === null || logo === void 0 ? void 0 : logo.position\n    };\n    var sceneConfig = Object.assign({\n      // animate,\n      // fitBoundsOptions,\n      // pickBufferScale,\n      // enableMultiPassRenderer,\n      // passes,\n      antialias: antialias,\n      preserveDrawingBuffer: preserveDrawingBuffer\n    }, logoConfig);\n    var map = this.createMap();\n    var scene = new l7_scene_1.Scene((0, tslib_1.__assign)({\n      id: this.container,\n      map: map\n    }, sceneConfig));\n    return scene;\n  };\n  /**\n   * 注册静态资源\n   */\n\n\n  Map.prototype.registerResources = function () {\n    var _this = this;\n\n    if (register_1.IMAGES_CACHE.size) {\n      register_1.IMAGES_CACHE.forEach(function (img, id) {\n        !_this.scene.hasImage(id) && _this.scene.addImage(id, img);\n      });\n    }\n\n    if (register_1.FONT_FACE_CACHE.size) {\n      register_1.FONT_FACE_CACHE.forEach(function (fontPath, fontFamily) {\n        _this.scene.addFontFace(fontFamily, fontPath);\n      });\n    }\n\n    if (register_1.ICON_FONT_CACHE.size) {\n      register_1.ICON_FONT_CACHE.forEach(function (name, fontUnicode) {\n        _this.scene.addIconFont(fontUnicode, name);\n      });\n    }\n  };\n  /**\n   * 更新: 更新配置且重新渲染\n   */\n\n\n  Map.prototype.update = function (options) {\n    this.updateOption(options);\n\n    if (options.map && !(0, util_1.isEqual)(this.lastOptions.map, this.options.map)) {\n      this.updateMap(options.map);\n    }\n\n    this.render();\n    this.emit('update');\n  };\n  /**\n   * 更新: 更新配置\n   */\n\n\n  Map.prototype.updateOption = function (options) {\n    this.lastOptions = this.options;\n    this.options = (0, utils_1.deepAssign)({}, this.options, options);\n  };\n  /**\n   * 更新: 地图底图配置\n   */\n\n\n  Map.prototype.updateMap = function (updateMapConfig) {\n    var _a;\n\n    if (!this.scene) return;\n    var style = updateMapConfig.style,\n        center = updateMapConfig.center,\n        zoom = updateMapConfig.zoom,\n        rotation = updateMapConfig.rotation,\n        pitch = updateMapConfig.pitch;\n\n    if (!(0, util_1.isUndefined)(pitch)) {\n      this.scene.setPitch(pitch);\n    }\n\n    if (!(0, util_1.isUndefined)(rotation)) {\n      this.scene.setRotation(rotation);\n    }\n\n    if (style && style !== ((_a = this.lastOptions.map) === null || _a === void 0 ? void 0 : _a.style)) {\n      this.scene.setMapStyle(style);\n    }\n\n    if (zoom && center) {\n      this.scene.setZoomAndCenter(zoom, center);\n    }\n  };\n  /**\n   * 修改容器大小\n   */\n\n\n  Map.prototype.changeSize = function (width, height) {\n    if (this.options.width === width && this.options.height === height) return;\n    this.container.style.width = \"\".concat(width, \"px\");\n    this.container.style.height = \"\".concat(height, \"px\");\n    this.options = Object.assign(this.options, {\n      width: width,\n      height: height\n    });\n  };\n  /**\n   * 事件代理: 绑定事件\n   */\n\n\n  Map.prototype.on = function (name, callback) {\n    this.proxyEventHander('on', name, callback);\n    return this;\n  };\n  /**\n   * 事件代理: 绑定一次事件\n   */\n\n\n  Map.prototype.once = function (name, callback) {\n    this.proxyEventHander('once', name, callback);\n    return this;\n  };\n  /**\n   * 事件代理: 解绑事件\n   */\n\n\n  Map.prototype.off = function (name, callback) {\n    this.proxyEventHander('off', name, callback);\n    return this;\n  };\n  /**\n   * 事件代理: 事件处理\n   */\n\n\n  Map.prototype.proxyEventHander = function (type, name, callback) {\n    var sceneEvent = constants_1.SceneEventList.find(function (event) {\n      return event.adaptation === name;\n    });\n\n    if (sceneEvent) {\n      this.scene[type](sceneEvent.original, callback);\n    } else if (constants_1.MapEventList.indexOf(name) !== -1) {\n      this.scene[type](name, callback);\n    } else if (name.includes('Layer:')) {\n      var _a = (0, tslib_1.__read)(name.split(':'), 2),\n          module_1 = _a[0],\n          eventName = _a[1];\n\n      var hasEventEmitter = this[module_1] && this[module_1][type];\n\n      if (hasEventEmitter && constants_1.LayerEventList.indexOf(eventName) !== -1) {\n        this[module_1][type](eventName, callback);\n      } else {\n        throw new Error(\"No event name \\\"\".concat(name, \"\\\"\"));\n      }\n    } else {\n      _super.prototype[type].call(this, name, callback);\n    }\n  };\n  /**\n   * 获取 scene 实例\n   */\n\n\n  Map.prototype.getScene = function () {\n    return this.scene;\n  };\n  /**\n   * 获取 map 实例\n   */\n\n\n  Map.prototype.getMap = function () {\n    var _a, _b;\n\n    if (((_a = this.options.map) === null || _a === void 0 ? void 0 : _a.type) === types_1.BaseMapType.Amap) {\n      return this.scene.map;\n    } else if (((_b = this.options.map) === null || _b === void 0 ? void 0 : _b.type) === types_1.BaseMapType.Mapbox) {\n      return this.scene.map;\n    } else {\n      return this.scene.map;\n    }\n  };\n  /**\n   * 添加图层\n   */\n\n\n  Map.prototype.addLayer = function (layer) {\n    this.layerGroup.addLayer(layer);\n  };\n  /**\n   * 获取所有图层\n   *  @deprecate\n   */\n\n\n  Map.prototype.getLayes = function () {\n    console.warn('Replace to use getLayers()');\n    return this.getLayers();\n  };\n  /**\n   * 获取所有图层\n   */\n\n\n  Map.prototype.getLayers = function () {\n    return this.layerGroup.getLayers();\n  };\n  /**\n   * 根据图层名称获取图层\n   */\n\n\n  Map.prototype.getLayerByName = function (name) {\n    return this.layerGroup.getLayerByName(name);\n  };\n  /**\n   * 移除图层\n   */\n\n\n  Map.prototype.removeLayer = function (layer) {\n    return this.layerGroup.removeLayer(layer);\n  };\n  /**\n   * 移除内置所有的图层\n   */\n\n\n  Map.prototype.removeAllLayer = function () {\n    this.layerGroup.removeAllLayer();\n  };\n  /**\n   * 地图放大一级\n   */\n\n\n  Map.prototype.zoomIn = function () {\n    this.scene.zoomIn();\n  };\n  /**\n   * 地图缩小一级\n   */\n\n\n  Map.prototype.zoomOut = function () {\n    this.scene.zoomOut();\n  };\n  /**\n   * 设置地图倾角\n   */\n\n\n  Map.prototype.setPitch = function (pitch) {\n    this.scene.setPitch(pitch);\n  };\n  /**\n   * 设置地图缩放范围\n   */\n\n\n  Map.prototype.fitBounds = function (bound) {\n    this.scene.fitBounds(bound);\n  };\n  /**\n   * 设置地图状态\n   * 可用来关闭地图的一些交互操作\n   */\n\n\n  Map.prototype.setMapStatus = function (status) {\n    this.scene.setMapStatus(status);\n  };\n  /**\n   * 设置场景的背景色\n   */\n\n\n  Map.prototype.setBgColor = function (color) {\n    this.scene.setBgColor(color);\n  };\n  /**\n   * 初始化组件\n   */\n\n\n  Map.prototype.initComponents = function () {\n    this.initControls();\n    this.initTooltip();\n  };\n  /**\n   * 更新化组件\n   */\n\n\n  Map.prototype.updateComponents = function () {\n    this.updateControls();\n    this.initTooltip();\n  };\n  /**\n   * 初始化控件\n   */\n\n\n  Map.prototype.initControls = function () {\n    var _a = this.options,\n        zoom = _a.zoom,\n        scale = _a.scale,\n        layerMenu = _a.layerMenu,\n        legend = _a.legend;\n    scale && this.addScaleControl(scale);\n    zoom && this.addZoomControl(zoom);\n    layerMenu && this.addLayerMenuControl(layerMenu);\n    legend && this.addLegendControl(legend);\n  };\n  /**\n   * 更新控件\n   */\n\n\n  Map.prototype.updateControls = function () {\n    var _a = this.options,\n        zoom = _a.zoom,\n        scale = _a.scale,\n        layerMenu = _a.layerMenu,\n        legend = _a.legend;\n\n    if (!(0, util_1.isEqual)(this.lastOptions.zoom, zoom)) {\n      zoom ? this.updateZoomControl(zoom) : this.removeZoomControl();\n    }\n\n    if (!(0, util_1.isEqual)(this.lastOptions.scale, scale)) {\n      scale ? this.updateScaleControl(scale) : this.removeScaleControl();\n    }\n\n    if (!(0, util_1.isEqual)(this.lastOptions.layerMenu, layerMenu)) {\n      layerMenu ? this.updateLayerMenuControl(layerMenu) : this.removeLayerMenuControl();\n    }\n\n    if (!(0, util_1.isEqual)(this.lastOptions.legend, legend)) {\n      legend ? this.updateLegendControl(legend) : this.removeLegendControl();\n    }\n  };\n  /**\n   * 添加 zoom 控件\n   */\n\n\n  Map.prototype.addZoomControl = function (options) {\n    if (this.zoomControl) {\n      return;\n    }\n\n    this.zoomControl = new l7_component_1.Zoom(options);\n    this.scene.addControl(this.zoomControl);\n  };\n  /**\n   * 更新 zoom 控件\n   */\n\n\n  Map.prototype.updateZoomControl = function (options) {\n    if (!this.zoomControl) {\n      this.addZoomControl(options);\n      return;\n    }\n\n    this.removeZoomControl();\n    this.addZoomControl(options);\n  };\n  /**\n   * 移除 zoom 控件\n   */\n\n\n  Map.prototype.removeZoomControl = function () {\n    if (this.zoomControl) {\n      this.zoomControl.remove();\n      this.zoomControl = undefined;\n    }\n  };\n  /**\n   * 添加 scale 控件\n   */\n\n\n  Map.prototype.addScaleControl = function (options) {\n    if (this.scaleControl) {\n      return;\n    }\n\n    this.scaleControl = new l7_component_1.Scale(options);\n    this.scene.addControl(this.scaleControl);\n  };\n  /**\n   * 更新 scale 控件\n   */\n\n\n  Map.prototype.updateScaleControl = function (options) {\n    if (!this.scaleControl) {\n      this.addScaleControl(options);\n      return;\n    }\n\n    this.removeScaleControl();\n    this.addScaleControl(options);\n  };\n  /**\n   * 移除 scale 控件\n   */\n\n\n  Map.prototype.removeScaleControl = function () {\n    if (this.scaleControl) {\n      this.scaleControl.remove();\n      this.scaleControl = undefined;\n    }\n  };\n  /**\n   * 添加 layerMenu 控件\n   */\n\n\n  Map.prototype.addLayerMenuControl = function (options) {\n    if (this.layerMenuControl) {\n      return;\n    }\n\n    var baseLayers = {};\n    var overlayers = {};\n    this.layerGroup.getLayers().forEach(function (_a) {\n      var name = _a.name,\n          layer = _a.layer;\n      overlayers[name] = layer;\n    });\n    this.layerMenuControl = new l7_component_1.Layers(Object.assign({}, options, {\n      baseLayers: baseLayers,\n      overlayers: overlayers\n    }));\n    this.scene.addControl(this.layerMenuControl);\n  };\n  /**\n   * 更新 layerMenu 控件\n   */\n\n\n  Map.prototype.updateLayerMenuControl = function (options) {\n    if (!this.layerMenuControl) {\n      this.addLayerMenuControl(options);\n      return;\n    }\n\n    this.removeLayerMenuControl();\n    this.addLayerMenuControl(options);\n  };\n  /**\n   * 移除 layerMenu 控件\n   */\n\n\n  Map.prototype.removeLayerMenuControl = function () {\n    if (this.layerMenuControl) {\n      this.layerMenuControl.remove();\n      this.layerMenuControl = undefined;\n    }\n  };\n  /**\n   * 获取 legend 配置项\n   * 由各图各自实现，不同的图 legend 可能不同\n   */\n\n\n  Map.prototype.getLegendOptions = function () {\n    return {};\n  };\n  /**\n   * 添加 legend 控件\n   */\n\n\n  Map.prototype.addLegendControl = function (options) {\n    if (this.legendControl) {\n      return;\n    }\n\n    var legendTheme = this.theme['components'].legend;\n    var legendOptions = (0, utils_1.deepAssign)({}, this.getLegendOptions(), options);\n    var type = legendOptions.type,\n        position = legendOptions.position,\n        rest = (0, tslib_1.__rest)(legendOptions, [\"type\", \"position\"]);\n    var items = [];\n\n    if (type === 'category') {\n      var options_1 = (0, utils_1.deepAssign)({}, {\n        domStyles: legendTheme.category.domStyles\n      }, rest);\n      items.push({\n        type: type,\n        options: options_1\n      });\n    } else if (type === 'continue') {\n      var options_2 = (0, utils_1.deepAssign)({}, {\n        domStyles: legendTheme.continue.domStyles\n      }, rest);\n      items.push({\n        type: type,\n        options: options_2\n      });\n    }\n\n    if (items.length) {\n      this.legendControl = new legend_1.Legend({\n        position: position,\n        items: items\n      });\n      this.scene.addControl(this.legendControl);\n    }\n  };\n  /**\n   * 更新 legend 控件\n   */\n\n\n  Map.prototype.updateLegendControl = function (options) {\n    if (!this.legendControl) {\n      this.addLegendControl(options);\n      return;\n    }\n\n    this.removeLegendControl();\n    this.addLegendControl(options);\n  };\n  /**\n   * 移除 legend 控件\n   */\n\n\n  Map.prototype.removeLegendControl = function () {\n    if (this.legendControl) {\n      this.legendControl.remove();\n      this.legendControl = undefined;\n    }\n  };\n  /**\n   * 初始化 tooltip\n   */\n\n\n  Map.prototype.initTooltip = function () {\n    var _this = this;\n\n    if (this.tooltip) {\n      this.tooltip.destroy();\n    }\n\n    var tooltip = this.options.tooltip;\n\n    if (tooltip) {\n      var options = (0, utils_1.deepAssign)({}, {\n        domStyles: this.theme['components'].tooltip.domStyles\n      }, tooltip);\n      var interactionLayers = this.layerGroup.getInteractionLayers();\n      this.tooltip = new tooltip_1.Tooltip(this.scene, interactionLayers, options);\n      this.tooltip.on('*', function (event) {\n        return _this.emit(event.type, event);\n      });\n    }\n  };\n  /**\n   * 导出地图图片\n   */\n\n\n  Map.prototype.exportPng = function (type) {\n    return this.scene.exportPng(type);\n  };\n  /**\n   * 销毁\n   */\n\n\n  Map.prototype.destroy = function () {\n    var _a; // TODO: 清空已经绑定其他的事件\n\n\n    _super.prototype.off.call(this, '*');\n\n    this.removeScaleControl();\n    this.removeZoomControl();\n    this.removeLayerMenuControl();\n    this.removeLegendControl();\n    (_a = this.tooltip) === null || _a === void 0 ? void 0 : _a.destroy();\n    this.scene.destroy();\n  };\n  /**\n   * 默认的 options 配置项\n   */\n\n\n  Map.DefaultOptions = DEFAULT_OPTIONS;\n  return Map;\n}(event_emitter_1.default);\n\nexports.Map = Map;","map":null,"metadata":{},"sourceType":"script"}