{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar glyphSizeInSDF = 30;\nexport function buildMapping(_ref) {\n  var characterSet = _ref.characterSet,\n      getFontWidth = _ref.getFontWidth,\n      fontHeight = _ref.fontHeight,\n      buffer = _ref.buffer,\n      maxCanvasWidth = _ref.maxCanvasWidth,\n      _ref$mapping = _ref.mapping,\n      mapping = _ref$mapping === void 0 ? {} : _ref$mapping,\n      _ref$xOffset = _ref.xOffset,\n      xOffset = _ref$xOffset === void 0 ? 0 : _ref$xOffset,\n      _ref$yOffset = _ref.yOffset,\n      yOffset = _ref$yOffset === void 0 ? 0 : _ref$yOffset;\n  var row = 0;\n  var x = xOffset;\n  Array.from(characterSet).forEach(function (char, i) {\n    if (!mapping[char]) {\n      var width = getFontWidth(char, i);\n\n      if (x + glyphSizeInSDF > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n\n      mapping[char] = {\n        x: x,\n        y: yOffset + row * glyphSizeInSDF,\n        width: glyphSizeInSDF,\n        height: glyphSizeInSDF,\n        advance: width\n      };\n      x += glyphSizeInSDF;\n    }\n  });\n  var rowHeight = fontHeight + buffer * 2;\n  return {\n    mapping: mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\nexport function buildIconMaping(icons, buffer, maxCanvasWidth) {\n  var xOffset = 0;\n  var yOffset = 0;\n  var rowHeight = 0;\n  var columns = [];\n  var mapping = {};\n\n  var _iterator = _createForOfIteratorHelper(icons),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var icon = _step.value;\n\n      if (!mapping[icon.id]) {\n        var size = icon.size;\n\n        if (xOffset + size + buffer > maxCanvasWidth) {\n          buildRowMapping(mapping, columns, yOffset);\n          xOffset = 0;\n          yOffset = rowHeight + yOffset + buffer;\n          rowHeight = 0;\n          columns = [];\n        }\n\n        columns.push({\n          icon: icon,\n          xOffset: xOffset\n        });\n        xOffset = xOffset + size + buffer;\n        rowHeight = Math.max(rowHeight, size);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  var canvasHeight = nextPowOfTwo(rowHeight + yOffset + buffer);\n  return {\n    mapping: mapping,\n    canvasHeight: canvasHeight\n  };\n}\n\nfunction buildRowMapping(mapping, columns, yOffset) {\n  var _iterator2 = _createForOfIteratorHelper(columns),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var column = _step2.value;\n      var icon = column.icon,\n          xOffset = column.xOffset;\n      mapping[icon.id] = _objectSpread(_objectSpread({}, icon), {}, {\n        x: xOffset,\n        y: yOffset,\n        image: icon.image,\n        width: icon.width,\n        height: icon.height\n      });\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\n\nexport function nextPowOfTwo(num) {\n  return Math.pow(2, Math.ceil(Math.log2(num)));\n}","map":null,"metadata":{},"sourceType":"module"}