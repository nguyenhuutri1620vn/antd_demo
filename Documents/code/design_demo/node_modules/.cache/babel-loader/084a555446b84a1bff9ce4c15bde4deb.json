{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport G6 from '@antv/g6';\nimport { isBoolean, mix, isPlainObject, clone, each, deepMix } from '@antv/util';\nimport { defaultMargin, defaultLabelStyle, defaultCardStyle } from '../../constants';\nimport { getStyle, getCssPadding, getStatusBBox, getStatusCfg, createMarker, cloneBesidesImg, setEllipsis } from '../../utils'; // 通用指标卡\n\nexport var registerIndicatorCardNode = function () {\n  var defaultTitleLabelStyle = {\n    fill: '#fff',\n    fontSize: 12\n  };\n  var defaultTitleRectStyle = {\n    fill: '#40a9ff',\n    radius: [2, 2, 0, 0]\n  };\n  var defaultIconStyle = {\n    width: 12,\n    height: 12\n  };\n  var ARROWS = ['startArrow', 'endArrow'];\n  var SHAPE_DEFAULT_ATTRS = {\n    lineWidth: 1,\n    stroke: undefined,\n    fill: undefined,\n    lineAppendWidth: 1,\n    opacity: undefined,\n    strokeOpacity: undefined,\n    fillOpacity: undefined,\n    x: 0,\n    y: 0,\n    r: 10,\n    width: 20,\n    height: 20,\n    shadowColor: undefined,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0\n  };\n  var PATH_SHAPE_DEFAULT_ATTRS = {\n    lineWidth: 1,\n    stroke: '#000',\n    lineDash: undefined,\n    startArrow: false,\n    endArrow: false,\n    opacity: undefined,\n    strokeOpacity: undefined,\n    fillOpacity: undefined,\n    shadowColor: undefined,\n    shadowBlur: 0,\n    shadowOffsetX: 0,\n    shadowOffsetY: 0\n  };\n  var SHAPES_DEFAULT_ATTRS = {\n    edge: PATH_SHAPE_DEFAULT_ATTRS,\n    node: SHAPE_DEFAULT_ATTRS\n  };\n  G6.registerNode('indicator-card', {\n    // @ts-ignore\n    draw: function (cfg, group) {\n      var _a, _b, _c;\n\n      if (cfg === void 0) {\n        cfg = {};\n      }\n\n      var _d = cfg.value,\n          value = _d === void 0 ? {} : _d,\n          nodeCfg = cfg.nodeCfg,\n          markerCfg = cfg.markerCfg;\n      var _e = nodeCfg,\n          titleCfg = _e.title,\n          itemsCfg = _e.items,\n          _f = _e.label,\n          label = _f === void 0 ? {} : _f,\n          style = _e.style,\n          _g = _e.padding,\n          padding = _g === void 0 ? 0 : _g,\n          badge = _e.badge,\n          autoWidth = _e.autoWidth,\n          customContent = _e.customContent;\n      var appendPadding = getStatusBBox(badge);\n      var labelStyle = label.style;\n      var cardPadding = getCssPadding(padding);\n      var paddingArray = cardPadding.map(function (item, index) {\n        return item + appendPadding[index];\n      });\n\n      var _h = titleCfg !== null && titleCfg !== void 0 ? titleCfg : {},\n          titleStyle = _h.style,\n          titleContainerStyle = _h.containerStyle,\n          _j = _h.autoEllipsis,\n          autoEllipsis = _j === void 0 ? true : _j;\n\n      var _k = itemsCfg !== null && itemsCfg !== void 0 ? itemsCfg : {},\n          itemStyle = _k.style,\n          itemContainerStyle = _k.containerStyle,\n          layout = _k.layout,\n          _l = _k.itemSpacing,\n          itemSpacing = _l === void 0 ? 4 : _l,\n          sort = _k.sort,\n          _m = _k.padding,\n          itemPadding = _m === void 0 ? [6, 0, 0] : _m;\n\n      var itemPaddingArray = getCssPadding(itemPadding);\n      var _o = value,\n          title = _o.title,\n          items = _o.items;\n      var size = (cfg === null || cfg === void 0 ? void 0 : cfg.size) || [100, 30];\n      if (typeof size === 'number') size = [size, size];\n      var height = 0; // 统计容器总高度，动态设置\n\n      var shapeWidth = size[0];\n      var contentWidth = shapeWidth - paddingArray[1] - paddingArray[3]; // card box\n\n      var cardStyle = getStyle(style, cfg, group);\n      var shape = group.addShape('rect', {\n        attrs: __assign(__assign({\n          x: 0,\n          y: 0,\n          width: size[0],\n          height: size[1]\n        }, defaultCardStyle), cardStyle),\n        name: 'main-box',\n        draggable: true\n      }); // node title\n\n      var titleTextShape;\n      var itemShape;\n      var titleShape;\n\n      if (title) {\n        // title rect\n        titleShape = group.addShape('rect', {\n          attrs: __assign(__assign({\n            x: 0,\n            y: 0,\n            width: size[0],\n            height: 0\n          }, defaultTitleRectStyle), getStyle(titleContainerStyle, cfg, group)),\n          name: 'title-rect',\n          draggable: true\n        });\n\n        var textStyle = __assign(__assign({}, defaultTitleLabelStyle), getStyle(titleStyle, cfg, group));\n\n        titleTextShape = group.addShape('text', {\n          attrs: __assign({\n            x: paddingArray[3],\n            y: paddingArray[0],\n            textBaseline: 'top',\n            text: autoEllipsis && !autoWidth ? setEllipsis(title, textStyle === null || textStyle === void 0 ? void 0 : textStyle.fontSize, contentWidth) : title\n          }, textStyle),\n          name: 'title'\n        });\n        var titleHeight_1 = (titleTextShape ? titleTextShape.getBBox() : {\n          height: size[1] / 2\n        }).height;\n        titleShape === null || titleShape === void 0 ? void 0 : titleShape.attr('height', titleHeight_1 + paddingArray[0] + paddingArray[2]);\n        height += titleShape.getBBox().height;\n      }\n\n      if (items) {\n        if (!titleShape) {\n          height += paddingArray[0];\n        }\n\n        itemShape = group.addShape('rect', {\n          attrs: __assign({\n            x: paddingArray[3],\n            y: height,\n            width: contentWidth,\n            height: 0\n          }, getStyle(itemContainerStyle, cfg, group)),\n          name: 'item-box',\n          draggable: true\n        });\n        height += itemPaddingArray[0];\n        var itemContentWidth_1 = contentWidth - itemPaddingArray[1] - itemPaddingArray[3];\n        var isArray_1 = Array.isArray(items);\n\n        var createRowItems_1 = function (item, contentWidth, startX, index) {\n          if (index === void 0) {\n            index = 0;\n          }\n\n          var rowHeight = [];\n          var valueShapeWidth = 0;\n          var keys = sort ? Object.keys(item) : ['text', 'value', 'icon'];\n          keys.forEach(function (key, keyIndex) {\n            var x;\n            var isIcon = key.startsWith('icon'); // sort 直接均分，简单化\n\n            if (sort || layout === 'flex') {\n              x = keyIndex * contentWidth / keys.length;\n            } else if (layout === 'follow') {\n              x = valueShapeWidth;\n            } else {\n              // layout === 'bundled'\n              // 直接均分，icon 紧随 value\n              x = key === 'text' ? 0 : contentWidth / 2;\n              x += isIcon ? valueShapeWidth : 0;\n            }\n\n            var keyShape = group.addShape(isIcon ? 'image' : 'text', {\n              attrs: __assign(__assign({\n                textBaseline: 'top',\n                x: startX + x,\n                y: height,\n                text: item[key],\n                img: item[key]\n              }, isIcon ? defaultIconStyle : defaultLabelStyle), getStyle(itemStyle || labelStyle, cfg, group, key)),\n              name: \"\".concat(key, \"-\").concat(index, \"-\").concat(keyIndex)\n            });\n\n            if (key === 'value' || layout === 'follow') {\n              valueShapeWidth += keyShape.getBBox().width;\n              valueShapeWidth += layout === 'follow' ? itemSpacing : 0;\n            }\n\n            rowHeight.push(keyShape.getBBox().height);\n          });\n          return rowHeight;\n        };\n\n        var createItems_1 = function (item, index) {\n          var _a;\n\n          if (index === void 0) {\n            index = 0;\n          }\n\n          var itemsHeight = [];\n\n          if (customContent) {\n            itemsHeight.push((_a = customContent(item, group, {\n              startX: paddingArray[3] + itemPaddingArray[3],\n              startY: height,\n              width: itemContentWidth_1\n            })) !== null && _a !== void 0 ? _a : 0);\n          } else {\n            itemsHeight.push.apply(itemsHeight, createRowItems_1(item, itemContentWidth_1, paddingArray[3] + itemPaddingArray[3], index));\n          }\n\n          height += Math.max.apply(Math, itemsHeight);\n\n          if (isArray_1 && index !== items.length - 1) {\n            height += defaultMargin;\n          }\n        };\n\n        if (Array.isArray(items)) {\n          items.forEach(function (item, index) {\n            createItems_1(item, index);\n          });\n        } else {\n          createItems_1(items);\n        }\n      }\n\n      var titleHeight = (titleShape === null || titleShape === void 0 ? void 0 : titleShape.getBBox().height) || 0;\n      itemShape === null || itemShape === void 0 ? void 0 : itemShape.attr('height', Math.max(height - titleHeight + itemPaddingArray[2], size[1]));\n      var itemHeight = (itemShape === null || itemShape === void 0 ? void 0 : itemShape.getBBox().height) || 0;\n      var shapeHeight = items ? (titleHeight || paddingArray[0]) + itemHeight + paddingArray[2] : titleHeight + itemHeight;\n      shape === null || shape === void 0 ? void 0 : shape.attr('height', shapeHeight);\n\n      if (autoWidth) {\n        var maxX = Math.max.apply(Math, __spreadArray([shapeWidth], (_a = group === null || group === void 0 ? void 0 : group.getChildren()) === null || _a === void 0 ? void 0 : _a.map(function (childrenShape) {\n          return (childrenShape.getBBox().maxX || 0) + paddingArray[1];\n        }), false));\n        titleShape === null || titleShape === void 0 ? void 0 : titleShape.attr('width', maxX);\n        shape === null || shape === void 0 ? void 0 : shape.attr('width', maxX);\n      }\n\n      if (badge) {\n        var statusConfig = getStatusCfg(badge, [size[0], shapeHeight]);\n        group.addShape('rect', {\n          attrs: __assign(__assign({\n            fill: '#40a9ff'\n          }, statusConfig), getStyle(badge.style, cfg, group)),\n          name: 'status-rect'\n        });\n      } // collapse marker\n\n\n      if (markerCfg) {\n        var stateCollapsed = ((_c = (_b = group === null || group === void 0 ? void 0 : group.get('item')) === null || _b === void 0 ? void 0 : _b.getModel()) !== null && _c !== void 0 ? _c : {}).collapsed;\n\n        var _p = shape.getBBox(),\n            shapeWidth_1 = _p.width,\n            shapeHeight_1 = _p.height;\n\n        var _q = typeof markerCfg === 'function' ? markerCfg(cfg, group) : markerCfg,\n            show = _q.show,\n            _r = _q.position,\n            position = _r === void 0 ? 'right' : _r,\n            collapsed = _q.collapsed,\n            markerStyle = _q.style;\n\n        createMarker({\n          show: show,\n          position: position,\n          collapsed: stateCollapsed !== null && stateCollapsed !== void 0 ? stateCollapsed : collapsed,\n          style: markerStyle\n        }, group, [shapeWidth_1, shapeHeight_1]);\n        shape.attr('defaultCollapsed', collapsed);\n      }\n\n      return shape;\n    },\n\n    /**\n     * 更新节点，包含文本\n     * @override\n     * @param  {Object} cfg 节点的配置项\n     * @param  {Node} node 节点\n     */\n    // @ts-ignore\n    update: undefined,\n    // @ts-ignore\n    setState: function (name, value, item) {\n      var _a, _b;\n\n      var shape = item.get('keyShape');\n      if (!shape || shape.destroyed) return;\n      var type = item.getType();\n      var stateName = isBoolean(value) ? name : \"\".concat(name, \":\").concat(value);\n      var itemStateStyle = item.getStateStyle(stateName); // const originStyle = item.getOriginStyle();\n      // 不允许设置一个不存在的状态\n\n      if (!itemStateStyle) {\n        return;\n      } // 要设置或取消的状态的样式\n      // 当没有 state 状态时，默认使用 model.stateStyles 中的样式\n\n\n      var styles = Object.assign({}, itemStateStyle);\n      var group = item.getContainer(); // 从图元素现有的样式中删除本次要取消的 states 中存在的属性值。使用对象检索更快\n\n      var keptAttrs = {\n        x: 1,\n        y: 1,\n        cx: 1,\n        cy: 1\n      };\n\n      if (value) {\n        var _loop_1 = function (key) {\n          var _c;\n\n          var style = styles[key];\n\n          if (isPlainObject(style) && !ARROWS.includes(key)) {\n            var subShape = group.find(function (element) {\n              return element.get('name') === key;\n            });\n\n            if (subShape) {\n              subShape.attr(style);\n            }\n          } else {\n            // 非纯对象，则认为是设置到 keyShape 上面的\n            shape.attr((_c = {}, _c[key] = style, _c));\n          }\n        }; // style 为要设置的状态的样式\n\n\n        for (var key in styles) {\n          _loop_1(key);\n        }\n      } else {\n        // 所有生效的 state 的样式\n        var enableStatesStyle = cloneBesidesImg(item.getCurrentStatesStyle());\n        var model = item.getModel(); // 原始样式\n\n        var originStyle_1 = mix({}, model.style, cloneBesidesImg(item.getOriginStyle()));\n        var keyShapeName_1 = shape.get('name'); // cloning  shape.attr(), keys.forEach to avoid cloning the img attr, which leads to maximum clone heap #2383\n        // const keyShapeStyles = clone(shape.attr())\n\n        var shapeAttrs_1 = shape.attr();\n        var keyShapeStyles_1 = {};\n        Object.keys(shapeAttrs_1).forEach(function (key) {\n          if (key === 'img') return;\n          var attr = shapeAttrs_1[key];\n\n          if (attr && typeof attr === 'object') {\n            keyShapeStyles_1[key] = clone(attr);\n          } else {\n            keyShapeStyles_1[key] = attr;\n          }\n        }); // 已有样式 - 要取消的状态的样式\n\n        var filtetDisableStatesStyle = {};\n\n        var _loop_2 = function (p) {\n          var style = styles[p];\n\n          if (isPlainObject(style) && !ARROWS.includes(p)) {\n            var subShape_1 = group.find(function (element) {\n              return element.get('name') === p;\n            });\n\n            if (subShape_1) {\n              var subShapeStyles_1 = clone(subShape_1.attr());\n              each(style, function (v, key) {\n                if (p === keyShapeName_1 && keyShapeStyles_1[key] && !keptAttrs[key]) {\n                  delete keyShapeStyles_1[key];\n                  var value_1 = originStyle_1[p][key] || SHAPES_DEFAULT_ATTRS[type][key];\n                  shape.attr(key, value_1);\n                } else if (subShapeStyles_1[key] || subShapeStyles_1[key] === 0) {\n                  delete subShapeStyles_1[key];\n                  var value_2 = originStyle_1[p][key] || SHAPES_DEFAULT_ATTRS[type][key];\n                  subShape_1.attr(key, value_2);\n                }\n              });\n              filtetDisableStatesStyle[p] = subShapeStyles_1;\n            }\n          } else {\n            if (keyShapeStyles_1[p] && !keptAttrs[p]) {\n              delete keyShapeStyles_1[p];\n              var value_3 = originStyle_1[p] || (originStyle_1[keyShapeName_1] ? originStyle_1[keyShapeName_1][p] : undefined) || SHAPES_DEFAULT_ATTRS[type][p];\n              shape.attr(p, value_3);\n            }\n          }\n        }; // styles 为要取消的状态的样式\n\n\n        for (var p in styles) {\n          _loop_2(p);\n        } // 从图元素现有的样式中删除本次要取消的 states 中存在的属性值后，\n        // 如果 keyShape 有 name 属性，则 filtetDisableStatesStyle 的格式为 { keyShapeName: {} }\n        // 否则为普通对象\n\n\n        if (!keyShapeName_1) {\n          mix(filtetDisableStatesStyle, keyShapeStyles_1);\n        } else {\n          filtetDisableStatesStyle[keyShapeName_1] = keyShapeStyles_1;\n        }\n\n        for (var key in enableStatesStyle) {\n          if (keptAttrs[key]) continue;\n          var enableStyle = enableStatesStyle[key];\n\n          if (!isPlainObject(enableStyle) || ARROWS.includes(key)) {\n            // 把样式属性merge到keyShape中\n            if (!keyShapeName_1) {\n              mix(originStyle_1, (_a = {}, _a[key] = enableStyle, _a));\n            } else {\n              mix(originStyle_1[keyShapeName_1], (_b = {}, _b[key] = enableStyle, _b));\n              delete originStyle_1[key];\n            }\n\n            delete enableStatesStyle[key];\n          }\n        }\n\n        var originstyles = {};\n        deepMix(originstyles, originStyle_1, filtetDisableStatesStyle, enableStatesStyle);\n        var keyShapeSetted = false;\n\n        var _loop_3 = function (originKey) {\n          var _d;\n\n          var style = originstyles[originKey];\n\n          if (isPlainObject(style) && !ARROWS.includes(originKey)) {\n            var subShape = group.find(function (element) {\n              return element.get('name') === originKey;\n            });\n\n            if (subShape) {\n              if (originKey === keyShapeName_1) {\n                keyShapeSetted = true;\n              }\n\n              if (originKey !== 'collapse-icon') subShape.attr(style);\n            }\n          } else if (!keyShapeSetted) {\n            var value_4 = style || SHAPES_DEFAULT_ATTRS[type][originKey];\n            shape.attr((_d = {}, _d[originKey] = value_4, _d));\n          }\n        };\n\n        for (var originKey in originstyles) {\n          _loop_3(originKey);\n        }\n      }\n    }\n  }, 'single-node');\n};","map":null,"metadata":{},"sourceType":"module"}