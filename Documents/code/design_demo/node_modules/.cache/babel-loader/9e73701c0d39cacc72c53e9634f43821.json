{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { modifyCSS, createDom } from '@antv/dom-util';\nimport { isString } from '@antv/util';\nimport insertCss from 'insert-css';\nimport Base from '../base';\ntypeof document !== 'undefined' && insertCss(\"\\n  .g6-component-contextmenu {\\n    border: 1px solid #e2e2e2;\\n    border-radius: 4px;\\n    font-size: 12px;\\n    color: #545454;\\n    background-color: rgba(255, 255, 255, 0.9);\\n    padding: 10px 8px;\\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\\n  }\\n  .g6-contextmenu-ul {\\n    padding: 0;\\n    margin: 0;\\n    list-style: none;\\n  }\\n\\n\");\n\nvar Menu =\n/** @class */\nfunction (_super) {\n  __extends(Menu, _super);\n\n  function Menu(config) {\n    return _super.call(this, config) || this;\n  }\n\n  Menu.prototype.getDefaultCfgs = function () {\n    return {\n      offsetX: 6,\n      offsetY: 6,\n      handleMenuClick: undefined,\n      // 指定菜单内容，function(e) {...}\n      getContent: function getContent(e) {\n        return \"\\n          <ul class='g6-contextmenu-ul'>\\n            <li>\\u83DC\\u5355\\u98791</li>\\n            <li>\\u83DC\\u5355\\u98792</li>\\n          </ul>\\n        \";\n      },\n      shouldBegin: function shouldBegin(e) {\n        return true;\n      },\n      // 菜单隐藏事件\n      onHide: function onHide() {\n        return true;\n      },\n      itemTypes: ['node', 'edge', 'combo'],\n      trigger: 'contextmenu'\n    };\n  }; // class-methods-use-this\n\n\n  Menu.prototype.getEvents = function () {\n    if (this.get('trigger') === 'click') {\n      return {\n        click: 'onMenuShow',\n        touchend: 'onMenuShow'\n      };\n    }\n\n    return {\n      contextmenu: 'onMenuShow'\n    };\n  };\n\n  Menu.prototype.init = function () {\n    var className = this.get('className');\n    var menu = createDom(\"<div class=\".concat(className || 'g6-component-contextmenu', \"></div>\"));\n    modifyCSS(menu, {\n      top: '0px',\n      position: 'absolute',\n      visibility: 'hidden'\n    });\n    var container = this.get('container');\n\n    if (!container) {\n      container = this.get('graph').get('container');\n    }\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n    }\n\n    container.appendChild(menu);\n    this.set('menu', menu);\n  };\n\n  Menu.prototype.onMenuShow = function (e) {\n    var self = this;\n    e.preventDefault();\n    var itemTypes = this.get('itemTypes');\n\n    if (!e.item) {\n      if (itemTypes.indexOf('canvas') === -1) {\n        self.onMenuHide();\n        return;\n      }\n    } else {\n      if (e.item && e.item.getType && itemTypes.indexOf(e.item.getType()) === -1) {\n        self.onMenuHide();\n        return;\n      }\n    }\n\n    var shouldBegin = this.get('shouldBegin');\n    if (!shouldBegin(e)) return;\n    var menuDom = this.get('menu');\n    var getContent = this.get('getContent');\n    var graph = this.get('graph');\n    var menu = getContent(e, graph);\n\n    if (isString(menu)) {\n      menuDom.innerHTML = menu;\n    } else {\n      menuDom.innerHTML = menu.outerHTML;\n    } // 清除之前监听的事件\n\n\n    this.removeMenuEventListener();\n    var handleMenuClick = this.get('handleMenuClick');\n\n    if (handleMenuClick) {\n      var handleMenuClickWrapper = function handleMenuClickWrapper(evt) {\n        handleMenuClick(evt.target, e.item, graph);\n      };\n\n      this.set('handleMenuClickWrapper', handleMenuClickWrapper);\n      menuDom.addEventListener('click', handleMenuClickWrapper);\n    }\n\n    var width = graph.get('width');\n    var height = graph.get('height');\n    var bbox = menuDom.getBoundingClientRect();\n    var offsetX = this.get('offsetX') || 0;\n    var offsetY = this.get('offsetY') || 0;\n    var graphTop = graph.getContainer().offsetTop;\n    var graphLeft = graph.getContainer().offsetLeft;\n    var x = e.canvasX + graphLeft + offsetX;\n    var y = e.canvasY + graphTop + offsetY; // when the menu is (part of) out of the canvas\n\n    if (x + bbox.width > width) {\n      x = e.canvasX - bbox.width - offsetX + graphLeft;\n    }\n\n    if (y + bbox.height > height) {\n      y = e.canvasY - bbox.height - offsetY + graphTop;\n    }\n\n    modifyCSS(menuDom, {\n      top: \"\".concat(y, \"px\"),\n      left: \"\".concat(x, \"px\"),\n      visibility: 'visible'\n    }); // 左键单击会触发 body 上监听的 click 事件，导致菜单展示出来后又立即被隐藏了，需要过滤掉\n\n    var triggeredByFirstClick = this.get('trigger') === 'click';\n\n    var handler = function handler(evt) {\n      if (triggeredByFirstClick) {\n        triggeredByFirstClick = false;\n        return;\n      }\n\n      self.onMenuHide();\n    }; // 如果在页面中其他任意地方进行click, 隐去菜单\n\n\n    document.body.addEventListener('click', handler);\n    this.set('handler', handler);\n  };\n\n  Menu.prototype.removeMenuEventListener = function () {\n    var handleMenuClickWrapper = this.get('handleMenuClickWrapper');\n    var handler = this.get('handler');\n\n    if (handleMenuClickWrapper) {\n      var menuDom = this.get('menu');\n      menuDom.removeEventListener('click', handleMenuClickWrapper);\n      this.set('handleMenuClickWrapper', null);\n    }\n\n    if (handler) {\n      document.body.removeEventListener('click', handler);\n    }\n  };\n\n  Menu.prototype.onMenuHide = function () {\n    var menuDom = this.get('menu');\n\n    if (menuDom) {\n      modifyCSS(menuDom, {\n        visibility: 'hidden'\n      });\n    } // 隐藏菜单后需要移除事件监听\n\n\n    this.removeMenuEventListener();\n  };\n\n  Menu.prototype.destroy = function () {\n    var menu = this.get('menu');\n    this.removeMenuEventListener();\n\n    if (menu) {\n      var container = this.get('container');\n\n      if (!container) {\n        container = this.get('graph').get('container');\n      }\n\n      if (isString(container)) {\n        container = document.getElementById(container);\n      }\n\n      container.removeChild(menu);\n    }\n  };\n\n  return Menu;\n}(Base);\n\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}