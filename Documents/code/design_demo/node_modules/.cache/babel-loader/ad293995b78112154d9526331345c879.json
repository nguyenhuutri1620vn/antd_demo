{"ast":null,"code":"import { __assign } from \"tslib\";\nimport Util from '../util';\nvar isPolygonsIntersect = Util.isPolygonsIntersect,\n    pathToPoints = Util.pathToPoints;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\n\nvar isItemIntersecPolygon = function isItemIntersecPolygon(item, polyPoints) {\n  var shapePoints;\n  var shape = item.getKeyShape();\n\n  if (item.get('type') === 'path') {\n    shapePoints = pathToPoints(shape.attr('path'));\n  } else {\n    var shapeBBox = shape.getCanvasBBox();\n    shapePoints = [[shapeBBox.minX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.maxY], [shapeBBox.minX, shapeBBox.maxY]];\n  }\n\n  return isPolygonsIntersect(polyPoints, shapePoints);\n};\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      delegateStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: [] // multiple: false,\n\n    };\n  },\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior lasso-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onDragStart',\n        drag: 'onDragMove',\n        dragend: 'onDragEnd',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      dragstart: 'onDragStart',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown',\n      'canvas:click': 'clearStates'\n    };\n  },\n  onDragStart: function onDragStart(e) {\n    var lasso = this.lasso;\n    var item = e.item; // 排除在节点上拖动\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates();\n    }\n\n    if (!lasso) {\n      lasso = this.createLasso();\n    }\n\n    this.dragging = true;\n    this.originPoint = {\n      x: e.x,\n      y: e.y\n    };\n    this.points.push(this.originPoint);\n    lasso.show();\n  },\n  onDragMove: function onDragMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push({\n      x: e.x,\n      y: e.y\n    });\n    this.updateLasso(e);\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.lasso && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push(this.originPoint);\n    this.getSelectedItems();\n    this.lasso.remove(true);\n    this.lasso = null;\n    this.points = [];\n    this.dragging = false;\n  },\n  getLassoPath: function getLassoPath() {\n    var points = this.points;\n    var path = [];\n\n    if (points.length) {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n      path.push(['L', points[0].x, points[0].y]);\n    }\n\n    return path;\n  },\n  clearStates: function clearStates() {\n    var _a = this,\n        graph = _a.graph,\n        selectedState = _a.selectedState;\n\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    nodes.forEach(function (node) {\n      return graph.setItemState(node, selectedState, false);\n    });\n    edges.forEach(function (edge) {\n      return graph.setItemState(edge, selectedState, false);\n    });\n\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedItems: function getSelectedItems() {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        shouldUpdate = _a.shouldUpdate;\n\n    var lassoContour = this.points.map(function (point) {\n      return [graph.getCanvasByPoint(point.x, point.y).x, graph.getCanvasByPoint(point.x, point.y).y];\n    });\n    var state = this.selectedState;\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      if (!node.isVisible()) return; // 隐藏节点不能被选中\n\n      if (isItemIntersecPolygon(node, lassoContour)) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return; // 隐藏边不能够被选中\n\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createLasso: function createLasso() {\n    var self = this;\n    var lasso = self.graph.get('delegateGroup').addShape('path', {\n      attrs: __assign({\n        path: []\n      }, self.delegateStyle),\n      capture: false,\n      name: 'lasso-shape'\n    });\n    this.lasso = lasso;\n    this.delegate = lasso;\n    this.points = [];\n    return lasso;\n  },\n  updateLasso: function updateLasso(e) {\n    var self = this;\n    this.lasso.attr({\n      path: self.getLassoPath()\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    } // if (this.selectedNodes && this.selectedNodes.length !== 0) {\n    //   this.clearStates();\n    // }\n\n\n    if (code.toLowerCase() === this.trigger.toLowerCase()) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.lasso) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的lasso\n      this.lasso.remove(true);\n      this.lasso = null;\n      this.points = [];\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}