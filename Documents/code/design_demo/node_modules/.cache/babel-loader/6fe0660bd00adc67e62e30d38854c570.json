{"ast":null,"code":"import acyclic from './acyclic';\nimport normalize from './normalize';\nimport rank from './rank';\nimport util, { normalizeRanks, removeEmptyRanks } from './util';\nimport parentDummyChains from './parent-dummy-chains';\nimport nestingGraph from './nesting-graph';\nimport addBorderSegments from './add-border-segments';\nimport coordinateSystem from './coordinate-system';\nimport order from './order';\nimport position from './position';\nimport graphlib from './graphlib';\nimport initDataOrder from './order/init-data-order';\nconst Graph = graphlib.Graph;\n\nconst layout = (g, opts) => {\n  const time = opts && opts.debugTiming ? util.time : util.notime;\n  time(\"layout\", () => {\n    // 如果在原图基础上修改，继承原图的order结果\n    if (opts && !opts.keepNodeOrder && opts.prevGraph) {\n      time(\"  inheritOrder\", () => {\n        inheritOrder(g, opts.prevGraph);\n      });\n    }\n\n    const layoutGraph = time(\"  buildLayoutGraph\", () => {\n      return buildLayoutGraph(g);\n    }); // 控制是否为边的label留位置（这会影响是否在边中间添加dummy node）\n\n    if (!(opts && opts.edgeLabelSpace === false)) {\n      time(\"  makeSpaceForEdgeLabels\", () => {\n        makeSpaceForEdgeLabels(layoutGraph);\n      });\n    } // TODO: 暂时处理层级设置不正确时的异常报错，提示设置正确的层级\n\n\n    try {\n      time(\"  runLayout\", () => {\n        runLayout(layoutGraph, time, opts);\n      });\n    } catch (e) {\n      if (e.message === \"Not possible to find intersection inside of the rectangle\") {\n        console.error('The following error may be caused by improper layer setting, please make sure your manual layer setting does not violate the graph\\'s structure:\\n', e);\n        return;\n      }\n\n      throw e;\n    }\n\n    time(\"  updateInputGraph\", () => {\n      updateInputGraph(g, layoutGraph);\n    });\n  });\n};\n\nconst runLayout = (g, time, opts) => {\n  time(\"    removeSelfEdges\", () => {\n    removeSelfEdges(g);\n  });\n  time(\"    acyclic\", () => {\n    acyclic.run(g);\n  });\n  time(\"    nestingGraph.run\", () => {\n    nestingGraph.run(g);\n  });\n  time(\"    rank\", () => {\n    rank(util.asNonCompoundGraph(g));\n  });\n  time(\"    injectEdgeLabelProxies\", () => {\n    injectEdgeLabelProxies(g);\n  });\n  time(\"    removeEmptyRanks\", () => {\n    removeEmptyRanks(g);\n  });\n  time(\"    nestingGraph.cleanup\", () => {\n    nestingGraph.cleanup(g);\n  });\n  time(\"    normalizeRanks\", () => {\n    normalizeRanks(g);\n  });\n  time(\"    assignRankMinMax\", () => {\n    assignRankMinMax(g);\n  });\n  time(\"    removeEdgeLabelProxies\", () => {\n    removeEdgeLabelProxies(g);\n  });\n  time(\"    normalize.run\", () => {\n    normalize.run(g);\n  });\n  time(\"    parentDummyChains\", () => {\n    parentDummyChains(g);\n  });\n  time(\"    addBorderSegments\", () => {\n    addBorderSegments(g);\n  });\n\n  if (opts && opts.keepNodeOrder) {\n    time(\"    initDataOrder\", () => {\n      initDataOrder(g, opts.nodeOrder);\n    });\n  }\n\n  time(\"    order\", () => {\n    order(g);\n  });\n  time(\"    insertSelfEdges\", () => {\n    insertSelfEdges(g);\n  });\n  time(\"    adjustCoordinateSystem\", () => {\n    coordinateSystem.adjust(g);\n  });\n  time(\"    position\", () => {\n    position(g);\n  });\n  time(\"    positionSelfEdges\", () => {\n    positionSelfEdges(g);\n  });\n  time(\"    removeBorderNodes\", () => {\n    removeBorderNodes(g);\n  });\n  time(\"    normalize.undo\", () => {\n    normalize.undo(g);\n  });\n  time(\"    fixupEdgeLabelCoords\", () => {\n    fixupEdgeLabelCoords(g);\n  });\n  time(\"    undoCoordinateSystem\", () => {\n    coordinateSystem.undo(g);\n  });\n  time(\"    translateGraph\", () => {\n    translateGraph(g);\n  });\n  time(\"    assignNodeIntersects\", () => {\n    assignNodeIntersects(g);\n  });\n  time(\"    reversePoints\", () => {\n    reversePointsForReversedEdges(g);\n  });\n  time(\"    acyclic.undo\", () => {\n    acyclic.undo(g);\n  });\n};\n/**\n * 继承上一个布局中的order，防止翻转\n * TODO: 暂时没有考虑涉及层级变动的布局，只保证原来布局层级和相对顺序不变\n */\n\n\nconst inheritOrder = (currG, prevG) => {\n  const prevNodeMap = prevG._nodes || {};\n  currG.nodes().forEach(n => {\n    const node = currG.node(n);\n\n    if (prevNodeMap[n] !== undefined) {\n      node.fixorder = prevNodeMap[n]._order;\n      delete prevNodeMap[n]._order;\n    } else {\n      delete node.fixorder;\n    }\n  });\n};\n/*\n * Copies final layout information from the layout graph back to the input\n * graph. This process only copies whitelisted attributes from the layout graph\n * to the input graph, so it serves as a good place to determine what\n * attributes can influence layout.\n */\n\n\nconst updateInputGraph = (inputGraph, layoutGraph) => {\n  inputGraph.nodes().forEach(v => {\n    var _a;\n\n    const inputLabel = inputGraph.node(v);\n    const layoutLabel = layoutGraph.node(v);\n\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n      inputLabel._order = layoutLabel.order;\n      inputLabel._rank = layoutLabel.rank;\n\n      if ((_a = layoutGraph.children(v)) === null || _a === void 0 ? void 0 : _a.length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n  inputGraph.edges().forEach(e => {\n    const inputLabel = inputGraph.edge(e);\n    const layoutLabel = layoutGraph.edge(e);\n    inputLabel.points = layoutLabel.points;\n\n    if (layoutLabel.hasOwnProperty(\"x\")) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n};\n\nconst graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\nconst graphDefaults = {\n  ranksep: 50,\n  edgesep: 20,\n  nodesep: 50,\n  rankdir: \"tb\"\n};\nconst graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nconst nodeNumAttrs = [\"width\", \"height\", \"layer\", \"fixorder\"]; // 需要传入layer, fixOrder作为参数参考\n\nconst nodeDefaults = {\n  width: 0,\n  height: 0\n};\nconst edgeNumAttrs = [\"minlen\", \"weight\", \"width\", \"height\", \"labeloffset\"];\nconst edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: \"r\"\n};\nconst edgeAttrs = [\"labelpos\"];\n/*\n * Constructs a new graph from the input graph, which can be used for layout.\n * This process copies only whitelisted attributes from the input graph to the\n * layout graph. Thus this function serves as a good place to determine what\n * attributes can influence layout.\n */\n\nconst buildLayoutGraph = inputGraph => {\n  const g = new Graph({\n    multigraph: true,\n    compound: true\n  });\n  const graph = canonicalize(inputGraph.graph());\n  const pickedProperties = {};\n  graphAttrs === null || graphAttrs === void 0 ? void 0 : graphAttrs.forEach(key => {\n    if (graph[key] !== undefined) pickedProperties[key] = graph[key];\n  });\n  g.setGraph(Object.assign({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), pickedProperties));\n  inputGraph.nodes().forEach(v => {\n    const node = canonicalize(inputGraph.node(v));\n    const defaultAttrs = selectNumberAttrs(node, nodeNumAttrs);\n    Object.keys(nodeDefaults).forEach(key => {\n      if (defaultAttrs[key] === undefined) {\n        defaultAttrs[key] = nodeDefaults[key];\n      }\n    });\n    g.setNode(v, defaultAttrs);\n    g.setParent(v, inputGraph.parent(v));\n  });\n  inputGraph.edges().forEach(e => {\n    const edge = canonicalize(inputGraph.edge(e));\n    const pickedProperties = {};\n    edgeAttrs === null || edgeAttrs === void 0 ? void 0 : edgeAttrs.forEach(key => {\n      if (edge[key] !== undefined) pickedProperties[key] = edge[key];\n    });\n    g.setEdge(e, Object.assign({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), pickedProperties));\n  });\n  return g;\n};\n/*\n * This idea comes from the Gansner paper: to account for edge labels in our\n * layout we split each rank in half by doubling minlen and halving ranksep.\n * Then we can place labels at these mid-points between nodes.\n *\n * We also add some minimal padding to the width to push the label for the edge\n * away from the edge itself a bit.\n */\n\n\nconst makeSpaceForEdgeLabels = g => {\n  const graph = g.graph();\n  if (!graph.ranksep) graph.ranksep = 0;\n  graph.ranksep /= 2;\n  g.nodes().forEach(n => {\n    const node = g.node(n);\n\n    if (!isNaN(node.layer)) {\n      if (!node.layer) node.layer = 0;else node.layer *= 2; // TODO: 因为默认的rank变为两倍，设定的layer也*2\n    }\n  });\n  g.edges().forEach(e => {\n    var _a;\n\n    const edge = g.edge(e);\n    edge.minlen *= 2;\n\n    if (((_a = edge.labelpos) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== \"c\") {\n      if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n};\n/*\n * Creates temporary dummy nodes that capture the rank in which each edge's\n * label is going to, if it has one of non-zero width and height. We do this\n * so that we can safely remove empty ranks while preserving balance for the\n * label's position.\n */\n\n\nconst injectEdgeLabelProxies = g => {\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n\n    if (edge.width && edge.height) {\n      const v = g.node(e.v);\n      const w = g.node(e.w);\n      const label = {\n        e,\n        rank: (w.rank - v.rank) / 2 + v.rank\n      };\n      util.addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n    }\n  });\n};\n\nconst assignRankMinMax = g => {\n  let maxRank = 0;\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank = Math.max(maxRank, node.maxRank || -Infinity);\n    }\n  });\n  g.graph().maxRank = maxRank;\n};\n\nconst removeEdgeLabelProxies = g => {\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n\n    if (node.dummy === \"edge-proxy\") {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n};\n\nconst translateGraph = g => {\n  let minX = Number.POSITIVE_INFINITY;\n  let maxX = 0;\n  let minY = Number.POSITIVE_INFINITY;\n  let maxY = 0;\n  const graphLabel = g.graph();\n  const marginX = graphLabel.marginx || 0;\n  const marginY = graphLabel.marginy || 0;\n\n  const getExtremes = attrs => {\n    if (!attrs) return;\n    const x = attrs.x;\n    const y = attrs.y;\n    const w = attrs.width;\n    const h = attrs.height;\n\n    if (!isNaN(x) && !isNaN(w)) {\n      minX = Math.min(minX, x - w / 2);\n      maxX = Math.max(maxX, x + w / 2);\n    }\n\n    if (!isNaN(y) && !isNaN(h)) {\n      minY = Math.min(minY, y - h / 2);\n      maxY = Math.max(maxY, y + h / 2);\n    }\n  };\n\n  g.nodes().forEach(v => {\n    getExtremes(g.node(v));\n  });\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n\n    if (edge.hasOwnProperty(\"x\")) {\n      getExtremes(edge);\n    }\n  });\n  minX -= marginX;\n  minY -= marginY;\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n  g.edges().forEach(e => {\n    var _a;\n\n    const edge = g.edge(e);\n    (_a = edge.points) === null || _a === void 0 ? void 0 : _a.forEach(p => {\n      p.x -= minX;\n      p.y -= minY;\n    });\n\n    if (edge.hasOwnProperty(\"x\")) {\n      edge.x -= minX;\n    }\n\n    if (edge.hasOwnProperty(\"y\")) {\n      edge.y -= minY;\n    }\n  });\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n};\n\nconst assignNodeIntersects = g => {\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n    const nodeV = g.node(e.v);\n    const nodeW = g.node(e.w);\n    let p1;\n    let p2;\n\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n\n    edge.points.unshift(util.intersectRect(nodeV, p1));\n    edge.points.push(util.intersectRect(nodeW, p2));\n  });\n};\n\nconst fixupEdgeLabelCoords = g => {\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n\n    if (edge.hasOwnProperty(\"x\")) {\n      if (edge.labelpos === \"l\" || edge.labelpos === \"r\") {\n        edge.width -= edge.labeloffset;\n      }\n\n      switch (edge.labelpos) {\n        case \"l\":\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n\n        case \"r\":\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n};\n\nconst reversePointsForReversedEdges = g => {\n  g.edges().forEach(e => {\n    const edge = g.edge(e);\n\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n};\n\nconst removeBorderNodes = g => {\n  g.nodes().forEach(v => {\n    var _a, _b, _c;\n\n    if ((_a = g.children(v)) === null || _a === void 0 ? void 0 : _a.length) {\n      const node = g.node(v);\n      const t = g.node(node.borderTop);\n      const b = g.node(node.borderBottom);\n      const l = g.node(node.borderLeft[((_b = node.borderLeft) === null || _b === void 0 ? void 0 : _b.length) - 1]);\n      const r = g.node(node.borderRight[((_c = node.borderRight) === null || _c === void 0 ? void 0 : _c.length) - 1]);\n      node.width = Math.abs((r === null || r === void 0 ? void 0 : r.x) - (l === null || l === void 0 ? void 0 : l.x)) || 10;\n      node.height = Math.abs((b === null || b === void 0 ? void 0 : b.y) - (t === null || t === void 0 ? void 0 : t.y)) || 10;\n      node.x = ((l === null || l === void 0 ? void 0 : l.x) || 0) + node.width / 2;\n      node.y = ((t === null || t === void 0 ? void 0 : t.y) || 0) + node.height / 2;\n    }\n  });\n  g.nodes().forEach(v => {\n    if (g.node(v).dummy === \"border\") {\n      g.removeNode(v);\n    }\n  });\n};\n\nconst removeSelfEdges = g => {\n  g.edges().forEach(e => {\n    if (e.v === e.w) {\n      const node = g.node(e.v);\n\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n\n      node.selfEdges.push({\n        e,\n        label: g.edge(e)\n      });\n      g.removeEdge(e);\n    }\n  });\n};\n\nconst insertSelfEdges = g => {\n  const layers = util.buildLayerMatrix(g);\n  layers === null || layers === void 0 ? void 0 : layers.forEach(layer => {\n    let orderShift = 0;\n    layer === null || layer === void 0 ? void 0 : layer.forEach((v, i) => {\n      var _a;\n\n      const node = g.node(v);\n      node.order = i + orderShift;\n      (_a = node.selfEdges) === null || _a === void 0 ? void 0 : _a.forEach(selfEdge => {\n        util.addDummyNode(g, \"selfedge\", {\n          width: selfEdge.label.width,\n          height: selfEdge.label.height,\n          rank: node.rank,\n          order: i + ++orderShift,\n          e: selfEdge.e,\n          label: selfEdge.label\n        }, \"_se\");\n      });\n      delete node.selfEdges;\n    });\n  });\n};\n\nconst positionSelfEdges = g => {\n  g.nodes().forEach(v => {\n    const node = g.node(v);\n\n    if (node.dummy === \"selfedge\") {\n      const selfNode = g.node(node.e.v);\n      const x = selfNode.x + selfNode.width / 2;\n      const y = selfNode.y;\n      const dx = node.x - x;\n      const dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [{\n        x: x + 2 * dx / 3,\n        y: y - dy\n      }, {\n        x: x + 5 * dx / 6,\n        y: y - dy\n      }, {\n        y,\n        x: x + dx\n      }, {\n        x: x + 5 * dx / 6,\n        y: y + dy\n      }, {\n        x: x + 2 * dx / 3,\n        y: y + dy\n      }];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n};\n\nconst selectNumberAttrs = (obj, attrs) => {\n  const pickedProperties = {};\n  attrs === null || attrs === void 0 ? void 0 : attrs.forEach(key => {\n    if (obj[key] === undefined) return;\n    pickedProperties[key] = +obj[key];\n  });\n  return pickedProperties;\n};\n\nconst canonicalize = attrs => {\n  const newAttrs = {};\n  Object.keys(attrs).forEach(k => {\n    const v = attrs[k];\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n};\n\nexport default layout;","map":null,"metadata":{},"sourceType":"module"}