{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec, _class;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nvar ink = \"varying vec2 v_UV;\\n\\nuniform sampler2D u_Texture;\\nuniform vec2 u_ViewportSize: [1.0, 1.0];\\nuniform float u_Strength : 0.6;\\n\\nvec4 ink_sampleColor(sampler2D texture, vec2 texSize, vec2 texCoord) {\\n  vec2 dx = vec2(1.0 / texSize.x, 0.0);\\n  vec2 dy = vec2(0.0, 1.0 / texSize.y);\\n  vec4 color = texture2D(texture, texCoord);\\n  float bigTotal = 0.0;\\n  float smallTotal = 0.0;\\n  vec3 bigAverage = vec3(0.0);\\n  vec3 smallAverage = vec3(0.0);\\n  for (float x = -2.0; x <= 2.0; x += 1.0) {\\n    for (float y = -2.0; y <= 2.0; y += 1.0) {\\n      vec3 sample = texture2D(texture, texCoord + dx * x + dy * y).rgb;\\n      bigAverage += sample;\\n      bigTotal += 1.0;\\n      if (abs(x) + abs(y) < 2.0) {\\n        smallAverage += sample;\\n        smallTotal += 1.0;\\n      }\\n    }\\n  }\\n  vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);\\n  float power = u_Strength * u_Strength * u_Strength * u_Strength * u_Strength;\\n  return vec4(color.rgb - dot(edge, edge) * power * 100000.0, color.a);\\n}\\n\\nvoid main() {\\n  gl_FragColor = vec4(texture2D(u_Texture, v_UV));\\n  gl_FragColor = ink_sampleColor(u_Texture, u_ViewportSize, v_UV);\\n}\";\nvar quad = \"attribute vec2 a_Position;\\n\\nvarying vec2 v_UV;\\n\\nvoid main() {\\n  v_UV = 0.5 * (a_Position + 1.0);\\n  gl_Position = vec4(a_Position, 0., 1.);\\n}\";\nimport BasePostProcessingPass from '../BasePostProcessingPass';\nvar InkPass = (_dec = injectable(), _dec(_class = function (_BasePostProcessingPa) {\n  _inherits(InkPass, _BasePostProcessingPa);\n\n  var _super = _createSuper(InkPass);\n\n  function InkPass() {\n    _classCallCheck(this, InkPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(InkPass, [{\n    key: \"setupShaders\",\n    value: function setupShaders() {\n      this.shaderModuleService.registerModule('ink-pass', {\n        vs: quad,\n        fs: ink\n      });\n\n      var _this$shaderModuleSer = this.shaderModuleService.getModule('ink-pass'),\n          vs = _this$shaderModuleSer.vs,\n          fs = _this$shaderModuleSer.fs,\n          uniforms = _this$shaderModuleSer.uniforms;\n\n      var _this$rendererService = this.rendererService.getViewportSize(),\n          width = _this$rendererService.width,\n          height = _this$rendererService.height;\n\n      return {\n        vs: vs,\n        fs: fs,\n        uniforms: _objectSpread(_objectSpread({}, uniforms), {}, {\n          u_ViewportSize: [width, height]\n        })\n      };\n    }\n  }]);\n\n  return InkPass;\n}(BasePostProcessingPass)) || _class);\nexport { InkPass as default };","map":null,"metadata":{},"sourceType":"module"}