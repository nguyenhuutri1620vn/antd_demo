{"ast":null,"code":"/**\n * @fileOverview quadTree\n * @author shiwu.wyy@antfin.com\n */\nexport default class QuadTree {\n  // each quadtree represents a quadrant and an aggregate body\n  // that represents all bodies inside the quadrant\n  constructor(param) {\n    /**\n     * (aggregated) body in this quad\n     * @type  {object}\n     */\n    this.body = null;\n    /**\n     * tree representing the northwest quadrant\n     * @type  {object}\n     */\n\n    this.quad = null;\n    this.NW = null;\n    this.NE = null;\n    this.SW = null;\n    this.SE = null;\n    /**\n     * threshold\n     * @type  {number}\n     */\n\n    this.theta = 0.5;\n    if (param != null) this.quad = param;\n  } // insert a body(node) into the tree\n\n\n  insert(bo) {\n    // if this node does not contain a body, put the new body bo here\n    if (this.body == null) {\n      this.body = bo;\n      return;\n    } // internal node\n\n\n    if (!this._isExternal()) {\n      // update mass info\n      this.body = this.body.add(bo); // insert body into quadrant\n\n      this._putBody(bo);\n    } else {\n      // external node\n      // divide this region into four children\n      if (this.quad) {\n        this.NW = new QuadTree(this.quad.NW());\n        this.NE = new QuadTree(this.quad.NE());\n        this.SW = new QuadTree(this.quad.SW());\n        this.SE = new QuadTree(this.quad.SE());\n      } // insert this body and bo\n\n\n      this._putBody(this.body);\n\n      this._putBody(bo); // update the mass info\n\n\n      this.body = this.body.add(bo);\n    }\n  } // inserts bo into a quad\n  // tslint:disable-next-line\n\n\n  _putBody(bo) {\n    if (!this.quad) return;\n    if (bo.in(this.quad.NW()) && this.NW) this.NW.insert(bo);else if (bo.in(this.quad.NE()) && this.NE) this.NE.insert(bo);else if (bo.in(this.quad.SW()) && this.SW) this.SW.insert(bo);else if (bo.in(this.quad.SE()) && this.SE) this.SE.insert(bo);\n  } // tslint:disable-next-line\n\n\n  _isExternal() {\n    // four children are null\n    return this.NW == null && this.NE == null && this.SW == null && this.SE == null;\n  } // update the forces\n\n\n  updateForce(bo) {\n    if (this.body == null || bo === this.body) {\n      return;\n    } // if the current node is external\n\n\n    if (this._isExternal()) bo.addForce(this.body); // internal nodes\n    else {\n      const s = this.quad ? this.quad.getLength() : 0;\n      const d = this.body.distanceTo(bo); // b is far enough\n\n      if (s / d < this.theta) bo.addForce(this.body);else {\n        this.NW && this.NW.updateForce(bo);\n        this.NE && this.NE.updateForce(bo);\n        this.SW && this.SW.updateForce(bo);\n        this.SE && this.SE.updateForce(bo);\n      }\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}