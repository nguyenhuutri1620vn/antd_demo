{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport BaseLayer from '../core/BaseLayer';\nimport PolygonModels from './models/';\n\nvar PolygonLayer = function (_BaseLayer) {\n  _inherits(PolygonLayer, _BaseLayer);\n\n  var _super = _createSuper(PolygonLayer);\n\n  function PolygonLayer() {\n    var _this;\n\n    _classCallCheck(this, PolygonLayer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"type\", 'PolygonLayer');\n\n    return _this;\n  }\n\n  _createClass(PolygonLayer, [{\n    key: \"buildModels\",\n    value: function buildModels() {\n      var shape = this.getModelType();\n      this.layerModel = new PolygonModels[shape](this);\n      this.models = this.layerModel.initModels();\n    }\n  }, {\n    key: \"rebuildModels\",\n    value: function rebuildModels() {\n      this.models = this.layerModel.buildModels();\n    }\n  }, {\n    key: \"getConfigSchema\",\n    value: function getConfigSchema() {\n      return {\n        properties: {\n          opacity: {\n            type: 'number',\n            minimum: 0,\n            maximum: 1\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getModelType\",\n    value: function getModelType() {\n      var _shapeAttribute$scale;\n\n      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');\n      var shape = shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;\n\n      if (shape === 'fill') {\n        return 'fill';\n      } else if (shape === 'extrude') {\n        return 'extrude';\n      } else if (shape === 'line') {\n        return 'line';\n      } else {\n        return this.getPointModelType();\n      }\n    }\n  }, {\n    key: \"getPointModelType\",\n    value: function getPointModelType() {\n      var layerData = this.getEncodedData();\n\n      var _this$getLayerConfig = this.getLayerConfig(),\n          shape2d = _this$getLayerConfig.shape2d,\n          shape3d = _this$getLayerConfig.shape3d;\n\n      var iconMap = this.iconService.getIconMap();\n      var item = layerData.find(function (fe) {\n        return fe.hasOwnProperty('shape');\n      });\n\n      if (!item) {\n        return 'fill';\n      } else {\n        var shape = item.shape;\n\n        if (shape === 'dot') {\n          return 'point_normal';\n        }\n\n        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {\n          return 'point_fill';\n        }\n\n        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {\n          return 'point_extrude';\n        }\n\n        if (iconMap.hasOwnProperty(shape)) {\n          return 'point_image';\n        }\n\n        return 'text';\n      }\n    }\n  }]);\n\n  return PolygonLayer;\n}(BaseLayer);\n\nexport { PolygonLayer as default };","map":null,"metadata":{},"sourceType":"module"}