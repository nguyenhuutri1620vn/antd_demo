{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _clamp from \"lodash/clamp\";\nimport { getShapeIndex } from './sdf-2d';\nexport var LEFT_SHIFT1 = 2;\nexport var LEFT_SHIFT2 = 4;\nexport var LEFT_SHIFT6 = 64;\nexport var LEFT_SHIFT7 = 128;\nexport var LEFT_SHIFT8 = 256;\nexport var LEFT_SHIFT9 = 512;\nexport var LEFT_SHIFT13 = 8192;\nexport var LEFT_SHIFT14 = 16384;\nexport var LEFT_SHIFT15 = 32768;\nexport var LEFT_SHIFT16 = 32768 * 2;\nexport var LEFT_SHIFT17 = 131072.0;\nexport var LEFT_SHIFT18 = 262144.0;\nexport var LEFT_SHIFT19 = 524288.0;\nexport var LEFT_SHIFT20 = 1048576.0;\nexport var LEFT_SHIFT21 = 2097152.0;\nexport var LEFT_SHIFT22 = 4194304.0;\nexport var LEFT_SHIFT23 = 8388608.0;\nexport var LEFT_SHIFT24 = 16777216.0;\nexport var LEFT_SHIFT25 = 16777216.0 * 2;\nexport function packUint8ToFloat(a, b) {\n  a = _clamp(Math.floor(a), 0, 255);\n  b = _clamp(Math.floor(b), 0, 255);\n  return 256 * a + b;\n}\nexport function packCircleVertex(props) {\n  var color = props.color,\n      radius = props.radius,\n      tileX = props.tileX,\n      tileY = props.tileY,\n      shape = props.shape,\n      opacity = props.opacity,\n      stroke = props.stroke,\n      strokeWidth = props.strokeWidth,\n      strokeOpacity = props.strokeOpacity;\n  var packedBuffer = [];\n  var packedBuffer2 = [];\n  var packedBuffer3 = [];\n  var packedColor = [packUint8ToFloat(color[0], color[1]), packUint8ToFloat(color[2], color[3])];\n  var packedStrokeColor = [packUint8ToFloat(stroke[0], stroke[1]), packUint8ToFloat(stroke[2], stroke[3])];\n  [[-1, -1], [1, -1], [1, 1], [-1, 1]].forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        extrudeX = _ref2[0],\n        extrudeY = _ref2[1];\n\n    packedBuffer.push([].concat(packedColor, [(extrudeX + 1) * LEFT_SHIFT23 + (extrudeY + 1) * LEFT_SHIFT21 + getShapeIndex(shape) * LEFT_SHIFT17 + radius, (tileX + 512) * LEFT_SHIFT19 + (tileY + 512) * LEFT_SHIFT6]));\n    packedBuffer2.push([].concat(packedStrokeColor, [strokeWidth, strokeOpacity]));\n    packedBuffer3.push([opacity, 0, 0, 0]);\n  });\n  return {\n    packedBuffer: packedBuffer,\n    packedBuffer2: packedBuffer2,\n    packedBuffer3: packedBuffer3\n  };\n}\nexport function packOpacity(opacity, placed) {\n  if (opacity === 0 && !placed) {\n    return 0;\n  } else if (opacity === 1 && placed) {\n    return 4294967295;\n  }\n\n  var targetBit = placed ? 1 : 0;\n  var opacityBits = Math.floor(opacity * 127);\n  return opacityBits * LEFT_SHIFT25 + targetBit * LEFT_SHIFT24 + opacityBits * LEFT_SHIFT17 + targetBit * LEFT_SHIFT16 + opacityBits * LEFT_SHIFT9 + targetBit * LEFT_SHIFT8 + opacityBits * LEFT_SHIFT1 + targetBit;\n}","map":null,"metadata":{},"sourceType":"module"}