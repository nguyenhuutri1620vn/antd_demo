{"ast":null,"code":"export default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      // 可选 mouseenter || click\n      // 选择 click 会监听 touch，mouseenter 不会监听\n      trigger: 'mouseenter',\n      activeState: 'active',\n      inactiveState: 'inactive',\n      resetSelected: false,\n      shouldUpdate: function shouldUpdate() {\n        return true;\n      }\n    };\n  },\n  getEvents: function getEvents() {\n    if (this.get('trigger') === 'mouseenter') {\n      return {\n        'node:mouseenter': 'setAllItemStates',\n        'combo:mouseenter': 'setAllItemStates',\n        'node:mouseleave': 'clearActiveState',\n        'combo:mouseleave': 'clearActiveState'\n      };\n    }\n\n    return {\n      'node:click': 'setAllItemStates',\n      'combo:click': 'setAllItemStates',\n      'canvas:click': 'clearActiveState',\n      'node:touchstart': 'setOnTouchStart',\n      'combo:touchstart': 'setOnTouchStart',\n      'canvas:touchstart': 'clearOnTouchStart'\n    };\n  },\n  setOnTouchStart: function setOnTouchStart(e) {\n    var self = this;\n\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n\n      if (event1 && event2) {\n        return;\n      }\n\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n\n    self.setAllItemStates(e);\n  },\n  clearOnTouchStart: function clearOnTouchStart(e) {\n    var self = this;\n\n    try {\n      var touches = e.originalEvent.touches;\n      var event1 = touches[0];\n      var event2 = touches[1];\n\n      if (event1 && event2) {\n        return;\n      }\n\n      e.preventDefault();\n    } catch (e) {\n      console.warn('Touch original event not exist!');\n    }\n\n    self.clearActiveState(e);\n  },\n  setAllItemStates: function setAllItemStates(e) {\n    var item = e.item;\n    var graph = this.graph;\n    this.item = item;\n\n    if (!this.shouldUpdate(e.item, {\n      event: e,\n      action: 'activate'\n    })) {\n      return;\n    }\n\n    var self = this;\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var combos = graph.getCombos();\n    var edges = graph.getEdges();\n    var vEdges = graph.get('vedges');\n    var nodeLength = nodes.length;\n    var comboLength = combos.length;\n    var edgeLength = edges.length;\n    var vEdgeLength = vEdges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      var hasSelected = node.hasState('selected');\n\n      if (self.resetSelected) {\n        if (hasSelected) {\n          graph.setItemState(node, 'selected', false);\n        }\n      }\n\n      graph.setItemState(node, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(node, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < comboLength; i++) {\n      var combo = combos[i];\n      var hasSelected = combo.hasState('selected');\n\n      if (self.resetSelected) {\n        if (hasSelected) {\n          graph.setItemState(combo, 'selected', false);\n        }\n      }\n\n      graph.setItemState(combo, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(combo, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.setItemState(edge, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(edge, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < vEdgeLength; i++) {\n      var vEdge = vEdges[i];\n      graph.setItemState(vEdge, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(vEdge, inactiveState, true);\n      }\n    }\n\n    if (inactiveState) {\n      graph.setItemState(item, inactiveState, false);\n    }\n\n    graph.setItemState(item, activeState, true);\n    var rEdges = item.getEdges();\n    var rEdgeLegnth = rEdges.length;\n\n    for (var i = 0; i < rEdgeLegnth; i++) {\n      var edge = rEdges[i];\n      var otherEnd = void 0;\n\n      if (edge.getSource() === item) {\n        otherEnd = edge.getTarget();\n      } else {\n        otherEnd = edge.getSource();\n      }\n\n      if (inactiveState) {\n        graph.setItemState(otherEnd, inactiveState, false);\n      }\n\n      graph.setItemState(otherEnd, activeState, true);\n      graph.setItemState(edge, inactiveState, false);\n      graph.setItemState(edge, activeState, true);\n      edge.toFront();\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item,\n      action: 'activate'\n    });\n  },\n  clearActiveState: function clearActiveState(e) {\n    var self = this;\n    var graph = self.get('graph');\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var nodes = graph.getNodes() || [];\n    var combos = graph.getCombos() || [];\n    var edges = graph.getEdges() || [];\n    var vEdges = graph.get('vedges') || [];\n    var nodeLength = nodes.length;\n    var comboLength = combos.length;\n    var edgeLength = edges.length;\n    var vEdgeLength = vEdges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < comboLength; i++) {\n      var combo = combos[i];\n      graph.clearItemStates(combo, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    for (var i = 0; i < vEdgeLength; i++) {\n      var vEdge = vEdges[i];\n      graph.clearItemStates(vEdge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.paint();\n    graph.setAutoPaint(autoPaint);\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  }\n};","map":null,"metadata":{},"sourceType":"module"}