{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PlotLayer = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar l7_source_1 = (0, tslib_1.__importDefault)(require(\"@antv/l7-source\"));\nvar event_emitter_1 = (0, tslib_1.__importDefault)(require(\"@antv/event-emitter\"));\n\nvar layer_1 = require(\"../../types/layer\");\n\nvar source_1 = require(\"../../adaptor/source\");\n\nvar constants_1 = require(\"../map/constants\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar LayerConfigkeys = ['name', 'zIndex', 'visible', 'minZoom', 'maxZoom', 'pickingBuffer', 'autoFit', 'blend'];\n\nvar PlotLayer =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(PlotLayer, _super);\n\n  function PlotLayer(options) {\n    var _this = _super.call(this) || this;\n\n    _this.options = (0, utils_1.deepAssign)({}, _this.getDefaultOptions(), options);\n    _this.lastOptions = _this.options;\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  PlotLayer.prototype.getDefaultOptions = function () {\n    return {};\n  };\n\n  PlotLayer.prototype.pickLayerConfig = function (params) {\n    var config = (0, util_1.pick)(params, LayerConfigkeys);\n    return config;\n  };\n\n  PlotLayer.prototype.addTo = function (scene) {\n    scene.addLayer(this.layer);\n  };\n\n  PlotLayer.prototype.remove = function (scene) {\n    scene.removeLayer(this.layer);\n  };\n  /**\n   * 更新\n   */\n\n\n  PlotLayer.prototype.update = function (options) {\n    this.updateOption(options);\n    this.updateConfig(options);\n  };\n  /**\n   * 更新: 更新配置\n   */\n\n\n  PlotLayer.prototype.updateOption = function (options) {\n    this.lastOptions = this.options;\n    this.options = (0, utils_1.deepAssign)({}, this.options, options);\n  }; // 更新: 更新图层属性配置\n\n\n  PlotLayer.prototype.updateConfig = function (options) {\n    if (!(0, util_1.isUndefined)(options.zIndex) && !(0, util_1.isEqual)(this.lastOptions.zIndex, this.options.zIndex)) {\n      this.setIndex(options.zIndex);\n    }\n\n    if (!(0, util_1.isUndefined)(options.blend) && !(0, util_1.isEqual)(this.lastOptions.blend, this.options.blend)) {\n      this.setBlend(options.blend);\n    }\n\n    if (!(0, util_1.isUndefined)(options.minZoom) && !(0, util_1.isEqual)(this.lastOptions.minZoom, this.options.minZoom)) {\n      this.setMinZoom(options.minZoom);\n    }\n\n    if (!(0, util_1.isUndefined)(options.maxZoom) && !(0, util_1.isEqual)(this.lastOptions.maxZoom, this.options.maxZoom)) {\n      this.setMinZoom(options.maxZoom);\n    }\n\n    if (!(0, util_1.isUndefined)(options.visible) && !(0, util_1.isEqual)(this.lastOptions.visible, this.options.visible)) {\n      options.visible ? this.show() : this.hide();\n    }\n  };\n\n  PlotLayer.prototype.render = function () {\n    this.layer.renderLayers();\n  };\n\n  PlotLayer.prototype.setSource = function (source) {\n    if (source instanceof l7_source_1.default) {\n      this.layer.setSource(source);\n    } else {\n      var data = source.data,\n          aggregation = source.aggregation,\n          option = (0, tslib_1.__rest)(source, [\"data\", \"aggregation\"]);\n      aggregation && source_1.MappingSource.aggregation(option, aggregation);\n      var layerSource = this.layer.getSource();\n\n      if (layerSource) {\n        this.layer.setData(data, option);\n      } else {\n        this.layer.source(data, option);\n      }\n    }\n  };\n\n  PlotLayer.prototype.changeData = function (source) {\n    this.setSource(source);\n  };\n\n  PlotLayer.prototype.setIndex = function (zIndex) {\n    this.layer.setIndex(zIndex);\n  };\n\n  PlotLayer.prototype.setBlend = function (blend) {\n    this.layer.setBlend(blend);\n  };\n\n  PlotLayer.prototype.setMinZoom = function (minZoom) {\n    this.layer.setMinZoom(minZoom);\n  };\n\n  PlotLayer.prototype.setMaxZoom = function (maxZoom) {\n    this.layer.setMaxZoom(maxZoom);\n  };\n\n  PlotLayer.prototype.show = function () {\n    this.layer.inited && this.layer.show();\n  };\n\n  PlotLayer.prototype.hide = function () {\n    this.layer.inited && this.layer.hide();\n  };\n\n  PlotLayer.prototype.toggleVisible = function () {\n    this.isVisible() ? this.hide() : this.show();\n  };\n\n  PlotLayer.prototype.isVisible = function () {\n    return this.layer.inited ? this.layer.isVisible() : this.options.visible;\n  };\n\n  PlotLayer.prototype.fitBounds = function (fitBoundsOptions) {\n    this.layer.fitBounds(fitBoundsOptions);\n  };\n  /**\n   * 事件代理: 绑定事件\n   */\n\n\n  PlotLayer.prototype.on = function (name, callback) {\n    if (constants_1.LayerEventList.indexOf(name) !== -1) {\n      this.layer.on(name, callback);\n    } else {\n      _super.prototype.on.call(this, name, callback);\n    }\n\n    return this;\n  };\n  /**\n   * 事件代理: 绑定一次事件\n   */\n\n\n  PlotLayer.prototype.once = function (name, callback) {\n    if (constants_1.LayerEventList.indexOf(name) !== -1) {\n      this.layer.once(name, callback);\n    } else {\n      _super.prototype.once.call(this, name, callback);\n    }\n\n    return this;\n  };\n  /**\n   * 事件代理: 解绑事件\n   */\n\n\n  PlotLayer.prototype.off = function (name, callback) {\n    if (constants_1.LayerEventList.indexOf(name) !== -1) {\n      this.layer.off(name, callback);\n    } else {\n      _super.prototype.off.call(this, name, callback);\n    }\n\n    return this;\n  };\n  /**\n   * 地图图表类型\n   */\n\n\n  PlotLayer.LayerType = layer_1.LayerType;\n  /**\n   * 图层属性配置项 Keys\n   */\n\n  PlotLayer.LayerConfigkeys = LayerConfigkeys;\n  return PlotLayer;\n}(event_emitter_1.default);\n\nexports.PlotLayer = PlotLayer;","map":null,"metadata":{},"sourceType":"script"}