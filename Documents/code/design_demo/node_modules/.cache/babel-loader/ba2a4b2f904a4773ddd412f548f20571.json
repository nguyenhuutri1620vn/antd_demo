{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, get, isArray } from '@antv/util';\nimport { getAngleByPoint } from '../../util/coordinate';\nimport { polarToCartesian } from '../../util/graphics';\nimport PolarLabel from './polar';\n/**\n * 饼图 label\n */\n\nvar PieLabel =\n/** @class */\nfunction (_super) {\n  __extends(PieLabel, _super);\n\n  function PieLabel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.defaultLayout = 'distribute';\n    return _this;\n  }\n\n  PieLabel.prototype.getDefaultLabelCfg = function (offset, position) {\n    var cfg = _super.prototype.getDefaultLabelCfg.call(this, offset, position);\n\n    return deepMix({}, cfg, get(this.geometry.theme, 'pieLabels', {}));\n  };\n  /** @override */\n\n\n  PieLabel.prototype.getLabelOffset = function (offset) {\n    return _super.prototype.getLabelOffset.call(this, offset) || 0;\n  };\n\n  PieLabel.prototype.getLabelRotate = function (angle, offset, isLabelLimit) {\n    var rotate;\n\n    if (offset < 0) {\n      rotate = angle;\n\n      if (rotate > Math.PI / 2) {\n        rotate = rotate - Math.PI;\n      }\n\n      if (rotate < -Math.PI / 2) {\n        rotate = rotate + Math.PI;\n      }\n    }\n\n    return rotate;\n  };\n\n  PieLabel.prototype.getLabelAlign = function (point) {\n    var coordinate = this.getCoordinate();\n    var center = coordinate.getCenter();\n    var align;\n\n    if (point.angle <= Math.PI / 2 && point.x >= center.x) {\n      align = 'left';\n    } else {\n      align = 'right';\n    }\n\n    if (point.offset <= 0) {\n      if (align === 'right') {\n        align = 'left';\n      } else {\n        align = 'right';\n      }\n    }\n\n    return align;\n  };\n\n  PieLabel.prototype.getArcPoint = function (point) {\n    return point;\n  };\n\n  PieLabel.prototype.getPointAngle = function (point) {\n    var coordinate = this.getCoordinate();\n    var startPoint = {\n      x: isArray(point.x) ? point.x[0] : point.x,\n      y: point.y[0]\n    };\n    var endPoint = {\n      x: isArray(point.x) ? point.x[1] : point.x,\n      y: point.y[1]\n    };\n    var angle;\n    var startAngle = getAngleByPoint(coordinate, startPoint);\n\n    if (point.points && point.points[0].y === point.points[1].y) {\n      angle = startAngle;\n    } else {\n      var endAngle = getAngleByPoint(coordinate, endPoint);\n\n      if (startAngle >= endAngle) {\n        // 100% pie slice\n        endAngle = endAngle + Math.PI * 2;\n      }\n\n      angle = startAngle + (endAngle - startAngle) / 2;\n    }\n\n    return angle;\n  };\n  /** @override */\n\n\n  PieLabel.prototype.getCirclePoint = function (angle, offset) {\n    var coordinate = this.getCoordinate();\n    var center = coordinate.getCenter();\n    var r = coordinate.getRadius() + offset;\n    return __assign(__assign({}, polarToCartesian(center.x, center.y, r, angle)), {\n      angle: angle,\n      r: r\n    });\n  };\n\n  return PieLabel;\n}(PolarLabel);\n\nexport default PieLabel;","map":null,"metadata":{},"sourceType":"module"}