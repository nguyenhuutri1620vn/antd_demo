{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { createDraft, finishDraft } from 'immer';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowModelCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsUpdateModelCommand;\n\n(function (NsUpdateModelCommand) {\n  /** Command: 用于注册named factory */\n  NsUpdateModelCommand.command = XFlowModelCommands.UPDATE_MODEL;\n  /** hookName */\n\n  NsUpdateModelCommand.hookKey = 'updateModel';\n})(NsUpdateModelCommand || (NsUpdateModelCommand = {}));\n\nlet UpdateModelCommand =\n/** 创建节点命令 */\nclass UpdateModelCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.updateModel.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          updateModel,\n          getModel,\n          modelService\n        } = handlerArgs;\n        const model = yield getModel(modelService);\n        const currentValue = model.getValue();\n        const draft = createDraft(currentValue);\n        yield updateModel(draft);\n        const newValue = finishDraft(draft);\n        model.setValue(newValue);\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          model.setValue(newValue);\n        })));\n        return {\n          model,\n          value: newValue\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], UpdateModelCommand.prototype, \"contextProvider\", void 0);\n\nUpdateModelCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsUpdateModelCommand.command.id\n  }\n})\n/** 创建节点命令 */\n], UpdateModelCommand);\nexport { UpdateModelCommand };\nexport const execCmd = () => {};","map":null,"metadata":{},"sourceType":"module"}