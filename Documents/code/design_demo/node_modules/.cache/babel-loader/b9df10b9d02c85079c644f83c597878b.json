{"ast":null,"code":"import _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\nimport _cloneDeep from \"lodash/cloneDeep\";\n\nvar _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { TYPES } from '@antv/l7-core';\nimport { isColor, rgb2arr } from '@antv/l7-utils';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nvar DataMappingPlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec3 = inject(TYPES.IMapService), _dec4 = inject(TYPES.IFontService), _dec(_class = (_class2 = function () {\n  function DataMappingPlugin() {\n    _classCallCheck(this, DataMappingPlugin);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"mapService\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"fontService\", _descriptor3, this);\n  }\n\n  _createClass(DataMappingPlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var styleAttributeService = _ref.styleAttributeService;\n      layer.hooks.init.tap('DataMappingPlugin', function () {\n        _this.generateMaping(layer, {\n          styleAttributeService: styleAttributeService\n        });\n      });\n      layer.hooks.beforeRenderData.tap('DataMappingPlugin', function () {\n        layer.dataState.dataMappingNeedUpdate = false;\n\n        _this.generateMaping(layer, {\n          styleAttributeService: styleAttributeService\n        });\n\n        return true;\n      });\n      layer.hooks.beforeRender.tap('DataMappingPlugin', function () {\n        if (layer.layerModelNeedUpdate) {\n          return;\n        }\n\n        var bottomColor = layer.getBottomColor();\n        var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n        var filter = styleAttributeService.getLayerStyleAttribute('filter');\n        var dataArray = layer.getSource().data.dataArray;\n        var attributesToRemapping = attributes.filter(function (attribute) {\n          return attribute.needRemapping;\n        });\n        var filterData = dataArray;\n\n        if (filter !== null && filter !== void 0 && filter.needRemapping && filter !== null && filter !== void 0 && filter.scale) {\n          filterData = dataArray.filter(function (record) {\n            return _this.applyAttributeMapping(filter, record, bottomColor)[0];\n          });\n        }\n\n        if (attributesToRemapping.length) {\n          if (filter !== null && filter !== void 0 && filter.needRemapping) {\n            layer.setEncodedData(_this.mapping(attributes, filterData, undefined, bottomColor));\n            filter.needRemapping = false;\n          } else {\n            layer.setEncodedData(_this.mapping(attributesToRemapping, filterData, layer.getEncodedData(), bottomColor));\n          }\n\n          layer.emit('remapping', null);\n        }\n      });\n    }\n  }, {\n    key: \"generateMaping\",\n    value: function generateMaping(layer, _ref2) {\n      var _this2 = this;\n\n      var styleAttributeService = _ref2.styleAttributeService;\n      var bottomColor = layer.getBottomColor();\n      var attributes = styleAttributeService.getLayerStyleAttributes() || [];\n      var filter = styleAttributeService.getLayerStyleAttribute('filter');\n      var dataArray = layer.getSource().data.dataArray;\n      var filterData = dataArray;\n\n      if (filter !== null && filter !== void 0 && filter.scale) {\n        filterData = dataArray.filter(function (record) {\n          return _this2.applyAttributeMapping(filter, record, bottomColor)[0];\n        });\n      }\n\n      layer.setEncodedData(this.mapping(attributes, filterData, undefined, bottomColor));\n    }\n  }, {\n    key: \"mapping\",\n    value: function mapping(attributes, data, predata, minimumColor) {\n      var _this3 = this;\n\n      var mappedData = data.map(function (record, i) {\n        var preRecord = predata ? predata[i] : {};\n\n        var encodeRecord = _objectSpread({\n          id: record._id,\n          coordinates: record.coordinates\n        }, preRecord);\n\n        attributes.filter(function (attribute) {\n          return attribute.scale !== undefined;\n        }).forEach(function (attribute) {\n          var values = _this3.applyAttributeMapping(attribute, record, minimumColor);\n\n          attribute.needRemapping = false;\n\n          if (attribute.name === 'color') {\n            values = values.map(function (c) {\n              return rgb2arr(c);\n            });\n          }\n\n          encodeRecord[attribute.name] = Array.isArray(values) && values.length === 1 ? values[0] : values;\n\n          if (attribute.name === 'shape') {\n            encodeRecord.shape = _this3.fontService.getIconFontKey(encodeRecord[attribute.name]);\n          }\n        });\n        return encodeRecord;\n      });\n\n      if (mappedData.length > 0 && this.mapService.version === 'GAODE2.x') {\n        if (typeof mappedData[0].coordinates[0] === 'number') {\n          mappedData.filter(function (d) {\n            return !d.originCoordinates;\n          }).map(function (d) {\n            d.version = 'GAODE2.x';\n            d.originCoordinates = _cloneDeep(d.coordinates);\n            d.coordinates = _this3.mapService.lngLatToCoord(d.coordinates);\n          });\n        } else {\n          mappedData.filter(function (d) {\n            return !d.originCoordinates;\n          }).map(function (d) {\n            d.version = 'GAODE2.x';\n            d.originCoordinates = _cloneDeep(d.coordinates);\n            d.coordinates = _this3.mapService.lngLatToCoords(d.coordinates);\n          });\n        }\n      }\n\n      return mappedData;\n    }\n  }, {\n    key: \"applyAttributeMapping\",\n    value: function applyAttributeMapping(attribute, record, minimumColor) {\n      var _attribute$scale;\n\n      if (!attribute.scale) {\n        return [];\n      }\n\n      var scalers = (attribute === null || attribute === void 0 ? void 0 : (_attribute$scale = attribute.scale) === null || _attribute$scale === void 0 ? void 0 : _attribute$scale.scalers) || [];\n      var params = [];\n      scalers.forEach(function (_ref3) {\n        var _attribute$scale2;\n\n        var field = _ref3.field;\n\n        if (record.hasOwnProperty(field) || ((_attribute$scale2 = attribute.scale) === null || _attribute$scale2 === void 0 ? void 0 : _attribute$scale2.type) === 'variable') {\n          params.push(record[field]);\n        }\n      });\n      var mappingResult = attribute.mapping ? attribute.mapping(params) : [];\n\n      if (attribute.name === 'color' && !isColor(mappingResult[0])) {\n        return [minimumColor];\n      }\n\n      return mappingResult;\n    }\n  }]);\n\n  return DataMappingPlugin;\n}(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, \"mapService\", [_dec3], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, \"fontService\", [_dec4], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class2)) || _class);\nexport { DataMappingPlugin as default };","map":null,"metadata":{},"sourceType":"module"}