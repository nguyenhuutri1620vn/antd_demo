{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.L7Plot = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar map_1 = require(\"../core/map\");\n\nvar utils_1 = require(\"../utils\");\n\nvar layer_group_1 = require(\"../core/layer/layer-group\");\n\nvar types_1 = require(\"./types\");\n\nvar DEFAULT_OPTIONS = {};\n\nvar L7Plot =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(L7Plot, _super);\n\n  function L7Plot(container, options) {\n    var _this = _super.call(this, options) || this;\n    /**\n     * 图表实例\n     */\n\n\n    _this.plots = [];\n    _this.container = _this.createContainer(container);\n    _this.theme = _this.createTheme();\n    _this.scene = _this.createScene();\n\n    _this.registerResources();\n\n    _this.render();\n\n    _this.inited = true;\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  L7Plot.prototype.getDefaultOptions = function () {\n    return (0, utils_1.deepAssign)({}, map_1.Map.DefaultOptions, L7Plot.DefaultOptions);\n  };\n  /**\n   * 创建所有图层\n   */\n\n\n  L7Plot.prototype.createLayers = function () {\n    var layerGroup = new layer_group_1.LayerGroup([]);\n    var layers = this.options.layers || [];\n\n    for (var index = 0; index < layers.length; index++) {\n      var layer = this.createLayer(layers[index]);\n      layerGroup.addLayer(layer);\n    }\n\n    return layerGroup;\n  };\n  /**\n   * 创建图层实例\n   */\n\n\n  L7Plot.prototype.createLayer = function (layerConfig) {\n    var type = layerConfig.type,\n        options = (0, tslib_1.__rest)(layerConfig, [\"type\"]);\n    var LayerClass = types_1.LAYERS_MAP[type];\n\n    if ((0, util_1.isUndefined)(LayerClass)) {\n      throw new Error(\"Don't exist \".concat(type, \" layer\"));\n    }\n\n    var layer = new LayerClass(options);\n    return layer;\n  };\n  /**\n   * 添加图层\n   */\n\n\n  L7Plot.prototype.addLayer = function (layer) {\n    var isLayerClass = function (layer) {\n      return typeof layer['render'] === 'function';\n    };\n\n    if (isLayerClass(layer)) {\n      _super.prototype.addLayer.call(this, layer);\n    } else {\n      var plotLayer = this.createLayer(layer);\n\n      _super.prototype.addLayer.call(this, plotLayer);\n    }\n  };\n  /**\n   * 移除图层\n   */\n\n\n  L7Plot.prototype.removeLayerByName = function (name) {\n    var layer = this.layerGroup.getLayerByName(name);\n\n    if (layer) {\n      return this.layerGroup.removeLayer(layer);\n    }\n\n    return false;\n  };\n  /**\n   * 更新图层\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  L7Plot.prototype.updateLayers = function (layers) {//\n  };\n  /**\n   * 更新 Plot\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  L7Plot.prototype.updatePlots = function (plots) {//\n  };\n  /**\n   * 渲染\n   */\n\n\n  L7Plot.prototype.render = function () {\n    var layerGroup = this.createLayers();\n\n    if (this.inited) {\n      this.layerGroup.removeAllLayer();\n      layerGroup.addTo(this.scene);\n      this.layerGroup = layerGroup;\n      this.updateControls();\n    } else {\n      this.layerGroup = layerGroup;\n      this.onLayersLoaded();\n      layerGroup.addTo(this.scene);\n    }\n  };\n  /**\n   * 图层加载成功\n   */\n\n\n  L7Plot.prototype.onLayersLoaded = function () {\n    var _this = this;\n\n    var onLoaded = function () {\n      _this.renderPlots();\n\n      _this.initControls();\n\n      _this.loaded = true;\n\n      _this.emit('loaded');\n    };\n\n    if (this.scene['sceneService'].loaded) {\n      this.sceneLoaded = true;\n      this.layersLoaded && onLoaded();\n    } else {\n      this.scene.once('loaded', function () {\n        _this.sceneLoaded = true;\n        _this.layersLoaded && onLoaded();\n      });\n    }\n\n    if (this.layerGroup.isEmpty()) {\n      this.layersLoaded = true;\n    } else {\n      this.layerGroup.once('inited-all', function () {\n        _this.layersLoaded = true;\n        _this.sceneLoaded && onLoaded();\n      });\n    }\n  };\n  /**\n   * 渲染 plots\n   */\n\n\n  L7Plot.prototype.renderPlots = function () {\n    var plots = this.options.plots || [];\n\n    for (var index = 0; index < plots.length; index++) {\n      var plot = plots[index];\n      var plotInstance = this.createPlot(plot);\n      this.plots.push(plotInstance);\n    }\n  };\n  /**\n   * 创建 plot\n   */\n\n\n  L7Plot.prototype.createPlot = function (plot) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    var type = plot.type,\n        legend = plot.legend,\n        layerMenu = plot.layerMenu,\n        options = (0, tslib_1.__rest)(plot, [\"type\", \"legend\", \"layerMenu\"]);\n    var PlotClass = types_1.PLOTS_MAP[type];\n\n    if ((0, util_1.isUndefined)(PlotClass)) {\n      throw new Error(\"Don't exist \".concat(type, \" plot\"));\n    }\n\n    var plotInstance = new PlotClass(options);\n    plotInstance.attachToScene(this.scene, this.theme);\n    return plotInstance;\n  };\n  /**\n   * 添加图表\n   */\n\n\n  L7Plot.prototype.addPlot = function (plotConfig) {\n    // TODO: duplicate plot\n    var plotInstance = this.createPlot(plotConfig);\n    this.plots.push(plotInstance);\n  };\n  /**\n   * 获取所有图表\n   */\n\n\n  L7Plot.prototype.getPlots = function () {\n    return this.plots;\n  };\n  /**\n   * 根据图表名称获取图表\n   */\n\n\n  L7Plot.prototype.getPlotByName = function (name) {\n    return this.plots.find(function (plot) {\n      var _a;\n\n      return ((_a = plot.options) === null || _a === void 0 ? void 0 : _a.name) === name;\n    });\n  };\n  /**\n   * 根据图表名称移除图表\n   */\n\n\n  L7Plot.prototype.removePlotByName = function (name) {\n    var layerIndex = this.plots.findIndex(function (plot) {\n      var _a;\n\n      return ((_a = plot.options) === null || _a === void 0 ? void 0 : _a.name) === name;\n    });\n    if (layerIndex === -1) return false;\n\n    var _a = (0, tslib_1.__read)(this.plots.splice(layerIndex, 1), 1),\n        plot = _a[0];\n\n    plot.unattachFromScene();\n    return true;\n  };\n  /**\n   * 移除所有的图表\n   */\n\n\n  L7Plot.prototype.removeAllPlot = function () {\n    this.plots.forEach(function (plot) {\n      plot.unattachFromScene();\n    });\n    this.plots = [];\n  };\n  /**\n   * 默认的 options 配置项\n   */\n\n\n  L7Plot.DefaultOptions = DEFAULT_OPTIONS;\n  return L7Plot;\n}(map_1.Map);\n\nexports.L7Plot = L7Plot;","map":null,"metadata":{},"sourceType":"script"}