{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deepAssign = void 0; // 最大比对层级\n\nvar MAX_MIX_LEVEL = 5;\nvar toString = new Object().toString;\n\nvar isType = function (value, type) {\n  return toString.call(value) === '[object ' + type + ']';\n};\n\nvar isArray = function (value) {\n  return isType(value, 'Array');\n};\n\nvar isObjectLike = function (value) {\n  /**\n   * isObjectLike({}) => true\n   * isObjectLike([1, 2, 3]) => true\n   * isObjectLike(Function) => false\n   */\n  return typeof value === 'object' && value !== null;\n};\n\nvar isPlainObject = function (value) {\n  /**\n   * isObjectLike(new Foo) => false\n   * isObjectLike([1, 2, 3]) => false\n   * isObjectLike({ x: 0, y: 0 }) => true\n   */\n  if (!isObjectLike(value) || !isType(value, 'Object')) {\n    return false;\n  }\n\n  var proto = value;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(value) === proto;\n};\n\nvar deep = function (target, source, level, maxLevel) {\n  level = level || 0;\n  maxLevel = maxLevel || MAX_MIX_LEVEL;\n\n  for (var key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      var value = source[key];\n\n      if (!value) {\n        // null 、 undefined 等情况直接赋值\n        target[key] = value;\n      } else {\n        if (isPlainObject(value)) {\n          if (!isPlainObject(target[key])) {\n            target[key] = {};\n          }\n\n          if (level < maxLevel) {\n            deep(target[key], value, level + 1, maxLevel);\n          } else {\n            // 层级过深直接赋值，性能问题\n            target[key] = source[key];\n          }\n        } else if (isArray(value)) {\n          target[key] = [];\n          target[key] = target[key].concat(value);\n        } else {\n          target[key] = value;\n        }\n      }\n    }\n  }\n};\n/**\n * deepAssign 对象深度合并\n * deepAssign 功能类似 deepMix\n * 不同点在于 deepAssign 会将 null undefined 等类型直接覆盖给 source\n */\n\n\nvar deepAssign = function (target) {\n  var sources = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    sources[_i - 1] = arguments[_i];\n  }\n\n  for (var i = 0; i < sources.length; i += 1) {\n    deep(target, sources[i]);\n  }\n\n  return target;\n};\n\nexports.deepAssign = deepAssign;","map":null,"metadata":{},"sourceType":"script"}