{"ast":null,"code":"import { NumberExt } from '../../util';\nimport { Base } from '../base';\nconst CYLINDER_TILT = 10;\nexport const Cylinder = Base.define({\n  shape: 'cylinder',\n  overwrite: true,\n  markup: [{\n    tagName: 'path',\n    selector: 'body'\n  }, {\n    tagName: 'ellipse',\n    selector: 'top'\n  }, {\n    tagName: 'text',\n    selector: 'label'\n  }],\n  attrs: {\n    body: Object.assign(Object.assign({}, Base.bodyAttr), {\n      lateral: CYLINDER_TILT\n    }),\n    top: Object.assign(Object.assign({}, Base.bodyAttr), {\n      refCx: '50%',\n      refRx: '50%',\n      cy: CYLINDER_TILT,\n      ry: CYLINDER_TILT\n    })\n  },\n  attrHooks: {\n    lateral: {\n      set(t, _ref) {\n        let {\n          refBBox\n        } = _ref;\n        const isPercentage = NumberExt.isPercentage(t);\n\n        if (isPercentage) {\n          // eslint-disable-next-line\n          t = parseFloat(t) / 100;\n        }\n\n        const x = refBBox.x;\n        const y = refBBox.y;\n        const w = refBBox.width;\n        const h = refBBox.height; // curve control point variables\n\n        const rx = w / 2;\n        const ry = isPercentage ? h * t : t;\n        const kappa = 0.551784;\n        const cx = kappa * rx;\n        const cy = kappa * ry; // shape variables\n\n        const xLeft = x;\n        const xCenter = x + w / 2;\n        const xRight = x + w;\n        const ySideTop = y + ry;\n        const yCurveTop = ySideTop - ry;\n        const ySideBottom = y + h - ry;\n        const yCurveBottom = y + h; // return calculated shape\n\n        const data = ['M', xLeft, ySideTop, 'L', xLeft, ySideBottom, 'C', x, ySideBottom + cy, xCenter - cx, yCurveBottom, xCenter, yCurveBottom, 'C', xCenter + cx, yCurveBottom, xRight, ySideBottom + cy, xRight, ySideBottom, 'L', xRight, ySideTop, 'C', xRight, ySideTop - cy, xCenter + cx, yCurveTop, xCenter, yCurveTop, 'C', xCenter - cx, yCurveTop, xLeft, ySideTop - cy, xLeft, ySideTop, 'Z'];\n        return {\n          d: data.join(' ')\n        };\n      }\n\n    }\n  },\n  knob: {\n    enabled: true,\n\n    position(_ref2) {\n      let {\n        node\n      } = _ref2;\n      const lateral = node.attr('body/lateral');\n      return {\n        x: 0,\n        y: lateral\n      };\n    },\n\n    onMouseMove(_ref3) {\n      let {\n        node,\n        data,\n        deltaY\n      } = _ref3;\n\n      if (deltaY !== 0) {\n        const bbox = node.getBBox();\n        const previous = node.attr('body/lateral');\n\n        if (data.round == null) {\n          data.round = previous;\n        }\n\n        const min = 0;\n        const max = bbox.height / 2;\n        const current = NumberExt.clamp(data.round + deltaY, min, max);\n\n        if (current !== previous) {\n          node.attr({\n            body: {\n              lateral: current\n            },\n            top: {\n              cy: current,\n              ry: current\n            }\n          });\n        }\n      }\n    }\n\n  }\n});","map":null,"metadata":{},"sourceType":"module"}