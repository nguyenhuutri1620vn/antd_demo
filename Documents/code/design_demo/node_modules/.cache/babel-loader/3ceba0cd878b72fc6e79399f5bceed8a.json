{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { TYPES } from '../../types';\nvar MarkerService = (_dec = injectable(), _dec(_class = function () {\n  function MarkerService() {\n    _classCallCheck(this, MarkerService);\n\n    _defineProperty(this, \"container\", void 0);\n\n    _defineProperty(this, \"scene\", void 0);\n\n    _defineProperty(this, \"mapsService\", void 0);\n\n    _defineProperty(this, \"markers\", []);\n\n    _defineProperty(this, \"markerLayers\", []);\n\n    _defineProperty(this, \"unAddMarkers\", []);\n\n    _defineProperty(this, \"unAddMarkerLayers\", []);\n  }\n\n  _createClass(MarkerService, [{\n    key: \"addMarkerLayer\",\n    value: function addMarkerLayer(markerLayer) {\n      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n        this.markerLayers.push(markerLayer);\n        markerLayer.addTo(this.scene);\n      } else {\n        this.unAddMarkerLayers.push(markerLayer);\n      }\n    }\n  }, {\n    key: \"removeMarkerLayer\",\n    value: function removeMarkerLayer(layer) {\n      layer.destroy();\n      this.markerLayers.indexOf(layer);\n      var markerIndex = this.markerLayers.indexOf(layer);\n\n      if (markerIndex > -1) {\n        this.markerLayers.splice(markerIndex, 1);\n      }\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      if (this.mapsService.map && this.mapsService.getMarkerContainer()) {\n        this.markers.push(marker);\n        marker.addTo(this.scene);\n      } else {\n        this.unAddMarkers.push(marker);\n      }\n    }\n  }, {\n    key: \"addMarkers\",\n    value: function addMarkers() {\n      var _this = this;\n\n      this.unAddMarkers.forEach(function (marker) {\n        marker.addTo(_this.scene);\n\n        _this.markers.push(marker);\n      });\n      this.unAddMarkers = [];\n    }\n  }, {\n    key: \"addMarkerLayers\",\n    value: function addMarkerLayers() {\n      var _this2 = this;\n\n      this.unAddMarkerLayers.forEach(function (markerLayer) {\n        _this2.markerLayers.push(markerLayer);\n\n        markerLayer.addTo(_this2.scene);\n      });\n      this.unAddMarkers = [];\n    }\n  }, {\n    key: \"removeMarker\",\n    value: function removeMarker(marker) {\n      marker.remove();\n      this.markers.indexOf(marker);\n      var markerIndex = this.markers.indexOf(marker);\n\n      if (markerIndex > -1) {\n        this.markers.splice(markerIndex, 1);\n      }\n    }\n  }, {\n    key: \"removeAllMarkers\",\n    value: function removeAllMarkers() {\n      this.destroy();\n    }\n  }, {\n    key: \"init\",\n    value: function init(scene) {\n      this.scene = scene;\n      this.mapsService = scene.get(TYPES.IMapService);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.markers.forEach(function (marker) {\n        marker.remove();\n      });\n      this.markers = [];\n      this.markerLayers.forEach(function (layer) {\n        layer.destroy();\n      });\n      this.markerLayers = [];\n    }\n  }, {\n    key: \"removeMakerLayerMarker\",\n    value: function removeMakerLayerMarker(layer) {\n      layer.destroy();\n    }\n  }]);\n\n  return MarkerService;\n}()) || _class);\nexport { MarkerService as default };","map":null,"metadata":{},"sourceType":"module"}