{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { HookHub } from '@antv/xflow-hook';\nimport { XFlowNodeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsMoveNode;\n\n(function (NsMoveNode) {\n  /** Command: 用于注册named factory */\n  NsMoveNode.command = XFlowNodeCommands.MOVE_NODE;\n  /** hookName */\n\n  NsMoveNode.hookKey = 'moveNode';\n  /** 创建 hook */\n\n  NsMoveNode.createHook = () => {\n    return new HookHub();\n  };\n})(NsMoveNode || (NsMoveNode = {}));\n\nlet MoveNodeCommand =\n/** 创建节点命令 */\nclass MoveNodeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.moveNode.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          nodePositionService\n        } = handlerArgs;\n        /** nodePositionService 返回false时不更新position */\n\n        if (nodePositionService) {\n          const canMove = yield nodePositionService(handlerArgs);\n          if (!canMove) return {\n            err: 'service rejected'\n          };\n        }\n\n        const {\n          dx = 0,\n          dy = 0,\n          x,\n          y,\n          duration = 150\n        } = handlerArgs.position;\n        const x6Graph = yield ctx.getX6Graph();\n        const node = x6Graph.getCellById(handlerArgs.id);\n\n        if (node) {\n          let nextX = x;\n          let nextY = y;\n          const {\n            x: preX,\n            y: preY\n          } = node.position();\n\n          let undo = () => {\n            node.position(preX, preY, {\n              silent: false\n            });\n          };\n\n          if (dx || dy) {\n            nextX = dx + preX;\n            nextY = dy + preY;\n            node.translate(dx, dy, {\n              transition: {\n                duration\n              }\n            });\n\n            undo = () => node.translate(-dx, -dy, {\n              transition: {\n                duration\n              }\n            });\n          } else {\n            node.position(nextX, nextY, {\n              silent: false\n            });\n          }\n          /** add undo  */\n\n\n          ctx.addUndo(Disposable.create(() => {\n            undo();\n          }));\n          return {\n            err: null,\n            nextX,\n            nextY\n          };\n        }\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], MoveNodeCommand.prototype, \"contextProvider\", void 0);\n\nMoveNodeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsMoveNode.command.id\n  }\n})\n/** 创建节点命令 */\n], MoveNodeCommand);\nexport { MoveNodeCommand };","map":null,"metadata":{},"sourceType":"module"}