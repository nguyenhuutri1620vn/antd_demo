{"ast":null,"code":"var DEFAULT_TRIGGER = 'click';\nvar ALLOW_EVENTS = ['click', 'dblclick'];\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      /**\n       * 发生收缩/扩展变化时的回调\n       */\n      trigger: DEFAULT_TRIGGER,\n      onChange: function onChange() {}\n    };\n  },\n  getEvents: function getEvents() {\n    var _a;\n\n    var trigger; // 检测输入是否合法\n\n    if (ALLOW_EVENTS.includes(this.trigger)) {\n      trigger = this.trigger;\n    } else {\n      trigger = DEFAULT_TRIGGER; // eslint-disable-next-line no-console\n\n      console.warn(\"Behavior collapse-expand 的 trigger 参数不合法，请输入 'click' 或 'dblclick'\");\n    }\n\n    return _a = {}, _a[\"node:\".concat(trigger)] = 'onNodeClick', // 支持移动端事件\n    _a.touchstart = 'onNodeClick', _a;\n  },\n  onNodeClick: function onNodeClick(e) {\n    var item = e.item;\n    if (!item) return; // 如果节点进行过更新，model 会进行 merge，直接改 model 就不能改布局，所以需要去改源数据\n\n    var sourceData = this.graph.findDataById(item.get('id'));\n\n    if (!sourceData) {\n      return;\n    }\n\n    var children = sourceData.children; // 叶子节点的收缩和展开没有意义\n\n    if (!children || children.length === 0) {\n      return;\n    }\n\n    var collapsed = !sourceData.collapsed;\n\n    if (!this.shouldBegin(e, collapsed)) {\n      return;\n    }\n\n    sourceData.collapsed = collapsed;\n    item.getModel().collapsed = collapsed;\n    this.graph.emit('itemcollapsed', {\n      item: e.item,\n      collapsed: collapsed\n    });\n\n    if (!this.shouldUpdate(e, collapsed)) {\n      return;\n    }\n\n    this.onChange(item, collapsed);\n    this.graph.layout();\n  }\n};","map":null,"metadata":{},"sourceType":"module"}