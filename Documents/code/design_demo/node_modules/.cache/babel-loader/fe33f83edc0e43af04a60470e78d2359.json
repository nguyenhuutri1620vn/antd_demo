{"ast":null,"code":"export { isNaN, isNumber, isFinite, isInteger, isSafeInteger, clamp, inRange, toFinite, toNumber, toInteger, toSafeInteger, parseInt } from 'lodash-es';\nexport { isNumeric } from '../lang/lang';\n/**\n * Returns the remainder of division of `n` by `m`. You should use this\n * instead of the built-in operation as the built-in operation does not\n * properly handle negative numbers.\n */\n\nexport function mod(n, m) {\n  return (n % m + m) % m;\n}\nexport function random(lower, upper) {\n  if (upper == null) {\n    upper = lower == null ? 1 : lower; // eslint-disable-line\n\n    lower = 0; // eslint-disable-line\n  } else if (upper < lower) {\n    const tmp = lower;\n    lower = upper; // eslint-disable-line\n\n    upper = tmp; // eslint-disable-line\n  }\n\n  return Math.floor(Math.random() * (upper - lower + 1) + lower);\n}\nexport function isPercentage(val) {\n  return typeof val === 'string' && val.slice(-1) === '%';\n}\nexport function normalizePercentage(num, ref) {\n  if (num == null) {\n    return 0;\n  }\n\n  let raw;\n\n  if (typeof num === 'string') {\n    raw = parseFloat(num);\n\n    if (isPercentage(num)) {\n      raw /= 100;\n\n      if (Number.isFinite(raw)) {\n        return raw * ref;\n      }\n    }\n  } else {\n    raw = num;\n  }\n\n  if (!Number.isFinite(raw)) {\n    return 0;\n  }\n\n  if (raw > 0 && raw < 1) {\n    return raw * ref;\n  }\n\n  return raw;\n}\nexport function parseCssNumeric(val, units) {\n  function getUnit(regexp) {\n    const matches = new RegExp(`(?:\\\\d+(?:\\\\.\\\\d+)*)(${regexp})$`).exec(val);\n\n    if (!matches) {\n      return null;\n    }\n\n    return matches[1];\n  }\n\n  const number = parseFloat(val);\n\n  if (Number.isNaN(number)) {\n    return null;\n  } // determine the unit\n\n\n  let regexp;\n\n  if (units == null) {\n    // accept any unit, as well as no unit\n    regexp = '[A-Za-z]*';\n  } else if (Array.isArray(units)) {\n    if (units.length === 0) {\n      return null;\n    }\n\n    regexp = units.join('|');\n  } else if (typeof units === 'string') {\n    regexp = units;\n  }\n\n  const unit = getUnit(regexp);\n\n  if (unit === null) {\n    return null;\n  }\n\n  return {\n    unit,\n    value: number\n  };\n}\nexport function normalizeSides(box) {\n  if (typeof box === 'object') {\n    let left = 0;\n    let top = 0;\n    let right = 0;\n    let bottom = 0;\n\n    if (box.vertical != null && Number.isFinite(box.vertical)) {\n      top = bottom = box.vertical;\n    }\n\n    if (box.horizontal != null && Number.isFinite(box.horizontal)) {\n      right = left = box.horizontal;\n    }\n\n    if (box.left != null && Number.isFinite(box.left)) left = box.left;\n    if (box.top != null && Number.isFinite(box.top)) top = box.top;\n    if (box.right != null && Number.isFinite(box.right)) right = box.right;\n    if (box.bottom != null && Number.isFinite(box.bottom)) bottom = box.bottom;\n    return {\n      top,\n      right,\n      bottom,\n      left\n    };\n  }\n\n  let val = 0;\n\n  if (box != null && Number.isFinite(box)) {\n    val = box;\n  }\n\n  return {\n    top: val,\n    right: val,\n    bottom: val,\n    left: val\n  };\n}","map":null,"metadata":{},"sourceType":"module"}