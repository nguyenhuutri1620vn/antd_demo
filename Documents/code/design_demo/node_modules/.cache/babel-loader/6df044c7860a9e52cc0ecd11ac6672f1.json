{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Dom } from '../util';\nimport { Highlighter } from '../registry';\nimport { Base } from './base';\nexport class HighlightManager extends Base {\n  constructor() {\n    super(...arguments);\n    this.highlights = {};\n  }\n\n  init() {\n    this.startListening();\n  }\n\n  startListening() {\n    this.graph.on('cell:highlight', this.onCellHighlight, this);\n    this.graph.on('cell:unhighlight', this.onCellUnhighlight, this);\n  }\n\n  stopListening() {\n    this.graph.off('cell:highlight', this.onCellHighlight, this);\n    this.graph.off('cell:unhighlight', this.onCellUnhighlight, this);\n  }\n\n  onCellHighlight(_ref) {\n    let {\n      view: cellView,\n      magnet,\n      options = {}\n    } = _ref;\n    const resolved = this.resolveHighlighter(options);\n\n    if (!resolved) {\n      return;\n    }\n\n    const key = this.getHighlighterId(magnet, resolved);\n\n    if (!this.highlights[key]) {\n      const highlighter = resolved.highlighter;\n      highlighter.highlight(cellView, magnet, Object.assign({}, resolved.args));\n      this.highlights[key] = {\n        cellView,\n        magnet,\n        highlighter,\n        args: resolved.args\n      };\n    }\n  }\n\n  onCellUnhighlight(_ref2) {\n    let {\n      magnet,\n      options = {}\n    } = _ref2;\n    const resolved = this.resolveHighlighter(options);\n\n    if (!resolved) {\n      return;\n    }\n\n    const id = this.getHighlighterId(magnet, resolved);\n    this.unhighlight(id);\n  }\n\n  resolveHighlighter(options) {\n    const graphOptions = this.options;\n    let highlighterDef = options.highlighter;\n\n    if (highlighterDef == null) {\n      // check for built-in types\n      const type = options.type;\n      highlighterDef = type && graphOptions.highlighting[type] || graphOptions.highlighting.default;\n    }\n\n    if (highlighterDef == null) {\n      return null;\n    }\n\n    const def = typeof highlighterDef === 'string' ? {\n      name: highlighterDef\n    } : highlighterDef;\n    const name = def.name;\n    const highlighter = Highlighter.registry.get(name);\n\n    if (highlighter == null) {\n      return Highlighter.registry.onNotFound(name);\n    }\n\n    Highlighter.check(name, highlighter);\n    return {\n      name,\n      highlighter,\n      args: def.args || {}\n    };\n  }\n\n  getHighlighterId(magnet, options) {\n    Dom.ensureId(magnet);\n    return options.name + magnet.id + JSON.stringify(options.args);\n  }\n\n  unhighlight(id) {\n    const highlight = this.highlights[id];\n\n    if (highlight) {\n      highlight.highlighter.unhighlight(highlight.cellView, highlight.magnet, highlight.args);\n      delete this.highlights[id];\n    }\n  }\n\n  dispose() {\n    Object.keys(this.highlights).forEach(id => this.unhighlight(id));\n    this.stopListening();\n  }\n\n}\n\n__decorate([HighlightManager.dispose()], HighlightManager.prototype, \"dispose\", null);","map":null,"metadata":{},"sourceType":"module"}