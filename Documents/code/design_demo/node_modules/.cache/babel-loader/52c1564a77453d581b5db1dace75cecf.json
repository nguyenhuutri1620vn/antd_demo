{"ast":null,"code":"import { Dom, ObjectExt, StringExt } from '../util';\nimport { NodeTool, EdgeTool } from '../registry/tool';\nimport { View } from './view';\nimport { CellView } from './cell';\nimport { Markup } from './markup';\nexport class ToolsView extends View {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.svgContainer = this.createContainer(true, options);\n    this.htmlContainer = this.createContainer(false, options);\n    this.config(options);\n  }\n\n  get name() {\n    return this.options.name;\n  }\n\n  get graph() {\n    return this.cellView.graph;\n  }\n\n  get cell() {\n    return this.cellView.cell;\n  }\n\n  get [Symbol.toStringTag]() {\n    return ToolsView.toStringTag;\n  }\n\n  createContainer(svg, options) {\n    const container = svg ? View.createElement('g', true) : View.createElement('div', false);\n    Dom.addClass(container, this.prefixClassName('cell-tools'));\n\n    if (options.className) {\n      Dom.addClass(container, options.className);\n    }\n\n    return container;\n  }\n\n  config(options) {\n    this.options = Object.assign(Object.assign({}, this.options), options);\n\n    if (!CellView.isCellView(options.view) || options.view === this.cellView) {\n      return this;\n    }\n\n    this.cellView = options.view;\n\n    if (this.cell.isEdge()) {\n      Dom.addClass(this.svgContainer, this.prefixClassName('edge-tools'));\n      Dom.addClass(this.htmlContainer, this.prefixClassName('edge-tools'));\n    } else if (this.cell.isNode()) {\n      Dom.addClass(this.svgContainer, this.prefixClassName('node-tools'));\n      Dom.addClass(this.htmlContainer, this.prefixClassName('node-tools'));\n    }\n\n    this.svgContainer.setAttribute('data-cell-id', this.cell.id);\n    this.htmlContainer.setAttribute('data-cell-id', this.cell.id);\n\n    if (this.name) {\n      this.svgContainer.setAttribute('data-tools-name', this.name);\n      this.htmlContainer.setAttribute('data-tools-name', this.name);\n    }\n\n    const tools = this.options.items;\n\n    if (!Array.isArray(tools)) {\n      return this;\n    }\n\n    this.tools = [];\n    const normalizedTools = [];\n    tools.forEach(meta => {\n      if (ToolsView.ToolItem.isToolItem(meta)) {\n        if (meta.name === 'vertices') {\n          normalizedTools.unshift(meta);\n        } else {\n          normalizedTools.push(meta);\n        }\n      } else {\n        const name = typeof meta === 'object' ? meta.name : meta;\n\n        if (name === 'vertices') {\n          normalizedTools.unshift(meta);\n        } else {\n          normalizedTools.push(meta);\n        }\n      }\n    });\n\n    for (let i = 0; i < normalizedTools.length; i += 1) {\n      const meta = normalizedTools[i];\n      let tool;\n\n      if (ToolsView.ToolItem.isToolItem(meta)) {\n        tool = meta;\n      } else {\n        const name = typeof meta === 'object' ? meta.name : meta;\n        const args = typeof meta === 'object' ? meta.args || {} : {};\n\n        if (name) {\n          if (this.cell.isNode()) {\n            const ctor = NodeTool.registry.get(name);\n\n            if (ctor) {\n              tool = new ctor(args); // eslint-disable-line\n            } else {\n              return NodeTool.registry.onNotFound(name);\n            }\n          } else if (this.cell.isEdge()) {\n            const ctor = EdgeTool.registry.get(name);\n\n            if (ctor) {\n              tool = new ctor(args); // eslint-disable-line\n            } else {\n              return EdgeTool.registry.onNotFound(name);\n            }\n          }\n        }\n      }\n\n      if (tool) {\n        tool.config(this.cellView, this);\n        tool.render();\n        const container = tool.options.isSVGElement !== false ? this.svgContainer : this.htmlContainer;\n        container.appendChild(tool.container);\n        this.tools.push(tool);\n      }\n    }\n\n    return this;\n  }\n\n  update() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const tools = this.tools;\n\n    if (tools) {\n      tools.forEach(tool => {\n        if (options.toolId !== tool.cid && tool.isVisible()) {\n          tool.update();\n        }\n      });\n    }\n\n    return this;\n  }\n\n  focus(focusedTool) {\n    const tools = this.tools;\n\n    if (tools) {\n      tools.forEach(tool => {\n        if (focusedTool === tool) {\n          tool.show();\n        } else {\n          tool.hide();\n        }\n      });\n    }\n\n    return this;\n  }\n\n  blur(blurredTool) {\n    const tools = this.tools;\n\n    if (tools) {\n      tools.forEach(tool => {\n        if (tool !== blurredTool && !tool.isVisible()) {\n          tool.show();\n          tool.update();\n        }\n      });\n    }\n\n    return this;\n  }\n\n  hide() {\n    return this.focus(null);\n  }\n\n  show() {\n    return this.blur(null);\n  }\n\n  remove() {\n    const tools = this.tools;\n\n    if (tools) {\n      tools.forEach(tool => tool.remove());\n      this.tools = null;\n    }\n\n    Dom.remove(this.svgContainer);\n    Dom.remove(this.htmlContainer);\n    return super.remove();\n  }\n\n  mount() {\n    const tools = this.tools;\n    const cellView = this.cellView;\n\n    if (cellView && tools) {\n      const hasSVG = tools.some(tool => tool.options.isSVGElement !== false);\n      const hasHTML = tools.some(tool => tool.options.isSVGElement === false);\n\n      if (hasSVG) {\n        const parent = this.options.local ? cellView.container : cellView.graph.view.decorator;\n        parent.appendChild(this.svgContainer);\n      }\n\n      if (hasHTML) {\n        this.graph.container.appendChild(this.htmlContainer);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n(function (ToolsView) {\n  ToolsView.toStringTag = `X6.${ToolsView.name}`;\n\n  function isToolsView(instance) {\n    if (instance == null) {\n      return false;\n    }\n\n    if (instance instanceof ToolsView) {\n      return true;\n    }\n\n    const tag = instance[Symbol.toStringTag];\n    const view = instance;\n\n    if ((tag == null || tag === ToolsView.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function') {\n      return true;\n    }\n\n    return false;\n  }\n\n  ToolsView.isToolsView = isToolsView;\n})(ToolsView || (ToolsView = {}));\n\n(function (ToolsView) {\n  class ToolItem extends View {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      super();\n      this.options = this.getOptions(options);\n      this.container = View.createElement(this.options.tagName || 'g', this.options.isSVGElement !== false);\n      Dom.addClass(this.container, this.prefixClassName('cell-tool'));\n\n      if (typeof this.options.className === 'string') {\n        Dom.addClass(this.container, this.options.className);\n      }\n\n      this.init();\n    }\n\n    static getDefaults() {\n      return this.defaults;\n    }\n\n    static config(options) {\n      this.defaults = this.getOptions(options);\n    }\n\n    static getOptions(options) {\n      return ObjectExt.merge(ObjectExt.cloneDeep(this.getDefaults()), options);\n    }\n\n    get graph() {\n      return this.cellView.graph;\n    }\n\n    get cell() {\n      return this.cellView.cell;\n    }\n\n    get name() {\n      return this.options.name;\n    }\n\n    get [Symbol.toStringTag]() {\n      return ToolItem.toStringTag;\n    }\n\n    init() {}\n\n    getOptions(options) {\n      const ctor = this.constructor;\n      return ctor.getOptions(options);\n    }\n\n    delegateEvents() {\n      if (this.options.events) {\n        super.delegateEvents(this.options.events);\n      }\n\n      return this;\n    }\n\n    config(view, toolsView) {\n      this.cellView = view;\n      this.parent = toolsView;\n      this.stamp(this.container);\n\n      if (this.cell.isEdge()) {\n        Dom.addClass(this.container, this.prefixClassName('edge-tool'));\n      } else if (this.cell.isNode()) {\n        Dom.addClass(this.container, this.prefixClassName('node-tool'));\n      }\n\n      if (this.name) {\n        this.container.setAttribute('data-tool-name', this.name);\n      }\n\n      this.delegateEvents();\n      return this;\n    }\n\n    render() {\n      this.empty();\n      const markup = this.options.markup;\n\n      if (markup) {\n        const meta = Markup.isStringMarkup(markup) ? Markup.parseStringMarkup(markup) : Markup.parseJSONMarkup(markup);\n        this.container.appendChild(meta.fragment);\n        this.childNodes = meta.selectors;\n      }\n\n      this.onRender();\n      return this;\n    }\n\n    onRender() {}\n\n    update() {\n      return this;\n    }\n\n    stamp() {\n      let elem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.container;\n\n      if (elem) {\n        elem.setAttribute('data-cell-id', this.cellView.cell.id);\n      }\n    }\n\n    show() {\n      this.container.style.display = '';\n      this.visible = true;\n      return this;\n    }\n\n    hide() {\n      this.container.style.display = 'none';\n      this.visible = false;\n      return this;\n    }\n\n    isVisible() {\n      return this.visible;\n    }\n\n    focus() {\n      const opacity = this.options.focusOpacity;\n\n      if (opacity != null && Number.isFinite(opacity)) {\n        this.container.style.opacity = `${opacity}`;\n      }\n\n      this.parent.focus(this);\n      return this;\n    }\n\n    blur() {\n      this.container.style.opacity = '';\n      this.parent.blur(this);\n      return this;\n    }\n\n    guard(evt) {\n      if (this.graph == null || this.cellView == null) {\n        return true;\n      }\n\n      return this.graph.view.guard(evt, this.cellView);\n    }\n\n  } // #region static\n\n\n  ToolItem.defaults = {\n    isSVGElement: true,\n    tagName: 'g'\n  };\n  ToolsView.ToolItem = ToolItem;\n\n  (function (ToolItem) {\n    let counter = 0;\n\n    function getClassName(name) {\n      if (name) {\n        return StringExt.pascalCase(name);\n      }\n\n      counter += 1;\n      return `CustomTool${counter}`;\n    }\n\n    function define(options) {\n      const tool = ObjectExt.createClass(getClassName(options.name), this);\n      tool.config(options);\n      return tool;\n    }\n\n    ToolItem.define = define;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n\n  (function (ToolItem) {\n    ToolItem.toStringTag = `X6.${ToolItem.name}`;\n\n    function isToolItem(instance) {\n      if (instance == null) {\n        return false;\n      }\n\n      if (instance instanceof ToolItem) {\n        return true;\n      }\n\n      const tag = instance[Symbol.toStringTag];\n      const view = instance;\n\n      if ((tag == null || tag === ToolItem.toStringTag) && view.graph != null && view.cell != null && typeof view.config === 'function' && typeof view.update === 'function' && typeof view.focus === 'function' && typeof view.blur === 'function' && typeof view.show === 'function' && typeof view.hide === 'function' && typeof view.isVisible === 'function') {\n        return true;\n      }\n\n      return false;\n    }\n\n    ToolItem.isToolItem = isToolItem;\n  })(ToolItem = ToolsView.ToolItem || (ToolsView.ToolItem = {}));\n})(ToolsView || (ToolsView = {}));","map":null,"metadata":{},"sourceType":"module"}