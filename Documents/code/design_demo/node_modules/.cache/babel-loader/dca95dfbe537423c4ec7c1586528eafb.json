{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Flow = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar plot_1 = require(\"../../core/plot\");\n\nvar constants_1 = require(\"./constants\");\n\nvar arc_layer_1 = require(\"../../layers/arc-layer\");\n\nvar dot_layer_1 = require(\"../../layers/dot-layer\");\n\nvar text_layer_1 = require(\"../../layers/text-layer\");\n\nvar layer_group_1 = require(\"../../core/layer/layer-group\");\n\nvar Flow =\n/** @class */\nfunction (_super) {\n  (0, tslib_1.__extends)(Flow, _super);\n\n  function Flow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 图表类型\n     */\n\n\n    _this.type = plot_1.Plot.PlotType.Flow;\n    return _this;\n  }\n  /**\n   * 获取默认配置\n   */\n\n\n  Flow.prototype.getDefaultOptions = function () {\n    return Flow.DefaultOptions;\n  };\n  /**\n   * 创建图层\n   */\n\n\n  Flow.prototype.createLayers = function (source) {\n    this.flowLayer = new arc_layer_1.ArcLayer((0, tslib_1.__assign)({\n      name: 'flowLayer',\n      source: source\n    }, (0, util_1.pick)(this.options, arc_layer_1.ArcLayer.LayerOptionsKeys)));\n    var layerGroup = new layer_group_1.LayerGroup([this.flowLayer]);\n\n    if (this.options.radiation) {\n      this.radiationLayer = this.createRadiationLayer(source);\n      layerGroup.addLayer(this.radiationLayer);\n    }\n\n    if (this.options.label) {\n      this.labelLayer = this.createLabelLayer(source, this.options.label);\n      layerGroup.addLayer(this.labelLayer);\n    }\n\n    return layerGroup;\n  };\n  /**\n   * 解析流向图起终点数据\n   */\n\n\n  Flow.prototype.parserPointData = function (source) {\n    // const pointMap = {};\n    var data = [];\n    source.data.dataArray.forEach(function (item) {\n      var coordinates = item.coordinates;\n\n      var _a = (0, tslib_1.__read)(coordinates, 2),\n          startPoint = _a[0],\n          endPoint = _a[1]; // if (isUndefined(pointMap[startPoint.toString()])) {\n      //   data.push({ ...item, coordinates: startPoint });\n      //   pointMap[startPoint.toString()] = true;\n      // }\n\n\n      data.push((0, tslib_1.__assign)((0, tslib_1.__assign)({}, item), {\n        coordinates: endPoint\n      }));\n    });\n    return data;\n  };\n  /**\n   * 创建辐射圈图层\n   */\n\n\n  Flow.prototype.createRadiationLayer = function (source) {\n    var _this = this;\n\n    var data = this.parserPointData(source);\n\n    var _a = this.options.radiation || {},\n        _b = _a.enabled,\n        enabled = _b === void 0 ? true : _b,\n        color = _a.color,\n        _c = _a.size,\n        size = _c === void 0 ? 20 : _c,\n        _d = _a.shape,\n        shape = _d === void 0 ? 'circle' : _d,\n        _e = _a.animate,\n        animate = _e === void 0 ? true : _e;\n\n    var radiationLayer = new dot_layer_1.DotLayer({\n      name: 'radiationLayer',\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'coordinates'\n        }\n      },\n      visible: enabled,\n      color: color,\n      size: size,\n      shape: shape,\n      animate: animate\n    });\n\n    var updateCallback = function () {\n      var data = _this.parserPointData(_this.source);\n\n      radiationLayer.layer.setData(data);\n    };\n\n    source.on('update', updateCallback);\n    radiationLayer.on('remove', function () {\n      source.off('update', updateCallback);\n    });\n    return radiationLayer;\n  };\n  /**\n   * 创建数据标签图层\n   */\n\n\n  Flow.prototype.createLabelLayer = function (source, label) {\n    var _this = this;\n\n    var data = this.parserPointData(source);\n    var _a = this.options,\n        visible = _a.visible,\n        minZoom = _a.minZoom,\n        maxZoom = _a.maxZoom,\n        _b = _a.zIndex,\n        zIndex = _b === void 0 ? 0 : _b;\n    var labelLayer = new text_layer_1.TextLayer((0, tslib_1.__assign)({\n      name: 'labelLayer',\n      source: {\n        data: data,\n        parser: {\n          type: 'json',\n          coordinates: 'coordinates'\n        }\n      },\n      visible: visible,\n      minZoom: minZoom,\n      maxZoom: maxZoom,\n      zIndex: zIndex + 0.1\n    }, label));\n\n    var updateCallback = function () {\n      var data = _this.parserPointData(_this.source);\n\n      labelLayer.layer.setData(data);\n    };\n\n    source.on('update', updateCallback);\n    labelLayer.on('remove', function () {\n      source.off('update', updateCallback);\n    });\n    return labelLayer;\n  };\n  /**\n   * 更新图层\n   */\n\n\n  Flow.prototype.updateLayers = function (options) {\n    var flowLayerConfig = (0, util_1.pick)(options, arc_layer_1.ArcLayer.LayerOptionsKeys);\n    this.flowLayer.update(flowLayerConfig);\n\n    if (options.radiation) {\n      if (this.radiationLayer) {\n        var radiation = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, options.radiation), {\n          visible: options.radiation.enabled\n        });\n        this.radiationLayer.update(radiation);\n      } else {\n        this.radiationLayer = this.createRadiationLayer(this.source);\n        this.layerGroup.addLayer(this.radiationLayer);\n      }\n    }\n\n    this.updateLabelLayer(this.source, options.label, this.options, this.labelLayer);\n  };\n  /**\n   * 实现 legend 配置项\n   */\n\n\n  Flow.prototype.getLegendOptions = function () {\n    var colorLegendItems = this.flowLayer.getColorLegendItems();\n\n    if (colorLegendItems.length !== 0) {\n      return {\n        type: 'category',\n        items: colorLegendItems\n      };\n    }\n\n    return {};\n  };\n  /**\n   * 默认配置项\n   */\n\n\n  Flow.DefaultOptions = constants_1.DEFAULT_OPTIONS;\n  return Flow;\n}(plot_1.Plot);\n\nexports.Flow = Flow;","map":null,"metadata":{},"sourceType":"script"}