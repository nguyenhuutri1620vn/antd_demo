{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { ConfigProvider, Tooltip } from 'antd';\nimport ReactDOM from 'react-dom';\nimport classnames from 'classnames';\nimport { createGraphConfig, DisposableCollection, createHookConfig, XFlowEdgeCommands } from '@antv/xflow';\nimport { getProps as getGlobalProps, onConfigChange } from '../../util';\nimport { Shape } from '@antv/x6';\nimport { NODE_HEIGHT, setNodeRender, ASPECTRATIONODE } from '../../components/node-panel';\nimport { setGroupRender } from '../../components/group-panel';\nimport { registerEdge, DefaultEdgeConfig, FLOWCHART_EDGE } from '../../components/edge-panel';\nimport { movedNode, resizeNode, changePortsVisible, addTools, removeTools } from './events';\n/** 自定义React节点 */\n\nvar ANT_PREFIX = 'ant';\nexport var NsAddEdgeEvent;\n\n(function (NsAddEdgeEvent) {\n  NsAddEdgeEvent.EVENT_NAME = 'ADD_EDGE_CMD_EVENT';\n})(NsAddEdgeEvent || (NsAddEdgeEvent = {}));\n\nvar XFlowEdge = Shape.Edge.registry.register('xflow', Shape.Edge.define({\n  zIndex: 1,\n  highlight: true,\n  shape: FLOWCHART_EDGE,\n  name: 'custom-edge',\n  label: '',\n  anchor: {\n    name: 'midSide',\n    args: {\n      dx: 10\n    }\n  },\n  attrs: DefaultEdgeConfig,\n  data: {\n    label: ''\n  }\n}), true);\nexport var useGraphHook = createHookConfig(function (config, proxy) {\n  var flowchartId = proxy.getValue().flowchartId;\n  config.setRegisterHook(function (hooks) {\n    var todo = new DisposableCollection();\n    var edgeData = hooks.afterGraphInit.registerHook({\n      name: 'call add edge to replace temp edge',\n      handler: function (args) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var commandService, graph;\n          return __generator(this, function (_a) {\n            commandService = args.commandService, graph = args.graph;\n            graph.on(NsAddEdgeEvent.EVENT_NAME, function (args) {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var edge, edgeConfig, config, onAddEdge;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      edge = args.edge, edgeConfig = __rest(args, [\"edge\"]);\n                      config = {\n                        edgeConfig: __assign(__assign({}, edgeConfig), {\n                          // renderKey: FLOWCHART_EDGE, // 暂不支持\n                          source: {\n                            cell: edgeConfig.source,\n                            port: edgeConfig.sourcePortId\n                          },\n                          target: {\n                            cell: edgeConfig.target,\n                            port: edgeConfig.targetPortId\n                          },\n                          zIndex: 1,\n                          attrs: {\n                            line: {\n                              stroke: '#A2B1C3',\n                              targetMarker: {\n                                name: 'block',\n                                width: 12,\n                                height: 8\n                              },\n                              strokeDasharray: '5 5',\n                              strokeWidth: 1\n                            }\n                          },\n                          data: __assign({}, edgeConfig)\n                        })\n                      };\n                      return [4\n                      /*yield*/\n                      , commandService.executeCommand(XFlowEdgeCommands.ADD_EDGE.id, config)];\n\n                    case 1:\n                      _a.sent();\n\n                      onAddEdge = getGlobalProps(flowchartId, 'onAddEdge');\n\n                      if (typeof onAddEdge === 'function') {\n                        onAddEdge(config);\n                      }\n\n                      onConfigChange({\n                        type: 'add:edge',\n                        config: config\n                      });\n                      args.edge.remove();\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            });\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      }\n    });\n    todo.push(edgeData);\n    return todo;\n  });\n});\n/**  graphConfig hook  */\n\nexport var useGraphConfig = createGraphConfig(function (config, proxy) {\n  var props = proxy.getValue();\n  var nodePanelProps = props.nodePanelProps,\n      _a = props.canvasProps,\n      canvasProps = _a === void 0 ? {} : _a; // const miniMapContainer = getContainer('miniMapContainer');\n\n  config.setEdgeTypeParser(function (edge) {\n    return edge === null || edge === void 0 ? void 0 : edge.renderKey;\n  });\n  registerEdge(config);\n  setNodeRender(config, nodePanelProps);\n  setGroupRender(config);\n  config.setX6Config(__assign({\n    grid: true,\n    history: true,\n    resizing: {\n      enabled: true,\n      minWidth: NODE_HEIGHT,\n      minHeight: NODE_HEIGHT,\n      preserveAspectRatio: function (shape) {\n        var data = shape.data;\n        return ASPECTRATIONODE.includes(data.name);\n      }\n    },\n    snapline: {\n      enabled: true\n    },\n    // minimap: {\n    //   enabled: true,\n    //   container: miniMapContainer,\n    //   width: 200,\n    //   height: 200,\n    // },\n    connecting: {\n      router: 'manhattan',\n      connector: {\n        name: 'rounded',\n        args: {\n          radius: 8\n        }\n      },\n      anchor: 'center',\n      connectionPoint: 'anchor',\n      allowBlank: false,\n      snap: {\n        radius: 20\n      },\n      createEdge: function () {\n        var edge = new XFlowEdge({});\n        var graph = this;\n        graph.once('edge:connected', function (args) {\n          var edge = args.edge,\n              isNew = args.isNew;\n\n          if (isNew && edge.isEdge()) {\n            var targetNode = edge.getTargetCell();\n\n            if (targetNode && targetNode.isNode()) {\n              var targetPortId = edge.getTargetPortId();\n              var sourcePortId = edge.getSourcePortId();\n              var sourceCellId = edge.getSourceCellId();\n              var targetCellId = edge.getTargetCellId();\n              graph.trigger(NsAddEdgeEvent.EVENT_NAME, {\n                targetPortId: targetPortId,\n                sourcePortId: sourcePortId,\n                source: sourceCellId,\n                target: targetCellId,\n                edge: edge\n              });\n            }\n          }\n        });\n        return edge;\n      },\n      validateEdge: function (args) {\n        var _a;\n\n        var edge = args.edge;\n        return !!((_a = edge === null || edge === void 0 ? void 0 : edge.target) === null || _a === void 0 ? void 0 : _a.port);\n      },\n      // 是否触发交互事件\n      validateMagnet: function (_a) {\n        var magnet = _a.magnet; // 所有锚点均可触发\n\n        return true;\n      },\n      // 显示可用的链接桩\n      validateConnection: function (_a) {\n        var sourceView = _a.sourceView,\n            targetView = _a.targetView,\n            sourceMagnet = _a.sourceMagnet,\n            targetMagnet = _a.targetMagnet; // 不允许连接到自己\n\n        if (sourceView === targetView) {\n          return false;\n        }\n\n        var node = targetView.cell; // 判断目标链接桩是否可连接\n\n        var portId = targetMagnet === null || targetMagnet === void 0 ? void 0 : targetMagnet.getAttribute('port');\n        var port = node.getPort(portId);\n        return !(port && port.connected);\n      }\n    },\n    highlighting: {\n      nodeAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAvailable: {\n        name: 'className',\n        args: {\n          className: 'available'\n        }\n      },\n      magnetAdsorbed: {\n        name: 'className',\n        args: {\n          className: 'adsorbed'\n        }\n      }\n    },\n    onPortRendered: function (args) {\n      var port = args.port;\n      var contentSelectors = args.contentSelectors;\n      var container = contentSelectors && contentSelectors.content;\n      var placement = port.group;\n      var clz = classnames('xflow-port', {\n        connected: port.connected\n      });\n\n      if (container) {\n        ReactDOM.render(React.createElement(ConfigProvider, {\n          prefixCls: ANT_PREFIX\n        }, React.createElement(Tooltip, {\n          title: port.tooltip,\n          placement: placement\n        }, React.createElement(\"span\", {\n          className: clz\n        }))), container);\n      }\n    }\n  }, canvasProps.config));\n  config.setEvents([{\n    eventName: 'node:click',\n    callback: function (e, cmds, ctx) {\n      var _a, _b;\n\n      var nodeData = (_a = e === null || e === void 0 ? void 0 : e.node) === null || _a === void 0 ? void 0 : _a.getData();\n      (_b = props.handleNodeClick) === null || _b === void 0 ? void 0 : _b.call(props, nodeData);\n    }\n  }, {\n    eventName: 'node:selected',\n    callback: function (e, cmds, ctx) {\n      var _a, _b;\n\n      var nodeData = (_a = e === null || e === void 0 ? void 0 : e.node) === null || _a === void 0 ? void 0 : _a.getData();\n      changePortsVisible(false);\n      (_b = props.handleNodeSelected) === null || _b === void 0 ? void 0 : _b.call(props, nodeData);\n    }\n  }, {\n    eventName: 'node:removed',\n    callback: function (e, cmds, ctx) {\n      var _a, _b;\n\n      var nodeData = (_a = e === null || e === void 0 ? void 0 : e.node) === null || _a === void 0 ? void 0 : _a.getData();\n      (_b = props.handleNodeRemoved) === null || _b === void 0 ? void 0 : _b.call(props, nodeData);\n    }\n  }, {\n    eventName: 'edge:dblclick',\n    callback: function (e, cmds, ctx) {\n      addTools(e, cmds, ctx);\n    }\n  }, {\n    eventName: 'edge:mouseleave',\n    callback: function (e, cmds, ctx) {\n      removeTools(e, cmds, ctx);\n    }\n  }, {\n    eventName: 'node:mouseenter',\n    callback: function (e) {\n      changePortsVisible(true, e);\n    }\n  }, {\n    eventName: 'node:mouseleave',\n    callback: function (e, cmds, ctx) {\n      changePortsVisible(false, e);\n    }\n  }, {\n    eventName: 'node:moved',\n    callback: function (e, cmds, ctx) {\n      movedNode(e, cmds, ctx);\n    }\n  }, {\n    eventName: 'node:resized',\n    callback: function (e, cmds, ctx) {\n      resizeNode(e, cmds, ctx);\n    }\n  }]);\n});","map":null,"metadata":{},"sourceType":"module"}