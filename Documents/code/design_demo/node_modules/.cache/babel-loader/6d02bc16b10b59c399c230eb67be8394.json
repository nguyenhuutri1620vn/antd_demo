{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { RxModel, NsModel } from './rx-model';\n/** 判断model是否Mount */\n\nconst isRefMounted = ref => {\n  return ref && ref.current;\n};\n/** 用于判断model是否Mount */\n\n\nexport const useIsMountedRef = () => {\n  /** 记录当前组件的加载状态 */\n  const ref = React.useRef(true);\n  React.useEffect(() => {\n    return () => {\n      ref.current = false;\n    };\n  }, []);\n  return ref;\n};\n/** 判断model是否Mount */\n\nexport const useModel = model => {\n  /** 记录当前组件的加载状态 */\n  const ref = useIsMountedRef();\n  const [state, setState] = React.useState(model.getValue());\n  React.useEffect(() => {\n    const disposeable = model.watch(val => {\n      if (isRefMounted(ref)) {\n        setState(val);\n      }\n    });\n    return () => {\n      disposeable.dispose();\n    };\n    /* eslint-disable-next-line  */\n  }, [setState]);\n  const value = state;\n  const canRender = NsModel.isValidValue(value);\n  const setValue = React.useCallback(val => model.setValue(val), [model]);\n  return [value, setValue, canRender];\n};\n/** 在组件内部新建一个model */\n\nexport const createComponentModel = initialState => {\n  /* eslint-disable-next-line  */\n  const model = React.useMemo(() => new RxModel(initialState), []);\n  /** model 和 state 绑定触发view刷新 */\n\n  /* eslint-disable-next-line  */\n\n  const [modelValue, setModelValue, canRender] = useModel(model);\n  /** unMount时dispose */\n\n  /* eslint-disable-next-line  */\n\n  React.useEffect(() => {\n    return () => {\n      model.dispose();\n    };\n  }, [model]);\n  return [modelValue, setModelValue, model, canRender];\n};\n/**\n * useModelAsync：\n * watch model的值，\n * 把model的值通过useState和组件状态关联起来\n */\n\nexport const useModelAsync = args => {\n  const {\n    getModel,\n    initialState\n  } = args;\n  /** 记录当前组件的加载状态 */\n\n  const isMountedRef = useIsMountedRef();\n  const modelRef = React.useRef();\n  /** 订阅 model */\n\n  const [state, setState] = React.useState(initialState);\n  React.useEffect(() => {\n    let d;\n    getModel().then(model => __awaiter(void 0, void 0, void 0, function* () {\n      modelRef.current = model;\n      const newState = yield model.getValidValue();\n\n      if (!isMountedRef.current) {\n        return;\n      }\n\n      setState(newState);\n      d = model.watch(val => {\n        if (isMountedRef.current) {\n          setState(val);\n        }\n      });\n    }));\n    return () => {\n      if (d && d.dispose) {\n        d.dispose();\n      }\n    };\n    /* eslint-disable-next-line  */\n  }, []);\n  return [state, setState, modelRef.current];\n};","map":null,"metadata":{},"sourceType":"module"}