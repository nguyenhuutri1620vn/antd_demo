{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { AbstractCanvas } from '@antv/g-base';\nimport { SHAPE_TO_TAGS } from './constant';\nimport { drawChildren } from './util/draw';\nimport { setTransform, setClip } from './util/svg';\nimport { sortDom, createSVGElement } from './util/dom';\nimport * as Shape from './shape';\nimport Group from './group';\nimport Defs from './defs';\n\nvar Canvas =\n/** @class */\nfunction (_super) {\n  __extends(Canvas, _super);\n\n  function Canvas(cfg) {\n    return _super.call(this, __assign(__assign({}, cfg), {\n      autoDraw: true,\n      // 设置渲染引擎为 canvas，只读属性\n      renderer: 'svg'\n    })) || this;\n  }\n\n  Canvas.prototype.getShapeBase = function () {\n    return Shape;\n  };\n\n  Canvas.prototype.getGroupBase = function () {\n    return Group;\n  }; // 覆盖 Container 中通过遍历的方式获取 shape 对象的逻辑，直接走 SVG 的 dom 拾取即可\n\n\n  Canvas.prototype.getShape = function (x, y, ev) {\n    var target = ev.target || ev.srcElement;\n\n    if (!SHAPE_TO_TAGS[target.tagName]) {\n      var parent_1 = target.parentNode;\n\n      while (parent_1 && !SHAPE_TO_TAGS[parent_1.tagName]) {\n        parent_1 = parent_1.parentNode;\n      }\n\n      target = parent_1;\n    }\n\n    return this.find(function (child) {\n      return child.get('el') === target;\n    });\n  }; // 复写基类的方法生成标签\n\n\n  Canvas.prototype.createDom = function () {\n    var element = createSVGElement('svg');\n    var context = new Defs(element);\n    element.setAttribute('width', \"\" + this.get('width'));\n    element.setAttribute('height', \"\" + this.get('height')); // 缓存 context 对象\n\n    this.set('context', context);\n    return element;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n\n\n  Canvas.prototype.onCanvasChange = function (changeType) {\n    var context = this.get('context');\n    var el = this.get('el');\n\n    if (changeType === 'sort') {\n      var children_1 = this.get('children');\n\n      if (children_1 && children_1.length) {\n        sortDom(this, function (a, b) {\n          return children_1.indexOf(a) - children_1.indexOf(b) ? 1 : 0;\n        });\n      }\n    } else if (changeType === 'clear') {\n      // el maybe null for canvas\n      if (el) {\n        // 清空 SVG 元素\n        el.innerHTML = '';\n        var defsEl = context.el; // 清空 defs 元素\n\n        defsEl.innerHTML = ''; // 将清空后的 defs 元素挂载到 el 下\n\n        el.appendChild(defsEl);\n      }\n    } else if (changeType === 'matrix') {\n      setTransform(this);\n    } else if (changeType === 'clip') {\n      setClip(this, context);\n    } else if (changeType === 'changeSize') {\n      el.setAttribute('width', \"\" + this.get('width'));\n      el.setAttribute('height', \"\" + this.get('height'));\n    }\n  }; // 复写基类的 draw 方法\n\n\n  Canvas.prototype.draw = function () {\n    var context = this.get('context');\n    var children = this.getChildren();\n    setClip(this, context);\n\n    if (children.length) {\n      drawChildren(context, children);\n    }\n  };\n\n  return Canvas;\n}(AbstractCanvas);\n\nexport default Canvas;","map":null,"metadata":{},"sourceType":"module"}