{"ast":null,"code":"export var Timing;\n\n(function (Timing) {\n  Timing.linear = t => t;\n\n  Timing.quad = t => t * t;\n\n  Timing.cubic = t => t * t * t;\n\n  Timing.inout = t => {\n    if (t <= 0) {\n      return 0;\n    }\n\n    if (t >= 1) {\n      return 1;\n    }\n\n    const t2 = t * t;\n    const t3 = t2 * t;\n    return 4 * (t < 0.5 ? t3 : 3 * (t - t2) + t3 - 0.75);\n  };\n\n  Timing.exponential = t => {\n    return Math.pow(2, 10 * (t - 1)); // eslint-disable-line\n  };\n\n  Timing.bounce = t => {\n    // eslint-disable-next-line\n    for (let a = 0, b = 1; 1; a += b, b /= 2) {\n      if (t >= (7 - 4 * a) / 11) {\n        const q = (11 - 6 * a - 11 * t) / 4;\n        return -q * q + b * b;\n      }\n    }\n  };\n})(Timing || (Timing = {}));\n\n(function (Timing) {\n  Timing.decorators = {\n    reverse(f) {\n      return t => 1 - f(1 - t);\n    },\n\n    reflect(f) {\n      return t => 0.5 * (t < 0.5 ? f(2 * t) : 2 - f(2 - 2 * t));\n    },\n\n    clamp(f) {\n      let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      let x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      return t => {\n        const r = f(t);\n        return r < n ? n : r > x ? x : r;\n      };\n    },\n\n    back() {\n      let s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;\n      return t => t * t * ((s + 1) * t - s);\n    },\n\n    elastic() {\n      let x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.5;\n      return t => Math.pow(2, 10 * (t - 1)) * Math.cos(20 * Math.PI * x / 3 * t); // eslint-disable-line\n    }\n\n  };\n})(Timing || (Timing = {}));\n\n(function (Timing) {\n  // Slight acceleration from zero to full speed\n  function easeInSine(t) {\n    return -1 * Math.cos(t * (Math.PI / 2)) + 1;\n  }\n\n  Timing.easeInSine = easeInSine; // Slight deceleration at the end\n\n  function easeOutSine(t) {\n    return Math.sin(t * (Math.PI / 2));\n  }\n\n  Timing.easeOutSine = easeOutSine; // Slight acceleration at beginning and slight deceleration at end\n\n  function easeInOutSine(t) {\n    return -0.5 * (Math.cos(Math.PI * t) - 1);\n  }\n\n  Timing.easeInOutSine = easeInOutSine; // Accelerating from zero velocity\n\n  function easeInQuad(t) {\n    return t * t;\n  }\n\n  Timing.easeInQuad = easeInQuad; // Decelerating to zero velocity\n\n  function easeOutQuad(t) {\n    return t * (2 - t);\n  }\n\n  Timing.easeOutQuad = easeOutQuad; // Acceleration until halfway, then deceleration\n\n  function easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  }\n\n  Timing.easeInOutQuad = easeInOutQuad; // Accelerating from zero velocity\n\n  function easeInCubic(t) {\n    return t * t * t;\n  }\n\n  Timing.easeInCubic = easeInCubic; // Decelerating to zero velocity\n\n  function easeOutCubic(t) {\n    const t1 = t - 1;\n    return t1 * t1 * t1 + 1;\n  }\n\n  Timing.easeOutCubic = easeOutCubic; // Acceleration until halfway, then deceleration\n\n  function easeInOutCubic(t) {\n    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n  }\n\n  Timing.easeInOutCubic = easeInOutCubic; // Accelerating from zero velocity\n\n  function easeInQuart(t) {\n    return t * t * t * t;\n  }\n\n  Timing.easeInQuart = easeInQuart; // Decelerating to zero velocity\n\n  function easeOutQuart(t) {\n    const t1 = t - 1;\n    return 1 - t1 * t1 * t1 * t1;\n  }\n\n  Timing.easeOutQuart = easeOutQuart; // Acceleration until halfway, then deceleration\n\n  function easeInOutQuart(t) {\n    const t1 = t - 1;\n    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * t1 * t1 * t1 * t1;\n  }\n\n  Timing.easeInOutQuart = easeInOutQuart; // Accelerating from zero velocity\n\n  function easeInQuint(t) {\n    return t * t * t * t * t;\n  }\n\n  Timing.easeInQuint = easeInQuint; // Decelerating to zero velocity\n\n  function easeOutQuint(t) {\n    const t1 = t - 1;\n    return 1 + t1 * t1 * t1 * t1 * t1;\n  }\n\n  Timing.easeOutQuint = easeOutQuint; // Acceleration until halfway, then deceleration\n\n  function easeInOutQuint(t) {\n    const t1 = t - 1;\n    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * t1 * t1 * t1 * t1 * t1;\n  }\n\n  Timing.easeInOutQuint = easeInOutQuint; // Accelerate exponentially until finish\n\n  function easeInExpo(t) {\n    if (t === 0) {\n      return 0;\n    }\n\n    return Math.pow(2, 10 * (t - 1)); // eslint-disable-line\n  }\n\n  Timing.easeInExpo = easeInExpo; // Initial exponential acceleration slowing to stop\n\n  function easeOutExpo(t) {\n    if (t === 1) {\n      return 1;\n    }\n\n    return -Math.pow(2, -10 * t) + 1; // eslint-disable-line\n  }\n\n  Timing.easeOutExpo = easeOutExpo; // Exponential acceleration and deceleration\n\n  function easeInOutExpo(t) {\n    if (t === 0 || t === 1) {\n      return t;\n    }\n\n    const scaledTime = t * 2;\n    const scaledTime1 = scaledTime - 1;\n\n    if (scaledTime < 1) {\n      return 0.5 * Math.pow(2, 10 * scaledTime1); // eslint-disable-line\n    }\n\n    return 0.5 * (-Math.pow(2, -10 * scaledTime1) + 2); // eslint-disable-line\n  }\n\n  Timing.easeInOutExpo = easeInOutExpo; // Increasing velocity until stop\n\n  function easeInCirc(t) {\n    const scaledTime = t / 1;\n    return -1 * (Math.sqrt(1 - scaledTime * t) - 1);\n  }\n\n  Timing.easeInCirc = easeInCirc; // Start fast, decreasing velocity until stop\n\n  function easeOutCirc(t) {\n    const t1 = t - 1;\n    return Math.sqrt(1 - t1 * t1);\n  }\n\n  Timing.easeOutCirc = easeOutCirc; // Fast increase in velocity, fast decrease in velocity\n\n  function easeInOutCirc(t) {\n    const scaledTime = t * 2;\n    const scaledTime1 = scaledTime - 2;\n\n    if (scaledTime < 1) {\n      return -0.5 * (Math.sqrt(1 - scaledTime * scaledTime) - 1);\n    }\n\n    return 0.5 * (Math.sqrt(1 - scaledTime1 * scaledTime1) + 1);\n  }\n\n  Timing.easeInOutCirc = easeInOutCirc; // Slow movement backwards then fast snap to finish\n\n  function easeInBack(t) {\n    let magnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.70158;\n    return t * t * ((magnitude + 1) * t - magnitude);\n  }\n\n  Timing.easeInBack = easeInBack; // Fast snap to backwards point then slow resolve to finish\n\n  function easeOutBack(t) {\n    let magnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.70158;\n    const scaledTime = t / 1 - 1;\n    return scaledTime * scaledTime * ((magnitude + 1) * scaledTime + magnitude) + 1;\n  }\n\n  Timing.easeOutBack = easeOutBack; // Slow movement backwards, fast snap to past finish, slow resolve to finish\n\n  function easeInOutBack(t) {\n    let magnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.70158;\n    const scaledTime = t * 2;\n    const scaledTime2 = scaledTime - 2;\n    const s = magnitude * 1.525;\n\n    if (scaledTime < 1) {\n      return 0.5 * scaledTime * scaledTime * ((s + 1) * scaledTime - s);\n    }\n\n    return 0.5 * (scaledTime2 * scaledTime2 * ((s + 1) * scaledTime2 + s) + 2);\n  }\n\n  Timing.easeInOutBack = easeInOutBack; // Bounces slowly then quickly to finish\n\n  function easeInElastic(t) {\n    let magnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.7;\n\n    if (t === 0 || t === 1) {\n      return t;\n    }\n\n    const scaledTime = t / 1;\n    const scaledTime1 = scaledTime - 1;\n    const p = 1 - magnitude;\n    const s = p / (2 * Math.PI) * Math.asin(1);\n    return -(Math.pow(2, 10 * scaledTime1) * // eslint-disable-line\n    Math.sin((scaledTime1 - s) * (2 * Math.PI) / p));\n  }\n\n  Timing.easeInElastic = easeInElastic; // Fast acceleration, bounces to zero\n\n  function easeOutElastic(t) {\n    let magnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.7;\n    const p = 1 - magnitude;\n    const scaledTime = t * 2;\n\n    if (t === 0 || t === 1) {\n      return t;\n    }\n\n    const s = p / (2 * Math.PI) * Math.asin(1);\n    return Math.pow(2, -10 * scaledTime) * // eslint-disable-line\n    Math.sin((scaledTime - s) * (2 * Math.PI) / p) + 1;\n  }\n\n  Timing.easeOutElastic = easeOutElastic; // Slow start and end, two bounces sandwich a fast motion\n\n  function easeInOutElastic(t) {\n    let magnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.65;\n    const p = 1 - magnitude;\n\n    if (t === 0 || t === 1) {\n      return t;\n    }\n\n    const scaledTime = t * 2;\n    const scaledTime1 = scaledTime - 1;\n    const s = p / (2 * Math.PI) * Math.asin(1);\n\n    if (scaledTime < 1) {\n      return -0.5 * (Math.pow(2, 10 * scaledTime1) * // eslint-disable-line\n      Math.sin((scaledTime1 - s) * (2 * Math.PI) / p));\n    }\n\n    return Math.pow(2, -10 * scaledTime1) * // eslint-disable-line\n    Math.sin((scaledTime1 - s) * (2 * Math.PI) / p) * 0.5 + 1;\n  }\n\n  Timing.easeInOutElastic = easeInOutElastic; // Bounce to completion\n\n  function easeOutBounce(t) {\n    const scaledTime = t / 1;\n\n    if (scaledTime < 1 / 2.75) {\n      return 7.5625 * scaledTime * scaledTime;\n    }\n\n    if (scaledTime < 2 / 2.75) {\n      const scaledTime2 = scaledTime - 1.5 / 2.75;\n      return 7.5625 * scaledTime2 * scaledTime2 + 0.75;\n    }\n\n    if (scaledTime < 2.5 / 2.75) {\n      const scaledTime2 = scaledTime - 2.25 / 2.75;\n      return 7.5625 * scaledTime2 * scaledTime2 + 0.9375;\n    }\n\n    {\n      const scaledTime2 = scaledTime - 2.625 / 2.75;\n      return 7.5625 * scaledTime2 * scaledTime2 + 0.984375;\n    }\n  }\n\n  Timing.easeOutBounce = easeOutBounce; // Bounce increasing in velocity until completion\n\n  function easeInBounce(t) {\n    return 1 - easeOutBounce(1 - t);\n  }\n\n  Timing.easeInBounce = easeInBounce; // Bounce in and bounce out\n\n  function easeInOutBounce(t) {\n    if (t < 0.5) {\n      return easeInBounce(t * 2) * 0.5;\n    }\n\n    return easeOutBounce(t * 2 - 1) * 0.5 + 0.5;\n  }\n\n  Timing.easeInOutBounce = easeInOutBounce;\n})(Timing || (Timing = {}));","map":null,"metadata":{},"sourceType":"module"}