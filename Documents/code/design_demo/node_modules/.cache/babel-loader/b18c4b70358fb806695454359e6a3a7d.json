{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { aProjectFlat, Satistics } from '@antv/l7-utils';\nvar R_EARTH = 6378000;\nexport function aggregatorToGrid(data, option) {\n  var dataArray = data.dataArray;\n  var _option$size = option.size,\n      size = _option$size === void 0 ? 10 : _option$size;\n  var pixlSize = size / (2 * Math.PI * R_EARTH) * (256 << 20) / 2;\n\n  var _pointsGridHash2 = _pointsGridHash(dataArray, size),\n      gridHash = _pointsGridHash2.gridHash,\n      gridOffset = _pointsGridHash2.gridOffset;\n\n  var layerData = _getGridLayerDataFromGridHash(gridHash, gridOffset, option);\n\n  return {\n    yOffset: pixlSize,\n    xOffset: pixlSize,\n    radius: pixlSize,\n    type: 'grid',\n    dataArray: layerData\n  };\n}\n\nfunction _pointsGridHash(dataArray, size) {\n  var latMin = Infinity;\n  var latMax = -Infinity;\n  var pLat;\n\n  var _iterator = _createForOfIteratorHelper(dataArray),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var point = _step.value;\n      pLat = point.coordinates[1];\n\n      if (Number.isFinite(pLat)) {\n        latMin = pLat < latMin ? pLat : latMin;\n        latMax = pLat > latMax ? pLat : latMax;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var centerLat = (latMin + latMax) / 2;\n\n  var gridOffset = _calculateGridLatLonOffset(size, centerLat);\n\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return {\n      gridHash: {},\n      gridOffset: gridOffset\n    };\n  }\n\n  var gridHash = {};\n\n  var _iterator2 = _createForOfIteratorHelper(dataArray),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _point = _step2.value;\n      var lat = _point.coordinates[1];\n      var lng = _point.coordinates[0];\n\n      if (Number.isFinite(lat) && Number.isFinite(lng)) {\n        var latIdx = Math.floor((lat + 90) / gridOffset.yOffset);\n        var lonIdx = Math.floor((lng + 180) / gridOffset.xOffset);\n\n        var _key = \"\".concat(latIdx, \"-\").concat(lonIdx);\n\n        gridHash[_key] = gridHash[_key] || {\n          count: 0,\n          points: []\n        };\n        gridHash[_key].count += 1;\n\n        gridHash[_key].points.push(_point);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return {\n    gridHash: gridHash,\n    gridOffset: gridOffset\n  };\n}\n\nfunction _calculateGridLatLonOffset(cellSize, latitude) {\n  var yOffset = _calculateLatOffset(cellSize);\n\n  var xOffset = _calculateLonOffset(latitude, cellSize);\n\n  return {\n    yOffset: yOffset,\n    xOffset: xOffset\n  };\n}\n\nfunction _calculateLatOffset(dy) {\n  return dy / R_EARTH * (180 / Math.PI);\n}\n\nfunction _calculateLonOffset(lat, dx) {\n  return dx / R_EARTH * (180 / Math.PI) / Math.cos(lat * Math.PI / 180);\n}\n\nfunction _getGridLayerDataFromGridHash(gridHash, gridOffset, option) {\n  return Object.keys(gridHash).reduce(function (accu, key, i) {\n    var idxs = key.split('-');\n    var latIdx = parseInt(idxs[0], 10);\n    var lonIdx = parseInt(idxs[1], 10);\n    var item = {};\n\n    if (option.field && option.method) {\n      var columns = Satistics.getColumn(gridHash[key].points, option.field);\n      item[option.method] = Satistics.statMap[option.method](columns);\n    }\n\n    Object.assign(item, {\n      _id: i,\n      coordinates: aProjectFlat([-180 + gridOffset.xOffset * (lonIdx + 0.5), -90 + gridOffset.yOffset * (latIdx + 0.5)]),\n      rawData: gridHash[key].points,\n      count: gridHash[key].count\n    });\n    accu.push(item);\n    return accu;\n  }, []);\n}","map":null,"metadata":{},"sourceType":"module"}