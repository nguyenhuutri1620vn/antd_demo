{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGroupCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nimport { XFlowNodeCommands } from '../constant';\nexport var NsDelGroup;\n\n(function (NsDelGroup) {\n  /** Command: 用于注册named factory */\n  NsDelGroup.command = XFlowGroupCommands.DEL_GROUP;\n  /** hookName */\n\n  NsDelGroup.hookKey = 'delGroup';\n})(NsDelGroup || (NsDelGroup = {}));\n\nlet DelGroupCommand =\n/** 创建节点命令 */\nclass DelGroupCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n      const {\n        args,\n        hooks: runtimeHook\n      } = ctx.getArgs();\n      const hooks = ctx.getHooks();\n      const result = yield hooks.delGroup.call(args, handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const graph = yield ctx.getX6Graph();\n        const {\n          nodeConfig,\n          commandService,\n          deleteService: deleteGroupService\n        } = handlerArgs;\n        const {\n          id\n        } = nodeConfig;\n        const node = graph.getCellById(id);\n\n        if (deleteGroupService) {\n          const canDel = yield deleteGroupService(handlerArgs);\n          if (!canDel) return {\n            err: 'service rejected'\n          };\n        }\n\n        if (!node) {\n          return {\n            err: 'target node is not exist'\n          };\n        } // 不是Group的节点不能解散\n\n\n        if (node.getProp('isGroup') !== true) {\n          return {\n            err: 'target node is not group'\n          };\n        }\n\n        const {\n          isCollapsed\n        } = node.getData();\n\n        if (isCollapsed) {\n          yield commandService.executeCommand(XFlowGroupCommands.COLLAPSE_GROUP.id, {\n            nodeId: node.id,\n            isCollapsed: false,\n            collapsedSize: {\n              width: 0,\n              height: 0\n            }\n          });\n        }\n\n        const childrens = node.getChildren();\n\n        if (childrens) {\n          childrens.forEach(child => {\n            node.unembed(child);\n            child.prop('group', '');\n            child.setData(Object.assign(Object.assign({}, child.getData()), {\n              group: ''\n            }));\n          });\n        }\n\n        yield commandService.executeCommand(XFlowNodeCommands.DEL_NODE.id, {\n          nodeConfig\n        });\n        /** add undo: delete node */\n\n        ctx.addUndo(Disposable.create(() => __awaiter(this, void 0, void 0, function* () {\n          commandService.executeCommand(XFlowGroupCommands.ADD_GROUP.id, {\n            nodeConfig\n          });\n        })));\n        return {\n          err: null\n        };\n      }), runtimeHook);\n      ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      const ctx = this.contextProvider();\n\n      if (this.isUndoable()) {\n        ctx.undo();\n      }\n\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable()) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  isUndoable() {\n    const ctx = this.contextProvider();\n    return ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], DelGroupCommand.prototype, \"contextProvider\", void 0);\n\nDelGroupCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsDelGroup.command.id\n  }\n})\n/** 创建节点命令 */\n], DelGroupCommand);\nexport { DelGroupCommand };","map":null,"metadata":{},"sourceType":"module"}