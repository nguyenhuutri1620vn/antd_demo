{"ast":null,"code":"import { modifyCSS, createDom } from '@antv/dom-util';\nexport default {\n  onMouseEnter: function onMouseEnter(e) {\n    var item = e.item;\n    this.currentTarget = item;\n    this.showTooltip(e);\n    this.graph.emit('tooltipchange', {\n      item: e.item,\n      action: 'show'\n    });\n  },\n  onMouseMove: function onMouseMove(e) {\n    if (!this.shouldUpdate(e)) {\n      this.hideTooltip();\n      return;\n    }\n\n    if (!this.currentTarget || e.item !== this.currentTarget) {\n      return;\n    }\n\n    this.updatePosition(e);\n  },\n  onMouseLeave: function onMouseLeave(e) {\n    if (!this.shouldEnd(e)) {\n      return;\n    }\n\n    this.hideTooltip();\n    this.graph.emit('tooltipchange', {\n      item: this.currentTarget,\n      action: 'hide'\n    });\n    this.currentTarget = null;\n  },\n  showTooltip: function showTooltip(e) {\n    var container = this.container;\n\n    if (!e.item || e.item.destroyed) {\n      return;\n    }\n\n    if (!container) {\n      container = this.createTooltip(this.graph.get('canvas'));\n      this.container = container;\n    }\n\n    var text = this.formatText(e.item.get('model'), e);\n    container.innerHTML = text;\n    modifyCSS(this.container, {\n      visibility: 'visible'\n    });\n    this.updatePosition(e);\n  },\n  hideTooltip: function hideTooltip() {\n    modifyCSS(this.container, {\n      visibility: 'hidden'\n    });\n  },\n  updatePosition: function updatePosition(e) {\n    var shouldBegin = this.get('shouldBegin');\n\n    var _a = this,\n        width = _a.width,\n        height = _a.height,\n        container = _a.container,\n        graph = _a.graph;\n\n    if (!shouldBegin(e)) {\n      modifyCSS(container, {\n        visibility: 'hidden'\n      });\n      return;\n    }\n\n    var point = graph.getPointByClient(e.clientX, e.clientY);\n\n    var _b = graph.getCanvasByPoint(point.x, point.y),\n        x = _b.x,\n        y = _b.y;\n\n    var bbox = container.getBoundingClientRect();\n\n    if (x > width / 2) {\n      x -= bbox.width;\n    } else {\n      x += this.offset;\n    }\n\n    if (y > height / 2) {\n      y -= bbox.height;\n    } else {\n      y += this.offset;\n    }\n\n    var left = \"\".concat(x, \"px\");\n    var top = \"\".concat(y, \"px\");\n    modifyCSS(this.container, {\n      left: left,\n      top: top,\n      visibility: 'visible'\n    });\n  },\n  createTooltip: function createTooltip(canvas) {\n    var el = canvas.get('el');\n    el.style.position = 'relative';\n    var container = createDom(\"<div class=\\\"g6-tooltip g6-\".concat(this.item, \"-tooltip\\\"></div>\"));\n    el.parentNode.appendChild(container);\n    modifyCSS(container, {\n      position: 'absolute',\n      visibility: 'visible'\n    });\n    this.width = canvas.get('width');\n    this.height = canvas.get('height');\n    this.container = container;\n    this.graph.get('tooltips').push(container);\n    return container;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}