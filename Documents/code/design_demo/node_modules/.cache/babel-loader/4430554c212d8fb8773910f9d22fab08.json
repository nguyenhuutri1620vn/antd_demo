{"ast":null,"code":"// eslint-disable-next-line\nexport var ModifierKey;\n\n(function (ModifierKey) {\n  function parse(modifiers) {\n    const or = [];\n    const and = [];\n\n    if (Array.isArray(modifiers)) {\n      or.push(...modifiers);\n    } else {\n      modifiers.split('|').forEach(item => {\n        if (item.indexOf('&') === -1) {\n          or.push(item);\n        } else {\n          and.push(...item.split('&'));\n        }\n      });\n    }\n\n    return {\n      or,\n      and\n    };\n  }\n\n  ModifierKey.parse = parse;\n\n  function equals(modifiers1, modifiers2) {\n    if (modifiers1 != null && modifiers2 != null) {\n      const m1 = parse(modifiers1);\n      const m2 = parse(modifiers2);\n      const or1 = m1.or.sort();\n      const or2 = m2.or.sort();\n      const and1 = m1.and.sort();\n      const and2 = m2.and.sort();\n\n      const equal = (a1, a2) => {\n        return a1.length === a2.length && (a1.length === 0 || a1.every((a, i) => a === a2[i]));\n      };\n\n      return equal(or1, or2) && equal(and1, and2);\n    }\n\n    if (modifiers1 == null && modifiers2 == null) {\n      return true;\n    }\n\n    return false;\n  }\n\n  ModifierKey.equals = equals;\n\n  function isMatch(e, modifiers, strict) {\n    if (modifiers == null || Array.isArray(modifiers) && modifiers.length === 0) {\n      return strict ? e.altKey !== true && e.ctrlKey !== true && e.metaKey !== true && e.shiftKey !== true : true;\n    }\n\n    const {\n      or,\n      and\n    } = parse(modifiers);\n\n    const match = key => {\n      const name = `${key.toLowerCase()}Key`;\n      return e[name] === true;\n    };\n\n    return or.some(key => match(key)) && and.every(key => match(key));\n  }\n\n  ModifierKey.isMatch = isMatch;\n})(ModifierKey || (ModifierKey = {}));","map":null,"metadata":{},"sourceType":"module"}