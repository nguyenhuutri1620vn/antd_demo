{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Util } from '../global';\nimport { ObjectExt } from '../util';\nimport { Edge as StandardEdge } from '../shape/standard/edge';\nexport var Options;\n\n(function (Options) {\n  function parseOptionGroup(graph, arg, options) {\n    const result = {};\n    Object.keys(options || {}).forEach(key => {\n      const val = options[key];\n      result[key] = typeof val === 'function' ? val.call(graph, arg) : val;\n    });\n    return result;\n  }\n\n  Options.parseOptionGroup = parseOptionGroup;\n})(Options || (Options = {}));\n\n(function (Options) {\n  function get(options) {\n    const {\n      grid,\n      panning,\n      selecting,\n      embedding,\n      snapline,\n      resizing,\n      rotating,\n      knob,\n      clipboard,\n      history,\n      scroller,\n      minimap,\n      keyboard,\n      mousewheel\n    } = options,\n          others = __rest(options // size\n    // ----\n    , [\"grid\", \"panning\", \"selecting\", \"embedding\", \"snapline\", \"resizing\", \"rotating\", \"knob\", \"clipboard\", \"history\", \"scroller\", \"minimap\", \"keyboard\", \"mousewheel\"]); // size\n    // ----\n\n\n    const container = options.container;\n\n    if (container != null) {\n      if (others.width == null) {\n        others.width = container.clientWidth;\n      }\n\n      if (others.height == null) {\n        others.height = container.clientHeight;\n      }\n    } else {\n      throw new Error(`Ensure the container of the graph is specified and valid`);\n    }\n\n    const result = ObjectExt.merge({}, Options.defaults, others); // grid\n    // ----\n\n    const defaultGrid = {\n      size: 10,\n      visible: false\n    };\n\n    if (typeof grid === 'number') {\n      result.grid = {\n        size: grid,\n        visible: false\n      };\n    } else if (typeof grid === 'boolean') {\n      result.grid = Object.assign(Object.assign({}, defaultGrid), {\n        visible: grid\n      });\n    } else {\n      result.grid = Object.assign(Object.assign({}, defaultGrid), grid);\n    } // booleas\n    // -------\n\n\n    const booleas = ['panning', 'selecting', 'embedding', 'snapline', 'resizing', 'rotating', 'knob', 'clipboard', 'history', 'scroller', 'minimap', 'keyboard', 'mousewheel'];\n    booleas.forEach(key => {\n      const val = options[key];\n\n      if (typeof val === 'boolean') {\n        result[key].enabled = val;\n      } else {\n        result[key] = Object.assign(Object.assign({}, result[key]), val);\n      }\n    }); // background\n    // ----------\n\n    if (result.background && result.scroller.enabled && result.scroller.background == null) {\n      result.scroller.background = result.background;\n      delete result.background;\n    }\n\n    return result;\n  }\n\n  Options.get = get;\n})(Options || (Options = {}));\n\n(function (Options) {\n  Options.defaults = {\n    x: 0,\n    y: 0,\n    grid: {\n      size: 10,\n      visible: false\n    },\n    scaling: {\n      min: 0.01,\n      max: 16\n    },\n    background: false,\n    highlighting: {\n      default: {\n        name: 'stroke',\n        args: {\n          padding: 3\n        }\n      },\n      nodeAvailable: {\n        name: 'className',\n        args: {\n          className: Util.prefix('available-node')\n        }\n      },\n      magnetAvailable: {\n        name: 'className',\n        args: {\n          className: Util.prefix('available-magnet')\n        }\n      }\n    },\n    connecting: {\n      snap: false,\n      multi: true,\n      // TODO: Unannotation the next line when the `multi` option was removed in the next major version.\n      // allowMulti: true,\n      dangling: true,\n      // TODO: Unannotation the next line when the `dangling` option was removed in the next major version.\n      // allowBlank: true,\n      allowLoop: true,\n      allowNode: true,\n      allowEdge: false,\n      allowPort: true,\n      highlight: false,\n      anchor: 'center',\n      edgeAnchor: 'ratio',\n      connectionPoint: 'boundary',\n      strategy: null,\n      router: 'normal',\n      connector: 'normal',\n\n      validateConnection(_ref) {\n        let {\n          type,\n          sourceView,\n          targetView\n        } = _ref;\n        const view = type === 'target' ? targetView : sourceView;\n        return view != null;\n      },\n\n      createEdge() {\n        return new StandardEdge();\n      }\n\n    },\n    transforming: {\n      clearAll: true,\n      clearOnBlankMouseDown: true\n    },\n    resizing: {\n      enabled: false,\n      minWidth: 0,\n      minHeight: 0,\n      maxWidth: Number.MAX_SAFE_INTEGER,\n      maxHeight: Number.MAX_SAFE_INTEGER,\n      orthogonal: true,\n      restricted: false,\n      autoScroll: true,\n      preserveAspectRatio: false,\n      allowReverse: true\n    },\n    rotating: {\n      enabled: false,\n      grid: 15\n    },\n    translating: {\n      restrict: false\n    },\n    knob: {\n      enabled: false,\n      clearAll: true,\n      clearOnBlankMouseDown: true\n    },\n    embedding: {\n      enabled: false,\n      findParent: 'bbox',\n      frontOnly: true,\n      validate: () => true\n    },\n    selecting: {\n      enabled: false,\n      rubberband: false,\n      rubberNode: true,\n      rubberEdge: false,\n      pointerEvents: 'auto',\n      multiple: true,\n      movable: true,\n      strict: false,\n      useCellGeometry: false,\n      selectCellOnMoved: false,\n      selectNodeOnMoved: false,\n      selectEdgeOnMoved: false,\n      content: null,\n      handles: null\n    },\n    panning: {\n      enabled: false,\n      eventTypes: ['leftMouseDown']\n    },\n    snapline: {\n      enabled: false\n    },\n    clipboard: {\n      enabled: false\n    },\n    history: {\n      enabled: false\n    },\n    scroller: {\n      enabled: false\n    },\n    keyboard: {\n      enabled: false\n    },\n    mousewheel: {\n      enabled: false,\n      factor: 1.2,\n      zoomAtMousePosition: true\n    },\n    async: false,\n    frozen: false,\n    sorting: 'exact',\n    moveThreshold: 0,\n    clickThreshold: 0,\n    magnetThreshold: 0,\n    preventDefaultDblClick: true,\n    preventDefaultMouseDown: false,\n    preventDefaultContextMenu: true,\n    preventDefaultBlankAction: true,\n    interacting: {\n      edgeLabelMovable: false\n    },\n    guard: () => false\n  };\n})(Options || (Options = {}));","map":null,"metadata":{},"sourceType":"module"}