{"ast":null,"code":"import React from 'react';\nimport clamp from 'clamp';\nimport classNames from 'classnames';\nimport { debounce } from '../util';\nimport { WheelHandler } from '../util/dom/WheelHandler';\nimport { TouchHandler } from '../util/dom/TouchHandler';\nimport { MouseMoveTracker } from '../util/dom/MouseMoveTracker';\nimport { Scrollbar } from '../scrollbar';\nexport class ScrollBox extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this.onScroll = (deltaX, deltaY) => {\n      if (!this.scrolling) {\n        this.triggerScrollStart();\n      }\n\n      if (Math.abs(deltaY) > Math.abs(deltaX) && this.state.hasVerticalBar) {\n        this.scrollVertical(deltaY, true);\n      } else if (deltaX && this.state.hasHorizontalBar) {\n        this.scrollHorizontal(deltaX, true);\n      }\n\n      this.triggerScrollStop();\n    };\n\n    this.onVerticalScroll = scrollY => {\n      if (scrollY === this.state.scrollTop) {\n        return;\n      }\n\n      if (!this.scrolling) {\n        this.triggerScrollStart();\n      }\n\n      this.scrollVertical(scrollY, false);\n      this.triggerScrollStop();\n    };\n\n    this.onHorizontalScroll = scrollX => {\n      if (scrollX === this.state.scrollLeft) {\n        return;\n      }\n\n      if (!this.scrolling) {\n        this.triggerScrollStart();\n      }\n\n      this.scrollHorizontal(scrollX, false);\n      this.triggerScrollStop();\n    };\n\n    this.shouldHandleWheelX = delta => {\n      if (!this.state.hasHorizontalBar || delta === 0) {\n        return false;\n      }\n\n      delta = Math.round(delta); // eslint-disable-line\n\n      if (delta === 0) {\n        return false;\n      }\n\n      return delta < 0 && this.state.scrollLeft > 0 || delta >= 0 && this.state.scrollLeft < this.state.maxScrollLeft;\n    };\n\n    this.shouldHandleWheelY = delta => {\n      if (!this.state.hasVerticalBar || delta === 0) {\n        return false;\n      }\n\n      delta = Math.round(delta); // eslint-disable-line\n\n      if (delta === 0) {\n        return false;\n      }\n\n      return delta < 0 && this.state.scrollTop > 0 || delta >= 0 && this.state.scrollTop < this.state.maxScrollTop;\n    };\n\n    this.shouldHandleTouchX = delta => this.props.touchable ? this.shouldHandleWheelX(delta) : false;\n\n    this.shouldHandleTouchY = delta => this.props.touchable ? this.shouldHandleWheelY(delta) : false;\n\n    this.onMouseDown = e => {\n      if (this.mouseMoveTracker != null) {\n        this.mouseMoveTracker.capture(e);\n      }\n    };\n\n    this.onMouseMove = (deltaX, deltaY) => {\n      if (!this.scrolling) {\n        this.triggerScrollStart();\n      }\n\n      this.scrollVertical(deltaY, true);\n      this.scrollHorizontal(deltaX, true);\n    };\n\n    this.onMouseMoveEnd = () => {\n      if (this.mouseMoveTracker != null) {\n        this.mouseMoveTracker.release();\n      }\n\n      this.triggerScrollStop();\n    };\n\n    this.refContainer = container => {\n      this.containerElem = container;\n    };\n\n    this.refContent = content => {\n      this.contentElem = content;\n    };\n\n    this.onWheel = e => {\n      if (this.wheelHandler != null) {\n        this.wheelHandler.onWheel(e);\n      }\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    this.triggerScrollStop = debounce(this.triggerScrollStopSync, 200, this);\n    this.wheelHandler = new WheelHandler({\n      onWheel: this.onScroll,\n      shouldHandleScrollX: this.shouldHandleWheelX,\n      shouldHandleScrollY: this.shouldHandleWheelY,\n      stopPropagation: this.props.stopPropagation\n    });\n\n    if (this.props.touchable) {\n      this.touchHandler = new TouchHandler({\n        onTouchScroll: this.onScroll,\n        shouldHandleScrollX: this.shouldHandleTouchX,\n        shouldHandleScrollY: this.shouldHandleTouchY,\n        stopPropagation: this.props.stopPropagation\n      });\n    }\n\n    if (this.props.dragable) {\n      this.mouseMoveTracker = new MouseMoveTracker({\n        elem: document.documentElement,\n        onMouseMove: this.onMouseMove,\n        onMouseMoveEnd: this.onMouseMoveEnd\n      });\n    }\n\n    this.setState(this.calculateState());\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.setState(this.calculateState());\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState(this.calculateState(nextProps));\n  }\n\n  componentWillUnmount() {\n    this.wheelHandler = null;\n\n    if (this.props.touchable) {\n      this.touchHandler = null;\n    }\n\n    if (this.props.dragable && this.mouseMoveTracker != null) {\n      this.mouseMoveTracker.release();\n      this.mouseMoveTracker = null;\n    }\n\n    const triggerScrollStop = this.triggerScrollStop;\n    triggerScrollStop.reset();\n    this.triggerScrollStopSync();\n  }\n\n  calculateState() {\n    let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n    const containerWidth = props.containerWidth !== undefined && props.containerWidth !== this.props.containerWidth ? props.containerWidth : this.props.containerWidth !== undefined ? this.props.containerWidth : this.containerElem && this.containerElem.clientWidth || 0;\n    const containerHeight = props.containerHeight !== undefined && props.containerHeight !== this.props.containerHeight ? props.containerHeight : this.props.containerHeight !== undefined ? this.props.containerHeight : this.containerElem && this.containerElem.clientHeight || 0;\n    const contentWidth = props.contentWidth !== undefined && props.contentWidth !== this.props.contentWidth ? props.contentWidth : this.props.contentWidth !== undefined ? this.props.contentWidth : this.contentElem && this.contentElem.scrollWidth || 0;\n    const contentHeight = props.contentHeight !== undefined && props.contentHeight !== this.props.contentHeight ? props.contentHeight : this.props.contentHeight !== undefined ? this.props.contentHeight : this.contentElem && this.contentElem.scrollHeight || 0;\n    const hasVerticalBar = contentHeight > containerHeight;\n    const hasHorizontalBar = contentWidth > containerWidth;\n    let scrollTop = 0;\n    let scrollLeft = 0;\n    let maxScrollTop = 0;\n    let maxScrollLeft = 0;\n    let verticalBarHeight = containerHeight;\n    let horizontalBarWidth = containerWidth;\n\n    if (hasVerticalBar) {\n      if (hasHorizontalBar) {\n        verticalBarHeight -= props.scrollbarSize;\n      }\n\n      maxScrollTop = contentHeight - verticalBarHeight;\n\n      if (props.scrollTop !== this.props.scrollTop) {\n        scrollTop = props.scrollTop;\n      } else {\n        scrollTop = (this.state ? this.state.scrollTop : props.scrollTop) || 0;\n      }\n    }\n\n    if (hasHorizontalBar) {\n      if (hasVerticalBar) {\n        horizontalBarWidth -= props.scrollbarSize;\n      }\n\n      maxScrollLeft = contentWidth - horizontalBarWidth;\n\n      if (props.scrollLeft !== this.props.scrollLeft) {\n        scrollLeft = props.scrollLeft;\n      } else {\n        scrollLeft = (this.state ? this.state.scrollLeft : props.scrollLeft) || 0;\n      }\n    }\n\n    const nextState = {\n      containerWidth,\n      containerHeight,\n      contentWidth,\n      contentHeight,\n      verticalBarHeight,\n      horizontalBarWidth,\n      hasVerticalBar,\n      hasHorizontalBar,\n      maxScrollTop,\n      maxScrollLeft,\n      scrollTop: clamp(scrollTop, 0, maxScrollTop),\n      scrollLeft: clamp(scrollLeft, 0, maxScrollLeft)\n    };\n    return nextState;\n  }\n\n  scrollVertical(scrollY, relative) {\n    const scrollTop = clamp(relative ? this.state.scrollTop + scrollY : scrollY, 0, this.state.maxScrollTop);\n\n    if (this.props.onVerticalScroll) {\n      this.props.onVerticalScroll(scrollTop);\n    }\n\n    this.setState({\n      scrollTop\n    });\n  }\n\n  scrollHorizontal(scrollX, relative) {\n    const scrollLeft = clamp(relative ? this.state.scrollLeft + scrollX : scrollX, 0, this.state.maxScrollLeft);\n\n    if (this.props.onHorizontalScroll) {\n      this.props.onHorizontalScroll(scrollLeft);\n    }\n\n    this.setState({\n      scrollLeft\n    });\n  }\n\n  triggerScrollStart() {\n    if (this.scrolling) {\n      return;\n    }\n\n    this.scrolling = true;\n\n    if (this.props.onScrollStart) {\n      this.props.onScrollStart(this.state.scrollLeft, this.state.scrollTop);\n    }\n  }\n\n  triggerScrollStopSync() {\n    if (!this.scrolling) {\n      return;\n    }\n\n    this.scrolling = false;\n\n    if (this.props.onScrollEnd) {\n      this.props.onScrollEnd(this.state.scrollLeft, this.state.scrollTop);\n    }\n  }\n\n  getScrollbarProps() {\n    return {\n      zIndex: this.props.zIndex,\n      miniThumbSize: this.props.miniThumbSize,\n      scrollbarSize: this.props.scrollbarSize,\n      keyboardScrollAmount: this.props.keyboardScrollAmount,\n      stopPropagation: true\n    };\n  }\n\n  renderVerticalBar() {\n    if (this.state.hasVerticalBar) {\n      return React.createElement(Scrollbar, Object.assign({\n        orientation: \"vertical\",\n        scrollPosition: this.state.scrollTop,\n        contentSize: this.state.contentHeight,\n        containerSize: this.state.verticalBarHeight,\n        onScroll: this.onVerticalScroll\n      }, this.getScrollbarProps()));\n    }\n  }\n\n  renderHorizontalBar() {\n    if (this.state.hasHorizontalBar) {\n      return React.createElement(Scrollbar, Object.assign({\n        orientation: \"horizontal\",\n        scrollPosition: this.state.scrollLeft,\n        contentSize: this.state.contentWidth,\n        containerSize: this.state.horizontalBarWidth,\n        onScroll: this.onHorizontalScroll\n      }, this.getScrollbarProps()));\n    }\n  }\n\n  render() {\n    const props = {};\n\n    if (this.props.touchable) {\n      props.onTouchStart = this.touchHandler.onTouchStart;\n      props.onTouchEnd = this.touchHandler.onTouchEnd;\n      props.onTouchMove = this.touchHandler.onTouchMove;\n      props.onTouchCancel = this.touchHandler.onTouchCancel;\n    }\n\n    if (this.props.dragable) {\n      props.onMouseDown = this.onMouseDown;\n    }\n\n    const contentStyle = {};\n    const containerStyle = {};\n\n    if (this.props.containerWidth != null || this.mounted) {\n      containerStyle.width = this.state.containerWidth;\n    }\n\n    if (this.props.containerHeight != null || this.mounted) {\n      containerStyle.height = this.state.containerHeight;\n    }\n\n    if (this.props.contentWidth != null || this.mounted) {\n      contentStyle.width = this.state.contentWidth;\n    }\n\n    if (this.props.contentHeight != null || this.mounted) {\n      contentStyle.height = this.state.contentHeight;\n    }\n\n    if (this.mounted) {\n      contentStyle.transform = `translate(-${this.state.scrollLeft}px, -${this.state.scrollTop}px)`;\n    }\n\n    const {\n      prefixCls,\n      scrollbarAutoHide\n    } = this.props;\n    const baseCls = `${prefixCls}-scroll-box`;\n    return React.createElement(\"div\", Object.assign({}, props, {\n      style: Object.assign(Object.assign({}, this.props.containerStyle), containerStyle),\n      ref: this.refContainer,\n      onWheel: this.onWheel,\n      className: classNames(baseCls, {\n        [`${baseCls}-auto-hide`]: scrollbarAutoHide\n      }, this.props.containerClassName)\n    }), React.createElement(\"div\", {\n      style: Object.assign(Object.assign({}, this.props.contentStyle), contentStyle),\n      ref: this.refContent,\n      className: classNames(`${baseCls}-content`, this.props.contentClassName)\n    }, this.props.children), this.renderVerticalBar(), this.renderHorizontalBar());\n  }\n\n}\n\n(function (ScrollBox) {\n  ScrollBox.defaultProps = {\n    prefixCls: 'x6',\n    scrollTop: 0,\n    scrollLeft: 0,\n    dragable: true,\n    touchable: true,\n    scrollbarAutoHide: true,\n    scrollbarSize: Scrollbar.defaultProps.scrollbarSize,\n    miniThumbSize: Scrollbar.defaultProps.miniThumbSize,\n    keyboardScrollAmount: Scrollbar.defaultProps.keyboardScrollAmount\n  };\n})(ScrollBox || (ScrollBox = {}));","map":null,"metadata":{},"sourceType":"module"}