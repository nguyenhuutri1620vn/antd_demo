{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { gl } from '@antv/l7-core';\nimport BaseModel from '../../core/BaseModel';\nimport { RasterImageTriangulation } from '../../core/triangulation';\nvar ImageTileFrag = \"precision mediump float;\\nvoid main() {\\n  gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\\n}\\n\";\nvar ImageTileVert = \"precision highp float;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_Mvp;\\nattribute vec3 a_Position;\\n#pragma include \\\"projection\\\"\\nvoid main() {\\n   vec4 project_pos = project_position(vec4(a_Position, 1.0));\\n   if(u_CoordinateSystem == COORDINATE_SYSTEM_P20_2) { // gaode2.x\\n      gl_Position = u_Mvp * (vec4(project_pos.xy,0., 1.0));\\n   } else {\\n      gl_Position = project_common_position_to_clipspace(vec4(project_pos.xy,0., 1.0));\\n   }\\n}\\n\";\nimport Tile from '../utils/Tile';\n\nvar ImageTileModel = function (_BaseModel) {\n  _inherits(ImageTileModel, _BaseModel);\n\n  var _super = _createSuper(ImageTileModel);\n\n  function ImageTileModel() {\n    var _this;\n\n    _classCallCheck(this, ImageTileModel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"tileLayer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"timestamp\", void 0);\n\n    return _this;\n  }\n\n  _createClass(ImageTileModel, [{\n    key: \"getUninforms\",\n    value: function getUninforms() {\n      return {};\n    }\n  }, {\n    key: \"tile\",\n    value: function tile() {\n      var _this$mapService$getB = this.mapService.getBounds(),\n          _this$mapService$getB2 = _slicedToArray(_this$mapService$getB, 2),\n          WS = _this$mapService$getB2[0],\n          EN = _this$mapService$getB2[1];\n\n      var NE = {\n        lng: EN[0],\n        lat: EN[1]\n      };\n      var SW = {\n        lng: WS[0],\n        lat: WS[1]\n      };\n      this.tileLayer.calCurrentTiles({\n        NE: NE,\n        SW: SW,\n        tileCenter: this.mapService.getCenter(),\n        currentZoom: this.mapService.getZoom(),\n        minSourceZoom: this.mapService.getMinZoom(),\n        minZoom: this.mapService.getMinZoom(),\n        maxZoom: this.mapService.getMaxZoom()\n      });\n    }\n  }, {\n    key: \"initModels\",\n    value: function initModels() {\n      var _this2 = this;\n\n      this.layer.zIndex = -999;\n\n      var _ref = this.layer.getLayerConfig(),\n          _ref$resolution = _ref.resolution,\n          resolution = _ref$resolution === void 0 ? 'low' : _ref$resolution,\n          _ref$maxSourceZoom = _ref.maxSourceZoom,\n          maxSourceZoom = _ref$maxSourceZoom === void 0 ? 17 : _ref$maxSourceZoom;\n\n      var source = this.layer.getSource();\n\n      if (source.data.tileurl) {\n        this.tileLayer = new Tile({\n          url: source.data.tileurl,\n          layerService: this.layerService,\n          layer: this.layer,\n          resolution: resolution,\n          maxSourceZoom: maxSourceZoom,\n          crstype: 'epsg3857'\n        });\n        this.tile();\n        this.mapService.on('mapchange', function (e) {\n          if (_this2.timestamp) {\n            clearTimeout(_this2.timestamp);\n            _this2.timestamp = null;\n          }\n\n          _this2.timestamp = setTimeout(function () {\n            if (_this2.mapService.getZoom() >= 2.0) {\n              _this2.tile();\n            }\n          }, 500);\n        });\n      }\n\n      return [this.layer.buildLayerModel({\n        moduleName: 'ImageTileLayer',\n        vertexShader: ImageTileVert,\n        fragmentShader: ImageTileFrag,\n        triangulation: RasterImageTriangulation,\n        primitive: gl.TRIANGLES,\n        depth: {\n          enable: false\n        },\n        blend: this.getBlend()\n      })];\n    }\n  }, {\n    key: \"clearModels\",\n    value: function clearModels() {\n      this.tileLayer.removeTiles();\n    }\n  }, {\n    key: \"buildModels\",\n    value: function buildModels() {\n      return this.initModels();\n    }\n  }, {\n    key: \"registerBuiltinAttributes\",\n    value: function registerBuiltinAttributes() {\n      return;\n    }\n  }]);\n\n  return ImageTileModel;\n}(BaseModel);\n\nexport { ImageTileModel as default };","map":null,"metadata":{},"sourceType":"module"}