{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar base_1 = require(\"./base\");\n\nvar crs_1 = require(\"./geo/crs\");\n\nvar lng_lat_1 = require(\"./geo/geometry/lng-lat\");\n\nvar point_1 = require(\"./geo/geometry/point\");\n\nvar Geo =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Geo, _super);\n\n  function Geo(cfg) {\n    var _this = _super.call(this, tslib_1.__assign({\n      projection: 'EPSG3857',\n      zoom: 7,\n      mapCenter: [116.400146, 39.926588]\n    }, cfg)) || this;\n\n    _this.type = 'geo';\n    _this.isGeo = true;\n    cfg.center ? _this.center = cfg.center : _this.center = _this.mapCenter;\n\n    _this._init();\n\n    return _this;\n  }\n\n  Geo.prototype._init = function () {\n    var start = this.start;\n    var end = this.end;\n    this.center = lng_lat_1.toLngLat(this.center);\n    this.width = Math.abs(end.x - start.x);\n    this.height = Math.abs(end.y - start.y);\n    this.crs = crs_1.getCRS(this.projection);\n  };\n\n  Geo.prototype.getZoom = function () {\n    return this.zoom;\n  };\n\n  Geo.prototype.setZoom = function (zoom) {\n    this.zoom = zoom;\n  };\n\n  Geo.prototype.setCenter = function (center) {\n    this.center = lng_lat_1.toLngLat(center);\n  };\n\n  Geo.prototype.getCenter = function () {\n    return this.center;\n  };\n  /**\n   * 经纬度坐标转画布坐标 统一和其他坐标系传入方式 coordControls使用\n   * @param point\n   */\n\n\n  Geo.prototype.convertPoint = function (point) {\n    var lngLat = [point.x, point.y];\n    var ll = this.project(lng_lat_1.toLngLat(lngLat), this.zoom).round();\n    var origin = this.getPixelOrigin();\n    var resPoint = ll.subtract(origin);\n    return {\n      x: resPoint.x,\n      y: resPoint.y\n    };\n  };\n  /**\n   * 画布坐标转经纬坐标 统一和其他坐标系传入方式\n   * @param point\n   */\n\n\n  Geo.prototype.invertPoint = function (point) {\n    var newPoint = point_1.toPoint(point);\n    var origin = this.getPixelOrigin();\n    var px = newPoint.add(origin);\n    var lnglat = this.unproject(px, this.zoom);\n    return {\n      x: lnglat.lng,\n      y: lnglat.lat\n    };\n  };\n  /**\n  * 画布坐标转经纬坐标 同convertPoint 对用户使用\n  * @param point\n  */\n\n\n  Geo.prototype.layerPointToLatLng = function (point) {\n    var origin = this.getPixelOrigin();\n    var ll = point.add(origin);\n    return this.unproject(ll, this.zoom);\n  };\n  /**\n  * 经纬度坐标转画布坐标 同 invertPoint 对用户使用\n  * @param lngLat\n  */\n\n\n  Geo.prototype.latLngToLayerPoint = function (lngLat) {\n    var ll = this.project(lng_lat_1.toLngLat(lngLat), this.zoom).round();\n    var origin = this.getPixelOrigin();\n    return ll.subtract(origin);\n  }; // 计算地图中心点像素坐标\n\n\n  Geo.prototype.getPixelOrigin = function () {\n    var halfWidth = this.width / 2;\n    var halfHeight = this.height / 2;\n    return this.crs.lngLatToPoint(lng_lat_1.toLngLat(this.center), this.zoom).subtract({\n      y: halfHeight,\n      x: halfWidth\n    });\n  };\n  /**\n   * 经纬度坐标转地图像素坐标\n   * @param lnglat\n   * @param zoom\n   */\n\n\n  Geo.prototype.project = function (lnglat, zoom) {\n    var newZoom = zoom === undefined ? this.zoom : zoom;\n    return this.crs.lngLatToPoint(lng_lat_1.toLngLat(lnglat), newZoom);\n  };\n  /**\n   * 地图像素坐标转经纬度\n   * @param point\n   * @param zoom\n   */\n\n\n  Geo.prototype.unproject = function (point, zoom) {\n    var newZoom = zoom === undefined ? this.zoom : zoom;\n    return this.crs.pointToLngLat(point_1.toPoint(point), newZoom);\n  };\n\n  Geo.prototype.distance = function (lnglat1, lnglat2) {\n    return this.crs.distance(lng_lat_1.toLngLat(lnglat1), lng_lat_1.toLngLat(lnglat2));\n  };\n\n  return Geo;\n}(base_1[\"default\"]);\n\nexports[\"default\"] = Geo;","map":null,"metadata":{},"sourceType":"script"}