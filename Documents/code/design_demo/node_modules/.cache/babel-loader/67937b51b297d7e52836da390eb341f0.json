{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport TwoTouchHandler from './two_touch';\n\nfunction isVertical(vector) {\n  return Math.abs(vector.y) > Math.abs(vector.x);\n}\n\nvar ALLOWED_SINGLE_TOUCH_TIME = 100;\n\nvar TouchPitchHandler = function (_TwoTouchHandler) {\n  _inherits(TouchPitchHandler, _TwoTouchHandler);\n\n  var _super = _createSuper(TouchPitchHandler);\n\n  function TouchPitchHandler() {\n    var _this;\n\n    _classCallCheck(this, TouchPitchHandler);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"valid\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"firstMove\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"lastPoints\", void 0);\n\n    return _this;\n  }\n\n  _createClass(TouchPitchHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      _get(_getPrototypeOf(TouchPitchHandler.prototype), \"reset\", this).call(this);\n\n      this.valid = undefined;\n      delete this.firstMove;\n      delete this.lastPoints;\n    }\n  }, {\n    key: \"start\",\n    value: function start(points) {\n      this.lastPoints = points;\n\n      if (isVertical(points[0].sub(points[1]))) {\n        this.valid = false;\n      }\n    }\n  }, {\n    key: \"move\",\n    value: function move(points, center, e) {\n      var vectorA = points[0].sub(this.lastPoints[0]);\n      var vectorB = points[1].sub(this.lastPoints[1]);\n      this.valid = this.gestureBeginsVertically(vectorA, vectorB, e.timeStamp);\n\n      if (!this.valid) {\n        return;\n      }\n\n      this.lastPoints = points;\n      this.active = true;\n      var yDeltaAverage = (vectorA.y + vectorB.y) / 2;\n      var degreesPerPixelMoved = -0.5;\n      return {\n        pitchDelta: yDeltaAverage * degreesPerPixelMoved\n      };\n    }\n  }, {\n    key: \"gestureBeginsVertically\",\n    value: function gestureBeginsVertically(vectorA, vectorB, timeStamp) {\n      if (this.valid !== undefined) {\n        return this.valid;\n      }\n\n      var threshold = 2;\n      var movedA = vectorA.mag() >= threshold;\n      var movedB = vectorB.mag() >= threshold;\n\n      if (!movedA && !movedB) {\n        return;\n      }\n\n      if (!movedA || !movedB) {\n        if (this.firstMove === undefined) {\n          this.firstMove = timeStamp;\n        }\n\n        if (timeStamp - this.firstMove < ALLOWED_SINGLE_TOUCH_TIME) {\n          return undefined;\n        } else {\n          return false;\n        }\n      }\n\n      var isSameDirection = vectorA.y > 0 === vectorB.y > 0;\n      return isVertical(vectorA) && isVertical(vectorB) && isSameDirection;\n    }\n  }]);\n\n  return TouchPitchHandler;\n}(TwoTouchHandler);\n\nexport { TouchPitchHandler as default };","map":null,"metadata":{},"sourceType":"module"}