{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport 'reflect-metadata';\n/** Application 扩展依赖 */\n\nimport { ICommandHandler, IGraphCommandFactory, IGraphCommandContribution } from '../command/interface';\nimport { inject, singleton } from 'mana-syringe';\nimport { IHookContribution } from '../hooks/interface';\nimport { Disposable, DisposableCollection } from '../common/disposable';\n/** Commands */\n\nimport { registerNodeCommand, hookhubList as nodeHooks } from './node';\nimport { registerGraphCommand, hookhubList as graphHooks } from './graph';\nimport { registerEdgeCommand, hookhubList as edgeHooks } from './edge';\nimport { registerGroupCommand, hookhubList as groupHooks } from './group';\nimport { registerModelServiceCommand, hookhubList as observablesHooks } from './models';\n/** Command Hooks*/\n\nimport { HookHub } from '@antv/xflow-hook';\nimport { CommandConfig } from './config';\n/** Commands 配置项目*/\n\nconst hookhubList = [...nodeHooks, ...edgeHooks, ...groupHooks, ...graphHooks, ...observablesHooks];\n\nconst defaultHookFactory = () => new HookHub();\n\nlet XFlowCommandContribution = class XFlowCommandContribution {\n  constructor() {\n    /** 注册钩子 */\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const d = hooks.x6Events.registerHook({\n        name: 'bind group node move event',\n        handler: args => __awaiter(this, void 0, void 0, function* () {\n          const event = {\n            eventName: 'node:moving',\n            callback: _ref => {\n              let {\n                node\n              } = _ref;\n              return __awaiter(this, void 0, void 0, function* () {\n                const isGroup = node.prop('isGroup');\n\n                if (isGroup) {\n                  node.prop('originPosition', node.getPosition());\n                  return;\n                }\n\n                const graph = node.model.graph;\n                const {\n                  group: groupId\n                } = node.getData();\n                const group = graph.getNodes().find(cell => cell.id === groupId);\n\n                if (!group) {\n                  return;\n                }\n\n                const isCollapsed = group.getProp('isCollapsed');\n                let originSize = group.getProp('originSize');\n                let hasChange = false;\n\n                if (originSize == null) {\n                  originSize = group.size();\n                  group.prop('originSize', originSize);\n                }\n\n                let originPosition = group.prop('originPosition');\n\n                if (originPosition == null) {\n                  originPosition = group.getPosition();\n                  group.prop('originPosition', originPosition);\n                }\n\n                let x = originPosition.x;\n                let y = originPosition.y;\n                let cornerX = originPosition.x + originSize.width;\n                let cornerY = originPosition.y + originSize.height;\n                const childs = group.getChildren();\n\n                if (childs) {\n                  childs.forEach(child => {\n                    const bbox = child.getBBox().inflate(12);\n                    const corner = bbox.getCorner();\n\n                    if (bbox.x < x) {\n                      x = bbox.x;\n                      hasChange = true;\n                    }\n\n                    if (bbox.y < y) {\n                      y = bbox.y;\n                      hasChange = true;\n                    }\n\n                    if (corner.x > cornerX) {\n                      cornerX = corner.x;\n                      hasChange = true;\n                    }\n\n                    if (corner.y > cornerY) {\n                      cornerY = corner.y;\n                      hasChange = true;\n                    }\n                  });\n                }\n\n                if (hasChange) {\n                  group.prop({\n                    position: {\n                      x,\n                      y\n                    },\n                    size: {\n                      width: cornerX - x,\n                      height: cornerY - y\n                    }\n                  });\n                  const groupData = Object.assign(Object.assign({}, group.getData()), {\n                    x,\n                    y,\n                    width: cornerX - x,\n                    height: cornerY - y\n                  });\n\n                  if (isCollapsed !== true) {\n                    groupData.groupChildrenSize = {\n                      width: cornerX - x,\n                      height: cornerY - y\n                    };\n                  }\n\n                  group.setData(groupData);\n                }\n                /**\n                 *  updateNodeData:\n                 *  1. 折叠时移动更新xy，size需要更新，childrenSize不变\n                 *  2. 展开时\n                 *      - 移动Group更新xy，size不需要更新，childrenSize不更新\n                 *      - 移动children, 更新xy, size childrenSize\n                 */\n\n              });\n            }\n          };\n          args.push(event);\n        })\n      });\n      return Disposable.create(() => {\n        d.dispose();\n      });\n    });\n    /** 注册钩子 */\n\n\n    this.registerHookHub = registry => __awaiter(this, void 0, void 0, function* () {\n      const toDispose = new DisposableCollection();\n      hookhubList.forEach(_ref2 => {\n        let {\n          hookKey,\n          createHook = defaultHookFactory\n        } = _ref2;\n        const d = registry.registerHookHub(hookKey, createHook());\n        toDispose.push(d);\n      });\n      this.commandConfig.getConfig().then(_ref3 => {\n        let {\n          getContributions\n        } = _ref3;\n        const CommandContributions = getContributions();\n        CommandContributions.forEach(_ref4 => {\n          let {\n            hookKey,\n            createHook = defaultHookFactory\n          } = _ref4;\n          const d = registry.registerHookHub(hookKey, createHook());\n          toDispose.push(d);\n        });\n      });\n      return toDispose;\n    });\n  }\n  /** 注册画布节点命令 */\n\n\n  registerGraphCommands(registry) {\n    /** 注册内置的命令 */\n    hookhubList.forEach(_ref5 => {\n      let {\n        command\n      } = _ref5;\n      registry.registerCommand(command, {\n        createCommand: this.commandFactory\n      });\n    });\n    /** 注册外部传入的命令 */\n\n    this.commandConfig.getConfig().then(_ref6 => {\n      let {\n        getContributions\n      } = _ref6;\n      const CommandContributions = getContributions();\n      CommandContributions.forEach(cmd => {\n        registry.registerCommand(cmd.command, {\n          createCommand: this.commandFactory\n        });\n      });\n    });\n  }\n\n};\n\n__decorate([inject(IGraphCommandFactory), __metadata(\"design:type\", Function)], XFlowCommandContribution.prototype, \"commandFactory\", void 0);\n\n__decorate([inject(CommandConfig), __metadata(\"design:type\", CommandConfig\n/** 注册画布节点命令 */\n)], XFlowCommandContribution.prototype, \"commandConfig\", void 0);\n\nXFlowCommandContribution = __decorate([singleton({\n  contrib: [IGraphCommandContribution, IHookContribution]\n})], XFlowCommandContribution);\nexport { XFlowCommandContribution };\nexport const registerXFlowCommandContribution = (register, commandConfig) => {\n  /** 扩展 用户自定义命令 */\n  const configContributions = commandConfig.getCommandContributions();\n  configContributions.forEach(execution => {\n    const {\n      CommandHandler,\n      command\n    } = execution;\n    register({\n      token: {\n        token: ICommandHandler,\n        named: command.id\n      },\n      useClass: CommandHandler\n    });\n  });\n  /** 扩展 Graph 命令 */\n\n  registerGraphCommand(register);\n  /** 扩展 Node 命令 */\n\n  registerNodeCommand(register);\n  /** 扩展 Edge 命令 */\n\n  registerEdgeCommand(register);\n  /** 扩展 Edge 命令 */\n\n  registerGroupCommand(register);\n  /** 扩展 Observable 命令 */\n\n  registerModelServiceCommand(register);\n  /** 注册 XFlowCommandContribution */\n\n  register(XFlowCommandContribution);\n};","map":null,"metadata":{},"sourceType":"module"}