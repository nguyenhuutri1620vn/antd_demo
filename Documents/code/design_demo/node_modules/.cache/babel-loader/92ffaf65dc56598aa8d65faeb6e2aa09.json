{"ast":null,"code":"import { Dictionary } from '../common';\nimport { Dom } from '../util';\nexport class Cache {\n  constructor(view) {\n    this.view = view;\n    this.clean();\n  }\n\n  clean() {\n    if (this.elemCache) {\n      this.elemCache.dispose();\n    }\n\n    this.elemCache = new Dictionary();\n    this.pathCache = {};\n  }\n\n  get(elem) {\n    const cache = this.elemCache;\n\n    if (!cache.has(elem)) {\n      this.elemCache.set(elem, {});\n    }\n\n    return this.elemCache.get(elem);\n  }\n\n  getData(elem) {\n    const meta = this.get(elem);\n\n    if (!meta.data) {\n      meta.data = {};\n    }\n\n    return meta.data;\n  }\n\n  getMatrix(elem) {\n    const meta = this.get(elem);\n\n    if (meta.matrix == null) {\n      const target = this.view.rotatableNode || this.view.container;\n      meta.matrix = Dom.getTransformToElement(elem, target);\n    }\n\n    return Dom.createSVGMatrix(meta.matrix);\n  }\n\n  getShape(elem) {\n    const meta = this.get(elem);\n\n    if (meta.shape == null) {\n      meta.shape = Dom.toGeometryShape(elem);\n    }\n\n    return meta.shape.clone();\n  }\n\n  getBoundingRect(elem) {\n    const meta = this.get(elem);\n\n    if (meta.boundingRect == null) {\n      meta.boundingRect = Dom.getBBox(elem);\n    }\n\n    return meta.boundingRect.clone();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}