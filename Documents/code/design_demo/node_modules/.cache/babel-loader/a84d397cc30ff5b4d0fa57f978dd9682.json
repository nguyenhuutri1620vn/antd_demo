{"ast":null,"code":"import { Platform, StringExt, ObjectExt, Dom } from '../../util';\nimport { Node } from '../../model';\nimport { NodeView } from '../../view';\nimport { getName } from './util';\nconst contentSelector = '.text-block-content';\nconst registryName = getName('text-block');\nexport class TextBlock extends Node {\n  get content() {\n    return this.getContent();\n  }\n\n  set content(val) {\n    this.setContent(val);\n  }\n\n  getContent() {\n    return this.store.get('content', '');\n  }\n\n  setContent(content) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.store.set('content', content, options);\n  }\n\n  setup() {\n    super.setup();\n    this.store.on('change:*', metadata => {\n      const key = metadata.key;\n\n      if (key === 'content') {\n        this.updateContent(this.getContent());\n      } else if (key === 'size') {\n        this.updateSize(this.getSize());\n      }\n    });\n    this.updateSize(this.getSize());\n    this.updateContent(this.getContent());\n  }\n\n  updateSize(size) {\n    if (Platform.SUPPORT_FOREIGNOBJECT) {\n      this.setAttrs({\n        foreignObject: Object.assign({}, size),\n        [contentSelector]: {\n          style: Object.assign({}, size)\n        }\n      });\n    }\n  }\n\n  updateContent(content) {\n    if (Platform.SUPPORT_FOREIGNOBJECT) {\n      this.setAttrs({\n        [contentSelector]: {\n          html: content ? StringExt.sanitizeHTML(content) : ''\n        }\n      });\n    } else {\n      this.setAttrs({\n        [contentSelector]: {\n          text: content\n        }\n      });\n    }\n  }\n\n}\n\n(function (TextBlock) {\n  TextBlock.config({\n    type: registryName,\n    view: registryName,\n    markup: ['<g class=\"rotatable\">', '<g class=\"scalable\"><rect/></g>', Platform.SUPPORT_FOREIGNOBJECT ? [`<foreignObject>`, `<body xmlns=\"http://www.w3.org/1999/xhtml\">`, `<div class=\"${contentSelector.substr(1)}\" />`, `</body>`, `</foreignObject>`].join('') : `<text class=\"${contentSelector.substr(1)}\"/>`, '</g>'].join(''),\n    attrs: {\n      '.': {\n        fill: '#ffffff',\n        stroke: 'none'\n      },\n      rect: {\n        fill: '#ffffff',\n        stroke: '#000000',\n        width: 80,\n        height: 100\n      },\n      text: {\n        fill: '#000000',\n        fontSize: 14,\n        fontFamily: 'Arial, helvetica, sans-serif'\n      },\n      body: {\n        style: {\n          background: 'transparent',\n          position: 'static',\n          margin: 0,\n          padding: 0\n        }\n      },\n      foreignObject: {\n        style: {\n          overflow: 'hidden'\n        }\n      },\n      [contentSelector]: {\n        refX: 0.5,\n        refY: 0.5,\n        yAlign: 'middle',\n        xAlign: 'middle',\n        style: {\n          textAlign: 'center',\n          verticalAlign: 'middle',\n          display: 'table-cell',\n          padding: '0 5px',\n          margin: 0\n        }\n      }\n    }\n  });\n  Node.registry.register(registryName, TextBlock);\n})(TextBlock || (TextBlock = {}));\n\n(function (TextBlock) {\n  const contentAction = 'content';\n\n  class View extends NodeView {\n    confirmUpdate(flag) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let ret = super.confirmUpdate(flag, options);\n\n      if (this.hasAction(ret, contentAction)) {\n        this.updateContent();\n        ret = this.removeAction(ret, contentAction);\n      }\n\n      return ret;\n    }\n\n    update(partialAttrs) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        super.update(partialAttrs);\n      } else {\n        const node = this.cell;\n        const attrs = Object.assign({}, partialAttrs || node.getAttrs());\n        delete attrs[contentSelector];\n        super.update(attrs);\n\n        if (!partialAttrs || ObjectExt.has(partialAttrs, contentSelector)) {\n          this.updateContent(partialAttrs);\n        }\n      }\n    }\n\n    updateContent(partialAttrs) {\n      if (Platform.SUPPORT_FOREIGNOBJECT) {\n        super.update(partialAttrs);\n      } else {\n        const node = this.cell;\n        const textAttrs = (partialAttrs || node.getAttrs())[contentSelector]; // Break the text to fit the node size taking into\n        // account the attributes set on the node.\n\n        const text = Dom.breakText(node.getContent(), node.getSize(), textAttrs, {\n          svgDocument: this.graph.view.svg\n        });\n        const attrs = {\n          [contentSelector]: ObjectExt.merge({}, textAttrs, {\n            text\n          })\n        };\n        super.update(attrs);\n      }\n    }\n\n  }\n\n  TextBlock.View = View;\n\n  (function (View) {\n    View.config({\n      bootstrap: ['render', contentAction],\n      actions: Platform.SUPPORT_FOREIGNOBJECT ? {} : {\n        size: contentAction,\n        content: contentAction\n      }\n    });\n    NodeView.registry.register(registryName, View);\n  })(View = TextBlock.View || (TextBlock.View = {}));\n})(TextBlock || (TextBlock = {}));","map":null,"metadata":{},"sourceType":"module"}