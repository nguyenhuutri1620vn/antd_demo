{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { HookConfig } from '../config';\nimport { singleton, inject } from 'mana-syringe';\nimport { IHookContribution } from '../interface';\nexport var NsGraphEventPlugin;\n\n(function (NsGraphEventPlugin) {\n  NsGraphEventPlugin.pluginId = 'GraphEventPlugin';\n})(NsGraphEventPlugin || (NsGraphEventPlugin = {}));\n/**\n * 内置的hook contribution\n * 处理 config上的runtime的注册项\n */\n\n\nlet RuntimeContribution = class RuntimeContribution {\n  constructor() {\n    this.toDispose = new DisposableCollection();\n\n    this.registerHook = hooks => __awaiter(this, void 0, void 0, function* () {\n      const {\n        hookRegisterFn\n      } = yield this.hookConfig.getConfig();\n      const d = hookRegisterFn(hooks);\n      return Disposable.create(() => {\n        d.dispose();\n      });\n    });\n\n    this.registerHookHub = registry => __awaiter(this, void 0, void 0, function* () {\n      const {\n        hookhubRegisterFn\n      } = yield this.hookConfig.getConfig();\n      const d = hookhubRegisterFn(registry);\n      return Disposable.create(() => {\n        d.dispose();\n      });\n    });\n  }\n\n};\n\n__decorate([inject(HookConfig), __metadata(\"design:type\", HookConfig)], RuntimeContribution.prototype, \"hookConfig\", void 0);\n\nRuntimeContribution = __decorate([singleton({\n  contrib: IHookContribution\n})], RuntimeContribution);\nexport { RuntimeContribution };","map":null,"metadata":{},"sourceType":"module"}