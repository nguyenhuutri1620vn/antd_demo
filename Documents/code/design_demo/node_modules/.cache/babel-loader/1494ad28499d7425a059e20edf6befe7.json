{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Base } from '../base';\nimport { Point } from '../../geometry';\nimport { ObjectExt } from '../../util';\nexport class Poly extends Base {\n  get points() {\n    return this.getPoints();\n  }\n\n  set points(pts) {\n    this.setPoints(pts);\n  }\n\n  getPoints() {\n    return this.getAttrByPath('body/refPoints');\n  }\n\n  setPoints(points, options) {\n    if (points == null) {\n      this.removePoints();\n    } else {\n      this.setAttrByPath('body/refPoints', Poly.pointsToString(points), options);\n    }\n\n    return this;\n  }\n\n  removePoints() {\n    this.removeAttrByPath('body/refPoints');\n    return this;\n  }\n\n}\n\n(function (Poly) {\n  function pointsToString(points) {\n    return typeof points === 'string' ? points : points.map(p => {\n      if (Array.isArray(p)) {\n        return p.join(',');\n      }\n\n      if (Point.isPointLike(p)) {\n        return `${p.x}, ${p.y}`;\n      }\n\n      return '';\n    }).join(' ');\n  }\n\n  Poly.pointsToString = pointsToString;\n  Poly.config({\n    propHooks(metadata) {\n      const {\n        points\n      } = metadata,\n            others = __rest(metadata, [\"points\"]);\n\n      if (points) {\n        const data = pointsToString(points);\n\n        if (data) {\n          ObjectExt.setByPath(others, 'attrs/body/refPoints', data);\n        }\n      }\n\n      return others;\n    }\n\n  });\n})(Poly || (Poly = {}));","map":null,"metadata":{},"sourceType":"module"}