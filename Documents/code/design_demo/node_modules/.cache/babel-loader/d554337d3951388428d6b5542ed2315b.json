{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport React, { useContext } from 'react';\nimport { Empty, Popover, Collapse } from 'antd';\nimport { Addon } from '@antv/x6';\nimport { getNodeReactComponent, useXFlowApp } from '@antv/xflow';\nimport { Log } from '../../util';\nimport AppContext from '../../context';\nimport { XFlowNode } from './node';\nvar Panel = Collapse.Panel;\nexport var defaultNodeFactory = function (args) {\n  return new XFlowNode(args);\n};\nexport var renderNode = function (props) {\n  var nodeConfig = props.nodeConfig,\n      onMouseDown = props.onMouseDown,\n      graphConfig = props.graphConfig,\n      modelService = props.modelService,\n      commandService = props.commandService;\n\n  if (!graphConfig) {\n    return React.createElement(\"div\", null);\n  }\n\n  var renderKey = graphConfig.nodeTypeParser(nodeConfig);\n  var reactComponent = graphConfig.nodeRender.get(renderKey);\n  return React.createElement(\"div\", {\n    onMouseDown: onMouseDown\n  }, React.createElement(reactComponent, {\n    commands: commandService,\n    modelService: modelService,\n    data: nodeConfig,\n    isNodeTreePanel: true\n  }));\n};\nexport var NodeTitle = function (props) {\n  var _a = React.useState(false),\n      isVisible = _a[0],\n      setVisible = _a[1];\n\n  var prefixClz = props.prefixClz,\n      graphConfig = props.graphConfig,\n      commandService = props.commandService,\n      modelService = props.modelService,\n      popoverContent = props.popoverContent,\n      onMouseDown = props.onMouseDown,\n      item = props.item;\n  return React.createElement(React.Fragment, null, popoverContent && React.createElement(Popover, {\n    placement: \"right\",\n    destroyTooltipOnHide: true,\n    content: popoverContent,\n    visible: isVisible,\n    style: {\n      color: 'red'\n    },\n    onVisibleChange: function (val) {\n      setVisible(val);\n    }\n  }, React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-node-wrapper\"),\n    onMouseEnter: function () {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig: graphConfig,\n    commandService: commandService,\n    onMouseDown: onMouseDown,\n    modelService: modelService,\n    nodeConfig: item\n  }))), !popoverContent && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-node-wrapper\"),\n    onMouseEnter: function () {\n      setVisible(true);\n    }\n  }, renderNode({\n    graphConfig: graphConfig,\n    commandService: commandService,\n    onMouseDown: onMouseDown,\n    modelService: modelService,\n    nodeConfig: item\n  })));\n};\nexport var NodePanelBody = function (props) {\n  var x6NodeFactory = props.x6NodeFactory,\n      dndOptions = props.dndOptions,\n      onNodeDrop = props.onNodeDrop,\n      state = props.state,\n      prefixClz = props.prefixClz,\n      registerNode = props.registerNode,\n      _a = props.defaultActiveKey,\n      defaultActiveKey = _a === void 0 ? ['official', 'custom'] : _a;\n  var flowchartId = useContext(AppContext).flowchartId;\n  var _b = (registerNode !== null && registerNode !== void 0 ? registerNode : {}).title,\n      title = _b === void 0 ? '混合节点' : _b;\n\n  var _c = useXFlowApp(),\n      graphProvider = _c.graphProvider,\n      modelService = _c.modelService,\n      commandService = _c.commandService;\n\n  var _d = React.useState(),\n      dnd = _d[0],\n      setDnd = _d[1];\n  /** 获取graph实例 */\n\n\n  var _e = React.useState(),\n      graph = _e[0],\n      setGraph = _e[1];\n\n  graphProvider.getGraphInstance().then(function (x6Graph) {\n    setGraph(x6Graph);\n  });\n  var graphConfig = undefined;\n  graphProvider.getGraphOptions().then(function (x6GraphConfig) {\n    graphConfig = x6GraphConfig;\n  });\n  React.useEffect(function () {\n    if (!graph) {\n      return;\n    }\n\n    var dndInstance = new Addon.Dnd(__assign(__assign({\n      scaled: false,\n      animation: false\n    }, dndOptions), {\n      target: graph,\n\n      /** 这里考虑到需要新增群组的需求，不使用x6的getDropNod方法\n       * 在validateNode时调用command添加\n       */\n      validateNode: function (droppingNode, options) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var nodeConfig;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                nodeConfig = __assign(__assign(__assign({}, droppingNode.getData()), droppingNode.getPosition()), {\n                  flowchartId: flowchartId\n                });\n                if (!onNodeDrop) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , onNodeDrop(nodeConfig, commandService, modelService)];\n\n              case 1:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                Log.error('onNodeDrop method is required in NodeTree Panel');\n                _a.label = 3;\n\n              case 3:\n                return [2\n                /*return*/\n                , false];\n            }\n          });\n        });\n      }\n    }));\n    setDnd(dndInstance);\n  }, [commandService, dndOptions, graph, modelService, onNodeDrop]);\n  var onMouseDown = React.useCallback(function (nodeConfig) {\n    return function (e) {\n      if (!graph || !dnd || !graphConfig) {\n        return;\n      }\n\n      var renderKey = graphConfig.nodeTypeParser(nodeConfig);\n      var _a = nodeConfig.width,\n          width = _a === void 0 ? 180 : _a,\n          _b = nodeConfig.height,\n          height = _b === void 0 ? 40 : _b;\n      var reactComponent = graphConfig.nodeRender.get(renderKey);\n      var wrappedComponent = getNodeReactComponent(reactComponent, commandService, modelService);\n      var nodeData = {\n        data: nodeConfig,\n        width: width,\n        height: height,\n        // X6_NODE_PORTAL_NODE_VIEW\n        view: graphConfig.graphId,\n        component: wrappedComponent\n      };\n      var x6Node = x6NodeFactory ? x6NodeFactory(nodeData) : defaultNodeFactory(nodeData);\n      dnd.start(x6Node, e.nativeEvent);\n    };\n  }, [commandService, dnd, graph, graphConfig, modelService, x6NodeFactory]);\n  var renderTree = React.useCallback(function (treeList) {\n    if (treeList === void 0) {\n      treeList = [];\n    }\n\n    return treeList.map(function (item) {\n      var popoverContent = item.popoverContent;\n      return React.createElement(NodeTitle, {\n        item: item,\n        key: item.id,\n        onMouseDown: onMouseDown(item),\n        popoverContent: popoverContent,\n        prefixClz: prefixClz,\n        modelService: modelService,\n        commandService: commandService,\n        graphConfig: graphConfig\n      });\n    });\n  }, [commandService, graphConfig, modelService, onMouseDown, prefixClz]);\n  var customNode = state.treeData.filter(function (item) {\n    return item.isCustom;\n  });\n  var officialNode = state.treeData.filter(function (item) {\n    return !item.isCustom;\n  });\n  var searchCustomNode = state.searchList.filter(function (item) {\n    return item.isCustom;\n  });\n  var searchOfficialNode = state.searchList.filter(function (item) {\n    return !item.isCustom;\n  });\n  var hasCustomNode = customNode.length > 0;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-body\")\n  }, React.createElement(Collapse, {\n    defaultActiveKey: defaultActiveKey,\n    style: {\n      border: 'none'\n    }\n  }, React.createElement(Panel, {\n    header: \"\\u901A\\u7528\\u8282\\u70B9\",\n    key: \"official\",\n    style: {\n      border: 'none'\n    }\n  }, !state.keyword && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-official\")\n  }, renderTree(officialNode)), state.searchList.length > 0 && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-official\")\n  }, renderTree(searchOfficialNode))), hasCustomNode && React.createElement(Panel, {\n    header: title,\n    key: \"custom\",\n    style: {\n      border: 'none'\n    }\n  }, !state.keyword && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-custom\")\n  }, renderTree(customNode)), state.searchList.length > 0 && React.createElement(\"div\", {\n    className: \"\".concat(prefixClz, \"-custom\")\n  }, renderTree(searchCustomNode)))), state.keyword && state.searchList.length === 0 && React.createElement(Empty, {\n    style: {\n      marginTop: '48px'\n    }\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}