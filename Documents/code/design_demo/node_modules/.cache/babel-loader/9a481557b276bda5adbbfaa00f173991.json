{"ast":null,"code":"import toposort from 'toposort';\nexport var ErrorUtils;\n\n(function (ErrorUtils) {\n  let ErrorEnum;\n\n  (function (ErrorEnum) {\n    ErrorEnum[\"INVALID_HOOK_BEFORE\"] = \"INVALID_HOOK_BEFORE\";\n    ErrorEnum[\"INVALID_HOOK_AFTER\"] = \"INVALID_HOOK_AFTER\";\n    ErrorEnum[\"INVALID_HOOK_ARGS_LENGTH\"] = \"INVALID_HOOK_ARGS_LENGTH\";\n  })(ErrorEnum = ErrorUtils.ErrorEnum || (ErrorUtils.ErrorEnum = {}));\n\n  class HookError extends Error {\n    constructor(code, message) {\n      if (Array.isArray(message)) {\n        message = message.filter(function (line) {\n          return !!line;\n        }).join(' ');\n      }\n\n      super(`${code}: ${message}`);\n\n      if (Error.captureStackTrace) {\n        ;\n        Error.captureStackTrace(this, HookError);\n      }\n\n      this.code = code;\n      this.contexts = {};\n\n      for (var _len = arguments.length, contexts = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        contexts[_key - 2] = arguments[_key];\n      }\n\n      contexts.forEach(context => {\n        if (typeof context === 'object') {\n          Object.entries(context).forEach(pair => {\n            const [key, value] = pair;\n\n            if (key !== 'key' && value) {\n              this.contexts[key] = JSON.parse(JSON.stringify(value));\n            }\n          });\n        }\n      });\n    }\n\n    toString() {\n      return `${this.code}: ${this.message}`;\n    }\n\n  }\n\n  ErrorUtils.HookError = HookError;\n\n  const createError = function (code, message) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    return new HookError(code, message, ...args);\n  };\n\n  ErrorUtils.HookBeforeError = () => {\n    return createError(ErrorEnum.INVALID_HOOK_BEFORE, ['hook require a before dependency but not exist in hookmap']);\n  };\n\n  ErrorUtils.HookAfterError = () => {\n    return createError(ErrorEnum.INVALID_HOOK_AFTER, ['hook require a after dependency but not exist in hookmap']);\n  };\n\n  ErrorUtils.InvalidHookArguments = hook => {\n    return createError(ErrorEnum.INVALID_HOOK_ARGS_LENGTH, ['hook handlers must have 0 to 2 arguments', `but got ${hook.handler.length}`]);\n  };\n})(ErrorUtils || (ErrorUtils = {}));\n\nexport var HookUtils;\n\n(function (HookUtils) {\n  /** 处理 runtime hooks */\n  HookUtils.normalize = function () {\n    let hookConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let hookMap = arguments.length > 1 ? arguments[1] : undefined;\n    const runtimeHook = Array.isArray(hookConfig) ? hookConfig : [hookConfig];\n    const innerHooks = [];\n    hookMap.forEach(val => {\n      innerHooks.push(val);\n    });\n    return [...innerHooks, ...runtimeHook].filter(item => item && !!item.handler);\n  };\n  /** 排序 hooks */\n\n\n  HookUtils.sort = function () {\n    let hooks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let hookMap = arguments.length > 1 ? arguments[1] : undefined;\n    const edges = [];\n    hooks.forEach(hook => {\n      if (hook.before) {\n        if (!hookMap.has(hook.before)) {\n          throw ErrorUtils.HookBeforeError();\n        }\n\n        const edge = [hook, hookMap.get(hook.before)];\n        edges.push(edge);\n      }\n\n      if (hook.after) {\n        if (!hookMap.has(hook.after)) {\n          throw ErrorUtils.HookBeforeError();\n        }\n\n        const edge = [hookMap.get(hook.after), hook];\n        edges.push(edge);\n      }\n    });\n    const sortedHooks = toposort.array(hooks, edges);\n    return sortedHooks;\n  };\n})(HookUtils || (HookUtils = {}));\n\nexport class Deferred {\n  constructor() {\n    this.isResolved = false;\n    this.isRejected = false;\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = args => {\n        this.isResolved = true;\n        resolve(args);\n      };\n\n      this.reject = args => {\n        this.isRejected = true;\n        reject(args);\n      };\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}