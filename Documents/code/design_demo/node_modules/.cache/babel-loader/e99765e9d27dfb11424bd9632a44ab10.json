{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { Component } from '../../ComponentManager';\nimport { AABB } from '../../shape/AABB';\nexport var MeshComponent = /*#__PURE__*/function (_Component) {\n  _inherits(MeshComponent, _Component);\n\n  var _super = _createSuper(MeshComponent);\n  /**\n   * aabb 应该存在 Mesh 而非 Geometry 中，原因包括：\n   * 1. 包围盒会受 transform 影响。例如每次 transform 之后应该重新计算包围盒（center 发生偏移）。\n   * 2. 多个 Mesh 可以共享一个 Geometry，但可以各自拥有不同的 aabb\n   */\n\n  /**\n   * transform 之后需要重新计算包围盒\n   */\n\n  /**\n   * 实际渲染 Model\n   */\n\n\n  function MeshComponent(data) {\n    var _this;\n\n    _classCallCheck(this, MeshComponent);\n\n    _this = _super.call(this, data);\n    _this.material = void 0;\n    _this.geometry = void 0;\n    _this.aabb = new AABB();\n    _this.aabbDirty = true;\n    _this.model = void 0;\n    _this.visible = true;\n    _this.children = [];\n    Object.assign(_assertThisInitialized(_this), data);\n    return _this;\n  }\n\n  return MeshComponent;\n}(Component);","map":null,"metadata":{},"sourceType":"module"}