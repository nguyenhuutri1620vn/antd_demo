{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { bindAll, DOM, lnglatDistance } from '@antv/l7-utils';\nimport Control, { PositionType } from './BaseControl';\n\nvar Scale = function (_Control) {\n  _inherits(Scale, _Control);\n\n  var _super = _createSuper(Scale);\n\n  function Scale(cfg) {\n    var _this;\n\n    _classCallCheck(this, Scale);\n\n    _this = _super.call(this, cfg);\n\n    _defineProperty(_assertThisInitialized(_this), \"mScale\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"iScale\", void 0);\n\n    bindAll(['update'], _assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Scale, [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      return {\n        position: PositionType.BOTTOMLEFT,\n        maxWidth: 100,\n        metric: true,\n        updateWhenIdle: false,\n        imperial: false,\n        name: 'scale'\n      };\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd() {\n      var className = 'l7-control-scale';\n      var container = DOM.create('div', className);\n      this.addScales(className + '-line', container);\n      var updateWhenIdle = this.controlOption.updateWhenIdle;\n      this.mapsService.on(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n      this.mapsService.on(updateWhenIdle ? 'zoomend' : 'zoomchange', this.update);\n      this.update();\n      return container;\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      var updateWhenIdle = this.controlOption.updateWhenIdle;\n      this.mapsService.off(updateWhenIdle ? 'zoomend' : 'zoomchange', this.update);\n      this.mapsService.off(updateWhenIdle ? 'moveend' : 'mapmove', this.update);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var mapsService = this.mapsService;\n      var maxWidth = this.controlOption.maxWidth;\n      var y = mapsService.getSize()[1] / 2;\n      var p1 = mapsService.containerToLngLat([0, y]);\n      var p2 = mapsService.containerToLngLat([maxWidth, y]);\n      var maxMeters = lnglatDistance([p1.lng, p1.lat], [p2.lng, p2.lat]);\n      this.updateScales(maxMeters);\n    }\n  }, {\n    key: \"updateScales\",\n    value: function updateScales(maxMeters) {\n      var _this$controlOption = this.controlOption,\n          metric = _this$controlOption.metric,\n          imperial = _this$controlOption.imperial;\n\n      if (metric && maxMeters) {\n        this.updateMetric(maxMeters);\n      }\n\n      if (imperial && maxMeters) {\n        this.updateImperial(maxMeters);\n      }\n    }\n  }, {\n    key: \"updateMetric\",\n    value: function updateMetric(maxMeters) {\n      var meters = this.getRoundNum(maxMeters);\n      var label = meters < 1000 ? meters + ' m' : meters / 1000 + ' km';\n      this.updateScale(this.mScale, label, meters / maxMeters);\n    }\n  }, {\n    key: \"updateImperial\",\n    value: function updateImperial(maxMeters) {\n      var maxFeet = maxMeters * 3.2808399;\n      var maxMiles;\n      var miles;\n      var feet;\n\n      if (maxFeet > 5280) {\n        maxMiles = maxFeet / 5280;\n        miles = this.getRoundNum(maxMiles);\n        this.updateScale(this.iScale, miles + ' mi', miles / maxMiles);\n      } else {\n        feet = this.getRoundNum(maxFeet);\n        this.updateScale(this.iScale, feet + ' ft', feet / maxFeet);\n      }\n    }\n  }, {\n    key: \"updateScale\",\n    value: function updateScale(scale, text, ratio) {\n      var maxWidth = this.controlOption.maxWidth;\n      scale.style.width = Math.round(maxWidth * ratio) + 'px';\n      scale.innerHTML = text;\n    }\n  }, {\n    key: \"getRoundNum\",\n    value: function getRoundNum(num) {\n      var pow10 = Math.pow(10, (Math.floor(num) + '').length - 1);\n      var d = num / pow10;\n      d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;\n      return pow10 * d;\n    }\n  }, {\n    key: \"addScales\",\n    value: function addScales(className, container) {\n      var _this$controlOption2 = this.controlOption,\n          metric = _this$controlOption2.metric,\n          imperial = _this$controlOption2.imperial;\n\n      if (metric) {\n        this.mScale = DOM.create('div', className, container);\n      }\n\n      if (imperial) {\n        this.iScale = DOM.create('div', className, container);\n      }\n    }\n  }]);\n\n  return Scale;\n}(Control);\n\nexport { Scale as default };","map":null,"metadata":{},"sourceType":"module"}