{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport React from 'react';\nimport { useXflowPrefixCls } from '@antv/xflow-core';\nimport { PanelFooter } from './panel-footer';\nimport { PanelHeader } from './panel-header';\nimport { PanelBody } from './panel-body';\nimport { usePanelLyaoutStyle } from './utils';\nimport { useJsonSchemaFormModel } from './service';\nexport { FormItemWrapper } from './schema-form';\nexport { executeJsonSchemaFormCommand } from './service';\nimport { WorkspacePanel } from '../base-panel';\n/** useFormPanelData获取数据 */\n\nexport const JsonSchemaFormMain = props => {\n  const {\n    prefixClz\n  } = props;\n  const {\n    getCustomRenderComponent,\n    afterUpdatingCb,\n    formValueUpdateService = () => {}\n  } = props;\n  const {\n    state,\n    commandService,\n    modelService\n  } = useJsonSchemaFormModel(props); // 联动更新form items的值\n\n  const triggerUpdate = React.useCallback(function (form) {\n    let values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return __awaiter(void 0, void 0, void 0, function* () {\n      form.setFieldsValue(values);\n      const changedFields = Object.entries(values).map(_ref => {\n        let [key, val] = _ref;\n        return {\n          name: key,\n          value: val\n        };\n      });\n      const allFields = Object.entries(state.targetData).map(_ref2 => {\n        let [key, val] = _ref2;\n        return {\n          name: key,\n          value: val\n        };\n      });\n      const result = yield formValueUpdateService({\n        allFields: allFields,\n        values: changedFields,\n        modelService,\n        commandService,\n        targetData: state.targetData,\n        targetType: state.targetType\n      });\n\n      if (afterUpdatingCb) {\n        afterUpdatingCb(result);\n      }\n    });\n  }, [afterUpdatingCb, commandService, formValueUpdateService, modelService, state.targetData, state.targetType]); // 在fields change时的回调\n\n  const onFieldsChange = React.useCallback((changedFields, allFields) => __awaiter(void 0, void 0, void 0, function* () {\n    const result = yield formValueUpdateService({\n      values: changedFields,\n      allFields,\n      modelService,\n      commandService,\n      targetData: state.targetData,\n      targetType: state.targetType\n    });\n\n    if (afterUpdatingCb) {\n      afterUpdatingCb(result);\n    }\n  }), [afterUpdatingCb, commandService, formValueUpdateService, modelService, state.targetData, state.targetType]);\n  /** schema为空的情况  */\n\n  const noSchema = React.useMemo(() => {\n    try {\n      return state.schema.tabs.length === 0 || !state.schema;\n    } catch (error) {\n      return true;\n    }\n  }, [state.schema]);\n  const {\n    headerStyle,\n    bodyStyle,\n    footerStyle\n  } = usePanelLyaoutStyle(props, noSchema);\n  /** 支持自定义渲染 */\n\n  if (getCustomRenderComponent) {\n    const Component = getCustomRenderComponent(state.targetType, state.targetData, modelService, commandService);\n\n    if (Component) {\n      return React.createElement(Component, Object.assign(Object.assign({}, props), {\n        headerStyle,\n        bodyStyle,\n        footerStyle,\n        targetData: state.targetData,\n        targetType: state.targetType,\n        modelService: modelService,\n        commandService: commandService\n      }));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: prefixClz\n  }, React.createElement(PanelHeader, Object.assign({\n    hasSchema: !noSchema\n  }, props, {\n    state: state,\n    style: headerStyle,\n    prefixClz: props.prefixClz\n  })), React.createElement(PanelBody, Object.assign({}, props, {\n    key: state.targetData && state.targetData.id,\n    style: bodyStyle,\n    prefixClz: props.prefixClz,\n    loading: state.loading,\n    schema: state.schema,\n    triggerUpdate: triggerUpdate,\n    onFieldsChange: onFieldsChange\n  })), React.createElement(PanelFooter, Object.assign({}, props, {\n    state: state,\n    style: footerStyle\n  })));\n};\nexport const JsonSchemaForm = props => {\n  const prefixClz = useXflowPrefixCls('json-schema-form');\n  return React.createElement(WorkspacePanel, Object.assign({}, props, {\n    className: prefixClz\n  }), React.createElement(JsonSchemaFormMain, Object.assign({}, props, {\n    prefixClz: prefixClz\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}