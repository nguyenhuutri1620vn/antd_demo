{"ast":null,"code":"import { Util } from '@antv/g6-core';\nimport { isNumber } from '@antv/util';\nvar traverseTree = Util.traverseTree;\n/**\n * 将 number | Function 类型的参数转换为 return number 的 Function\n * @param  {number | Function}  value 需要被转换的值\n * @param  {number}  defaultV 返回函数的默认返回值\n * @return {Function} 转换后的函数\n */\n\nexport var proccessToFunc = function proccessToFunc(value, defaultV) {\n  var func;\n\n  if (!value) {\n    func = function func(d) {\n      return defaultV || 1;\n    };\n  } else if (isNumber(value)) {\n    func = function func(d) {\n      return value;\n    };\n  } else {\n    func = value;\n  }\n\n  return func;\n};\n/**\n * 将节点和边数据转换为 GPU 可读的数组。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 需要被转换的值\n * @param  {EdgeConfig[]}  edges 返回函数的默认返回值\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\n\nexport var buildTextureData = function buildTextureData(nodes, edges) {\n  var dataArray = [];\n  var nodeDict = [];\n  var mapIdPos = {};\n  var i = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n\n  for (i = 0; i < edges.length; i++) {\n    var e = edges[i];\n    nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n    nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n  }\n\n  var maxEdgePerVetex = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var offset = dataArray.length;\n    var dests = nodeDict[i];\n    var len = dests.length;\n    dataArray[i * 4 + 2] = offset;\n    dataArray[i * 4 + 3] = dests.length;\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, dests.length);\n\n    for (var j = 0; j < len; ++j) {\n      var dest = dests[j];\n      dataArray.push(+dest);\n    }\n  }\n\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n\n  return {\n    array: new Float32Array(dataArray),\n    maxEdgePerVetex: maxEdgePerVetex\n  };\n};\n/**\n * 将节点和边数据转换为 GPU 可读的数组，每条边带有一个属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 节点数组\n * @param  {EdgeConfig[]}  edges 边数组\n * @param  {Function}  attrs 读取边属性的函数\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\n\nexport var buildTextureDataWithOneEdgeAttr = function buildTextureDataWithOneEdgeAttr(nodes, edges, attrs) {\n  var dataArray = [];\n  var nodeDict = [];\n  var mapIdPos = {};\n  var i = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n\n  for (i = 0; i < edges.length; i++) {\n    var e = edges[i];\n    nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n    nodeDict[mapIdPos[e.source]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n\n    nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n    nodeDict[mapIdPos[e.target]].push(attrs(e)); // 理想边长，后续可以改成每条边不同\n  }\n\n  var maxEdgePerVetex = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var offset = dataArray.length;\n    var dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n\n    var len = dests.length;\n    dataArray[i * 4 + 2] = offset;\n    dataArray[i * 4 + 3] = len / 2; // 第四位存储与该节点相关的所有节点个数\n\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 2);\n\n    for (var j = 0; j < len; ++j) {\n      var dest = dests[j];\n      dataArray.push(+dest);\n    }\n  } // 不是 4 的倍数，填充 0\n\n\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n\n  return {\n    array: new Float32Array(dataArray),\n    maxEdgePerVetex: maxEdgePerVetex\n  };\n};\n/**\n * 将节点和边数据转换为 GPU 可读的数组，每条边带有一个以上属性。并返回 maxEdgePerVetex，每个节点上最多的边数\n * @param  {NodeConfig[]}  nodes 节点数组\n * @param  {EdgeConfig[]}  edges 边数组\n * @param  {Function}  attrs 读取边属性的函数\n * @return {Object} 转换后的数组及 maxEdgePerVetex 组成的对象\n */\n\nexport var buildTextureDataWithTwoEdgeAttr = function buildTextureDataWithTwoEdgeAttr(nodes, edges, attrs1, attrs2) {\n  var dataArray = [];\n  var nodeDict = [];\n  var mapIdPos = {};\n  var i = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var n = nodes[i];\n    mapIdPos[n.id] = i;\n    dataArray.push(n.x);\n    dataArray.push(n.y);\n    dataArray.push(0);\n    dataArray.push(0);\n    nodeDict.push([]);\n  }\n\n  for (i = 0; i < edges.length; i++) {\n    var e = edges[i];\n    nodeDict[mapIdPos[e.source]].push(mapIdPos[e.target]);\n    nodeDict[mapIdPos[e.source]].push(attrs1(e));\n    nodeDict[mapIdPos[e.source]].push(attrs2(e));\n    nodeDict[mapIdPos[e.source]].push(0);\n    nodeDict[mapIdPos[e.target]].push(mapIdPos[e.source]);\n    nodeDict[mapIdPos[e.target]].push(attrs1(e));\n    nodeDict[mapIdPos[e.target]].push(attrs2(e));\n    nodeDict[mapIdPos[e.target]].push(0);\n  }\n\n  var maxEdgePerVetex = 0;\n\n  for (i = 0; i < nodes.length; i++) {\n    var offset = dataArray.length;\n    var dests = nodeDict[i]; // dest 中节点 id 与边长间隔存储，即一位节点 id，一位边长……\n\n    var len = dests.length; // dataArray[i * 4 + 2] = offset;\n    // dataArray[i * 4 + 3] = len / 4; // 第四位存储与该节点相关的所有节点个数\n    // pack offset & length into float32: offset 20bit, length 12bit\n\n    dataArray[i * 4 + 2] = offset + 1048576 * len / 4;\n    dataArray[i * 4 + 3] = 0; // 第四位存储与上一次的距离差值\n\n    maxEdgePerVetex = Math.max(maxEdgePerVetex, len / 4);\n\n    for (var j = 0; j < len; ++j) {\n      var dest = dests[j];\n      dataArray.push(+dest);\n    }\n  } // 不是 4 的倍数，填充 0\n\n\n  while (dataArray.length % 4 !== 0) {\n    dataArray.push(0);\n  }\n\n  return {\n    array: new Float32Array(dataArray),\n    maxEdgePerVetex: maxEdgePerVetex\n  };\n};\n/**\n * transform the extended attributes of nodes or edges to a texture array\n * @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n * @param  {ModelConfig[]}  items the items to be read\n * @return {Float32Array} the attributes' value array to be read by GPU\n */\n\nexport var attributesToTextureData = function attributesToTextureData(attributeNames, items) {\n  var dataArray = [];\n  var attributeNum = attributeNames.length;\n  var attributteStringMap = {};\n  items.forEach(function (item) {\n    attributeNames.forEach(function (name, i) {\n      if (attributteStringMap[item[name]] === undefined) {\n        attributteStringMap[item[name]] = Object.keys(attributteStringMap).length;\n      }\n\n      dataArray.push(attributteStringMap[item[name]]); // insure each node's attributes take inter number of grids\n\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  });\n  return {\n    array: new Float32Array(dataArray),\n    count: Object.keys(attributteStringMap).length\n  };\n};\n/**\n * transform the number array format of extended attributes of nodes or edges to a texture array\n * @param  {string[]}  attributeNames attributes' name to be read from items and put into output array\n * @return {Float32Array} the attributes' value array to be read by GPU\n */\n\nexport var arrayToTextureData = function arrayToTextureData(valueArrays) {\n  var dataArray = [];\n  var attributeNum = valueArrays.length;\n  var itemNum = valueArrays[0].length;\n\n  var _loop_1 = function _loop_1(j) {\n    valueArrays.forEach(function (valueArray, i) {\n      dataArray.push(valueArray[j]); // insure each node's attributes take inter number of grids\n\n      if (i === attributeNum - 1) {\n        while (dataArray.length % 4 !== 0) {\n          dataArray.push(0);\n        }\n      }\n    });\n  };\n\n  for (var j = 0; j < itemNum; j++) {\n    _loop_1(j);\n  }\n\n  return new Float32Array(dataArray);\n};\n/**\n *\n * @param data Tree graph data\n * @param layout\n */\n\nexport var radialLayout = function radialLayout(data, layout) {\n  // 布局方式有 H / V / LR / RL / TB / BT\n  var VERTICAL_LAYOUTS = ['V', 'TB', 'BT'];\n  var min = {\n    x: Infinity,\n    y: Infinity\n  };\n  var max = {\n    x: -Infinity,\n    y: -Infinity\n  }; // 默认布局是垂直布局TB，此时x对应rad，y对应r\n\n  var rScale = 'x';\n  var radScale = 'y';\n\n  if (layout && VERTICAL_LAYOUTS.indexOf(layout) >= 0) {\n    // 若是水平布局，y对应rad，x对应r\n    radScale = 'x';\n    rScale = 'y';\n  }\n\n  var count = 0;\n  traverseTree(data, function (node) {\n    count++;\n\n    if (node.x > max.x) {\n      max.x = node.x;\n    }\n\n    if (node.x < min.x) {\n      min.x = node.x;\n    }\n\n    if (node.y > max.y) {\n      max.y = node.y;\n    }\n\n    if (node.y < min.y) {\n      min.y = node.y;\n    }\n\n    return true;\n  });\n  var avgRad = Math.PI * 2 / count;\n  var radDiff = max[radScale] - min[radScale];\n\n  if (radDiff === 0) {\n    return data;\n  }\n\n  traverseTree(data, function (node) {\n    var radial = (node[radScale] - min[radScale]) / radDiff * (Math.PI * 2 - avgRad) + avgRad;\n    var r = Math.abs(rScale === 'x' ? node.x - data.x : node.y - data.y);\n    node.x = r * Math.cos(radial);\n    node.y = r * Math.sin(radial);\n    return true;\n  });\n  return data;\n};","map":null,"metadata":{},"sourceType":"module"}