{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { createToolbarConfig, uuidv4, XFlowGroupCommands, XFlowNodeCommands, XFlowGraphCommands, IconStore, MODELS } from '@antv/xflow';\nimport { getProps, Log, getGraphHistory, getGraphInstance } from '../../util';\nimport { UngroupOutlined, SaveOutlined, GroupOutlined, GatewayOutlined, UndoOutlined, RedoOutlined, VerticalAlignTopOutlined, VerticalAlignBottomOutlined, CopyOutlined, SnippetsOutlined } from '@ant-design/icons';\nimport { GROUP_NODE_RENDER_ID } from '../group-panel';\nimport { CommandPool } from './constants';\nexport var TOOLBAR_ITEMS;\n\n(function (TOOLBAR_ITEMS) {\n  TOOLBAR_ITEMS.BACK_NODE = XFlowNodeCommands.BACK_NODE.id;\n  TOOLBAR_ITEMS.FRONT_NODE = XFlowNodeCommands.FRONT_NODE.id;\n  TOOLBAR_ITEMS.SAVE_GRAPH_DATA = XFlowGraphCommands.SAVE_GRAPH_DATA.id;\n  TOOLBAR_ITEMS.REDO_CMD = \"\".concat(XFlowGraphCommands.REDO_CMD.id);\n  TOOLBAR_ITEMS.UNDO_CMD = \"\".concat(XFlowGraphCommands.UNDO_CMD.id);\n  TOOLBAR_ITEMS.MULTI_SELECT = \"\".concat(XFlowGraphCommands.GRAPH_TOGGLE_MULTI_SELECT.id);\n  TOOLBAR_ITEMS.ADD_GROUP = \"\".concat(XFlowGroupCommands.ADD_GROUP.id);\n  TOOLBAR_ITEMS.DEL_GROUP = \"\".concat(XFlowGroupCommands.DEL_GROUP.id);\n  TOOLBAR_ITEMS.COPY = \"\".concat(XFlowGraphCommands.GRAPH_COPY.id);\n  TOOLBAR_ITEMS.PASTE = \"\".concat(XFlowGraphCommands.GRAPH_PASTE.id);\n})(TOOLBAR_ITEMS || (TOOLBAR_ITEMS = {}));\n\nvar NSToolbarConfig;\n\n(function (NSToolbarConfig) {\n  var _this = this;\n\n  NSToolbarConfig.getDependencies = function (modelService) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , MODELS.SELECTED_NODES.getModel(modelService)];\n\n          case 1:\n            _a = [_b.sent()];\n            return [4\n            /*yield*/\n            , MODELS.GRAPH_ENABLE_MULTI_SELECT.getModel(modelService)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.concat([_b.sent()])];\n        }\n      });\n    });\n  };\n  /** toolbar依赖的状态 */\n\n\n  NSToolbarConfig.getToolbarState = function (modelService) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var isMultiSelctionActive, isGroupSelected, isNormalNodesSelected, isUndoable, isRedoable;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , MODELS.GRAPH_ENABLE_MULTI_SELECT.useValue(modelService)];\n\n          case 1:\n            isMultiSelctionActive = _a.sent().isEnable;\n            return [4\n            /*yield*/\n            , MODELS.IS_GROUP_SELECTED.useValue(modelService)];\n\n          case 2:\n            isGroupSelected = _a.sent();\n            return [4\n            /*yield*/\n            , MODELS.IS_NORMAL_NODES_SELECTED.useValue(modelService)];\n\n          case 3:\n            isNormalNodesSelected = _a.sent();\n            return [4\n            /*yield*/\n            , MODELS.COMMAND_UNDOABLE.useValue(modelService)];\n\n          case 4:\n            isUndoable = _a.sent();\n            return [4\n            /*yield*/\n            , MODELS.COMMAND_REDOABLE.useValue(modelService)];\n\n          case 5:\n            isRedoable = _a.sent();\n            return [2\n            /*return*/\n            , {\n              isUndoable: isUndoable,\n              isRedoable: isRedoable,\n              isNodeSelected: isNormalNodesSelected,\n              isGroupSelected: isGroupSelected,\n              isMultiSelctionActive: isMultiSelctionActive\n            }];\n        }\n      });\n    });\n  };\n\n  NSToolbarConfig.getToolbarItems = function (state, getIconConfig, commands, flowchartId) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var toolbarGroup, history, graph, selectedCells;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        toolbarGroup = [];\n        history = getGraphHistory(flowchartId);\n        graph = getGraphInstance(flowchartId);\n        selectedCells = graph.getSelectedCells();\n        /** 撤销 */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.UNDO_CMD)), {\n          id: TOOLBAR_ITEMS.UNDO_CMD,\n          isEnabled: history.canUndo(),\n          onClick: function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                history.undo();\n                return [2\n                /*return*/\n                ];\n              });\n            });\n          }\n        }));\n        /** 重做 */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.REDO_CMD)), {\n          id: TOOLBAR_ITEMS.REDO_CMD,\n          isEnabled: history.canRedo(),\n          onClick: function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                history.redo();\n                return [2\n                /*return*/\n                ];\n              });\n            });\n          }\n        }));\n        /** FRONT_NODE */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.FRONT_NODE)), {\n          id: TOOLBAR_ITEMS.FRONT_NODE,\n          isEnabled: state.isNodeSelected,\n          onClick: function (_a) {\n            var commandService = _a.commandService,\n                modelService = _a.modelService;\n            return __awaiter(_this, void 0, void 0, function () {\n              var node;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , MODELS.SELECTED_NODE.useValue(modelService)];\n\n                  case 1:\n                    node = _b.sent();\n                    commandService.executeCommand(TOOLBAR_ITEMS.FRONT_NODE, {\n                      nodeId: node === null || node === void 0 ? void 0 : node.id\n                    });\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }\n        }));\n        /** BACK_NODE */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.BACK_NODE)), {\n          id: TOOLBAR_ITEMS.BACK_NODE,\n          isEnabled: state.isNodeSelected,\n          onClick: function (_a) {\n            var commandService = _a.commandService,\n                modelService = _a.modelService;\n            return __awaiter(_this, void 0, void 0, function () {\n              var node;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , MODELS.SELECTED_NODE.useValue(modelService)];\n\n                  case 1:\n                    node = _b.sent();\n                    commandService.executeCommand(TOOLBAR_ITEMS.BACK_NODE, {\n                      nodeId: node === null || node === void 0 ? void 0 : node.id\n                    });\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }\n        }));\n        /** 开启框选 */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.MULTI_SELECT)), {\n          id: TOOLBAR_ITEMS.MULTI_SELECT,\n          active: state.isMultiSelctionActive,\n          onClick: function (_a) {\n            var commandService = _a.commandService;\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_b) {\n                commandService.executeCommand(TOOLBAR_ITEMS.MULTI_SELECT, {});\n                return [2\n                /*return*/\n                ];\n              });\n            });\n          }\n        }));\n        /** 新建群组 */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.ADD_GROUP)), {\n          id: TOOLBAR_ITEMS.ADD_GROUP,\n          isEnabled: state.isNodeSelected,\n          onClick: function (_a) {\n            var commandService = _a.commandService,\n                modelService = _a.modelService;\n            return __awaiter(_this, void 0, void 0, function () {\n              var cells, groupChildren;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , MODELS.SELECTED_CELLS.useValue(modelService)];\n\n                  case 1:\n                    cells = _b.sent();\n                    groupChildren = cells.map(function (cell) {\n                      return cell.id;\n                    });\n                    commandService.executeCommand(TOOLBAR_ITEMS.ADD_GROUP, {\n                      nodeConfig: {\n                        id: uuidv4(),\n                        renderKey: GROUP_NODE_RENDER_ID,\n                        groupChildren: groupChildren,\n                        groupCollapsedSize: {\n                          width: 200,\n                          height: 40\n                        },\n                        label: '新建群组'\n                      }\n                    });\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }\n        }));\n        /** 解散群组 */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.DEL_GROUP)), {\n          id: TOOLBAR_ITEMS.DEL_GROUP,\n          isEnabled: state.isGroupSelected,\n          onClick: function (_a) {\n            var commandService = _a.commandService,\n                modelService = _a.modelService;\n            return __awaiter(_this, void 0, void 0, function () {\n              var cell, nodeConfig;\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , MODELS.SELECTED_NODE.useValue(modelService)];\n\n                  case 1:\n                    cell = _b.sent();\n                    nodeConfig = cell.getData();\n                    commandService.executeCommand(XFlowGroupCommands.DEL_GROUP.id, {\n                      nodeConfig: nodeConfig\n                    });\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }\n        }));\n        /** copy */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.COPY)), {\n          id: TOOLBAR_ITEMS.COPY,\n          isEnabled: !!(selectedCells === null || selectedCells === void 0 ? void 0 : selectedCells.length),\n          onClick: function (_a) {\n            var commandService = _a.commandService;\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_b) {\n                commandService.executeCommand(XFlowGraphCommands.GRAPH_COPY.id, {});\n                return [2\n                /*return*/\n                ];\n              });\n            });\n          }\n        }));\n        /** paste */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.PASTE)), {\n          id: CommandPool.PASTE,\n          isEnabled: true,\n          onClick: function (_a) {\n            var commandService = _a.commandService;\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_b) {\n                commandService.executeCommand(XFlowGraphCommands.GRAPH_PASTE.id, {});\n                return [2\n                /*return*/\n                ];\n              });\n            });\n          }\n        }));\n        /** 保存数据 */\n\n        toolbarGroup.push(__assign(__assign({}, getIconConfig(CommandPool.SAVE_GRAPH_DATA)), {\n          id: TOOLBAR_ITEMS.SAVE_GRAPH_DATA,\n          onClick: function (_a) {\n            var commandService = _a.commandService;\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_b) {\n                commandService.executeCommand(TOOLBAR_ITEMS.SAVE_GRAPH_DATA, {\n                  saveGraphDataService: function (meta, graphData) {\n                    var onSave = getProps(flowchartId, 'onSave');\n\n                    if (onSave) {\n                      return onSave(graphData);\n                    }\n                  }\n                });\n                return [2\n                /*return*/\n                ];\n              });\n            });\n          }\n        }));\n        return [2\n        /*return*/\n        , [{\n          name: 'graphData',\n          items: toolbarGroup.filter(function (item) {\n            return !!(item === null || item === void 0 ? void 0 : item.iconName);\n          }).sort(function (pre, next) {\n            return commands.findIndex(function (item) {\n              return item.command === pre.command;\n            }) - commands.findIndex(function (item) {\n              return item.command === next.command;\n            });\n          })\n        }]];\n      });\n    });\n  };\n})(NSToolbarConfig || (NSToolbarConfig = {}));\n/** 注册icon 类型 */\n\n\nvar registerIcon = function () {\n  IconStore.set('SaveOutlined', SaveOutlined);\n  IconStore.set('UndoOutlined', UndoOutlined);\n  IconStore.set('RedoOutlined', RedoOutlined);\n  IconStore.set('VerticalAlignTopOutlined', VerticalAlignTopOutlined);\n  IconStore.set('VerticalAlignBottomOutlined', VerticalAlignBottomOutlined);\n  IconStore.set('GatewayOutlined', GatewayOutlined);\n  IconStore.set('GroupOutlined', GroupOutlined);\n  IconStore.set('UngroupOutlined', UngroupOutlined);\n  IconStore.set('CopyOutlined', CopyOutlined);\n  IconStore.set('SnippetsOutlined', SnippetsOutlined);\n};\n\nexport var useToolbarConfig = createToolbarConfig(function (toolbarConfig, proxy) {\n  var _a;\n\n  var flowchartId = proxy.getValue().flowchartId;\n  var toolbarPanelProps = (_a = getProps(flowchartId, 'toolbarPanelProps')) !== null && _a !== void 0 ? _a : {};\n  registerIcon();\n  var _b = toolbarPanelProps.commands,\n      commands = _b === void 0 ? [{\n    command: CommandPool.REDO_CMD,\n    tooltip: '重做',\n    iconName: 'RedoOutlined'\n  }, {\n    command: CommandPool.UNDO_CMD,\n    tooltip: '撤销',\n    iconName: 'UndoOutlined'\n  }, {\n    command: CommandPool.FRONT_NODE,\n    tooltip: '置前',\n    iconName: 'VerticalAlignTopOutlined'\n  }, {\n    command: CommandPool.BACK_NODE,\n    tooltip: '置后',\n    iconName: 'VerticalAlignBottomOutlined'\n  }, {\n    command: CommandPool.MULTI_SELECT,\n    tooltip: '开启框选',\n    iconName: 'GatewayOutlined'\n  }, {\n    command: CommandPool.ADD_GROUP,\n    tooltip: '新建群组',\n    iconName: 'GroupOutlined'\n  }, {\n    command: CommandPool.DEL_GROUP,\n    tooltip: '解散群组',\n    iconName: 'UngroupOutlined'\n  }, {\n    command: CommandPool.COPY,\n    tooltip: '复制',\n    iconName: 'CopyOutlined'\n  }, {\n    command: CommandPool.PASTE,\n    tooltip: '粘贴',\n    iconName: 'SnippetsOutlined'\n  }, {\n    command: CommandPool.SAVE_GRAPH_DATA,\n    tooltip: '保存',\n    iconName: 'SaveOutlined'\n  }] : _b;\n\n  var getIconConfig = function (commandName) {\n    if (!Object.values(CommandPool).includes(commandName)) {\n      Log.warn(\"unknown command: \".concat(commandName));\n      return {};\n    }\n    /** 暂时不支持自定义 icon，感觉使用上并不方便，后续再考虑接入 */\n\n\n    return commands.find(function (item) {\n      return item.command === commandName;\n    });\n  };\n  /** 生产 toolbar item */\n\n\n  toolbarConfig.setToolbarModelService(function (toolbarModel, modelService, toDispose) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var updateToolbarModel, models, subscriptions;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            updateToolbarModel = function () {\n              return __awaiter(void 0, void 0, void 0, function () {\n                var state, toolbarItems;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , NSToolbarConfig.getToolbarState(modelService)];\n\n                    case 1:\n                      state = _a.sent();\n                      return [4\n                      /*yield*/\n                      , NSToolbarConfig.getToolbarItems(state, getIconConfig, commands, flowchartId)];\n\n                    case 2:\n                      toolbarItems = _a.sent();\n                      toolbarModel.setValue(function (toolbar) {\n                        toolbar.mainGroups = toolbarItems;\n                      });\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            };\n\n            return [4\n            /*yield*/\n            , NSToolbarConfig.getDependencies(modelService)];\n\n          case 1:\n            models = _a.sent();\n            subscriptions = models.map(function (model) {\n              return model.watch(function () {\n                return __awaiter(void 0, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    updateToolbarModel();\n                    return [2\n                    /*return*/\n                    ];\n                  });\n                });\n              });\n            });\n            toDispose.pushAll(subscriptions);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"module"}