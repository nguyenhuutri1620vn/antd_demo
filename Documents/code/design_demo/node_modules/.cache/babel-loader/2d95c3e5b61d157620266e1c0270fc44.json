{"ast":null,"code":"import { __awaiter, __decorate, __metadata, __param } from \"tslib\";\nimport { contrib, Contribution, singleton } from 'mana-syringe';\nimport { RxModel } from '../common/rx-model';\nimport { Disposable, DisposableCollection } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IGraphCommandService, IGraphCommandContribution } from './interface';\nimport 'reflect-metadata';\nexport var NCommand;\n\n(function (NCommand) {\n  /* Determine whether object is a Command */\n  function is(arg) {\n    return !!arg && arg === Object(arg) && 'id' in arg;\n  }\n\n  NCommand.is = is;\n  /** Comparator function for when sorting commands */\n\n  function compareCommands(a, b) {\n    if (a.label && b.label) {\n      const aCommand = (a.category ? `${a.category}: ${a.label}` : a.label).toLowerCase();\n      const bCommand = (b.category ? `${b.category}: ${b.label}` : b.label).toLowerCase();\n      return aCommand.localeCompare(bCommand);\n    } else {\n      return 0;\n    }\n  }\n\n  NCommand.compareCommands = compareCommands;\n  /**\n   * Determine if two commands are equal.\n   *\n   * @param a the first command for comparison.\n   * @param b the second command for comparison.\n   */\n\n  function equals(a, b) {\n    return a.id === b.id && a.label === b.label && a.iconName === b.iconName && a.category === b.category;\n  }\n\n  NCommand.equals = equals;\n})(NCommand || (NCommand = {}));\n\nlet GraphCommandRegistry = class GraphCommandRegistry {\n  constructor(contributionProvider) {\n    this.contributionProvider = contributionProvider;\n    /**\n     * undo cmd后将命令存储在队列中给redo调用\n     */\n\n    this.redoStack = [];\n    /**\n     * executeCommand后将命令存储在队列中给undo调用\n     */\n\n    this.undoStack = [];\n    /**\n     * 储存所有注册的command\n     */\n\n    this.commands = new Map();\n    /**\n     * 储存所有注册的command factory\n     */\n\n    this.factories = new Map();\n    /**\n     * 储存所有注册的command handler disposables\n     */\n\n    this.disposables = new Map();\n    /**\n     * 监听cmdregistry的变化\n     */\n\n    this.cmdChangeEvent = new RxModel(null);\n    /**\n     * 在Command实例间共享变量\n     */\n\n    this.Globals = new RxModel(new Map());\n    /** 设置command间的共享变量 */\n\n    this.setGlobal = (key, value) => {\n      this.Globals.setValue(map => {\n        map.set(key, value);\n      });\n    };\n    /** 获取共享变量 */\n\n\n    this.getGlobal = key => {\n      const map = this.Globals.getValue();\n      return map.get(key);\n    };\n    /**\n     * 执行undo stack中最后一条Command\n     */\n\n\n    this.undoCommand = () => __awaiter(this, void 0, void 0, function* () {\n      /* 获取可以undo的Command */\n      const cmd = this.undoStack.pop();\n\n      if (!cmd) {\n        console.error('empty undo stack');\n        return;\n      }\n      /* 执行命令的undo方法 */\n\n\n      yield cmd.undo();\n      /* 执行后塞到redo的栈中 */\n\n      this.redoStack.push(cmd);\n      /* 触发事件回调 */\n\n      this.cmdChangeEvent.setValue(null);\n    });\n    /**\n     * 执行redo stack中最后一条Command\n     */\n\n\n    this.redoCommand = () => __awaiter(this, void 0, void 0, function* () {\n      /* 获取可以redo的Command */\n      const cmd = this.redoStack.pop();\n\n      if (!cmd) {\n        console.error('empty undo stack');\n        return;\n      }\n      /* 执行命令的undo */\n\n\n      yield cmd.redo();\n      /* 执行后塞到undo的栈中 */\n\n      this.undoStack.push(cmd);\n      /* 触发事件回调 */\n\n      this.cmdChangeEvent.setValue(null);\n    });\n    /**\n     * 注册一批可单独dispose的Command\n     * @param externalRegisterFn ICommandRegisterFunction\n     */\n\n\n    this.registerDisposableCommand = externalRegisterFn => {\n      const toDispose = new DisposableCollection();\n      const disposableRegistry = {\n        registerCommand: (command, factory) => {\n          const disposable = this.registerCommand(command, factory);\n          toDispose.push(disposable);\n          return disposable;\n        }\n      };\n      externalRegisterFn(disposableRegistry);\n      return toDispose;\n    };\n  }\n  /**\n   * 监听cmdregistry的变化\n   */\n\n\n  get watchChange() {\n    return this.cmdChangeEvent.watch;\n  }\n\n  onStart() {\n    const contributions = this.contributionProvider.getContributions();\n\n    for (const contribItem of contributions) {\n      contribItem.registerGraphCommands(this);\n    }\n  }\n\n  executeCommandPipeline(cmdOptions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let res = null;\n\n      for (const cmdOption of cmdOptions) {\n        const cmdCtx = res === null || res === void 0 ? void 0 : res.contextProvider();\n        const {\n          args,\n          hooks\n        } = yield cmdOption === null || cmdOption === void 0 ? void 0 : cmdOption.getCommandOption(cmdCtx);\n        res = yield this.executeCommand(cmdOption === null || cmdOption === void 0 ? void 0 : cmdOption.commandId, args, hooks);\n      }\n      /* 触发事件回调 */\n\n\n      this.cmdChangeEvent.setValue(null);\n      return res;\n    });\n  }\n  /** 执行 Command：会在undo stack中push cmd */\n\n\n  executeCommand(commandId, cmdArgs) {\n    let hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return __awaiter(this, void 0, void 0, function* () {\n      const factory = this.getFactory(commandId);\n\n      if (factory) {\n        const cmd = yield factory.createCommand(commandId, cmdArgs, hook);\n        yield cmd.execute();\n\n        if (cmd.isUndoable()) {\n          this.undoStack.push(cmd);\n        }\n        /* 触发事件回调 */\n\n\n        this.cmdChangeEvent.setValue(null);\n        return cmd;\n      }\n\n      throw Object.assign(new Error(`The command '${commandId}' cannot be executed. There are no active handlers available for the command.`), {\n        code: 'NO_ACTIVE_HANDLER'\n      });\n    });\n  }\n  /** 执行 unod Command：不会在undo stack中push新的command记录 */\n\n\n  executeUndoCommand(commandId, cmdArgs) {\n    let hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return __awaiter(this, void 0, void 0, function* () {\n      const factory = this.getFactory(commandId);\n\n      if (factory) {\n        const cmd = yield factory.createCommand(commandId, cmdArgs, hook);\n        yield cmd.execute();\n        return cmd;\n      }\n\n      throw Object.assign(new Error(`The command '${commandId}' cannot be executed. There are no active handlers available for the command.`), {\n        code: 'NO_ACTIVE_HANDLER'\n      });\n    });\n  }\n  /**\n   * Execute the active handler for the given command and arguments.\n   *\n   * Reject if a command cannot be executed.\n   */\n\n\n  createCommand(commandId, cmdArgs) {\n    let hook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return __awaiter(this, void 0, void 0, function* () {\n      const factory = this.getFactory(commandId);\n\n      if (factory) {\n        const cmd = yield factory.createCommand(commandId, cmdArgs, hook);\n        return cmd;\n      }\n\n      throw Object.assign(new Error(`The command '${commandId}' cannot be executed. There are no active handlers available for the command.`), {\n        code: 'NO_ACTIVE_HANDLER'\n      });\n    });\n  }\n  /**\n   * 检查是否注册了Command\n   */\n\n\n  get isUndoable() {\n    return this.undoStack.length > 0;\n  }\n  /**\n   * 检查是否注册了Command\n   */\n\n\n  get isRedoable() {\n    return this.redoStack.length > 0;\n  }\n  /**\n   * 检查是否注册了Command\n   */\n\n\n  hasCommand(commandId) {\n    return this.commands.has(commandId);\n  }\n  /**\n   * Get a command for the given command identifier.\n   */\n\n\n  getCommand(id) {\n    return this.commands.get(id);\n  }\n  /**\n   * Register the given command and handler if present.\n   *\n   * Throw if a command is already registered for the given command identifier.\n   */\n\n\n  registerCommand(command, factory) {\n    if (this.factories.has(command.id)) {\n      console.warn(`A command ${command.id} is already registered.`);\n      return Disposable.NULL;\n    }\n\n    const toDispose = new DisposableCollection(this.doRegisterCommand(command), this.registerFactory(command.id, factory), Disposable.create(() => this.disposables.delete(command.id)));\n    this.disposables.set(command.id, toDispose);\n    return toDispose;\n  }\n\n  doRegisterCommand(command) {\n    this.commands.set(command.id, command);\n    return Disposable.create(() => this.disposables.delete(command.id));\n  }\n  /**\n   * Unregister command from the registry\n   *\n   * @param id\n   */\n\n\n  unregisterCommand(commandOrId) {\n    const id = NCommand.is(commandOrId) ? commandOrId.id : commandOrId;\n    const disposableCmd = this.disposables.get(id);\n\n    if (disposableCmd) {\n      disposableCmd.dispose();\n    }\n  }\n  /**\n   * 检查commandId是否有Factory\n   */\n\n\n  hasFactory(commandId) {\n    const factory = this.factories.get(commandId);\n    return !!factory;\n  }\n  /**\n   * Get a visible handler for the given command or `undefined`.\n   */\n\n\n  getFactory(commandId) {\n    const factory = this.factories.get(commandId);\n    return factory;\n  }\n  /**\n   * Register the given handler for the given command identifier.\n   *\n   * If there is already a handler for the given command\n   * then the given handler is registered as more specific, and\n   * has higher priority during enablement, visibility and toggle state evaluations.\n   */\n\n\n  registerFactory(commandId, factory) {\n    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.hasFactory(commandId) && force === false) {\n      console.error('cannot register command:', commandId);\n    }\n\n    this.factories.set(commandId, factory);\n    return Disposable.create(() => {\n      this.factories.delete(commandId);\n    });\n  }\n  /**\n   * Returns with all handlers for the given command. If the command does not have any handlers,\n   * or the command is not registered, returns an empty array.\n   */\n\n\n  getAllFactories() {\n    return Array.from(this.factories.entries());\n  }\n\n};\nGraphCommandRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IGraphCommandService]\n}), __param(0, contrib(IGraphCommandContribution)), __metadata(\"design:paramtypes\", [Object])], GraphCommandRegistry);\nexport { GraphCommandRegistry };","map":null,"metadata":{},"sourceType":"module"}