{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _dec, _class;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\nvar RenderPass = (_dec = injectable(), _dec(_class = function (_BaseNormalPass) {\n  _inherits(RenderPass, _BaseNormalPass);\n\n  var _super = _createSuper(RenderPass);\n\n  function RenderPass() {\n    _classCallCheck(this, RenderPass);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RenderPass, [{\n    key: \"getType\",\n    value: function getType() {\n      return PassType.Normal;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'render';\n    }\n  }, {\n    key: \"init\",\n    value: function init(layer, config) {\n      _get(_getPrototypeOf(RenderPass.prototype), \"init\", this).call(this, layer, config);\n    }\n  }, {\n    key: \"render\",\n    value: function render(layer) {\n      var _this$rendererService = this.rendererService,\n          useFramebuffer = _this$rendererService.useFramebuffer,\n          clear = _this$rendererService.clear;\n      var readFBO = layer.multiPassRenderer.getPostProcessor().getReadFBO();\n      useFramebuffer(readFBO, function () {\n        clear({\n          color: [0, 0, 0, 0],\n          depth: 1,\n          stencil: 0,\n          framebuffer: readFBO\n        });\n        layer.multiPassRenderer.setRenderFlag(false);\n        layer.models.forEach(function (model) {\n          model.draw({\n            uniforms: layer.layerModel.getUninforms()\n          });\n        });\n        layer.multiPassRenderer.setRenderFlag(true);\n      });\n    }\n  }]);\n\n  return RenderPass;\n}(BaseNormalPass)) || _class);\nexport { RenderPass as default };","map":null,"metadata":{},"sourceType":"module"}