{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _dec, _class;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { decodePickingColor, DOM, encodePickingColor } from '@antv/l7-utils';\nimport { injectable } from 'inversify';\nimport 'reflect-metadata';\nimport { InteractionEvent } from '../../interaction/IInteractionService';\nimport { gl } from '../gl';\nimport { PassType } from '../IMultiPassRenderer';\nimport BaseNormalPass from './BaseNormalPass';\nvar PixelPickingPass = (_dec = injectable(), _dec(_class = function (_BaseNormalPass) {\n  _inherits(PixelPickingPass, _BaseNormalPass);\n\n  var _super = _createSuper(PixelPickingPass);\n\n  function PixelPickingPass() {\n    var _this;\n\n    _classCallCheck(this, PixelPickingPass);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"pickingFBO\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layer\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"width\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"height\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"alreadyInRendering\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"pickFromPickingFBO\", function (_ref) {\n      var x = _ref.x,\n          y = _ref.y,\n          lngLat = _ref.lngLat,\n          type = _ref.type;\n\n      if (!_this.layer.isVisible() || !_this.layer.needPick(type)) {\n        return;\n      }\n\n      var _this$rendererService = _this.rendererService,\n          getViewportSize = _this$rendererService.getViewportSize,\n          readPixels = _this$rendererService.readPixels,\n          useFramebuffer = _this$rendererService.useFramebuffer;\n\n      var _getViewportSize = getViewportSize(),\n          width = _getViewportSize.width,\n          height = _getViewportSize.height;\n\n      var _this$layer$getLayerC = _this.layer.getLayerConfig(),\n          enableHighlight = _this$layer$getLayerC.enableHighlight,\n          enableSelect = _this$layer$getLayerC.enableSelect;\n\n      var xInDevicePixel = x * DOM.DPR;\n      var yInDevicePixel = y * DOM.DPR;\n\n      if (xInDevicePixel > width || xInDevicePixel < 0 || yInDevicePixel > height || yInDevicePixel < 0) {\n        return;\n      }\n\n      var pickedColors;\n      useFramebuffer(_this.pickingFBO, function () {\n        var _pickedColors;\n\n        pickedColors = readPixels({\n          x: Math.round(xInDevicePixel),\n          y: Math.round(height - (y + 1) * DOM.DPR),\n          width: 1,\n          height: 1,\n          data: new Uint8Array(1 * 1 * 4),\n          framebuffer: _this.pickingFBO\n        });\n\n        if (pickedColors[0] !== 0 || pickedColors[1] !== 0 || pickedColors[2] !== 0) {\n          var pickedFeatureIdx = decodePickingColor(pickedColors);\n\n          var rawFeature = _this.layer.getSource().getFeatureById(pickedFeatureIdx);\n\n          var target = {\n            x: x,\n            y: y,\n            type: type,\n            lngLat: lngLat,\n            featureId: pickedFeatureIdx,\n            feature: rawFeature\n          };\n\n          if (!rawFeature) {} else {\n            _this.layer.setCurrentPickId(pickedFeatureIdx);\n\n            _this.triggerHoverOnLayer(target);\n          }\n        } else {\n          var _target = {\n            x: x,\n            y: y,\n            lngLat: lngLat,\n            type: _this.layer.getCurrentPickId() === null ? 'un' + type : 'mouseout',\n            featureId: null,\n            feature: null\n          };\n\n          _this.triggerHoverOnLayer(_objectSpread(_objectSpread({}, _target), {}, {\n            type: 'unpick'\n          }));\n\n          _this.triggerHoverOnLayer(_target);\n\n          _this.layer.setCurrentPickId(null);\n        }\n\n        if (enableHighlight) {\n          _this.highlightPickedFeature(pickedColors);\n        }\n\n        if (enableSelect && type === 'click' && ((_pickedColors = pickedColors) === null || _pickedColors === void 0 ? void 0 : _pickedColors.toString()) !== [0, 0, 0, 0].toString()) {\n          _this.selectFeature(pickedColors);\n        }\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(PixelPickingPass, [{\n    key: \"getType\",\n    value: function getType() {\n      return PassType.Normal;\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return 'pixelPicking';\n    }\n  }, {\n    key: \"init\",\n    value: function init(layer, config) {\n      _get(_getPrototypeOf(PixelPickingPass.prototype), \"init\", this).call(this, layer, config);\n\n      this.layer = layer;\n      var _this$rendererService2 = this.rendererService,\n          createTexture2D = _this$rendererService2.createTexture2D,\n          createFramebuffer = _this$rendererService2.createFramebuffer,\n          getViewportSize = _this$rendererService2.getViewportSize;\n\n      var _getViewportSize2 = getViewportSize(),\n          width = _getViewportSize2.width,\n          height = _getViewportSize2.height;\n\n      this.pickingFBO = createFramebuffer({\n        color: createTexture2D({\n          width: width,\n          height: height,\n          wrapS: gl.CLAMP_TO_EDGE,\n          wrapT: gl.CLAMP_TO_EDGE\n        })\n      });\n      this.interactionService.on(InteractionEvent.Hover, this.pickFromPickingFBO);\n      this.interactionService.on(InteractionEvent.Select, this.selectFeatureHandle.bind(this));\n      this.interactionService.on(InteractionEvent.Active, this.highlightFeatureHandle.bind(this));\n    }\n  }, {\n    key: \"render\",\n    value: function render(layer) {\n      var _this2 = this;\n\n      if (this.alreadyInRendering) {\n        return;\n      }\n\n      var _this$rendererService3 = this.rendererService,\n          getViewportSize = _this$rendererService3.getViewportSize,\n          useFramebuffer = _this$rendererService3.useFramebuffer,\n          clear = _this$rendererService3.clear;\n\n      var _getViewportSize3 = getViewportSize(),\n          width = _getViewportSize3.width,\n          height = _getViewportSize3.height;\n\n      this.alreadyInRendering = true;\n\n      if (this.width !== width || this.height !== height) {\n        this.pickingFBO.resize({\n          width: width,\n          height: height\n        });\n        this.width = width;\n        this.height = height;\n      }\n\n      useFramebuffer(this.pickingFBO, function () {\n        clear({\n          framebuffer: _this2.pickingFBO,\n          color: [0, 0, 0, 0],\n          stencil: 0,\n          depth: 1\n        });\n\n        var originRenderFlag = _this2.layer.multiPassRenderer.getRenderFlag();\n\n        _this2.layer.multiPassRenderer.setRenderFlag(false);\n\n        layer.hooks.beforePickingEncode.call();\n        layer.render();\n        layer.hooks.afterPickingEncode.call();\n\n        _this2.layer.multiPassRenderer.setRenderFlag(originRenderFlag);\n\n        _this2.alreadyInRendering = false;\n      });\n    }\n  }, {\n    key: \"triggerHoverOnLayer\",\n    value: function triggerHoverOnLayer(target) {\n      this.layer.emit(target.type, target);\n    }\n  }, {\n    key: \"highlightPickedFeature\",\n    value: function highlightPickedFeature(pickedColors) {\n      var _pickedColors2 = _slicedToArray(pickedColors, 3),\n          r = _pickedColors2[0],\n          g = _pickedColors2[1],\n          b = _pickedColors2[2];\n\n      this.layer.hooks.beforeHighlight.call([r, g, b]);\n      this.layerService.renderLayers();\n    }\n  }, {\n    key: \"selectFeature\",\n    value: function selectFeature(pickedColors) {\n      var _pickedColors3 = _slicedToArray(pickedColors, 3),\n          r = _pickedColors3[0],\n          g = _pickedColors3[1],\n          b = _pickedColors3[2];\n\n      this.layer.hooks.beforeSelect.call([r, g, b]);\n      this.layerService.renderLayers();\n    }\n  }, {\n    key: \"selectFeatureHandle\",\n    value: function selectFeatureHandle(_ref2) {\n      var featureId = _ref2.featureId;\n      var pickedColors = encodePickingColor(featureId);\n      this.selectFeature(new Uint8Array(pickedColors));\n    }\n  }, {\n    key: \"highlightFeatureHandle\",\n    value: function highlightFeatureHandle(_ref3) {\n      var featureId = _ref3.featureId;\n      var pickedColors = encodePickingColor(featureId);\n      this.highlightPickedFeature(new Uint8Array(pickedColors));\n    }\n  }]);\n\n  return PixelPickingPass;\n}(BaseNormalPass)) || _class);\nexport { PixelPickingPass as default };","map":null,"metadata":{},"sourceType":"module"}