{"ast":null,"code":"import { __awaiter } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport 'reflect-metadata';\nimport { Contribution, Module, Syringe } from 'mana-syringe';\nimport { ModelRegistry } from './model-registry';\n/**  model service 扩展  */\n\nimport { IModelContribution, IModelOptionProvider } from './interface';\nimport { CommandModelContribution } from './contributions/command-model';\nimport { GraphModelContribution } from './contributions/graph-model';\n/** 模块 */\n\nexport const modelServiceModule = Module(register => {\n  /** 注册 IModelService Contribution */\n  Contribution.register(register, IModelContribution);\n  /** 注册 ModelRegistry 到 IFrontendApplicationContribution  */\n\n  /** 注册 ModelRegistry alias IModelService Service */\n\n  register(ModelRegistry);\n  /** 注册 Graph 相关的ModelService  */\n\n  register(GraphModelContribution);\n  /** 注册 Command 相关的ModelService  */\n\n  register(CommandModelContribution);\n});\nexport const registerModelServiceConfig = (register, config) => {\n  register({\n    token: IModelOptionProvider,\n    useDynamic: () => {\n      return {\n        getOption: () => __awaiter(void 0, void 0, void 0, function* () {\n          return config.getConfig();\n        })\n      };\n    },\n    lifecycle: Syringe.Lifecycle.singleton\n  });\n};\n/** 组件的 config 模块，必须要加载 */\n\nexport const createModule = config => {\n  return Module(register => {\n    /** 绑定 ModelService  配置 */\n    registerModelServiceConfig(register, config);\n  });\n};","map":null,"metadata":{},"sourceType":"module"}