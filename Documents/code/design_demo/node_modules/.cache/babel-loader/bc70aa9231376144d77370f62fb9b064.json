{"ast":null,"code":"import { ObjectExt, FunctionExt } from '../../util';\nimport { Rectangle } from '../../geometry';\nimport { Widget, Handle } from '../common';\nimport { NodePreset } from './node-preset';\nimport { EdgePreset } from './edge-preset';\nexport class Halo extends Widget {\n  get type() {\n    return this.options.type || 'surround';\n  }\n\n  get handleOptions() {\n    return this.options;\n  }\n\n  init(options) {\n    this.options = ObjectExt.merge(Halo.defaultOptions, this.cell.isNode() ? new NodePreset(this).getPresets() : this.cell.isEdge() ? new EdgePreset(this).getPresets() : null, options);\n    this.render();\n    this.initHandles();\n    this.update();\n    this.startListening();\n  }\n\n  startListening() {\n    const model = this.model;\n    const graph = this.graph;\n    const cell = this.view.cell;\n    cell.on('removed', this.remove, this);\n    model.on('reseted', this.remove, this);\n    graph.on('halo:destroy', this.remove, this);\n    model.on('*', this.update, this);\n    graph.on('scale', this.update, this);\n    graph.on('translate', this.update, this);\n    super.startListening();\n  }\n\n  stopListening() {\n    const model = this.model;\n    const graph = this.graph;\n    const cell = this.view.cell;\n    this.undelegateEvents();\n    cell.off('removed', this.remove, this);\n    model.off('reseted', this.remove, this);\n    graph.off('halo:destroy', this.remove, this);\n    model.off('*', this.update, this);\n    graph.off('scale', this.update, this);\n    graph.off('translate', this.update, this);\n    super.stopListening();\n  }\n\n  render() {\n    const options = this.options;\n    const cls = this.prefixClassName('widget-halo');\n    this.view.addClass(Private.NODE_CLS);\n    this.container = document.createElement('div');\n    this.$container = this.$(this.container).addClass(cls).attr('data-shape', this.view.cell.shape);\n\n    if (options.className) {\n      this.$container.addClass(options.className);\n    }\n\n    this.$handleContainer = this.$('<div/>').addClass(`${cls}-handles`).appendTo(this.container);\n    this.$content = this.$('<div/>').addClass(`${cls}-content`).appendTo(this.container);\n    this.$container.appendTo(this.graph.container);\n    return this;\n  }\n\n  remove() {\n    this.stopBatch();\n    this.view.removeClass(Private.NODE_CLS);\n    return super.remove();\n  }\n\n  update() {\n    if (this.isRendered()) {\n      this.updateContent();\n      const bbox = this.getBBox();\n      const tinyThreshold = this.options.tinyThreshold || 0;\n      const smallThreshold = this.options.smallThreshold || 0;\n      this.$handleContainer.toggleClass(`${this.handleClassName}-tiny`, bbox.width < tinyThreshold && bbox.height < tinyThreshold);\n      const className = `${this.handleClassName}-small`;\n      this.$handleContainer.toggleClass(className, !this.$handleContainer.hasClass(className) && bbox.width < smallThreshold && bbox.height < smallThreshold);\n      this.$container.css({\n        width: bbox.width,\n        height: bbox.height,\n        left: bbox.x,\n        top: bbox.y\n      });\n\n      if (this.hasHandle('unlink')) {\n        this.toggleUnlink();\n      }\n\n      if (this.type === 'surround' || this.type === 'toolbar') {\n        if (this.hasHandle('fork')) {\n          this.toggleFork();\n        }\n      }\n    }\n  }\n\n  updateContent() {\n    const content = this.options.content;\n\n    if (typeof content === 'function') {\n      const ret = FunctionExt.call(content, this, this.view, this.$content[0]);\n\n      if (ret) {\n        this.$content.html(ret);\n      }\n    } else if (content) {\n      this.$content.html(content);\n    } else {\n      this.$content.remove();\n    }\n  }\n\n  getBBox() {\n    const view = this.view;\n    const bbox = this.options.bbox;\n    const rect = typeof bbox === 'function' ? FunctionExt.call(bbox, this, view) : bbox;\n    return Rectangle.create(Object.assign({\n      x: 0,\n      y: 0,\n      width: 1,\n      height: 1\n    }, rect));\n  }\n\n  removeCell() {\n    this.cell.remove();\n  }\n\n  toggleFork() {\n    const cell = this.view.cell.clone();\n    const view = this.graph.hook.createCellView(cell);\n    const valid = this.graph.hook.validateConnection(this.view, null, view, null, 'target');\n    this.$handleContainer.children('.fork').toggleClass('hidden', !valid);\n    view.remove();\n  }\n\n  toggleUnlink() {\n    const hasEdges = this.model.getConnectedEdges(this.view.cell).length > 0;\n    this.$handleContainer.children('.unlink').toggleClass('hidden', !hasEdges);\n  } // #region batch\n\n\n  startBatch() {\n    this.model.startBatch('halo', {\n      halo: this.cid\n    });\n  }\n\n  stopBatch() {\n    if (this.model.hasActiveBatch('halo')) {\n      this.model.stopBatch('halo', {\n        halo: this.cid\n      });\n    }\n  }\n\n}\n\n(function (Halo) {\n  Halo.defaultOptions = {\n    type: 'surround',\n    clearAll: true,\n    clearOnBlankMouseDown: true,\n    useCellGeometry: false,\n    clone: cell => cell.clone().removeZIndex()\n  };\n})(Halo || (Halo = {}));\n\nObject.getOwnPropertyNames(Handle.prototype).forEach(name => {\n  if (name !== 'constructor') {\n    Object.defineProperty(Halo.prototype, name, Object.getOwnPropertyDescriptor(Handle.prototype, name));\n  }\n});\nvar Private;\n\n(function (Private) {\n  Private.NODE_CLS = 'has-widget-halo';\n})(Private || (Private = {}));","map":null,"metadata":{},"sourceType":"module"}