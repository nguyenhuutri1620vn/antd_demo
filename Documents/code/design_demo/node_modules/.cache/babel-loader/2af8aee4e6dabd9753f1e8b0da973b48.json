{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useEffect } from 'react';\nimport G6 from '@antv/g6';\nimport ErrorBoundary from '../../../errorBoundary';\nimport useGraph from '../../hooks/useGraph';\nimport ChartLoading from '../../../utils/createLoading';\nimport { getGraphSize, getGraphId, getDefaultEdgeArrowCfg, useProps } from '../utils';\nimport { renderGraph } from '../utils';\nimport { defaultNodeAnchorPoints, defaultStateStyles, defaultNodeStyle } from '../constants';\nvar graphs = {};\nvar defaultLayout = {\n  type: 'dendrogram',\n  direction: 'LR',\n  nodeSep: 20,\n  rankSep: 100,\n  radial: true\n};\nvar defaultProps = {\n  nodeType: 'circle',\n  linkCenter: true,\n  edgeType: 'line',\n  behaviors: ['zoom-canvas', 'drag-canvas'],\n  nodeAnchorPoints: defaultNodeAnchorPoints,\n  nodeSize: 30,\n  layout: defaultLayout,\n  animate: true,\n  nodeStateStyles: defaultStateStyles,\n  edgeStateStyles: defaultStateStyles,\n  showArrow: false,\n  arrowType: 'triangle',\n  autoFit: true\n};\n\nvar RadialGraph = function (props) {\n  var uProps = useProps(props, defaultProps);\n  var data = uProps.data,\n      className = uProps.className,\n      style = uProps.style,\n      width = uProps.width,\n      height = uProps.height,\n      _a = uProps.nodeType,\n      nodeType = _a === void 0 ? 'circle' : _a,\n      _b = uProps.linkCenter,\n      linkCenter = _b === void 0 ? true : _b,\n      _c = uProps.edgeType,\n      edgeType = _c === void 0 ? 'line' : _c,\n      _d = uProps.behaviors,\n      behaviors = _d === void 0 ? ['zoom-canvas', 'drag-canvas'] : _d,\n      _e = uProps.nodeAnchorPoints,\n      nodeAnchorPoints = _e === void 0 ? defaultNodeAnchorPoints : _e,\n      _f = uProps.nodeSize,\n      nodeSize = _f === void 0 ? 30 : _f,\n      layout = uProps.layout,\n      _g = uProps.animate,\n      animate = _g === void 0 ? true : _g,\n      nodeCfg = uProps.nodeCfg,\n      edgeCfg = uProps.edgeCfg,\n      _h = uProps.nodeStateStyles,\n      nodeStateStyles = _h === void 0 ? defaultStateStyles : _h,\n      _j = uProps.edgeStateStyles,\n      edgeStateStyles = _j === void 0 ? defaultStateStyles : _j,\n      _k = uProps.showArrow,\n      showArrow = _k === void 0 ? false : _k,\n      _l = uProps.arrowType,\n      arrowType = _l === void 0 ? 'triangle' : _l,\n      _m = uProps.autoFit,\n      autoFit = _m === void 0 ? true : _m,\n      onReady = uProps.onReady,\n      loading = uProps.loading,\n      loadingTemplate = uProps.loadingTemplate,\n      errorTemplate = uProps.errorTemplate;\n  var container = React.useRef(null);\n  var graph = React.useRef(null);\n  var graphId = getGraphId(graph);\n  useGraph(graphs[graphId], uProps, container);\n  var arrowOffset = (Array.isArray(nodeSize) ? nodeSize[0] : nodeSize) / 2;\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n    var graph = graphs[graphId];\n\n    if (!graph) {\n      graph = new G6.TreeGraph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        animate: animate,\n        linkCenter: linkCenter,\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          anchorPoints: nodeAnchorPoints\n        },\n        defaultEdge: {\n          type: edgeType\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout,\n        fitView: autoFit\n      });\n      graphs[graphId] = graph;\n    }\n\n    graph.node(function (node) {\n      if (typeof nodeCfg === 'function') {\n        return nodeCfg(node, graph);\n      }\n\n      return __assign(__assign({}, nodeCfg), {\n        style: __assign(__assign({}, defaultNodeStyle), nodeCfg === null || nodeCfg === void 0 ? void 0 : nodeCfg.style)\n      });\n    });\n    graph.edge(function (edge) {\n      if (typeof edgeCfg === 'function') {\n        return edgeCfg(edge, graph);\n      }\n\n      return {\n        style: __assign(__assign({\n          stroke: '#ccc'\n        }, showArrow && getDefaultEdgeArrowCfg(arrowOffset, arrowType)), edgeCfg === null || edgeCfg === void 0 ? void 0 : edgeCfg.style)\n      };\n    });\n    renderGraph(graph, data);\n\n    if (onReady) {\n      onReady(graph);\n    }\n\n    return function () {\n      if (graphs[graphId]) {\n        graphs[graphId].destroy();\n        delete graphs[graphId];\n      }\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, {\n    errorTemplate: errorTemplate\n  }, loading && React.createElement(ChartLoading, {\n    loadingTemplate: loadingTemplate\n  }), React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default RadialGraph;","map":null,"metadata":{},"sourceType":"module"}