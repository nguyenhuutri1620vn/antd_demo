{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport React, { useContext } from 'react';\nimport uniqBy from 'lodash/uniqBy';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { createComponentModel, Disposable, MODELS, useXFlowApp } from '@antv/xflow';\nimport { TREE_ROOT_ID } from './constants';\nimport AppContext from '../../context';\nexport var NsTreePanelData;\n\n(function (NsTreePanelData) {\n  NsTreePanelData.id = 'TREE_PANEL_DATA';\n})(NsTreePanelData || (NsTreePanelData = {}));\n\nexport var useTreePanelData = function (props) {\n  var treeDataService = props.treeDataService,\n      searchService = props.searchService;\n  var modelService = useXFlowApp().modelService;\n  var flowchartId = useContext(AppContext).flowchartId;\n  /** 使用model */\n\n  var _a = createComponentModel({\n    treeData: [],\n    searchList: [],\n    treeNodeList: [],\n    expandedKeys: [],\n    defaultExpandAll: false,\n    keyword: ''\n  }),\n      state = _a[0],\n      setState = _a[1],\n      panelModel = _a[2];\n  /** 注册成为全局状态，方便其他组件联动 */\n\n\n  React.useEffect(function () {\n    if (modelService.findDeferredModel(NsTreePanelData.id)) {\n      return;\n    }\n\n    modelService.registerModel({\n      id: NsTreePanelData.id,\n      modelFactory: function () {\n        return panelModel;\n      },\n      watchChange: function (self) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var graphMetaModel, fetch, graphMetaDisposable;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , MODELS.GRAPH_META.getModel(modelService)];\n\n              case 1:\n                graphMetaModel = _a.sent();\n\n                fetch = function (meta) {\n                  return __awaiter(void 0, void 0, void 0, function () {\n                    var listData, _a, treeData, rootNodes, currentState, expandedKeys;\n\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          return [4\n                          /*yield*/\n                          , treeDataService(meta, modelService, flowchartId)];\n\n                        case 1:\n                          listData = _b.sent();\n                          _a = NodeList2Tree(listData), treeData = _a.treeData, rootNodes = _a.rootNodes;\n                          return [4\n                          /*yield*/\n                          , self.getValidValue()];\n\n                        case 2:\n                          currentState = _b.sent();\n                          expandedKeys = currentState.expandedKeys.length > 0 ? currentState.expandedKeys : rootNodes.map(function (i) {\n                            return i.id;\n                          });\n                          return [2\n                          /*return*/\n                          , {\n                            listData: listData,\n                            treeData: treeData,\n                            expandedKeys: expandedKeys\n                          }];\n                      }\n                    });\n                  });\n                };\n\n                graphMetaDisposable = graphMetaModel.watch(function (meta) {\n                  return __awaiter(void 0, void 0, void 0, function () {\n                    var data;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          return [4\n                          /*yield*/\n                          , fetch(meta)];\n\n                        case 1:\n                          data = _a.sent();\n                          self.setValue({\n                            treeNodeList: data.listData,\n                            treeData: data.treeData,\n                            expandedKeys: data.expandedKeys,\n                            defaultExpandAll: false,\n                            keyword: '',\n                            searchList: []\n                          });\n                          return [2\n                          /*return*/\n                          ];\n                      }\n                    });\n                  });\n                });\n                return [2\n                /*return*/\n                , Disposable.create(function () {\n                  graphMetaDisposable.dispose();\n                })];\n            }\n          });\n        });\n      }\n    });\n    /* eslint-disable-next-line  */\n  }, []);\n  /** 折叠文件夹 */\n\n  var onFolderExpand = React.useCallback(function (expandedKeys) {\n    debugger;\n    setState(function (modelState) {\n      modelState.expandedKeys = expandedKeys;\n    });\n  }, [setState]);\n  /** 搜索 */\n\n  var onKeywordChange = React.useCallback(function (keyword) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var list_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!searchService) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            if (!keyword) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , searchService(state.treeNodeList, keyword)];\n\n          case 1:\n            list_1 = _a.sent();\n            setState(function (modelState) {\n              modelState.keyword = keyword;\n              modelState.searchList = list_1;\n            });\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            setState(function (modelState) {\n              modelState.keyword = '';\n              modelState.searchList = [];\n            });\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }, [searchService, state.treeNodeList, setState]);\n  return {\n    state: state,\n    setState: setState,\n    onKeywordChange: onKeywordChange,\n    onFolderExpand: onFolderExpand\n  };\n}; // 将list数据转换为树\n\nexport function NodeList2Tree(treeNodes) {\n  if (treeNodes === void 0) {\n    treeNodes = [];\n  }\n\n  var getGroupByIdMap = function (list) {\n    var uniqList = uniqBy(list, 'id');\n    var groups = uniqList.reduce(function (map, node) {\n      var parentId = node.parentId || TREE_ROOT_ID;\n\n      if (!map.has(parentId)) {\n        map.set(parentId, []);\n      }\n\n      var group = map.get(parentId);\n      group === null || group === void 0 ? void 0 : group.push(node);\n      return map;\n    }, new Map());\n    return groups;\n  };\n\n  var groupMap = getGroupByIdMap(cloneDeep(treeNodes));\n\n  function iterator(nodes, groupMapArgs) {\n    return nodes.map(function (node) {\n      if (groupMapArgs.has(node.id)) {\n        var children = groupMapArgs.get(node.id) || [];\n        node.key = node.id;\n        node.isDirectory = true;\n        node.children = iterator(children, groupMapArgs) || [];\n      } else {\n        node.isLeaf = true;\n      }\n\n      return node;\n    });\n  }\n\n  var rootNodes = groupMap.get(TREE_ROOT_ID) || [];\n  var treeData = iterator(rootNodes, groupMap);\n  return {\n    treeData: treeData,\n    rootNodes: rootNodes\n  };\n}","map":null,"metadata":{},"sourceType":"module"}