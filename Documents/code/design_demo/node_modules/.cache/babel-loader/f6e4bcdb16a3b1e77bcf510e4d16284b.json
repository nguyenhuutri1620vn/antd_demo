{"ast":null,"code":"import { FunctionExt } from '../util';\nexport class Events {\n  constructor() {\n    this.listeners = {};\n  }\n\n  on(name, handler, context) {\n    if (handler == null) {\n      return this;\n    }\n\n    if (!this.listeners[name]) {\n      this.listeners[name] = [];\n    }\n\n    const cache = this.listeners[name];\n    cache.push(handler, context);\n    return this;\n  }\n\n  once(name, handler, context) {\n    var _this = this;\n\n    const cb = function () {\n      _this.off(name, cb);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return Private.call([handler, context], args);\n    };\n\n    return this.on(name, cb, this);\n  }\n\n  off(name, handler, context) {\n    // remove all events.\n    if (!(name || handler || context)) {\n      this.listeners = {};\n      return this;\n    }\n\n    const listeners = this.listeners;\n    const names = name ? [name] : Object.keys(listeners);\n    names.forEach(n => {\n      const cache = listeners[n];\n\n      if (!cache) {\n        return;\n      } // remove all events with specified name.\n\n\n      if (!(handler || context)) {\n        delete listeners[n];\n        return;\n      }\n\n      for (let i = cache.length - 2; i >= 0; i -= 2) {\n        if (!(handler && cache[i] !== handler || context && cache[i + 1] !== context)) {\n          cache.splice(i, 2);\n        }\n      }\n    });\n    return this;\n  }\n\n  trigger(name) {\n    let returned = true;\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (name !== '*') {\n      const list = this.listeners[name];\n\n      if (list != null) {\n        returned = Private.call([...list], args);\n      }\n    }\n\n    const list = this.listeners['*'];\n\n    if (list != null) {\n      return FunctionExt.toAsyncBoolean([returned, Private.call([...list], [name, ...args])]);\n    }\n\n    return returned;\n  }\n\n  emit(name) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return this.trigger(name, ...args);\n  }\n\n}\nvar Private;\n\n(function (Private) {\n  function call(list, args) {\n    const results = [];\n\n    for (let i = 0; i < list.length; i += 2) {\n      const handler = list[i];\n      const context = list[i + 1];\n      const params = Array.isArray(args) ? args : [args];\n      const ret = FunctionExt.apply(handler, context, params);\n      results.push(ret);\n    }\n\n    return FunctionExt.toAsyncBoolean(results);\n  }\n\n  Private.call = call;\n})(Private || (Private = {}));","map":null,"metadata":{},"sourceType":"module"}