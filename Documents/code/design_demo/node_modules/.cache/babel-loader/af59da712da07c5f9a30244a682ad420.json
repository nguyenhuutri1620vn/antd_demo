{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, singleton, contrib, Contribution } from 'mana-syringe';\nimport { DisposableCollection, Disposable } from '../common/disposable';\nimport { IFrontendApplicationContribution } from '../xflow-main/interface';\nimport { IGraphProvider } from '../xflow-main/graph/graph-provider';\nimport { IKeyBindingOptionProvider, IKeyBindingService, IKeyBindingContribution } from './interface';\nimport { IGraphCommandService } from '../command/interface';\nimport { IModelService } from '../model-service/interface';\nlet KeyBindingRegistry = class KeyBindingRegistry {\n  constructor() {\n    var _this = this;\n\n    /** disposables */\n    this.toDispose = new DisposableCollection();\n    /** disposables */\n\n    this.keyBindingMap = new Map();\n    /** disposables */\n\n    this.enabledKeyBindingMap = new Map();\n    /** 注册用户定义在config中的keybinding */\n\n    this.registerExternalKeybindings = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        registerKeybindingFunc\n      } = yield this.optionProvider.getOption();\n      return registerKeybindingFunc(this);\n    });\n    /** 注册可Dispose的Keybinding */\n\n\n    this.registerKeybinding = function () {\n      let keybindings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      const toDispose = new DisposableCollection();\n      keybindings.forEach(keybinding => {\n        /** 注册 Keybinding config */\n        _this.keyBindingMap.set(keybinding.id, keybinding);\n        /** enable Keybinding */\n\n\n        _this.enableKeyBindings(keybinding.id).then(d => {\n          toDispose.push(Disposable.create(() => {\n            d.dispose();\n\n            _this.keyBindingMap.delete(keybinding.id);\n          }));\n        });\n      });\n\n      _this.toDispose.push(toDispose);\n\n      return toDispose;\n    };\n    /**\n     * 启用keybinding, 用于触发command\n     * @param id contextId\n     */\n\n\n    this.enableKeyBindings = keybindingId => __awaiter(this, void 0, void 0, function* () {\n      /** 清理同样的键盘事件 */\n      this.disableKeyBindings([keybindingId]);\n      const keybinding = this.keyBindingMap.get(keybindingId);\n      const graph = yield this.getX6Graph();\n      /**\n       * x6文档：https://x6.antv.vision/zh/docs/api/graph/keyboard\n       * x6源码：packages/x6/src/graph/keyboard.ts\n       */\n\n      const handler = this.runCommand(keybinding);\n      graph.bindKey(keybinding.keybinding, handler);\n      /** 注册disposable */\n\n      const toDispose = Disposable.create(() => {\n        graph.unbindKey(keybinding.keybinding);\n        this.enabledKeyBindingMap.delete(keybinding.id);\n      });\n      /** 注册disposable */\n\n      this.enabledKeyBindingMap.set(keybinding.id, toDispose);\n      return toDispose;\n    });\n    /**\n     * 禁用keybinding\n     */\n\n\n    this.disableKeyBindings = ids => {\n      ids.forEach(id => {\n        const disposable = this.enabledKeyBindingMap.get(id);\n\n        if (disposable) {\n          disposable.dispose();\n        }\n      });\n    };\n    /**\n     * 执行command\n     */\n\n\n    this.runCommand = keybinding => e => __awaiter(this, void 0, void 0, function* () {\n      yield keybinding.callback(keybinding, this.modelService, this.commandService, e);\n    });\n    /**\n     * 获取画布实例\n     */\n\n\n    this.getX6Graph = () => __awaiter(this, void 0, void 0, function* () {\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n      return graphInstance;\n    });\n  }\n  /**\n   *  app启动时, 注册keybinding的扩展\n   */\n\n\n  onStart() {\n    const contributions = this.contributionProvider.getContributions();\n\n    for (const contribution of contributions) {\n      contribution.registerKeybinding(this);\n    }\n\n    this.registerExternalKeybindings();\n  }\n  /**\n   * app停止的逻辑\n   */\n\n\n  onStop() {\n    this.toDispose.dispose();\n  }\n\n};\n\n__decorate([inject(IKeyBindingOptionProvider), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"optionProvider\", void 0);\n\n__decorate([inject(IGraphCommandService), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"commandService\", void 0);\n\n__decorate([inject(IModelService), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"modelService\", void 0);\n\n__decorate([contrib(IKeyBindingContribution), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"contributionProvider\", void 0);\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], KeyBindingRegistry.prototype, \"graphProvider\", void 0);\n\nKeyBindingRegistry = __decorate([singleton({\n  contrib: [IFrontendApplicationContribution, IKeyBindingService]\n})], KeyBindingRegistry);\nexport { KeyBindingRegistry };","map":null,"metadata":{},"sourceType":"module"}