{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { StringExt } from '@antv/x6';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowEdgeCommands } from '../constant';\nimport { Disposable } from '../../common/disposable';\nexport var NsAddEdge;\n\n(function (NsAddEdge) {\n  /** Command: 用于注册named factory */\n  NsAddEdge.command = XFlowEdgeCommands.ADD_EDGE;\n  /** hookName */\n\n  NsAddEdge.hookKey = 'addEdge';\n  /** edge id 类型 */\n\n  NsAddEdge.createEdgeId = edge => {\n    if (StringExt.isString(edge.source)) {\n      return `${edge.source}:${edge.sourcePortId}-${edge.target}:${edge.targetPortId}`;\n    }\n\n    if (isX6EdgeConfig(edge)) {\n      const x6EdgeConfig = edge;\n      return `${x6EdgeConfig.source.cell}:${x6EdgeConfig.source.port}-${x6EdgeConfig.target.cell}:${x6EdgeConfig.target.port}`;\n    }\n\n    if (isX6EdgePlainConfig(edge)) {\n      const x6EdgeConfig = edge;\n      return `${x6EdgeConfig.sourceCell}:${x6EdgeConfig.sourcePort}-${x6EdgeConfig.targetCell}:${x6EdgeConfig.targetPort}`;\n    }\n  };\n\n  function isX6EdgeConfig(edge) {\n    return edge.source && edge.source.cell && StringExt.isString(edge.source.cell);\n  }\n\n  NsAddEdge.isX6EdgeConfig = isX6EdgeConfig;\n\n  function isX6EdgePlainConfig(edge) {\n    return edge.sourceCell && StringExt.isString(edge.sourceCell);\n  }\n\n  NsAddEdge.isX6EdgePlainConfig = isX6EdgePlainConfig;\n})(NsAddEdge || (NsAddEdge = {}));\n\nlet AddEdgeCommand =\n/** 创建节点命令 */\nclass AddEdgeCommand {\n  constructor() {\n    /** 处理edgeConfig的兜底逻辑 */\n    this.processEdgeConfig = (args, edge) => __awaiter(this, void 0, void 0, function* () {\n      /** 处理edgeConfig没有返回id的问题 */\n      if (!edge.id) {\n        const {\n          createIdService = NsAddEdge.createEdgeId\n        } = args;\n        edge.id = yield createIdService(edge);\n      }\n      /** 处理xflow edge 和x6 edge的字段差异  */\n\n\n      if (edge.sourcePortId && !edge.sourcePort) {\n        edge.sourcePort = edge.sourcePortId;\n        edge.targetPort = edge.targetPortId;\n      }\n\n      return edge;\n    });\n    /** 执行Cmd */\n\n\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.addEdge.call(\n      /** 执行 hooks pipeline处理args */\n      args,\n      /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          cellFactory,\n          createEdgeService,\n          commandService,\n          options\n        } = handlerArgs;\n        const graph = yield this.ctx.getX6Graph();\n        let rawEdge = handlerArgs.edgeConfig; // 通过createEdgeService来获取 id/是否可以添加的信息，如果返回的nodeid为空则不添加到画布\n\n        if (createEdgeService) {\n          const res = yield createEdgeService(handlerArgs);\n\n          if (typeof res === 'boolean') {\n            return {\n              err: 'createEdgeService rejected'\n            };\n          }\n\n          rawEdge = res;\n        }\n\n        const edgeConfig = yield this.processEdgeConfig(handlerArgs, rawEdge);\n        let edgeCell;\n        const eventOptions = Object.assign(Object.assign({}, options), {\n          isCommand: true\n        });\n\n        if (cellFactory) {\n          const cell = yield cellFactory(edgeConfig, this);\n          edgeCell = graph.addEdge(cell, eventOptions);\n        } else {\n          edgeCell = graph.addEdge(Object.assign(Object.assign({}, edgeConfig), {\n            /** 由于X6的实现是React节点挂在label上的, 所以必须要给label设置值 */\n            label: (edgeConfig === null || edgeConfig === void 0 ? void 0 : edgeConfig.label) || edgeConfig,\n            data: Object.assign({}, edgeConfig)\n          }), eventOptions);\n        }\n        /** 创建 undo */\n\n\n        const undo = Disposable.create(() => {\n          commandService.executeCommand(XFlowEdgeCommands.DEL_EDGE.id, {\n            x6Edge: edgeCell\n          });\n        });\n        /** add undo */\n\n        this.ctx.addUndo(undo);\n        return {\n          edgeConfig: edgeConfig,\n          edgeCell\n        };\n      }), runtimeHook);\n      this.ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], AddEdgeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], AddEdgeCommand.prototype, \"init\", null);\n\nAddEdgeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsAddEdge.command.id\n  }\n})\n/** 创建节点命令 */\n], AddEdgeCommand);\nexport { AddEdgeCommand };","map":null,"metadata":{},"sourceType":"module"}