{"ast":null,"code":"import _isString from \"lodash/isString\";\nimport _isNumber from \"lodash/isNumber\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isArray from \"lodash/isArray\";\nvar WIDTH = 1024;\n\nfunction registerStyleAttribute(fieldName, layer, field, values, updateOptions) {\n  layer.updateStyleAttribute(fieldName, field, values, updateOptions);\n}\n\nfunction handleStyleDataMapping(configToUpdate, layer) {\n  if (configToUpdate.opacity) {\n    handleStyleFloat('opacity', layer, configToUpdate.opacity);\n  }\n\n  if (configToUpdate.strokeWidth) {\n    handleStyleFloat('strokeWidth', layer, configToUpdate.strokeWidth);\n  }\n\n  if (configToUpdate.strokeOpacity) {\n    handleStyleFloat('strokeOpacity', layer, configToUpdate.strokeOpacity);\n  }\n\n  if (configToUpdate.stroke) {\n    handleStyleColor('stroke', layer, configToUpdate.stroke);\n  }\n\n  if (configToUpdate.offsets) {\n    handleStyleOffsets('offsets', layer, configToUpdate.offsets);\n  }\n\n  if (configToUpdate.textOffset) {\n    handleStyleOffsets('textOffset', layer, configToUpdate.textOffset);\n  }\n\n  if (configToUpdate.thetaOffset) {\n    handleStyleFloat('thetaOffset', layer, configToUpdate.thetaOffset);\n  }\n}\n\nfunction handleStyleFloat(fieldName, layer, styleFloat) {\n  if (_isString(styleFloat)) {\n    registerStyleAttribute(fieldName, layer, styleFloat, function (value) {\n      return value;\n    });\n  } else if (_isNumber(styleFloat)) {\n    registerStyleAttribute(fieldName, layer, [styleFloat], undefined);\n  } else if (_isArray(styleFloat) && styleFloat.length === 2) {\n    if (_isString(styleFloat[0]) && _isFunction(styleFloat[1])) {\n      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);\n    } else if (_isString(styleFloat[0]) && _isArray(styleFloat[1]) && _isNumber(styleFloat[1][0]) && _isNumber(styleFloat[1][1])) {\n      registerStyleAttribute(fieldName, layer, styleFloat[0], styleFloat[1]);\n    } else {\n      registerStyleAttribute(fieldName, layer, [1.0], undefined);\n    }\n  } else {\n    registerStyleAttribute(fieldName, layer, [1.0], undefined);\n  }\n}\n\nfunction handleStyleOffsets(fieldName, layer, styleOffsets) {\n  if (_isString(styleOffsets)) {\n    registerStyleAttribute(fieldName, layer, styleOffsets, function (value) {\n      return value;\n    });\n  } else if (_isArray(styleOffsets) && styleOffsets.length === 2 && _isString(styleOffsets[0]) && _isFunction(styleOffsets[1])) {\n    registerStyleAttribute(fieldName, layer, styleOffsets[0], styleOffsets[1]);\n  } else if (_isArray(styleOffsets) && styleOffsets.length === 2 && _isNumber(styleOffsets[0]) && _isNumber(styleOffsets[1])) {\n    registerStyleAttribute(fieldName, layer, styleOffsets, undefined);\n  } else {\n    registerStyleAttribute(fieldName, layer, [0, 0], undefined);\n  }\n}\n\nfunction handleStyleColor(fieldName, layer, styleColor) {\n  if (_isString(styleColor)) {\n    registerStyleAttribute(fieldName, layer, styleColor, undefined);\n  } else if (_isArray(styleColor) && styleColor.length === 2) {\n    if (_isString(styleColor[0]) && _isFunction(styleColor[1])) {\n      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);\n    } else if (_isString(styleColor[0]) && _isArray(styleColor[1]) && styleColor[1].length > 0) {\n      registerStyleAttribute(fieldName, layer, styleColor[0], styleColor[1]);\n    } else {\n      registerStyleAttribute(fieldName, layer, '#fff', undefined);\n    }\n  } else {\n    registerStyleAttribute(fieldName, layer, '#fff', undefined);\n  }\n}\n\nexport { handleStyleDataMapping, handleStyleFloat, handleStyleColor };","map":null,"metadata":{},"sourceType":"module"}