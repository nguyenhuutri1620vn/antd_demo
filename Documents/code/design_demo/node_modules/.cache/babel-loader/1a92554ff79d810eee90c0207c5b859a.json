{"ast":null,"code":"var min = Math.min,\n    max = Math.max,\n    abs = Math.abs;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      brushStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: []\n    };\n  },\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior brush-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onMouseDown',\n        drag: 'onMouseMove',\n        dragend: 'onMouseUp',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      dragstart: 'onMouseDown',\n      drag: 'onMouseMove',\n      dragend: 'onMouseUp',\n      'canvas:click': 'clearStates',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown'\n    };\n  },\n  onMouseDown: function onMouseDown(e) {\n    // 按在node上面拖动时候不应该是框选\n    var item = e.item;\n    var brush = this.brush;\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates();\n    }\n\n    if (!brush) {\n      brush = this.createBrush();\n    }\n\n    this.originPoint = {\n      x: e.canvasX,\n      y: e.canvasY\n    };\n    brush.attr({\n      width: 0,\n      height: 0\n    });\n    brush.show();\n    this.dragging = true;\n  },\n  onMouseMove: function onMouseMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.updateBrush(e);\n  },\n  onMouseUp: function onMouseUp(e) {\n    var graph = this.graph; // TODO: 触发了 canvas:click 导致 clearStates\n\n    if (!this.brush && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.brush.remove(true); // remove and destroy\n\n    this.brush = null;\n    this.getSelectedNodes(e);\n    this.dragging = false;\n  },\n  clearStates: function clearStates() {\n    var _a = this,\n        graph = _a.graph,\n        selectedState = _a.selectedState;\n\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    nodes.forEach(function (node) {\n      return graph.setItemState(node, selectedState, false);\n    });\n    edges.forEach(function (edge) {\n      return graph.setItemState(edge, selectedState, false);\n    });\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedNodes: function getSelectedNodes(e) {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        originPoint = _a.originPoint,\n        shouldUpdate = _a.shouldUpdate;\n\n    var state = this.selectedState;\n    var p1 = {\n      x: e.x,\n      y: e.y\n    };\n    var p2 = graph.getPointByCanvas(originPoint.x, originPoint.y);\n    var left = min(p1.x, p2.x);\n    var right = max(p1.x, p2.x);\n    var top = min(p1.y, p2.y);\n    var bottom = max(p1.y, p2.y);\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      if (!node.isVisible()) return; // 隐藏节点不能被选中\n\n      var bbox = node.getBBox();\n\n      if (bbox.centerX >= left && bbox.centerX <= right && bbox.centerY >= top && bbox.centerY <= bottom) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          if (!edge.isVisible()) return; // 隐藏边不能够被选中\n\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createBrush: function createBrush() {\n    var self = this;\n    var brush = self.graph.get('canvas').addShape('rect', {\n      attrs: self.brushStyle,\n      capture: false,\n      name: 'brush-shape'\n    });\n    this.brush = brush;\n    this.delegate = brush;\n    return brush;\n  },\n  updateBrush: function updateBrush(e) {\n    var originPoint = this.originPoint;\n    this.brush.attr({\n      width: abs(e.canvasX - originPoint.x),\n      height: abs(e.canvasY - originPoint.y),\n      x: min(e.canvasX, originPoint.x),\n      y: min(e.canvasY, originPoint.y)\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    }\n\n    var triggerLowerCase = this.trigger.toLowerCase();\n    var codeLowerCase = code.toLowerCase(); // 按住 control 键时，允许用户设置 trigger 为 ctrl\n\n    if (codeLowerCase === triggerLowerCase || codeLowerCase === 'control' && triggerLowerCase === 'ctrl' || codeLowerCase === 'ctrl' && triggerLowerCase === 'control') {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.brush) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的brush\n      this.brush.remove(true);\n      this.brush = null;\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}