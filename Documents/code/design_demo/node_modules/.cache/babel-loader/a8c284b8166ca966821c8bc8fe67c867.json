{"ast":null,"code":"var ALLOW_EVENTS = ['shift', 'ctrl', 'alt', 'control'];\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      direction: 'both',\n      enableOptimize: false,\n      zoomKey: 'ctrl',\n      // scroll-canvas 可滚动的扩展范围，默认为 0，即最多可以滚动一屏的位置\n      // 当设置的值大于 0 时，即滚动可以超过一屏\n      // 当设置的值小于 0 时，相当于缩小了可滚动范围\n      // 具体实例可参考：https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IFfoS67_HssAAAAAAAAAAAAAARQnAQ\n      scalableRange: 0\n    };\n  },\n  getEvents: function getEvents() {\n    if (!this.zoomKey || ALLOW_EVENTS.indexOf(this.zoomKey) === -1) this.zoomKey = 'ctrl';\n    return {\n      wheel: 'onWheel'\n    };\n  },\n  onWheel: function onWheel(ev) {\n    var _this = this;\n\n    var graph = this.graph;\n    var keyDown = ev[\"\".concat(this.zoomKey, \"Key\")];\n    if (this.zoomKey === 'control') keyDown = ev.ctrlKey;\n\n    if (keyDown) {\n      var canvas = graph.get('canvas');\n      var point = canvas.getPointByClient(ev.clientX, ev.clientY);\n      var ratio = graph.getZoom();\n\n      if (ev.wheelDelta > 0) {\n        ratio = ratio + ratio * 0.05;\n      } else {\n        ratio = ratio - ratio * 0.05;\n      }\n\n      graph.zoomTo(ratio, {\n        x: point.x,\n        y: point.y\n      });\n    } else {\n      var dx = ev.deltaX || ev.movementX;\n      var dy = ev.deltaY || ev.movementY;\n      if (!dy && navigator.userAgent.indexOf('Firefox') > -1) dy = -ev.wheelDelta * 125 / 3;\n      var width = this.graph.get('width');\n      var height = this.graph.get('height');\n      var graphCanvasBBox = this.graph.get('canvas').getCanvasBBox();\n      var expandWidth = this.scalableRange;\n      var expandHeight = this.scalableRange; // 若 scalableRange 是 0~1 的小数，则作为比例考虑\n\n      if (expandWidth < 1 && expandWidth > -1) {\n        expandWidth = width * expandWidth;\n        expandHeight = height * expandHeight;\n      }\n\n      var minX = graphCanvasBBox.minX,\n          maxX = graphCanvasBBox.maxX,\n          minY = graphCanvasBBox.minY,\n          maxY = graphCanvasBBox.maxY;\n\n      if (dx > 0) {\n        if (maxX < -expandWidth) {\n          dx = 0;\n        } else if (maxX - dx < -expandWidth) {\n          dx = maxX + expandWidth;\n        }\n      } else if (dx < 0) {\n        if (minX > width + expandWidth) {\n          dx = 0;\n        } else if (minX - dx > width + expandWidth) {\n          dx = minX - (width + expandWidth);\n        }\n      }\n\n      if (dy > 0) {\n        if (maxY < -expandHeight) {\n          dy = 0;\n        } else if (maxY - dy < -expandHeight) {\n          dy = maxY + expandHeight;\n        }\n      } else if (dy < 0) {\n        if (minY > height + expandHeight) {\n          dy = 0;\n        } else if (minY - dy > height + expandHeight) {\n          dy = minY - (height + expandHeight);\n        }\n      }\n\n      if (this.get('direction') === 'x') {\n        dy = 0;\n      } else if (this.get('direction') === 'y') {\n        dx = 0;\n      }\n\n      graph.translate(-dx, -dy);\n    }\n\n    ev.preventDefault(); // hide the shapes when the zoom ratio is smaller than optimizeZoom\n    // hide the shapes when zoomming\n\n    var enableOptimize = this.get('enableOptimize');\n\n    if (enableOptimize) {\n      var optimizeZoom_1 = this.get('optimizeZoom');\n      var optimized = this.get('optimized');\n      var nodes_1 = graph.getNodes();\n      var edges_1 = graph.getEdges();\n      var nodesLength_1 = nodes_1.length;\n      var edgesLength_1 = edges_1.length; // hiding\n\n      if (!optimized) {\n        for (var n = 0; n < nodesLength_1; n++) {\n          var node = nodes_1[n];\n\n          if (!node.destroyed) {\n            var children = node.get('group').get('children');\n            var childrenLength = children.length;\n\n            for (var c = 0; c < childrenLength; c++) {\n              var shape = children[c];\n\n              if (!shape.destoryed && !shape.get('isKeyShape')) {\n                shape.set('ori-visibility', shape.get('ori-visibility') || shape.get('visible'));\n                shape.hide();\n              }\n            }\n          }\n        }\n\n        for (var edgeIndex = 0; edgeIndex < edgesLength_1; edgeIndex++) {\n          var edge = edges_1[edgeIndex];\n          var children = edge.get('group').get('children');\n          var childrenLength = children.length;\n\n          for (var c = 0; c < childrenLength; c++) {\n            var shape = children[c];\n            shape.set('ori-visibility', shape.get('ori-visibility') || shape.get('visible'));\n            shape.hide();\n          }\n        }\n\n        this.set('optimized', true);\n      } // showing after 100ms\n\n\n      clearTimeout(this.get('timeout'));\n      var timeout = setTimeout(function () {\n        var currentZoom = graph.getZoom();\n\n        var curOptimized = _this.get('optimized');\n\n        if (curOptimized) {\n          _this.set('optimized', false);\n\n          for (var n = 0; n < nodesLength_1; n++) {\n            var node = nodes_1[n];\n            var children = node.get('group').get('children');\n            var childrenLength = children.length;\n\n            if (currentZoom < optimizeZoom_1) {\n              var keyShape = node.getKeyShape();\n              var oriVis = keyShape.get('ori-visibility');\n              if (oriVis) keyShape.show();\n            } else {\n              for (var c = 0; c < childrenLength; c++) {\n                var shape = children[c];\n                var oriVis = shape.get('ori-visibility');\n\n                if (!shape.get('visible') && oriVis) {\n                  if (oriVis) shape.show();\n                }\n              }\n            }\n          }\n\n          for (var edgeIndex = 0; edgeIndex < edgesLength_1; edgeIndex++) {\n            var edge = edges_1[edgeIndex];\n            var children = edge.get('group').get('children');\n            var childrenLength = children.length;\n\n            if (currentZoom < optimizeZoom_1) {\n              var keyShape = edge.getKeyShape();\n              var oriVis = keyShape.get('ori-visibility');\n              if (oriVis) keyShape.show();\n            } else {\n              for (var c = 0; c < childrenLength; c++) {\n                var shape = children[c];\n\n                if (!shape.get('visible')) {\n                  var oriVis = shape.get('ori-visibility');\n                  if (oriVis) shape.show();\n                }\n              }\n            }\n          }\n        }\n      }, 100);\n      this.set('timeout', timeout);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}