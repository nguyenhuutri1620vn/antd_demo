{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Rectangle } from '../geometry';\nimport { NumberExt, JQuery, Dom, Unit, Vector } from '../util';\nimport { Base } from './base';\nexport class PrintManager extends Base {\n  show() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const localOptions = Object.assign(Object.assign({}, PrintManager.defaultOptions), options);\n    const $pages = this.createPrintPages(localOptions);\n    localOptions.ready($pages, $pages => this.showPrintWindow($pages, localOptions), {\n      sheetSize: this.getSheetSize(localOptions)\n    });\n  }\n\n  get className() {\n    return this.view.prefixClassName('graph-print');\n  }\n\n  showPrintWindow($pages, options) {\n    if ($pages) {\n      const $body = JQuery(document.body);\n      const $container = JQuery(this.view.container);\n      const bodyClassName = this.view.prefixClassName('graph-printing');\n      $body.addClass(bodyClassName);\n      const $detached = $container.children().detach();\n      $pages.forEach($page => {\n        $page.removeClass(`${this.className}-preview`).addClass(`${this.className}-ready`).appendTo($body);\n      });\n      let ret = false;\n\n      const cb = () => {\n        if (!ret) {\n          ret = true;\n          $body.removeClass(bodyClassName);\n          $pages.forEach($page => $page.remove());\n          $container.append($detached);\n          JQuery(`#${this.styleSheetId}`).remove();\n          this.graph.trigger('after:print', options);\n          JQuery(window).off('afterprint', cb);\n        }\n      };\n\n      JQuery(window).one('afterprint', cb);\n      setTimeout(cb, 200);\n      window.print();\n    }\n  }\n\n  createPrintPage(pageArea, options) {\n    this.graph.trigger('before:print', options);\n    const $page = JQuery('<div/>').addClass(this.className);\n    const $wrap = JQuery('<div/>').addClass(this.view.prefixClassName('graph-print-inner')).css('position', 'relative');\n\n    if (options.size) {\n      $page.addClass(`${this.className}-size-${options.size}`);\n    }\n\n    const vSVG = Vector.create(this.view.svg).clone();\n    const vStage = vSVG.findOne(`.${this.view.prefixClassName('graph-svg-stage')}`);\n    $wrap.append(vSVG.node);\n    const sheetSize = this.getSheetSize(options);\n    const graphArea = this.graph.transform.getGraphArea();\n    const s = this.graph.transform.getScale();\n    const ts = this.graph.translate();\n    const matrix = Dom.createSVGMatrix().translate(ts.tx / s.sx, ts.ty / s.sy);\n    const info = this.getPageInfo(graphArea, pageArea, sheetSize);\n    const scale = info.scale;\n    const bbox = info.bbox;\n    $wrap.css({\n      left: 0,\n      top: 0\n    });\n    vSVG.attr({\n      width: bbox.width * scale,\n      height: bbox.height * scale,\n      style: 'position:relative',\n      viewBox: [bbox.x, bbox.y, bbox.width, bbox.height].join(' ')\n    });\n    vStage.attr('transform', Dom.matrixToTransformString(matrix));\n    $page.append($wrap);\n    $page.addClass(`${this.className}-preview`);\n    return {\n      $page,\n      sheetSize\n    };\n  }\n\n  createPrintPages(options) {\n    let ret;\n    const area = this.getPrintArea(options);\n    const $pages = [];\n\n    if (options.page) {\n      const pageSize = this.getPageSize(area, options.page);\n      const pageAreas = this.getPageAreas(area, pageSize);\n      pageAreas.forEach(pageArea => {\n        ret = this.createPrintPage(pageArea, options);\n        $pages.push(ret.$page);\n      });\n    } else {\n      ret = this.createPrintPage(area, options);\n      $pages.push(ret.$page);\n    }\n\n    if (ret) {\n      const size = {\n        width: ret.sheetSize.cssWidth,\n        height: ret.sheetSize.cssHeight\n      };\n      this.updatePrintStyle(size, options);\n    }\n\n    return $pages;\n  }\n\n  get styleSheetId() {\n    return this.view.prefixClassName('graph-print-style');\n  }\n\n  updatePrintStyle(size, options) {\n    const sizeCSS = Object.keys(size).reduce((memo, key) => `${memo} ${key}:${size[key]};`, '');\n    const margin = NumberExt.normalizeSides(options.margin);\n    const marginUnit = options.marginUnit || '';\n    const sheetUnit = options.sheetUnit || '';\n    const css = `\n      @media print {\n        .${this.className}.${this.className}-ready {\n          ${sizeCSS}\n        }\n\n        @page {\n          margin:\n          ${[margin.top + marginUnit, margin.right + marginUnit, margin.bottom + marginUnit, margin.left + marginUnit].join(' ')};\n          size: ${options.sheet.width + sheetUnit} ${options.sheet.height + sheetUnit};\n\n        .${this.className}.${this.className}-preview {\n          ${sizeCSS}\n        }\n      }`;\n    const id = this.styleSheetId;\n    const $style = JQuery(`#${id}`);\n\n    if ($style.length) {\n      $style.html(css);\n    } else {\n      JQuery('head').append(`'<style type=\"text/css\" id=\"${id}\">${css}</style>'`);\n    }\n  }\n\n  getPrintArea(options) {\n    let area = options.area;\n\n    if (!area) {\n      const padding = NumberExt.normalizeSides(options.padding);\n      area = this.graph.getContentArea().moveAndExpand({\n        x: -padding.left,\n        y: -padding.top,\n        width: padding.left + padding.right,\n        height: padding.top + padding.bottom\n      });\n    }\n\n    return area;\n  }\n\n  getPageSize(area, poster) {\n    if (typeof poster === 'object') {\n      const raw = poster;\n      const page = {\n        width: raw.width,\n        height: raw.height\n      };\n\n      if (page.width == null) {\n        page.width = Math.ceil(area.width / (raw.columns || 1));\n      }\n\n      if (page.height == null) {\n        page.height = Math.ceil(area.height / (raw.rows || 1));\n      }\n\n      return page;\n    }\n\n    return {\n      width: area.width,\n      height: area.height\n    };\n  }\n\n  getPageAreas(area, pageSize) {\n    const pages = [];\n    const width = pageSize.width;\n    const height = pageSize.height;\n\n    for (let w = 0, n = 0; w < area.height && n < 200; w += height, n += 1) {\n      for (let h = 0, m = 0; h < area.width && m < 200; h += width, m += 1) {\n        pages.push(new Rectangle(area.x + h, area.y + w, width, height));\n      }\n    }\n\n    return pages;\n  }\n\n  getSheetSize(options) {\n    const sheet = options.sheet;\n    const margin = NumberExt.normalizeSides(options.margin);\n    const marginUnit = options.marginUnit || '';\n    const sheetUnit = options.sheetUnit || '';\n    const cssWidth = // eslint-disable-next-line\n    `calc(${sheet.width}${sheetUnit} - ${margin.left + margin.right}${marginUnit})`;\n    const cssHeight = // eslint-disable-next-line\n    `calc(${sheet.height}${sheetUnit} - ${margin.top + margin.bottom}${marginUnit})`;\n    const ret = Unit.measure(cssWidth, cssHeight);\n    return {\n      cssWidth,\n      cssHeight,\n      width: ret.width,\n      height: ret.height\n    };\n  }\n\n  getPageInfo(graphArea, pageArea, sheetSize) {\n    const bbox = new Rectangle(pageArea.x - graphArea.x, pageArea.y - graphArea.y, pageArea.width, pageArea.height);\n    const pageRatio = bbox.width / bbox.height;\n    const graphRatio = sheetSize.width / sheetSize.height;\n    return {\n      bbox,\n      scale: graphRatio < pageRatio ? sheetSize.width / bbox.width : sheetSize.height / bbox.height,\n      fitHorizontal: graphRatio < pageRatio\n    };\n  }\n\n  dispose() {}\n\n}\n\n__decorate([Base.dispose()], PrintManager.prototype, \"dispose\", null);\n\n(function (PrintManager) {\n  PrintManager.defaultOptions = {\n    page: false,\n    sheet: {\n      width: 210,\n      height: 297\n    },\n    sheetUnit: 'mm',\n    margin: 0.4,\n    marginUnit: 'in',\n    padding: 5,\n    ready: ($pages, readyToPrint) => readyToPrint($pages)\n  };\n})(PrintManager || (PrintManager = {}));","map":null,"metadata":{},"sourceType":"module"}