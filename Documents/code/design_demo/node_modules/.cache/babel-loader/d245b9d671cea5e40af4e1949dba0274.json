{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands } from '../constant';\nexport var NsGraphResize;\n\n(function (NsGraphResize) {\n  /** Command: 用于注册named factory */\n  NsGraphResize.command = XFlowGraphCommands.GRAPH_RESIZE;\n  /** hookName */\n\n  NsGraphResize.hookKey = 'graphResize';\n})(NsGraphResize || (NsGraphResize = {}));\n\nlet GraphResizeCommand =\n/** 画布resize命令 */\nclass GraphResizeCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const config = yield this.ctx.getGraphConfig();\n      const clientHeight = config.rootContainer.clientHeight;\n      const clientWidth = config.rootContainer.clientWidth;\n      const result = yield hooks.graphResize.call(\n      /** 执行hooks pipeline处理args */\n      args,\n      /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const x6Graph = yield this.ctx.getX6Graph();\n        const {\n          width = clientWidth,\n          height = clientHeight\n        } = handlerArgs;\n        x6Graph === null || x6Graph === void 0 ? void 0 : x6Graph.resize(width, height);\n        return {};\n      }),\n      /** execute command 时创建的hook */\n      runtimeHook);\n      /** 设置结果 */\n\n      this.ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n  /** isUndoable */\n\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphResizeCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphResizeCommand.prototype, \"init\", null);\n\nGraphResizeCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphResize.command.id\n  }\n})\n/** 画布resize命令 */\n], GraphResizeCommand);\nexport { GraphResizeCommand };","map":null,"metadata":{},"sourceType":"module"}