{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _merge from \"lodash/merge\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport { $window, isMini } from '@antv/l7-utils';\nimport Point from '../geo/point';\nimport DOM from '../utils/dom';\nimport BlockableMapEventHandler from './blockable_map_event';\nimport BoxZoomHandler from './box_zoom';\nimport ClickZoomHandler from './click_zoom';\nimport { Event } from './events/event';\nimport RenderFrameEvent from './events/render_event';\nimport HandlerInertia from './handler_inertia';\nimport KeyboardHandler from './keyboard';\nimport MapEventHandler from './map_event';\nimport { MousePanHandler, MousePitchHandler, MouseRotateHandler } from './mouse';\nimport ScrollZoomHandler from './scroll_zoom';\nimport DoubleClickZoomHandler from './shim/dblclick_zoom';\nimport DragPanHandler from './shim/drag_pan';\nimport DragRotateHandler from './shim/drag_rotate';\nimport TouchZoomRotateHandler from './shim/touch_zoom_rotate';\nimport TapDragZoomHandler from './tap/tap_drag_zoom';\nimport TapZoomHandler from './tap/tap_zoom';\nimport { TouchPanHandler, TouchPitchHandler, TouchRotateHandler, TouchZoomHandler } from './touch';\n\nvar _isMoving = function isMoving(p) {\n  return p.zoom || p.drag || p.pitch || p.rotate;\n};\n\nfunction hasChange(result) {\n  return result.panDelta && result.panDelta.mag() || result.zoomDelta || result.bearingDelta || result.pitchDelta;\n}\n\nvar HandlerManager = function () {\n  function HandlerManager(map, options) {\n    var _this = this;\n\n    _classCallCheck(this, HandlerManager);\n\n    _defineProperty(this, \"map\", void 0);\n\n    _defineProperty(this, \"el\", void 0);\n\n    _defineProperty(this, \"handlers\", void 0);\n\n    _defineProperty(this, \"eventsInProgress\", void 0);\n\n    _defineProperty(this, \"frameId\", void 0);\n\n    _defineProperty(this, \"inertia\", void 0);\n\n    _defineProperty(this, \"bearingSnap\", void 0);\n\n    _defineProperty(this, \"handlersById\", void 0);\n\n    _defineProperty(this, \"updatingCamera\", void 0);\n\n    _defineProperty(this, \"changes\", void 0);\n\n    _defineProperty(this, \"previousActiveHandlers\", void 0);\n\n    _defineProperty(this, \"bearingChanged\", void 0);\n\n    _defineProperty(this, \"listeners\", void 0);\n\n    _defineProperty(this, \"handleWindowEvent\", function (e) {\n      _this.handleEvent(e, \"\".concat(e.type, \"Window\"));\n    });\n\n    _defineProperty(this, \"handleEvent\", function (e, eventName) {\n      if (e.type === 'blur') {\n        _this.stop();\n\n        return;\n      }\n\n      _this.updatingCamera = true;\n      var inputEvent = e.type === 'renderFrame' ? undefined : e;\n      var mergedIHandlerResult = {\n        needsRenderFrame: false\n      };\n      var eventsInProgress = {};\n      var activeHandlers = {};\n      var mapTouches = e.touches ? _this.getMapTouches(e.touches) : undefined;\n      var points = mapTouches ? DOM.touchPos(_this.el, mapTouches) : DOM.mousePos(_this.el, e);\n\n      var _iterator = _createForOfIteratorHelper(_this.handlers),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _step.value,\n              handlerName = _step$value.handlerName,\n              handler = _step$value.handler,\n              allowed = _step$value.allowed;\n\n          if (!handler.isEnabled()) {\n            continue;\n          }\n\n          var data = void 0;\n\n          if (_this.blockedByActive(activeHandlers, allowed, handlerName)) {\n            handler.reset();\n          } else {\n            var handerName = eventName || e.type;\n\n            if (handler && handler[handerName]) {\n              data = handler[handerName](e, points, mapTouches);\n\n              _this.mergeIHandlerResult(mergedIHandlerResult, eventsInProgress, data, handlerName, inputEvent);\n\n              if (data && data.needsRenderFrame) {\n                _this.triggerRenderFrame();\n              }\n            }\n          }\n\n          if (data || handler.isActive()) {\n            activeHandlers[handlerName] = handler;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var deactivatedHandlers = {};\n\n      for (var name in _this.previousActiveHandlers) {\n        if (!activeHandlers[name]) {\n          deactivatedHandlers[name] = inputEvent;\n        }\n      }\n\n      _this.previousActiveHandlers = activeHandlers;\n\n      if (Object.keys(deactivatedHandlers).length || hasChange(mergedIHandlerResult)) {\n        _this.changes.push([mergedIHandlerResult, eventsInProgress, deactivatedHandlers]);\n\n        _this.triggerRenderFrame();\n      }\n\n      if (Object.keys(activeHandlers).length || hasChange(mergedIHandlerResult)) {\n        _this.map.stop(true);\n      }\n\n      _this.updatingCamera = false;\n      var cameraAnimation = mergedIHandlerResult.cameraAnimation;\n\n      if (cameraAnimation) {\n        _this.inertia.clear();\n\n        _this.fireEvents({}, {});\n\n        _this.changes = [];\n        cameraAnimation(_this.map);\n      }\n    });\n\n    this.map = map;\n    this.el = this.map.getCanvasContainer();\n    this.handlers = [];\n    this.handlersById = {};\n    this.changes = [];\n    this.inertia = new HandlerInertia(map);\n    this.bearingSnap = options.bearingSnap;\n    this.previousActiveHandlers = {};\n    this.eventsInProgress = {};\n    this.addDefaultHandlers(options);\n    var el = this.el;\n    this.listeners = [];\n\n    if (!isMini) {\n      this.listeners = [[el, 'touchstart', {\n        passive: false\n      }], [el, 'touchmove', {\n        passive: false\n      }], [el, 'touchend', undefined], [el, 'touchcancel', undefined], [el, 'mousedown', undefined], [el, 'mousemove', undefined], [el, 'mouseup', undefined], [window.document, 'mousemove', {\n        capture: true\n      }], [window.document, 'mouseup', undefined], [el, 'mouseover', undefined], [el, 'mouseout', undefined], [el, 'dblclick', undefined], [el, 'click', undefined], [el, 'keydown', {\n        capture: false\n      }], [el, 'keyup', undefined], [el, 'wheel', {\n        passive: false\n      }], [el, 'contextmenu', undefined], [window, 'blur', undefined]];\n\n      var _iterator2 = _createForOfIteratorHelper(this.listeners),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 3),\n              target = _step2$value[0],\n              type = _step2$value[1],\n              listenerOptions = _step2$value[2];\n\n          DOM.addEventListener(target, type, target === window.document ? this.handleWindowEvent : this.handleEvent, listenerOptions);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    } else {\n      $window.document.addEventListener('touchstart', function (e) {\n        _this.handleEvent(e);\n      }, {});\n      $window.document.addEventListener('touchmove', function (e) {\n        _this.handleEvent(e);\n      }, {});\n      $window.document.addEventListener('touchend', function (e) {\n        _this.handleEvent(e);\n      }, {});\n      $window.document.addEventListener('touchcancel', function (e) {\n        _this.handleEvent(e);\n      }, {});\n    }\n  }\n\n  _createClass(HandlerManager, [{\n    key: \"destroy\",\n    value: function destroy() {\n      var _iterator3 = _createForOfIteratorHelper(this.listeners),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 3),\n              target = _step3$value[0],\n              type = _step3$value[1],\n              listenerOptions = _step3$value[2];\n\n          DOM.removeEventListener(target, type, target === window.document ? this.handleWindowEvent : this.handleEvent, listenerOptions);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.updatingCamera) {\n        return;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(this.handlers),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var handler = _step4.value.handler;\n          handler.reset();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      this.inertia.clear();\n      this.fireEvents({}, {});\n      this.changes = [];\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      var _iterator5 = _createForOfIteratorHelper(this.handlers),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var handler = _step5.value.handler;\n\n          if (handler.isActive()) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isZooming\",\n    value: function isZooming() {\n      return !!this.eventsInProgress.zoom || this.map.scrollZoom.isZooming();\n    }\n  }, {\n    key: \"isRotating\",\n    value: function isRotating() {\n      return !!this.eventsInProgress.rotate;\n    }\n  }, {\n    key: \"isMoving\",\n    value: function isMoving() {\n      return Boolean(_isMoving(this.eventsInProgress)) || this.isZooming();\n    }\n  }, {\n    key: \"mergeIHandlerResult\",\n    value: function mergeIHandlerResult(mergedIHandlerResult, eventsInProgress, HandlerResult, name, e) {\n      if (!HandlerResult) {\n        return;\n      }\n\n      _merge(mergedIHandlerResult, HandlerResult);\n\n      var eventData = {\n        handlerName: name,\n        originalEvent: HandlerResult.originalEvent || e\n      };\n\n      if (HandlerResult.zoomDelta !== undefined) {\n        eventsInProgress.zoom = eventData;\n      }\n\n      if (HandlerResult.panDelta !== undefined) {\n        eventsInProgress.drag = eventData;\n      }\n\n      if (HandlerResult.pitchDelta !== undefined) {\n        eventsInProgress.pitch = eventData;\n      }\n\n      if (HandlerResult.bearingDelta !== undefined) {\n        eventsInProgress.rotate = eventData;\n      }\n    }\n  }, {\n    key: \"triggerRenderFrame\",\n    value: function triggerRenderFrame() {\n      var _this2 = this;\n\n      if (this.frameId === undefined) {\n        this.frameId = this.map.requestRenderFrame(function (timeStamp) {\n          delete _this2.frameId;\n\n          _this2.handleEvent(new RenderFrameEvent('renderFrame', {\n            timeStamp: timeStamp\n          }));\n\n          _this2.applyChanges();\n        });\n      }\n    }\n  }, {\n    key: \"addDefaultHandlers\",\n    value: function addDefaultHandlers(options) {\n      var map = this.map;\n      var el = map.getCanvasContainer();\n      this.add('mapEvent', new MapEventHandler(map, options));\n      var boxZoom = map.boxZoom = new BoxZoomHandler(map, options);\n      this.add('boxZoom', boxZoom);\n      var tapZoom = new TapZoomHandler();\n      var clickZoom = new ClickZoomHandler();\n      map.doubleClickZoom = new DoubleClickZoomHandler(clickZoom, tapZoom);\n      this.add('tapZoom', tapZoom);\n      this.add('clickZoom', clickZoom);\n      var tapDragZoom = new TapDragZoomHandler();\n      this.add('tapDragZoom', tapDragZoom);\n      var touchPitch = map.touchPitch = new TouchPitchHandler();\n      this.add('touchPitch', touchPitch);\n      var mouseRotate = new MouseRotateHandler(options);\n      var mousePitch = new MousePitchHandler(options);\n      map.dragRotate = new DragRotateHandler(options, mouseRotate, mousePitch);\n      this.add('mouseRotate', mouseRotate, ['mousePitch']);\n      this.add('mousePitch', mousePitch, ['mouseRotate']);\n      var mousePan = new MousePanHandler(options);\n      var touchPan = new TouchPanHandler(options);\n      map.dragPan = new DragPanHandler(el, mousePan, touchPan);\n      this.add('mousePan', mousePan);\n      this.add('touchPan', touchPan, ['touchZoom', 'touchRotate']);\n      var touchRotate = new TouchRotateHandler();\n      var touchZoom = new TouchZoomHandler();\n      map.touchZoomRotate = new TouchZoomRotateHandler(el, touchZoom, touchRotate, tapDragZoom);\n      this.add('touchRotate', touchRotate, ['touchPan', 'touchZoom']);\n      this.add('touchZoom', touchZoom, ['touchPan', 'touchRotate']);\n      var scrollZoom = map.scrollZoom = new ScrollZoomHandler(map, this);\n      this.add('scrollZoom', scrollZoom, ['mousePan']);\n      var keyboard = map.keyboard = new KeyboardHandler();\n      this.add('keyboard', keyboard);\n      this.add('blockableMapEvent', new BlockableMapEventHandler(map));\n\n      for (var _i = 0, _arr = ['boxZoom', 'doubleClickZoom', 'tapDragZoom', 'touchPitch', 'dragRotate', 'dragPan', 'touchZoomRotate', 'scrollZoom', 'keyboard']; _i < _arr.length; _i++) {\n        var name = _arr[_i];\n\n        if (options.interactive && options[name]) {\n          map[name].enable(options[name]);\n        }\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(handlerName, handler, allowed) {\n      this.handlers.push({\n        handlerName: handlerName,\n        handler: handler,\n        allowed: allowed\n      });\n      this.handlersById[handlerName] = handler;\n    }\n  }, {\n    key: \"blockedByActive\",\n    value: function blockedByActive(activeHandlers, allowed, myName) {\n      for (var name in activeHandlers) {\n        if (name === myName) {\n          continue;\n        }\n\n        if (!allowed || allowed.indexOf(name) < 0) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"getMapTouches\",\n    value: function getMapTouches(touches) {\n      var mapTouches = [];\n\n      var _iterator6 = _createForOfIteratorHelper(touches),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var t = _step6.value;\n          var target = t.target;\n\n          if (isMini || this.el.contains(target)) {\n            mapTouches.push(t);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return mapTouches;\n    }\n  }, {\n    key: \"applyChanges\",\n    value: function applyChanges() {\n      var combined = {};\n      var combinedEventsInProgress = {};\n      var combinedDeactivatedHandlers = {};\n\n      var _iterator7 = _createForOfIteratorHelper(this.changes),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _step7$value = _slicedToArray(_step7.value, 3),\n              change = _step7$value[0],\n              eventsInProgress = _step7$value[1],\n              deactivatedHandlers = _step7$value[2];\n\n          if (change.panDelta) {\n            combined.panDelta = (combined.panDelta || new Point(0, 0))._add(change.panDelta);\n          }\n\n          if (change.zoomDelta) {\n            combined.zoomDelta = (combined.zoomDelta || 0) + change.zoomDelta;\n          }\n\n          if (change.bearingDelta) {\n            combined.bearingDelta = (combined.bearingDelta || 0) + change.bearingDelta;\n          }\n\n          if (change.pitchDelta) {\n            combined.pitchDelta = (combined.pitchDelta || 0) + change.pitchDelta;\n          }\n\n          if (change.around !== undefined) {\n            combined.around = change.around;\n          }\n\n          if (change.pinchAround !== undefined) {\n            combined.pinchAround = change.pinchAround;\n          }\n\n          if (change.noInertia) {\n            combined.noInertia = change.noInertia;\n          }\n\n          _merge(combinedEventsInProgress, eventsInProgress);\n\n          _merge(combinedDeactivatedHandlers, deactivatedHandlers);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      this.updateMapTransform(combined, combinedEventsInProgress, combinedDeactivatedHandlers);\n      this.changes = [];\n    }\n  }, {\n    key: \"updateMapTransform\",\n    value: function updateMapTransform(combinedResult, combinedEventsInProgress, deactivatedHandlers) {\n      var map = this.map;\n      var tr = map.transform;\n\n      if (!hasChange(combinedResult)) {\n        return this.fireEvents(combinedEventsInProgress, deactivatedHandlers);\n      }\n\n      var panDelta = combinedResult.panDelta,\n          zoomDelta = combinedResult.zoomDelta,\n          bearingDelta = combinedResult.bearingDelta,\n          pitchDelta = combinedResult.pitchDelta,\n          pinchAround = combinedResult.pinchAround;\n      var around = combinedResult.around;\n\n      if (pinchAround !== undefined) {\n        around = pinchAround;\n      }\n\n      map.stop(true);\n      around = around || map.transform.centerPoint;\n      var loc = tr.pointLocation(panDelta ? around.sub(panDelta) : around);\n\n      if (bearingDelta) {\n        tr.bearing += bearingDelta;\n      }\n\n      if (pitchDelta) {\n        tr.pitch += pitchDelta;\n      }\n\n      if (zoomDelta) {\n        tr.zoom += zoomDelta;\n      }\n\n      tr.setLocationAtPoint(loc, around);\n      this.map.update();\n\n      if (!combinedResult.noInertia) {\n        this.inertia.record(combinedResult);\n      }\n\n      this.fireEvents(combinedEventsInProgress, deactivatedHandlers);\n    }\n  }, {\n    key: \"fireEvents\",\n    value: function fireEvents(newEventsInProgress, deactivatedHandlers) {\n      var _this3 = this;\n\n      var wasMoving = _isMoving(this.eventsInProgress);\n\n      var nowMoving = _isMoving(newEventsInProgress);\n\n      var startEvents = {};\n\n      for (var eventName in newEventsInProgress) {\n        if (newEventsInProgress[eventName]) {\n          var originalEvent = newEventsInProgress[eventName].originalEvent;\n\n          if (!this.eventsInProgress[eventName]) {\n            startEvents[\"\".concat(eventName, \"start\")] = originalEvent;\n          }\n\n          this.eventsInProgress[eventName] = newEventsInProgress[eventName];\n        }\n      }\n\n      if (!wasMoving && nowMoving) {\n        this.fireEvent('movestart', nowMoving.originalEvent);\n      }\n\n      for (var name in startEvents) {\n        if (startEvents[name]) {\n          this.fireEvent(name, startEvents[name]);\n        }\n      }\n\n      if (newEventsInProgress.rotate) {\n        this.bearingChanged = true;\n      }\n\n      if (nowMoving) {\n        this.fireEvent('move', nowMoving.originalEvent);\n      }\n\n      for (var _eventName in newEventsInProgress) {\n        if (newEventsInProgress[_eventName]) {\n          var _originalEvent = newEventsInProgress[_eventName].originalEvent;\n          this.fireEvent(_eventName, _originalEvent);\n        }\n      }\n\n      var endEvents = {};\n      var originalEndEvent;\n\n      for (var _eventName2 in this.eventsInProgress) {\n        if (this.eventsInProgress[_eventName2]) {\n          var _this$eventsInProgres = this.eventsInProgress[_eventName2],\n              handlerName = _this$eventsInProgres.handlerName,\n              _originalEvent2 = _this$eventsInProgres.originalEvent;\n\n          if (!this.handlersById[handlerName].isActive()) {\n            delete this.eventsInProgress[_eventName2];\n            originalEndEvent = deactivatedHandlers[handlerName] || _originalEvent2;\n            endEvents[\"\".concat(_eventName2, \"end\")] = originalEndEvent;\n          }\n        }\n      }\n\n      for (var _name in endEvents) {\n        if (endEvents[_name]) {\n          this.fireEvent(_name, endEvents[_name]);\n        }\n      }\n\n      var stillMoving = _isMoving(this.eventsInProgress);\n\n      if ((wasMoving || nowMoving) && !stillMoving) {\n        this.updatingCamera = true;\n        var inertialEase = this.inertia.onMoveEnd(this.map.dragPan.inertiaOptions);\n\n        var shouldSnapToNorth = function shouldSnapToNorth(bearing) {\n          return bearing !== 0 && -_this3.bearingSnap < bearing && bearing < _this3.bearingSnap;\n        };\n\n        if (inertialEase) {\n          if (shouldSnapToNorth(inertialEase.bearing || this.map.getBearing())) {\n            inertialEase.bearing = 0;\n          }\n\n          this.map.easeTo(inertialEase, {\n            originalEvent: originalEndEvent\n          });\n        } else {\n          this.map.emit('moveend', new Event('moveend', {\n            originalEvent: originalEndEvent\n          }));\n\n          if (shouldSnapToNorth(this.map.getBearing())) {\n            this.map.resetNorth();\n          }\n        }\n\n        this.bearingChanged = false;\n        this.updatingCamera = false;\n      }\n    }\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(type, e) {\n      this.map.emit(type, new Event(type, e ? {\n        originalEvent: e\n      } : {}));\n    }\n  }]);\n\n  return HandlerManager;\n}();\n\nexport default HandlerManager;","map":null,"metadata":{},"sourceType":"module"}