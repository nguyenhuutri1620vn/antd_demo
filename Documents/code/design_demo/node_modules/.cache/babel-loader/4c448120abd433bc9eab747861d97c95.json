{"ast":null,"code":"import { NumberExt } from '../../util';\nimport { Point } from '../../geometry'; // eslint-disable-next-line\n\nexport function resolve(fn) {\n  return function (view, magnet, ref, options) {\n    if (ref instanceof Element) {\n      const refView = this.graph.renderer.findViewByElem(ref);\n      let refPoint;\n\n      if (refView) {\n        if (refView.isEdgeElement(ref)) {\n          const distance = options.fixedAt != null ? options.fixedAt : '50%';\n          refPoint = getPointAtEdge(refView, distance);\n        } else {\n          refPoint = refView.getBBoxOfElement(ref).getCenter();\n        }\n      } else {\n        refPoint = new Point();\n      }\n\n      return fn.call(this, view, magnet, refPoint, options);\n    }\n\n    return fn.apply(this, arguments); // eslint-disable-line\n  };\n}\nexport function getPointAtEdge(edgeView, value) {\n  const isPercentage = NumberExt.isPercentage(value);\n  const num = typeof value === 'string' ? parseFloat(value) : value;\n\n  if (isPercentage) {\n    return edgeView.getPointAtRatio(num / 100);\n  }\n\n  return edgeView.getPointAtLength(num);\n}","map":null,"metadata":{},"sourceType":"module"}