{"ast":null,"code":"import React, { useContext } from 'react';\nimport classnames from 'classnames';\nimport { Toolbar } from '@antv/x6-react-components';\nimport AppContext from '../../../context';\nimport { uuidv4 } from '@antv/xflow';\nimport { ToolbarItem } from './toolbar-item';\nimport useFullscreen from '../../../hooks/useFullscreen';\nimport { getContainer } from '../../../util';\nexport var ToolbarGroup = function (props) {\n  var _a;\n\n  var group = props.group,\n      layout = props.layout;\n  var flowchartId = useContext(AppContext).flowchartId;\n\n  var _b = useFullscreen(getContainer(flowchartId)),\n      fullscreen = _b[0],\n      toggleFullscreen = _b[1];\n\n  var groupKey = React.useMemo(function () {\n    return group.name || uuidv4();\n  }, [group.name]);\n  var _c = group.items,\n      items = _c === void 0 ? [] : _c;\n\n  if (items.length === 0) {\n    return null;\n  }\n\n  var clz = classnames((_a = {}, _a['xflow-toolbar-group'] = true, _a));\n  items = items.filter(function (item) {\n    return item.id !== 'fullscreen';\n  });\n  items.push({\n    id: 'fullscreen',\n    tooltip: fullscreen ? '退出全屏' : '全屏',\n    iconName: fullscreen ? 'FullscreenExitOutlined' : 'FullscreenOutlined',\n    onClick: function () {\n      toggleFullscreen();\n    }\n  });\n  return React.createElement(Toolbar.Group, {\n    className: clz,\n    key: groupKey\n  }, items.map(function (item) {\n    return React.createElement(ToolbarItem, {\n      item: item,\n      layout: layout,\n      key: item.id\n    });\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}