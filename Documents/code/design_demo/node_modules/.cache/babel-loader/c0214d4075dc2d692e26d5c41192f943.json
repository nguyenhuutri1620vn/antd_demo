{"ast":null,"code":"import React, { useEffect, useRef, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport { setStyles, Log } from '../../utils';\n\nvar Toolbar = function (_a) {\n  var _b, _c;\n\n  var toolbarCfg = _a.toolbarCfg,\n      container = _a.container,\n      graph = _a.graph;\n  var useGraph = useRef();\n  var width = useRef();\n  var height = useRef();\n  var zoom = useRef(1);\n  var _d = toolbarCfg.zoomFactor,\n      zoomFactor = _d === void 0 ? 0.25 : _d,\n      renderIcon = toolbarCfg.renderIcon;\n\n  var _e = useFullscreen(container),\n      fullscreen = _e[0],\n      toggleFullscreen = _e[1]; // 获取当全屏时的窗口大小\n\n\n  var getWindow = function () {\n    return [window.outerWidth, window.outerHeight];\n  }; // 切换全屏时保存 graph 尺寸\n\n\n  var toggleWidth = function (f) {\n    var _a;\n\n    var size = f ? getWindow() : [width.current, height.current];\n    (_a = useGraph.current) === null || _a === void 0 ? void 0 : _a.changeSize(size[0], size[1]);\n  }; // 获取缩放中心\n\n\n  var getCenter = function () {\n    if (!container) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n\n    return {\n      x: container.clientWidth / 2,\n      y: container.clientHeight / 2\n    };\n  }; // in 放大\n\n\n  var zoomIn = function () {\n    var _a;\n\n    (_a = useGraph.current) === null || _a === void 0 ? void 0 : _a.zoom(Math.min(zoom.current + zoomFactor, 5), getCenter());\n  }; // out 缩小\n\n\n  var zoomOut = function () {\n    var _a;\n\n    (_a = useGraph.current) === null || _a === void 0 ? void 0 : _a.zoom(Math.max(zoom.current - zoomFactor, 0.25), getCenter());\n  };\n\n  useEffect(function () {\n    if (graph) {\n      useGraph.current = graph;\n      width.current = container === null || container === void 0 ? void 0 : container.clientWidth;\n      height.current = container === null || container === void 0 ? void 0 : container.clientHeight;\n    }\n  }, [graph]);\n\n  var setToggleFullscreen = function () {\n    toggleFullscreen();\n    toggleWidth(!document.fullscreenElement);\n  };\n\n  if (renderIcon) {\n    // 用法升级，提示旧用户\n    if (!((_c = (_b = renderIcon.toString().match(/\\(([^)]*)\\)/)) === null || _b === void 0 ? void 0 : _b[1]) === null || _c === void 0 ? void 0 : _c.includes('{'))) {\n      Log.warn(\"renderIcon \\u7528\\u6CD5\\u5DF2\\u7ECF\\u5347\\u7EA7\\uFF0CrenderIcon(zoomIn, xx) => renderIcon({zoomIn, xx})\");\n    }\n\n    return renderIcon({\n      zoomIn: zoomIn,\n      zoomOut: zoomOut,\n      toggleFullscreen: setToggleFullscreen,\n      fullscreen: fullscreen\n    });\n  }\n\n  return React.createElement(Fragment, null, !fullscreen ? React.createElement(\"span\", {\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: setToggleFullscreen\n  }, \"\\u2610\") : React.createElement(\"span\", {\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: setToggleFullscreen\n  }, \"\\u2684\"), React.createElement(\"span\", {\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: zoomIn\n  }, \"+\"), React.createElement(\"span\", {\n    style: {\n      cursor: 'pointer'\n    },\n    onClick: zoomOut\n  }, \"-\"));\n};\n\nexport var createToolbar = function (_a) {\n  var _b;\n\n  var graph = _a.graph,\n      container = _a.container,\n      toolbarCfg = _a.toolbarCfg;\n  var style = toolbarCfg.style,\n      show = toolbarCfg.show,\n      className = toolbarCfg.className;\n  var toolbarId = \"\".concat(graph.get('id'), \"-toolbar\");\n  var exist = document.querySelector(\"#\".concat(toolbarId));\n\n  if (exist) {\n    (_b = exist.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(exist);\n  }\n\n  if (!show) {\n    return;\n  }\n\n  var defaultStyle = {\n    position: 'absolute',\n    right: '12px',\n    top: '12px',\n    display: 'flex',\n    flexDirection: 'column',\n    padding: '6px',\n    borderRadius: '2px',\n    fontSize: '24px',\n    textAlign: 'center',\n    lineHeight: '24px',\n    color: 'rgba(0,0,0,.65)',\n    backgroundColor: '#fff',\n    boxShadow: '0 0 3px #ccc'\n  };\n  var mountPoint = document.createElement('div');\n  mountPoint.id = toolbarId;\n  mountPoint.className = className !== null && className !== void 0 ? className : 'charts-toolbar';\n  setStyles(mountPoint, defaultStyle);\n  setStyles(mountPoint, style);\n  ReactDOM.render(React.createElement(Toolbar, {\n    graph: graph,\n    container: container,\n    toolbarCfg: toolbarCfg\n  }), mountPoint); // @ts-ignore\n\n  container.appendChild(mountPoint);\n};","map":null,"metadata":{},"sourceType":"module"}