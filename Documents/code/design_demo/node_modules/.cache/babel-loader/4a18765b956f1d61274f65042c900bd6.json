{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { inject, injectable, postConstruct } from 'mana-syringe';\nimport { ICommandHandler, ICommandContextProvider } from '../../command/interface';\nimport { XFlowGraphCommands } from '../constant';\nimport { MODELS } from '../../model-service';\nexport var NsGraphMeta;\n\n(function (NsGraphMeta) {\n  /** Command Id: 用于注册named factory */\n  NsGraphMeta.command = XFlowGraphCommands.LOAD_META;\n  /** hookName */\n\n  NsGraphMeta.hookKey = 'graphMeta';\n})(NsGraphMeta || (NsGraphMeta = {}));\n\nlet GraphMetaCommand =\n/** 创建节点命令 */\nclass GraphMetaCommand {\n  constructor() {\n    /** 执行Cmd */\n    this.execute = () => __awaiter(this, void 0, void 0, function* () {\n      const {\n        args,\n        hooks: runtimeHook\n      } = this.ctx.getArgs();\n      const hooks = this.ctx.getHooks();\n      const result = yield hooks.graphMeta.call(\n      /** 执行hooks pipeline处理args */\n      args,\n      /** 执行 callback */\n      handlerArgs => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graphMetaService\n        } = handlerArgs;\n        const meta = graphMetaService ? yield graphMetaService(handlerArgs) : Object.assign({}, handlerArgs === null || handlerArgs === void 0 ? void 0 : handlerArgs.meta);\n        return Object.assign({\n          flowId: meta === null || meta === void 0 ? void 0 : meta.flowId\n        }, meta);\n      }),\n      /** 外部的 hook */\n      runtimeHook);\n      const modelService = this.ctx.getModelService();\n      /** 如果已经注册，直接更新已有的值 */\n\n      const model = yield MODELS.GRAPH_META.getModel(modelService);\n      model.setValue(result);\n      /** 设置结果 */\n\n      this.ctx.setResult(result);\n      return this;\n    });\n    /** undo cmd */\n\n\n    this.undo = () => __awaiter(this, void 0, void 0, function* () {\n      this.ctx.undo();\n      return this;\n    });\n    /** redo cmd */\n\n\n    this.redo = () => __awaiter(this, void 0, void 0, function* () {\n      if (!this.ctx.isUndoable) {\n        yield this.execute();\n      }\n\n      return this;\n    });\n  }\n\n  init() {\n    this.ctx = this.contextProvider();\n  }\n  /** isUndoable */\n\n\n  isUndoable() {\n    return this.ctx.isUndoable();\n  }\n\n};\n\n__decorate([inject(ICommandContextProvider), __metadata(\"design:type\", Object)], GraphMetaCommand.prototype, \"contextProvider\", void 0);\n\n__decorate([postConstruct(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], GraphMetaCommand.prototype, \"init\", null);\n\nGraphMetaCommand = __decorate([injectable({\n  token: {\n    token: ICommandHandler,\n    named: NsGraphMeta.command.id\n  }\n})\n/** 创建节点命令 */\n], GraphMetaCommand);\nexport { GraphMetaCommand };","map":null,"metadata":{},"sourceType":"module"}