{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { ToolsView } from '../../view/tool';\nimport { Registry } from '../registry';\nimport { Button } from './button';\nimport { Boundary } from './boundary';\nimport { Vertices } from './vertices';\nimport { Segments } from './segments';\nimport { SourceAnchor, TargetAnchor } from './anchor';\nimport { SourceArrowhead, TargetArrowhead } from './arrowhead';\nimport { CellEditor } from './editor';\nexport var NodeTool;\n\n(function (NodeTool) {\n  NodeTool.presets = {\n    boundary: Boundary,\n    button: Button,\n    'button-remove': Button.Remove,\n    'node-editor': CellEditor.NodeEditor\n  };\n  NodeTool.registry = Registry.create({\n    type: 'node tool',\n\n    process(name, options) {\n      if (typeof options === 'function') {\n        return options;\n      }\n\n      let parent = ToolsView.ToolItem;\n\n      const {\n        inherit\n      } = options,\n            others = __rest(options, [\"inherit\"]);\n\n      if (inherit) {\n        const base = this.get(inherit);\n\n        if (base == null) {\n          this.onNotFound(inherit, 'inherited');\n        } else {\n          parent = base;\n        }\n      }\n\n      if (others.name == null) {\n        others.name = name;\n      }\n\n      return parent.define.call(parent, others);\n    }\n\n  });\n  NodeTool.registry.register(NodeTool.presets, true);\n})(NodeTool || (NodeTool = {}));\n\nexport var EdgeTool;\n\n(function (EdgeTool) {\n  EdgeTool.presets = {\n    boundary: Boundary,\n    vertices: Vertices,\n    segments: Segments,\n    button: Button,\n    'button-remove': Button.Remove,\n    'source-anchor': SourceAnchor,\n    'target-anchor': TargetAnchor,\n    'source-arrowhead': SourceArrowhead,\n    'target-arrowhead': TargetArrowhead,\n    'edge-editor': CellEditor.EdgeEditor\n  };\n  EdgeTool.registry = Registry.create({\n    type: 'edge tool',\n\n    process(name, options) {\n      if (typeof options === 'function') {\n        return options;\n      }\n\n      let parent = ToolsView.ToolItem;\n\n      const {\n        inherit\n      } = options,\n            others = __rest(options, [\"inherit\"]);\n\n      if (inherit) {\n        const base = this.get(inherit);\n\n        if (base == null) {\n          this.onNotFound(inherit, 'inherited');\n        } else {\n          parent = base;\n        }\n      }\n\n      if (others.name == null) {\n        others.name = name;\n      }\n\n      return parent.define.call(parent, others);\n    }\n\n  });\n  EdgeTool.registry.register(EdgeTool.presets, true);\n})(EdgeTool || (EdgeTool = {}));","map":null,"metadata":{},"sourceType":"module"}