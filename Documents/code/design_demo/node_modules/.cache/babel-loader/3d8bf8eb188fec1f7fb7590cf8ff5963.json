{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _merge from \"lodash/merge\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { TYPES } from '@antv/l7-core';\nimport { bindAll, boundsContains, DOM, padBounds, Satistics } from '@antv/l7-utils';\nimport { EventEmitter } from 'eventemitter3';\nimport Supercluster from 'supercluster/dist/supercluster';\nimport Marker from './marker';\n\nvar MarkerLayer = function (_EventEmitter) {\n  _inherits(MarkerLayer, _EventEmitter);\n\n  var _super = _createSuper(MarkerLayer);\n\n  function MarkerLayer(option) {\n    var _this$markerLayerOpti;\n\n    var _this;\n\n    _classCallCheck(this, MarkerLayer);\n\n    _this = _super.call(this);\n\n    _defineProperty(_assertThisInitialized(_this), \"markers\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"markerLayerOption\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"clusterIndex\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"points\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"clusterMarkers\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"mapsService\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"scene\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"zoom\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"bbox\", void 0);\n\n    _this.markerLayerOption = _merge(_this.getDefault(), option);\n    bindAll(['update'], _assertThisInitialized(_this));\n    _this.zoom = ((_this$markerLayerOpti = _this.markerLayerOption.clusterOption) === null || _this$markerLayerOpti === void 0 ? void 0 : _this$markerLayerOpti.zoom) || -99;\n    return _this;\n  }\n\n  _createClass(MarkerLayer, [{\n    key: \"getDefault\",\n    value: function getDefault() {\n      return {\n        cluster: false,\n        clusterOption: {\n          radius: 80,\n          maxZoom: 20,\n          minZoom: 0,\n          zoom: -99,\n          style: {},\n          className: ''\n        }\n      };\n    }\n  }, {\n    key: \"addTo\",\n    value: function addTo(scene) {\n      this.scene = scene;\n      this.mapsService = scene.get(TYPES.IMapService);\n\n      if (this.markerLayerOption.cluster) {\n        this.initCluster();\n        this.update();\n        this.mapsService.on('camerachange', this.update);\n        this.mapsService.on('viewchange', this.update);\n      }\n\n      this.addMarkers();\n      return this;\n    }\n  }, {\n    key: \"addMarker\",\n    value: function addMarker(marker) {\n      var cluster = this.markerLayerOption.cluster;\n\n      if (cluster) {\n        this.addPoint(marker, this.markers.length);\n      }\n\n      this.markers.push(marker);\n    }\n  }, {\n    key: \"removeMarker\",\n    value: function removeMarker(marker) {\n      this.markers.indexOf(marker);\n      var markerIndex = this.markers.indexOf(marker);\n\n      if (markerIndex > -1) {\n        this.markers.splice(markerIndex, 1);\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      this.markers.map(function (m) {\n        m.getElement().style.opacity = '0';\n      });\n      this.clusterMarkers.map(function (m) {\n        m.getElement().style.opacity = '0';\n      });\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.markers.map(function (m) {\n        m.getElement().style.opacity = '1';\n      });\n      this.clusterMarkers.map(function (m) {\n        m.getElement().style.opacity = '1';\n      });\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers() {\n      var cluster = this.markerLayerOption.cluster;\n      return cluster ? this.clusterMarkers : this.markers;\n    }\n  }, {\n    key: \"addMarkers\",\n    value: function addMarkers() {\n      var _this2 = this;\n\n      this.getMarkers().forEach(function (marker) {\n        marker.addTo(_this2.scene);\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.markers.forEach(function (marker) {\n        marker.remove();\n      });\n      this.clusterMarkers.forEach(function (clusterMarker) {\n        clusterMarker.remove();\n      });\n      this.mapsService.off('camerachange', this.update);\n      this.markers = [];\n      this.clusterMarkers = [];\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.clear();\n      this.removeAllListeners();\n    }\n  }, {\n    key: \"addPoint\",\n    value: function addPoint(marker, id) {\n      var _marker$getLnglat = marker.getLnglat(),\n          lng = _marker$getLnglat.lng,\n          lat = _marker$getLnglat.lat;\n\n      var feature = {\n        geometry: {\n          type: 'Point',\n          coordinates: [lng, lat]\n        },\n        properties: _objectSpread(_objectSpread({}, marker.getExtData()), {}, {\n          marker_id: id\n        })\n      };\n      this.points.push(feature);\n    }\n  }, {\n    key: \"initCluster\",\n    value: function initCluster() {\n      if (!this.markerLayerOption.cluster) {\n        return;\n      }\n\n      var _ref = this.markerLayerOption.clusterOption,\n          radius = _ref.radius,\n          _ref$minZoom = _ref.minZoom,\n          minZoom = _ref$minZoom === void 0 ? 0 : _ref$minZoom,\n          maxZoom = _ref.maxZoom;\n      this.clusterIndex = new Supercluster({\n        radius: radius,\n        minZoom: minZoom,\n        maxZoom: maxZoom\n      });\n      this.clusterIndex.load(this.points);\n    }\n  }, {\n    key: \"getClusterMarker\",\n    value: function getClusterMarker(viewBounds, zoom) {\n      var _this3 = this;\n\n      var viewBBox = viewBounds[0].concat(viewBounds[1]);\n      var clusterPoint = this.clusterIndex.getClusters(viewBBox, zoom);\n      this.clusterMarkers.forEach(function (marker) {\n        marker.remove();\n      });\n      this.clusterMarkers = [];\n      clusterPoint.forEach(function (feature) {\n        var _feature$properties;\n\n        var _this3$markerLayerOpt = _this3.markerLayerOption.clusterOption,\n            field = _this3$markerLayerOpt.field,\n            method = _this3$markerLayerOpt.method;\n\n        if (feature.properties && (_feature$properties = feature.properties) !== null && _feature$properties !== void 0 && _feature$properties.cluster_id) {\n          var _feature$properties2;\n\n          var clusterData = _this3.getLeaves((_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.cluster_id);\n\n          feature.properties.clusterData = clusterData;\n\n          if (field && method) {\n            var columnData = clusterData === null || clusterData === void 0 ? void 0 : clusterData.map(function (item) {\n              var data = _defineProperty({}, field, item.properties[field]);\n\n              return data;\n            });\n            var column = Satistics.getColumn(columnData, field);\n            var stat = Satistics.getSatByColumn(method, column);\n            var fieldName = 'point_' + method;\n            feature.properties[fieldName] = stat.toFixed(2);\n          }\n        }\n\n        var marker = _this3.clusterMarker(feature);\n\n        _this3.clusterMarkers.push(marker);\n\n        marker.addTo(_this3.scene);\n      });\n    }\n  }, {\n    key: \"getLeaves\",\n    value: function getLeaves(clusterId) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (!clusterId) {\n        return null;\n      }\n\n      return this.clusterIndex.getLeaves(clusterId, limit, offset);\n    }\n  }, {\n    key: \"clusterMarker\",\n    value: function clusterMarker(feature) {\n      var clusterOption = this.markerLayerOption.clusterOption;\n      var _ref2 = clusterOption,\n          _ref2$element = _ref2.element,\n          element = _ref2$element === void 0 ? this.generateElement.bind(this) : _ref2$element;\n      var marker = new Marker({\n        element: element(feature)\n      }).setLnglat({\n        lng: feature.geometry.coordinates[0],\n        lat: feature.geometry.coordinates[1]\n      });\n      return marker;\n    }\n  }, {\n    key: \"normalMarker\",\n    value: function normalMarker(feature) {\n      var marker_id = feature.properties.marker_id;\n      return this.markers[marker_id];\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var zoom = this.mapsService.getZoom();\n      var bbox = this.mapsService.getBounds();\n\n      if (!this.bbox || Math.abs(zoom - this.zoom) >= 1 || !boundsContains(this.bbox, bbox)) {\n        this.bbox = padBounds(bbox, 0.5);\n        this.zoom = Math.floor(zoom);\n        this.getClusterMarker(this.bbox, this.zoom);\n      }\n    }\n  }, {\n    key: \"generateElement\",\n    value: function generateElement(feature) {\n      var el = DOM.create('div', 'l7-marker-cluster');\n      var label = DOM.create('div', '', el);\n      var span = DOM.create('span', '', label);\n      var _this$markerLayerOpti2 = this.markerLayerOption.clusterOption,\n          field = _this$markerLayerOpti2.field,\n          method = _this$markerLayerOpti2.method;\n      feature.properties.point_count = feature.properties.point_count || 1;\n      var text = field && method ? feature.properties['point_' + method] || feature.properties[field] : feature.properties.point_count;\n      span.textContent = text;\n      return el;\n    }\n  }]);\n\n  return MarkerLayer;\n}(EventEmitter);\n\nexport { MarkerLayer as default };","map":null,"metadata":{},"sourceType":"module"}