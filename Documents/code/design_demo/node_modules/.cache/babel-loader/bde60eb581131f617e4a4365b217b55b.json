{"ast":null,"code":"import { __awaiter, __decorate, __metadata } from \"tslib\";\nimport { singleton, inject } from 'mana-syringe';\nimport { IModelContribution } from '../interface';\nimport { DisposableCollection, Disposable } from '../../common/disposable';\nimport { disposableSubscribe } from '../../common/event-helper';\nimport { IGraphProvider } from '../../xflow-main/graph/graph-provider';\nimport * as MODELS from '../constant';\nlet GraphModelContribution = class GraphModelContribution {\n  constructor() {\n    /** 获取画布实例 */\n    this.getGraphInstance = () => __awaiter(this, void 0, void 0, function* () {\n      const graphInstance = yield this.graphProvider.getGraphInstance();\n      const graphConfig = yield this.graphProvider.getGraphOptions();\n      return {\n        graph: graphInstance,\n        config: graphConfig\n      };\n    });\n  }\n\n  registerModel(registry) {\n    /** X6 GRAPH META */\n    registry.registerModel({\n      id: MODELS.GRAPH_META.id,\n      getInitialValue: () => ({\n        flowId: '-1'\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        return Disposable.create(() => {\n          self.setValue({\n            flowId: '-1'\n          });\n        });\n      })\n    });\n    /** Graph 多选状态 */\n\n    registry.registerModel({\n      id: MODELS.GRAPH_ENABLE_MULTI_SELECT.id,\n      getInitialValue: () => ({\n        isEnable: false\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        return Disposable.create(() => {\n          self.setValue({\n            isEnable: false\n          });\n        });\n      })\n    });\n    /** 选中Cells状态 */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_CELLS.id,\n      getInitialValue: () => [],\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph\n        } = yield this.getGraphInstance();\n\n        const onChange = e => {\n          const {\n            selected\n          } = e;\n          self.setValue(selected);\n        };\n\n        graph.on('selection:changed', onChange);\n        return Disposable.create(() => graph.off('selection:changed', onChange));\n      })\n    });\n    /** 选中Cell状态 */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_CELL.id,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const cellsModel = yield MODELS.SELECTED_CELLS.getModel(modelService);\n        return cellsModel.watch(function () {\n          let cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          self.setValue([...cells].pop() || null);\n        });\n      })\n    });\n    /** 选中节点列表状态 */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_NODES.id,\n      getInitialValue: () => [],\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n        return model.watch(function () {\n          let cells = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n          const nodes = cells.filter(cell => cell.isNode());\n          self.setValue(nodes);\n        });\n      })\n    });\n    /** 选中节点状态 */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_NODE.id,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n        const disposable = model.watch(nodes => {\n          self.setValue([...nodes].pop() || null);\n        });\n        return disposable;\n      })\n    });\n    /** 是否选中节点状态 */\n\n    registry.registerModel({\n      id: MODELS.IS_NODE_SELECTED.id,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n        const disposable = model.watch(nodes => {\n          self.setValue(nodes.length > 0);\n        });\n        return disposable;\n      })\n    });\n    /** 画布选中节点是否是Group */\n\n    registry.registerModel({\n      id: MODELS.IS_GROUP_SELECTED.id,\n      getInitialValue: () => false,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n        const disposable = model.watch(cells => {\n          const isGroup = cells.every(cell => {\n            return cell && cell.getProp('isGroup') === true;\n          });\n          self.setValue(isGroup);\n        });\n        return disposable;\n      })\n    });\n    /** 画布选中节点是否是Group */\n\n    registry.registerModel({\n      id: MODELS.SELECTED_GROUPS.id,\n      getInitialValue: () => [],\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_NODES.getModel(modelService);\n        const disposable = model.watch(cells => {\n          const groups = cells.filter(cell => {\n            return cell && cell.getProp('isGroup') === true;\n          });\n          self.setValue(groups);\n        });\n        return disposable;\n      })\n    });\n    /** 画布选中节点是否是普通节点 */\n\n    registry.registerModel({\n      id: MODELS.IS_NORMAL_NODES_SELECTED.id,\n      getInitialValue: () => false,\n      watchChange: (self, modelService) => __awaiter(this, void 0, void 0, function* () {\n        const model = yield MODELS.SELECTED_CELLS.getModel(modelService);\n        const disposable = model.watch(cells => {\n          const isNormalNodesSelected = cells.every(cell => {\n            const isNotGroup = !(cell && cell.getProp('isGroup'));\n            const isNotGroupChild = !(cell && cell.getProp('group'));\n            return isNotGroup && isNotGroupChild;\n          });\n          const isNodeSelected = cells.length > 0 && isNormalNodesSelected;\n          self.setValue(isNodeSelected);\n        });\n        return disposable;\n      })\n    });\n    /** 画布缩放状态 */\n\n    registry.registerModel({\n      id: MODELS.GRAPH_SCALE.id,\n      getInitialValue: () => ({\n        zoomFactor: -1\n      }),\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph\n        } = yield this.getGraphInstance();\n\n        const onChange = e => {\n          const factor = graph.zoom();\n          self.setValue(Object.assign(Object.assign({}, e), {\n            zoomFactor: factor\n          }));\n        };\n\n        graph.on('scale', onChange);\n        return Disposable.create(() => graph.off('scale', onChange));\n      })\n    });\n    /** 画布右键菜单状态 */\n\n    registry.registerModel({\n      id: MODELS.CONTEXTMENU_TARGET.id,\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph,\n          config\n        } = yield this.getGraphInstance();\n\n        const onContextMenu = type => e => {\n          const {\n            x,\n            y\n          } = e;\n          const pagePoint = graph.localToClient({\n            x,\n            y\n          });\n          const clientRect = config.rootContainer.getBoundingClientRect();\n          const anchor = {\n            x: pagePoint.x - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.x) || 0),\n            y: pagePoint.y - ((clientRect === null || clientRect === void 0 ? void 0 : clientRect.y) || 0)\n          };\n          self.setValue({\n            type,\n            anchor,\n            data: e,\n            cell: e.cell\n          });\n        };\n\n        const toDispose = new DisposableCollection();\n        toDispose.pushAll([disposableSubscribe(graph, 'node:contextmenu', onContextMenu('node')), disposableSubscribe(graph, 'edge:contextmenu', onContextMenu('edge')), disposableSubscribe(graph, 'blank:contextmenu', onContextMenu('blank'))]);\n        return toDispose;\n      })\n    });\n    /** 画布历史Redo */\n\n    registry.registerModel({\n      id: MODELS.HISTORY_REDOABLE.id,\n      getInitialValue: () => false,\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph\n        } = yield this.getGraphInstance();\n\n        const onChange = () => {\n          const canRedo = graph.history.canRedo();\n          self.setValue(canRedo);\n        };\n\n        if (graph.history) {\n          graph.history.on('change', onChange);\n        }\n\n        return Disposable.create(() => graph.history.off('change', onChange));\n      })\n    });\n    /** 画布历史undo */\n\n    registry.registerModel({\n      id: MODELS.HISTORY_UNDOABLE.id,\n      getInitialValue: () => false,\n      watchChange: self => __awaiter(this, void 0, void 0, function* () {\n        const {\n          graph\n        } = yield this.getGraphInstance();\n\n        const onChange = () => {\n          const canUndo = graph.history.canUndo();\n          self.setValue(canUndo);\n        };\n\n        if (graph.history) {\n          graph.history.on('change', onChange);\n        }\n\n        return Disposable.create(() => graph.history.off('change', onChange));\n      })\n    });\n  }\n\n};\n\n__decorate([inject(IGraphProvider), __metadata(\"design:type\", Object)], GraphModelContribution.prototype, \"graphProvider\", void 0);\n\nGraphModelContribution = __decorate([singleton({\n  contrib: IModelContribution\n})], GraphModelContribution);\nexport { GraphModelContribution };","map":null,"metadata":{},"sourceType":"module"}