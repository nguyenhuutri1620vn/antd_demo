{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { registerNode, BaseGlobal as Global } from '@antv/g6-core';\nimport { deepMix } from '@antv/util'; // 带有图标的圆，可用于拓扑图中\n\nregisterNode('circle', {\n  // 自定义节点时的配置\n  options: {\n    size: Global.defaultNode.size,\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize,\n        fontFamily: Global.windowFontFamily\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'circle',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = (this.mergeStyle || this.getOptions(cfg)).icon,\n        defaultIcon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var icon = deepMix({}, defaultIcon, cfg.icon);\n    var name = \"\".concat(this.type, \"-keyShape\");\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: name,\n      name: name,\n      draggable: true\n    });\n    group['shapeMap'][name] = keyShape;\n    var width = icon.width,\n        height = icon.height,\n        show = icon.show,\n        text = icon.text;\n\n    if (show) {\n      var iconName = \"\".concat(this.type, \"-icon\");\n\n      if (text) {\n        group['shapeMap'][iconName] = group.addShape('text', {\n          attrs: __assign({\n            x: 0,\n            y: 0,\n            fontSize: 12,\n            fill: '#000',\n            stroke: '#000',\n            textBaseline: 'middle',\n            textAlign: 'center'\n          }, icon),\n          className: iconName,\n          name: iconName,\n          draggable: true\n        });\n      } else {\n        group['shapeMap'][iconName] = group.addShape('image', {\n          attrs: __assign({\n            x: -width / 2,\n            y: -height / 2\n          }, icon),\n          className: iconName,\n          name: iconName,\n          draggable: true\n        });\n      }\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var linkPoints = (this.mergeStyle || this.getOptions(cfg)).linkPoints;\n    if (!linkPoints) return;\n\n    var _a = linkPoints || {},\n        top = _a.top,\n        left = _a.left,\n        right = _a.right,\n        bottom = _a.bottom,\n        markSize = _a.size,\n        markR = _a.r,\n        markStyle = __rest(_a, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    if (left) {\n      // left circle\n      var name_1 = 'link-point-left';\n      group['shapeMap'][name_1] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -r,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_1,\n        name: name_1,\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      var name_2 = 'link-point-right';\n      group['shapeMap'][name_2] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: r,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_2,\n        name: name_2,\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      var name_3 = 'link-point-top';\n      group['shapeMap'][name_3] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -r,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_3,\n        name: name_3,\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      var name_4 = 'link-point-bottom';\n      group['shapeMap'][name_4] = group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: r,\n          r: markSize / 2 || markR || 5\n        }),\n        className: name_4,\n        name: name_4,\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = (this.mergeStyle || this.getOptions(cfg)).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = deepMix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var r = size[0] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      r: r\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item, updateType) {\n    var group = item.getContainer();\n    var size = this.getSize(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n    // const strokeStyle = {\n    //   stroke: cfg.color,\n    //   r: size[0] / 2,\n    // };\n    // // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n    // const keyShape = item.get('keyShape');\n    // TODO: performance\n    // const style = deepMix({}, keyShape.attr(), strokeStyle, cfg.style);\n    // const style = deepMix({}, keyShape.attr(), cfg.style);\n\n    var style = __assign({}, cfg.style);\n\n    if (cfg.style.stroke === undefined && cfg.color) {\n      style.stroke = cfg.color;\n    }\n\n    if (cfg.style.r === undefined && !isNaN(size[0])) {\n      style.r = size[0] / 2;\n    }\n\n    this.updateShape(cfg, item, style, true, updateType); // (this as any).updateShape(cfg, item, style, true, updateType);\n\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');","map":null,"metadata":{},"sourceType":"module"}