{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { clone } from '@antv/util';\nimport Base from '../base';\nvar DELTA = 0.05;\nvar lensDelegateStyle = {\n  stroke: '#000',\n  strokeOpacity: 0.8,\n  lineWidth: 2,\n  fillOpacity: 0.1,\n  fill: '#ccc'\n};\n\nvar Fisheye =\n/** @class */\nfunction (_super) {\n  __extends(Fisheye, _super);\n\n  function Fisheye(config) {\n    return _super.call(this, config) || this;\n  }\n\n  Fisheye.prototype.getDefaultCfgs = function () {\n    return {\n      trigger: 'mousemove',\n      d: 1.5,\n      r: 300,\n      delegateStyle: clone(lensDelegateStyle),\n      showLabel: false,\n      maxD: 5,\n      minD: 0,\n      scaleRBy: 'unset',\n      scaleDBy: 'unset',\n      showDPercent: true\n    };\n  }; // class-methods-use-this\n\n\n  Fisheye.prototype.getEvents = function () {\n    var events;\n\n    switch (this.get('trigger')) {\n      case 'click':\n        events = {\n          click: 'magnify'\n        };\n        break;\n\n      case 'drag':\n        events = {\n          click: 'createDelegate'\n        };\n        break;\n\n      default:\n        events = {\n          mousemove: 'magnify'\n        };\n        break;\n    }\n\n    return events;\n  };\n\n  Fisheye.prototype.init = function () {\n    var self = this;\n    var r = self.get('r');\n    self.set('cachedMagnifiedModels', []);\n    self.set('cachedOriginPositions', {});\n    self.set('r2', r * r);\n    var d = self.get('d');\n    self.set('molecularParam', (d + 1) * r);\n  }; // Create the delegate when the trigger is drag\n\n\n  Fisheye.prototype.createDelegate = function (e) {\n    var _this = this;\n\n    var self = this;\n    var lensDelegate = self.get('delegate');\n\n    if (!lensDelegate || lensDelegate.destroyed) {\n      self.magnify(e);\n      lensDelegate = self.get('delegate'); // drag to move the lens\n\n      lensDelegate.on('dragstart', function (evt) {\n        self.set('delegateCenterDiff', {\n          x: lensDelegate.attr('x') - evt.x,\n          y: lensDelegate.attr('y') - evt.y\n        });\n      });\n      lensDelegate.on('drag', function (evt) {\n        self.magnify(evt);\n      }); // 绑定调整范围（r）和缩放系数(d)的监听\n      // 由于 drag 用于改变 lens 位置, 因此在此模式下, drag 不能用于调整 r 和 d\n      // scaling d\n\n      if (this.get('scaleDBy') === 'wheel') {\n        lensDelegate.on('mousewheel', function (evt) {\n          _this.scaleDByWheel(evt);\n        });\n      } // scaling r\n\n\n      if (this.get('scaleRBy') === 'wheel') {\n        lensDelegate.on('mousewheel', function (evt) {\n          self.scaleRByWheel(evt);\n        });\n      }\n    }\n  };\n  /**\n   * Scale the range by wheel\n   * @param e mouse wheel event\n   */\n\n\n  Fisheye.prototype.scaleRByWheel = function (e) {\n    var self = this;\n    if (!e || !e.originalEvent) return;\n    if (e.preventDefault) e.preventDefault();\n    var graph = self.get('graph');\n    var ratio;\n    var lensDelegate = self.get('delegate');\n    var lensCenter = lensDelegate ? {\n      x: lensDelegate.attr('x'),\n      y: lensDelegate.attr('y')\n    } : undefined;\n    var mousePos = lensCenter || graph.getPointByClient(e.clientX, e.clientY);\n\n    if (e.originalEvent.wheelDelta < 0) {\n      ratio = 1 - DELTA;\n    } else {\n      ratio = 1 / (1 - DELTA);\n    }\n\n    var maxR = self.get('maxR');\n    var minR = self.get('minR');\n    var r = self.get('r');\n\n    if (r > (maxR || graph.get('height')) && ratio > 1 || r < (minR || graph.get('height') * 0.05) && ratio < 1) {\n      ratio = 1;\n    }\n\n    r *= ratio;\n    self.set('r', r);\n    self.set('r2', r * r);\n    var d = self.get('d');\n    self.set('molecularParam', (d + 1) * r);\n    self.set('delegateCenterDiff', undefined);\n    self.magnify(e, mousePos);\n  };\n  /**\n   * Scale the range by dragging\n   * @param e mouse event\n   */\n\n\n  Fisheye.prototype.scaleRByDrag = function (e) {\n    var self = this;\n    if (!e) return;\n    var dragPrePos = self.get('dragPrePos');\n    var graph = self.get('graph');\n    var ratio;\n    var mousePos = graph.getPointByClient(e.clientX, e.clientY);\n\n    if (e.x - dragPrePos.x < 0) {\n      ratio = 1 - DELTA;\n    } else {\n      ratio = 1 / (1 - DELTA);\n    }\n\n    var maxR = self.get('maxR');\n    var minR = self.get('minR');\n    var r = self.get('r');\n\n    if (r > (maxR || graph.get('height')) && ratio > 1 || r < (minR || graph.get('height') * 0.05) && ratio < 1) {\n      ratio = 1;\n    }\n\n    r *= ratio;\n    self.set('r', r);\n    self.set('r2', r * r);\n    var d = self.get('d');\n    self.set('molecularParam', (d + 1) * r);\n    self.magnify(e, mousePos);\n    self.set('dragPrePos', {\n      x: e.x,\n      y: e.y\n    });\n  };\n  /**\n   * Scale the magnifying factor by wheel\n   * @param e mouse wheel event\n   */\n\n\n  Fisheye.prototype.scaleDByWheel = function (evt) {\n    var self = this;\n    if (!evt && !evt.originalEvent) return;\n    if (evt.preventDefault) evt.preventDefault();\n    var delta = 0;\n\n    if (evt.originalEvent.wheelDelta < 0) {\n      delta = -0.1;\n    } else {\n      delta = 0.1;\n    }\n\n    var d = self.get('d');\n    var newD = d + delta;\n    var maxD = self.get('maxD');\n    var minD = self.get('minD');\n\n    if (newD < maxD && newD > minD) {\n      self.set('d', newD);\n      var r = self.get('r');\n      self.set('molecularParam', (newD + 1) * r);\n      var lensDelegate = self.get('delegate');\n      var lensCenter = lensDelegate ? {\n        x: lensDelegate.attr('x'),\n        y: lensDelegate.attr('y')\n      } : undefined;\n      self.set('delegateCenterDiff', undefined);\n      self.magnify(evt, lensCenter);\n    }\n  };\n  /**\n   * Scale the magnifying factor by dragging\n   * @param e mouse event\n   */\n\n\n  Fisheye.prototype.scaleDByDrag = function (e) {\n    var self = this;\n    var dragPrePos = self.get('dragPrePos');\n    var delta = e.x - dragPrePos.x > 0 ? 0.1 : -0.1;\n    var d = self.get('d');\n    var newD = d + delta;\n    var maxD = self.get('maxD');\n    var minD = self.get('minD');\n\n    if (newD < maxD && newD > minD) {\n      self.set('d', newD);\n      var r = self.get('r');\n      self.set('molecularParam', (newD + 1) * r);\n      self.magnify(e);\n    }\n\n    self.set('dragPrePos', {\n      x: e.x,\n      y: e.y\n    });\n  };\n  /**\n   * Response function for mousemove, click, or drag to magnify\n   * @param e mouse event\n   */\n\n\n  Fisheye.prototype.magnify = function (e, mousePos) {\n    var self = this;\n    self.restoreCache();\n    var graph = self.get('graph');\n    var cachedMagnifiedModels = self.get('cachedMagnifiedModels');\n    var cachedOriginPositions = self.get('cachedOriginPositions');\n    var showLabel = self.get('showLabel');\n    var r = self.get('r');\n    var r2 = self.get('r2');\n    var d = self.get('d');\n    var molecularParam = self.get('molecularParam');\n    var nodes = graph.getNodes();\n    var nodeLength = nodes.length;\n    var mCenter = mousePos ? {\n      x: mousePos.x,\n      y: mousePos.y\n    } : {\n      x: e.x,\n      y: e.y\n    };\n\n    if (self.get('dragging') && (self.get('trigger') === 'mousemove' || self.get('trigger') === 'click')) {\n      mCenter = self.get('cacheCenter');\n    }\n\n    var delegateCenterDiff = self.get('delegateCenterDiff');\n\n    if (delegateCenterDiff) {\n      mCenter.x += delegateCenterDiff.x;\n      mCenter.y += delegateCenterDiff.y;\n    }\n\n    self.updateDelegate(mCenter, r);\n\n    for (var i = 0; i < nodeLength; i++) {\n      var model = nodes[i].getModel();\n      var x = model.x,\n          y = model.y;\n      if (isNaN(x) || isNaN(y)) continue; // the square of the distance between the node and the magnified center\n\n      var dist2 = (x - mCenter.x) * (x - mCenter.x) + (y - mCenter.y) * (y - mCenter.y);\n\n      if (!isNaN(dist2) && dist2 < r2 && dist2 !== 0) {\n        var dist = Math.sqrt(dist2); // (r * (d + 1) * (dist / r)) / (d * (dist / r) + 1);\n\n        var magnifiedDist = molecularParam * dist / (d * dist + r);\n        var cos = (x - mCenter.x) / dist;\n        var sin = (y - mCenter.y) / dist;\n        model.x = cos * magnifiedDist + mCenter.x;\n        model.y = sin * magnifiedDist + mCenter.y;\n\n        if (!cachedOriginPositions[model.id]) {\n          cachedOriginPositions[model.id] = {\n            x: x,\n            y: y,\n            texts: []\n          };\n        }\n\n        cachedMagnifiedModels.push(model);\n\n        if (showLabel && 2 * dist < r) {\n          var node = nodes[i];\n          var nodeGroup = node.getContainer();\n          var shapes = nodeGroup.getChildren();\n          var shapeLength = shapes.length;\n\n          for (var j = 0; j < shapeLength; j++) {\n            var shape = shapes[j];\n\n            if (shape.get('type') === 'text') {\n              cachedOriginPositions[model.id].texts.push({\n                visible: shape.get('visible'),\n                shape: shape\n              });\n              shape.set('visible', true);\n            }\n          }\n        }\n      }\n    }\n\n    graph.refreshPositions();\n  };\n  /**\n   * Restore the cache nodes while magnifying\n   */\n\n\n  Fisheye.prototype.restoreCache = function () {\n    var self = this;\n    var cachedMagnifiedModels = self.get('cachedMagnifiedModels');\n    var cachedOriginPositions = self.get('cachedOriginPositions');\n    var cacheLength = cachedMagnifiedModels.length;\n\n    for (var i = 0; i < cacheLength; i++) {\n      var node = cachedMagnifiedModels[i];\n      var id = node.id;\n      var ori = cachedOriginPositions[id];\n      node.x = ori.x;\n      node.y = ori.y;\n      var textLength = ori.texts.length;\n\n      for (var j = 0; j < textLength; j++) {\n        var text = ori.texts[j];\n        text.shape.set('visible', text.visible);\n      }\n    }\n\n    self.set('cachedMagnifiedModels', []);\n    self.set('cachedOriginPositions', {});\n  };\n  /**\n   * Adjust part of the parameters, including trigger, d, r, maxR, minR, maxD, minD, scaleRBy, and scaleDBy\n   * @param {FisheyeConfig} cfg\n   */\n\n\n  Fisheye.prototype.updateParams = function (cfg) {\n    var self = this;\n    var r = cfg.r,\n        d = cfg.d,\n        trigger = cfg.trigger,\n        minD = cfg.minD,\n        maxD = cfg.maxD,\n        minR = cfg.minR,\n        maxR = cfg.maxR,\n        scaleDBy = cfg.scaleDBy,\n        scaleRBy = cfg.scaleRBy;\n\n    if (!isNaN(cfg.r)) {\n      self.set('r', r);\n      self.set('r2', r * r);\n    }\n\n    if (!isNaN(d)) {\n      self.set('d', d);\n    }\n\n    if (!isNaN(maxD)) {\n      self.set('maxD', maxD);\n    }\n\n    if (!isNaN(minD)) {\n      self.set('minD', minD);\n    }\n\n    if (!isNaN(maxR)) {\n      self.set('maxR', maxR);\n    }\n\n    if (!isNaN(minR)) {\n      self.set('minR', minR);\n    }\n\n    var nd = self.get('d');\n    var nr = self.get('r');\n    self.set('molecularParam', (nd + 1) * nr);\n\n    if (trigger === 'mousemove' || trigger === 'click' || trigger === 'drag') {\n      self.set('trigger', trigger);\n    }\n\n    if (scaleDBy === 'drag' || scaleDBy === 'wheel' || scaleDBy === 'unset') {\n      self.set('scaleDBy', scaleDBy);\n      self.get('delegate').remove();\n      self.get('delegate').destroy();\n      var dPercentText = self.get('dPercentText');\n\n      if (dPercentText) {\n        dPercentText.remove();\n        dPercentText.destroy();\n      }\n    }\n\n    if (scaleRBy === 'drag' || scaleRBy === 'wheel' || scaleRBy === 'unset') {\n      self.set('scaleRBy', scaleRBy);\n      self.get('delegate').remove();\n      self.get('delegate').destroy();\n      var dPercentText = self.get('dPercentText');\n\n      if (dPercentText) {\n        dPercentText.remove();\n        dPercentText.destroy();\n      }\n    }\n  };\n  /**\n   * Update the delegate shape of the lens\n   * @param {Point} mCenter the center of the shape\n   * @param {number} r the radius of the shape\n   */\n\n\n  Fisheye.prototype.updateDelegate = function (mCenter, r) {\n    var _this = this;\n\n    var self = this;\n    var graph = self.get('graph');\n    var lensDelegate = self.get('delegate');\n\n    if (!lensDelegate || lensDelegate.destroyed) {\n      // 拖动多个\n      var parent_1 = graph.get('group');\n      var attrs = self.get('delegateStyle') || lensDelegateStyle; // model上的x, y是相对于图形中心的, delegateShape是g实例, x,y是绝对坐标\n\n      lensDelegate = parent_1.addShape('circle', {\n        attrs: __assign({\n          r: r / 1.5,\n          x: mCenter.x,\n          y: mCenter.y\n        }, attrs),\n        name: 'lens-shape',\n        draggable: true\n      });\n\n      if (this.get('trigger') !== 'drag') {\n        // 调整范围 r 的监听\n        if (this.get('scaleRBy') === 'wheel') {\n          // 使用滚轮调整 r\n          lensDelegate.on('mousewheel', function (evt) {\n            self.scaleRByWheel(evt);\n          });\n        } else if (this.get('scaleRBy') === 'drag') {\n          // 使用拖拽调整 r\n          lensDelegate.on('dragstart', function (e) {\n            self.set('dragging', true);\n            self.set('cacheCenter', {\n              x: e.x,\n              y: e.y\n            });\n            self.set('dragPrePos', {\n              x: e.x,\n              y: e.y\n            });\n          });\n          lensDelegate.on('drag', function (evt) {\n            self.scaleRByDrag(evt);\n          });\n          lensDelegate.on('dragend', function (e) {\n            self.set('dragging', false);\n          });\n        } // 调整缩放系数 d 的监听\n\n\n        if (this.get('scaleDBy') === 'wheel') {\n          // 使用滚轮调整 d\n          lensDelegate.on('mousewheel', function (evt) {\n            _this.scaleDByWheel(evt);\n          });\n        } else if (this.get('scaleDBy') === 'drag') {\n          // 使用拖拽调整 d\n          lensDelegate.on('dragstart', function (evt) {\n            self.set('dragging', true);\n            self.set('cacheCenter', {\n              x: evt.x,\n              y: evt.y\n            });\n            self.set('dragPrePos', {\n              x: evt.x,\n              y: evt.y\n            });\n          });\n          lensDelegate.on('drag', function (evt) {\n            _this.scaleDByDrag(evt);\n          });\n          lensDelegate.on('dragend', function (evt) {\n            self.set('dragging', false);\n          });\n        }\n      }\n    } else {\n      lensDelegate.attr({\n        x: mCenter.x,\n        y: mCenter.y,\n        r: r / 1.5\n      });\n    } // 绘制缩放系数百分比文本\n\n\n    if (self.get('showDPercent')) {\n      var percent = Math.round((self.get('d') - self.get('minD')) / (self.get('maxD') - self.get('minD')) * 100);\n      var dPercentText = self.get('dPercentText');\n      var textY = mCenter.y + r / 1.5 + 16;\n\n      if (!dPercentText || dPercentText.destroyed) {\n        var parent_2 = graph.get('group');\n        dPercentText = parent_2.addShape('text', {\n          attrs: {\n            text: \"\".concat(percent, \"%\"),\n            x: mCenter.x,\n            y: textY,\n            fill: '#aaa',\n            stroke: '#fff',\n            lineWidth: 1,\n            fontSize: 12\n          }\n        });\n        self.set('dPercentText', dPercentText);\n      } else {\n        dPercentText.attr({\n          text: \"\".concat(percent, \"%\"),\n          x: mCenter.x,\n          y: textY\n        });\n      }\n    }\n\n    self.set('delegate', lensDelegate);\n  };\n  /**\n   * Clear the fisheye lens\n   */\n\n\n  Fisheye.prototype.clear = function () {\n    var graph = this.get('graph');\n    this.restoreCache();\n    graph.refreshPositions();\n    var lensDelegate = this.get('delegate');\n\n    if (lensDelegate && !lensDelegate.destroyed) {\n      lensDelegate.remove();\n      lensDelegate.destroy();\n    }\n\n    var dPercentText = this.get('dPercentText');\n\n    if (dPercentText && !dPercentText.destroyed) {\n      dPercentText.remove();\n      dPercentText.destroy();\n    }\n  };\n  /**\n   * Destroy the component\n   */\n\n\n  Fisheye.prototype.destroy = function () {\n    this.clear();\n  };\n\n  return Fisheye;\n}(Base);\n\nexport default Fisheye;","map":null,"metadata":{},"sourceType":"module"}