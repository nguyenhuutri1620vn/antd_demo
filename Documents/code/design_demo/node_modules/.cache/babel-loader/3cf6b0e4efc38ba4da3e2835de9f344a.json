{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar INJECTION = Symbol.for(\"INJECTION\");\n\nfunction _proxyGetter(proto, key, resolve, doCache) {\n  function getter() {\n    if (doCache && !Reflect.hasMetadata(INJECTION, this, key)) {\n      Reflect.defineMetadata(INJECTION, resolve(), this, key);\n    }\n\n    if (Reflect.hasMetadata(INJECTION, this, key)) {\n      return Reflect.getMetadata(INJECTION, this, key);\n    } else {\n      return resolve();\n    }\n  }\n\n  function setter(newVal) {\n    Reflect.defineMetadata(INJECTION, newVal, this, key);\n  }\n\n  Object.defineProperty(proto, key, {\n    configurable: true,\n    enumerable: true,\n    get: getter,\n    set: setter\n  });\n}\n\nfunction makePropertyInjectDecorator(container, doCache) {\n  return function (serviceIdentifier) {\n    return function (proto, key) {\n      var resolve = function () {\n        return container.get(serviceIdentifier);\n      };\n\n      _proxyGetter(proto, key, resolve, doCache);\n    };\n  };\n}\n\nexports.makePropertyInjectDecorator = makePropertyInjectDecorator;\n\nfunction makePropertyInjectNamedDecorator(container, doCache) {\n  return function (serviceIdentifier, named) {\n    return function (proto, key) {\n      var resolve = function () {\n        return container.getNamed(serviceIdentifier, named);\n      };\n\n      _proxyGetter(proto, key, resolve, doCache);\n    };\n  };\n}\n\nexports.makePropertyInjectNamedDecorator = makePropertyInjectNamedDecorator;\n\nfunction makePropertyInjectTaggedDecorator(container, doCache) {\n  return function (serviceIdentifier, key, value) {\n    return function (proto, propertyName) {\n      var resolve = function () {\n        return container.getTagged(serviceIdentifier, key, value);\n      };\n\n      _proxyGetter(proto, propertyName, resolve, doCache);\n    };\n  };\n}\n\nexports.makePropertyInjectTaggedDecorator = makePropertyInjectTaggedDecorator;\n\nfunction makePropertyMultiInjectDecorator(container, doCache) {\n  return function (serviceIdentifier) {\n    return function (proto, key) {\n      var resolve = function () {\n        return container.getAll(serviceIdentifier);\n      };\n\n      _proxyGetter(proto, key, resolve, doCache);\n    };\n  };\n}\n\nexports.makePropertyMultiInjectDecorator = makePropertyMultiInjectDecorator;","map":null,"metadata":{},"sourceType":"script"}