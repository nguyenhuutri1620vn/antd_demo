{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { AbstractShape } from '@antv/g-base';\nimport { isNil, intersectRect } from '../util/util';\nimport { applyAttrsToContext, refreshElement } from '../util/draw';\nimport { getBBoxMethod } from '@antv/g-base';\nimport * as Shape from './index';\nimport Group from '../group';\n\nvar ShapeBase =\n/** @class */\nfunction (_super) {\n  __extends(ShapeBase, _super);\n\n  function ShapeBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ShapeBase.prototype.getDefaultAttrs = function () {\n    var attrs = _super.prototype.getDefaultAttrs.call(this); // 设置默认值\n\n\n    return __assign(__assign({}, attrs), {\n      lineWidth: 1,\n      lineAppendWidth: 0,\n      strokeOpacity: 1,\n      fillOpacity: 1\n    });\n  };\n\n  ShapeBase.prototype.getShapeBase = function () {\n    return Shape;\n  };\n\n  ShapeBase.prototype.getGroupBase = function () {\n    return Group;\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n\n\n  ShapeBase.prototype.onCanvasChange = function (changeType) {\n    refreshElement(this, changeType);\n  };\n\n  ShapeBase.prototype.calculateBBox = function () {\n    var type = this.get('type');\n    var lineWidth = this.getHitLineWidth(); // const attrs = this.attr();\n\n    var bboxMethod = getBBoxMethod(type);\n    var box = bboxMethod(this);\n    var halfLineWidth = lineWidth / 2;\n    var minX = box.x - halfLineWidth;\n    var minY = box.y - halfLineWidth;\n    var maxX = box.x + box.width + halfLineWidth;\n    var maxY = box.y + box.height + halfLineWidth;\n    return {\n      x: minX,\n      minX: minX,\n      y: minY,\n      minY: minY,\n      width: box.width + lineWidth,\n      height: box.height + lineWidth,\n      maxX: maxX,\n      maxY: maxY\n    };\n  };\n\n  ShapeBase.prototype.isFill = function () {\n    return !!this.attrs['fill'] || this.isClipShape();\n  };\n\n  ShapeBase.prototype.isStroke = function () {\n    return !!this.attrs['stroke'];\n  }; // 同 shape 中的方法重复了\n\n\n  ShapeBase.prototype._applyClip = function (context, clip) {\n    if (clip) {\n      context.save(); // 将 clip 的属性挂载到 context 上\n\n      applyAttrsToContext(context, clip); // 绘制 clip 路径\n\n      clip.createPath(context);\n      context.restore(); // 裁剪\n\n      context.clip();\n\n      clip._afterDraw();\n    }\n  }; // 绘制图形时需要考虑 region 限制\n\n\n  ShapeBase.prototype.draw = function (context, region) {\n    var clip = this.cfg.clipShape; // 如果指定了 region，同时不允许刷新时，直接返回\n\n    if (region) {\n      if (this.cfg.refresh === false) {\n        // this._afterDraw();\n        this.set('hasChanged', false);\n        return;\n      } // 是否相交需要考虑 clip 的包围盒\n\n\n      var bbox = this.getCanvasBBox();\n\n      if (!intersectRect(region, bbox)) {\n        // 图形的包围盒与重绘区域不相交时，也需要清除标记\n        this.set('hasChanged', false); // 存在多种情形需要更新 cacheCanvasBBox 和 isInview 的判定\n        // 1. 之前图形在视窗内，但是现在不再视窗内\n        // 2. 如果当前的图形以及父元素都没有发生过变化，refresh = false 不会走到这里，所以这里的图形都是父元素发生变化，但是没有在视图内的元素\n\n        if (this.cfg.isInView) {\n          this._afterDraw();\n        }\n\n        return;\n      }\n    }\n\n    context.save(); // 先将 attrs 应用到上下文中，再设置 clip。因为 clip 应该被当前元素的 matrix 所影响\n\n    applyAttrsToContext(context, this);\n\n    this._applyClip(context, clip);\n\n    this.drawPath(context);\n    context.restore();\n\n    this._afterDraw();\n  };\n\n  ShapeBase.prototype.getCanvasViewBox = function () {\n    var canvas = this.cfg.canvas;\n\n    if (canvas) {\n      // @ts-ignore\n      return canvas.getViewRange();\n    }\n\n    return null;\n  };\n\n  ShapeBase.prototype.cacheCanvasBBox = function () {\n    var canvasBBox = this.getCanvasViewBox(); // 绘制的时候缓存包围盒\n\n    if (canvasBBox) {\n      var bbox = this.getCanvasBBox();\n      var isInView = intersectRect(bbox, canvasBBox);\n      this.set('isInView', isInView); // 不再视窗内 cacheCanvasBBox 设置成 null，会提升局部渲染的性能，\n      // 因为在局部渲染影响的包围盒计算时不考虑这个图形的包围盒\n      // 父元素 cacheCanvasBBox 计算的时候也不计算\n\n      if (isInView) {\n        this.set('cacheCanvasBBox', bbox);\n      } else {\n        this.set('cacheCanvasBBox', null);\n      }\n    }\n  };\n\n  ShapeBase.prototype._afterDraw = function () {\n    this.cacheCanvasBBox(); // 绘制后消除标记\n\n    this.set('hasChanged', false);\n    this.set('refresh', null);\n  };\n\n  ShapeBase.prototype.skipDraw = function () {\n    this.set('cacheCanvasBBox', null);\n    this.set('isInView', null);\n    this.set('hasChanged', false);\n  };\n  /**\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n\n\n  ShapeBase.prototype.drawPath = function (context) {\n    this.createPath(context);\n    this.strokeAndFill(context);\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 填充图形\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n\n\n  ShapeBase.prototype.fill = function (context) {\n    context.fill();\n  };\n  /**\n   * @protected\n   * 绘制图形边框\n   * @param {CanvasRenderingContext2D} context context 上下文\n   */\n\n\n  ShapeBase.prototype.stroke = function (context) {\n    context.stroke();\n  }; // 绘制或者填充\n\n\n  ShapeBase.prototype.strokeAndFill = function (context) {\n    var _a = this.attrs,\n        lineWidth = _a.lineWidth,\n        opacity = _a.opacity,\n        strokeOpacity = _a.strokeOpacity,\n        fillOpacity = _a.fillOpacity;\n\n    if (this.isFill()) {\n      if (!isNil(fillOpacity) && fillOpacity !== 1) {\n        context.globalAlpha = fillOpacity;\n        this.fill(context);\n        context.globalAlpha = opacity;\n      } else {\n        this.fill(context);\n      }\n    }\n\n    if (this.isStroke()) {\n      if (lineWidth > 0) {\n        if (!isNil(strokeOpacity) && strokeOpacity !== 1) {\n          context.globalAlpha = strokeOpacity;\n        }\n\n        this.stroke(context);\n      }\n    }\n\n    this.afterDrawPath(context);\n  };\n  /**\n   * @protected\n   * 绘制图形的路径\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n\n\n  ShapeBase.prototype.createPath = function (context) {};\n  /**\n   * 绘制完成 path 后的操作\n   * @param {CanvasRenderingContext2D} context 上下文\n   */\n\n\n  ShapeBase.prototype.afterDrawPath = function (context) {};\n\n  ShapeBase.prototype.isInShape = function (refX, refY) {\n    // return HitUtil.isHitShape(this, refX, refY);\n    var isStroke = this.isStroke();\n    var isFill = this.isFill();\n    var lineWidth = this.getHitLineWidth();\n    return this.isInStrokeOrPath(refX, refY, isStroke, isFill, lineWidth);\n  }; // 之所以不拆成 isInStroke 和 isInPath 在于两者存在一些共同的计算\n\n\n  ShapeBase.prototype.isInStrokeOrPath = function (x, y, isStroke, isFill, lineWidth) {\n    return false;\n  };\n  /**\n   * 获取线拾取的宽度\n   * @returns {number} 线的拾取宽度\n   */\n\n\n  ShapeBase.prototype.getHitLineWidth = function () {\n    if (!this.isStroke()) {\n      return 0;\n    }\n\n    var attrs = this.attrs;\n    return attrs['lineWidth'] + attrs['lineAppendWidth'];\n  };\n\n  return ShapeBase;\n}(AbstractShape);\n\nexport default ShapeBase;","map":null,"metadata":{},"sourceType":"module"}