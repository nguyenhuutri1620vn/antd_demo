{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { isNumber } from '@antv/util';\nimport { flow, deepAssign, pick } from '../../utils';\nimport { point } from '../../adaptor/geometries';\nimport { brushInteraction } from '../../adaptor/brush';\nimport { interaction, animation, theme, scale, annotation, slider, scrollbar } from '../../adaptor/common';\nimport { findGeometry, transformLabel } from '../../utils';\nimport { getQuadrantDefaultConfig, getPath, getMeta } from './util';\n/**\n * 散点图默认美观\n * ① data.length === 1 ② 所有数据 y 值相等 ③ 所有数据 x 值相等\n * @param params\n * @returns params\n */\n\nexport function transformOptions(options) {\n  var _a = options.data,\n      data = _a === void 0 ? [] : _a,\n      xField = options.xField,\n      yField = options.yField;\n\n  if (data.length) {\n    // x y 字段知否只有一个值，如果只有一个值，则进行优化\n    var isOneX = true;\n    var isOneY = true;\n    var prev = data[0];\n    var curr = void 0;\n\n    for (var i = 1; i < data.length; i++) {\n      curr = data[i];\n\n      if (prev[xField] !== curr[xField]) {\n        isOneX = false;\n      }\n\n      if (prev[yField] !== curr[yField]) {\n        isOneY = false;\n      } // 如果都不是 oneValue，那么可提前跳出循环\n\n\n      if (!isOneX && !isOneY) {\n        break;\n      }\n\n      prev = curr;\n    }\n\n    var keys = [];\n    isOneX && keys.push(xField);\n    isOneY && keys.push(yField);\n    var meta_1 = pick(getMeta(options), keys);\n    return deepAssign({}, options, {\n      meta: meta_1\n    });\n  }\n\n  return options;\n}\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      type = options.type,\n      color = options.color,\n      shape = options.shape,\n      pointStyle = options.pointStyle,\n      shapeField = options.shapeField,\n      colorField = options.colorField,\n      xField = options.xField,\n      yField = options.yField,\n      sizeField = options.sizeField;\n  var size = options.size;\n  var tooltip = options.tooltip;\n\n  if (sizeField) {\n    if (!size) {\n      size = [2, 8];\n    }\n\n    if (isNumber(size)) {\n      size = [size, size];\n    }\n  }\n\n  if (tooltip && !tooltip.fields) {\n    tooltip = __assign(__assign({}, tooltip), {\n      fields: [xField, yField, colorField, sizeField, shapeField]\n    });\n  } // 数据\n\n\n  chart.data(data); // geometry\n\n  point(deepAssign({}, params, {\n    options: {\n      seriesField: colorField,\n      point: {\n        color: color,\n        shape: shape,\n        size: size,\n        style: pointStyle\n      },\n      tooltip: tooltip\n    }\n  }));\n  var geometry = findGeometry(chart, 'point'); // 数据调整\n\n  if (type) {\n    geometry.adjust(type);\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  var newOptions = transformOptions(options);\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a)))(deepAssign({}, params, {\n    options: newOptions\n  }));\n}\n/**\n * axis 配置\n * @param params\n */\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  chart.axis(xField, xAxis);\n  chart.axis(yField, yAxis);\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\n\n\nfunction legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField,\n      shapeField = options.shapeField,\n      sizeField = options.sizeField,\n      shapeLegend = options.shapeLegend,\n      sizeLegend = options.sizeLegend;\n  /** legend 不为 false, 则展示图例, 优先展示 color 分类图例 */\n\n  var showLegend = legend !== false;\n\n  if (colorField) {\n    chart.legend(colorField, showLegend ? legend : false);\n  } // 优先取 shapeLegend, 否则取 legend\n\n\n  if (shapeField) {\n    if (shapeLegend) {\n      chart.legend(shapeField, shapeLegend);\n    } else {\n      chart.legend(shapeField, shapeLegend === false ? false : legend);\n    }\n  }\n\n  if (sizeField) {\n    chart.legend(sizeField, sizeLegend ? sizeLegend : false);\n  }\n  /** 默认不展示 shape 图例，当 shapeLegend 为 undefined 也不展示图例 */\n\n  /** 默认没有 sizeField，则隐藏连续图例 */\n\n\n  if (!showLegend && !shapeLegend && !sizeLegend) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      yField = options.yField;\n  var scatterGeometry = findGeometry(chart, 'point'); // label 为 false, 空 则不显示 label\n\n  if (!label) {\n    scatterGeometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    scatterGeometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\n * annotation 配置\n * - 特殊 annotation: quadrant(四象限)\n * @param params\n */\n\n\nfunction scatterAnnotation(params) {\n  var options = params.options;\n  var quadrant = options.quadrant;\n  var annotationOptions = [];\n\n  if (quadrant) {\n    var _a = quadrant.xBaseline,\n        xBaseline = _a === void 0 ? 0 : _a,\n        _b = quadrant.yBaseline,\n        yBaseline = _b === void 0 ? 0 : _b,\n        labels_1 = quadrant.labels,\n        regionStyle_1 = quadrant.regionStyle,\n        lineStyle = quadrant.lineStyle;\n    var defaultConfig_1 = getQuadrantDefaultConfig(xBaseline, yBaseline); // 仅支持四象限\n\n    var quadrants = new Array(4).join(',').split(',');\n    quadrants.forEach(function (_, index) {\n      annotationOptions.push(__assign(__assign({\n        type: 'region',\n        top: false\n      }, defaultConfig_1.regionStyle[index].position), {\n        style: deepAssign({}, defaultConfig_1.regionStyle[index].style, regionStyle_1 === null || regionStyle_1 === void 0 ? void 0 : regionStyle_1[index])\n      }), __assign({\n        type: 'text',\n        top: true\n      }, deepAssign({}, defaultConfig_1.labelStyle[index], labels_1 === null || labels_1 === void 0 ? void 0 : labels_1[index])));\n    }); // 生成坐标轴\n\n    annotationOptions.push({\n      type: 'line',\n      top: false,\n      start: ['min', yBaseline],\n      end: ['max', yBaseline],\n      style: deepAssign({}, defaultConfig_1.lineStyle, lineStyle)\n    }, {\n      type: 'line',\n      top: false,\n      start: [xBaseline, 'min'],\n      end: [xBaseline, 'max'],\n      style: deepAssign({}, defaultConfig_1.lineStyle, lineStyle)\n    });\n  }\n\n  return flow(annotation(annotationOptions))(params);\n} // 趋势线\n\n\nfunction regressionLine(params) {\n  var options = params.options,\n      chart = params.chart;\n  var regressionLine = options.regressionLine;\n\n  if (regressionLine) {\n    var style_1 = regressionLine.style,\n        _a = regressionLine.top,\n        top_1 = _a === void 0 ? false : _a;\n    var defaultStyle_1 = {\n      stroke: '#9ba29a',\n      lineWidth: 2,\n      opacity: 0.5\n    };\n    chart.annotation().shape({\n      top: top_1,\n      render: function (container, view) {\n        var group = container.addGroup({\n          id: chart.id + \"-regression-line\",\n          name: 'regression-line-group'\n        });\n        var path = getPath({\n          view: view,\n          options: options\n        });\n        group.addShape('path', {\n          name: 'regression-line',\n          attrs: __assign(__assign({\n            path: path\n          }, defaultStyle_1), style_1)\n        });\n      }\n    });\n  }\n\n  return params;\n}\n/**\n * tooltip 配置\n * @param params\n */\n\n\nexport function tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n\n  if (tooltip) {\n    chart.tooltip(tooltip);\n  } else if (tooltip === false) {\n    chart.tooltip(false);\n  }\n\n  return params;\n}\n/**\n * 散点图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, meta, axis, legend, tooltip, label, // 需要在 interaction 前面\n  brushInteraction, slider, scrollbar, interaction, scatterAnnotation, animation, theme, regressionLine)(params);\n}","map":null,"metadata":{},"sourceType":"module"}