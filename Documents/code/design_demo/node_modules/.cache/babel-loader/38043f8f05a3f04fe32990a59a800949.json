{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport DOM from '../../utils/dom';\n\nvar TwoTouchHandler = function () {\n  function TwoTouchHandler() {\n    _classCallCheck(this, TwoTouchHandler);\n\n    _defineProperty(this, \"enabled\", void 0);\n\n    _defineProperty(this, \"active\", void 0);\n\n    _defineProperty(this, \"firstTwoTouches\", void 0);\n\n    _defineProperty(this, \"vector\", void 0);\n\n    _defineProperty(this, \"startVector\", void 0);\n\n    _defineProperty(this, \"aroundCenter\", void 0);\n\n    this.reset();\n  }\n\n  _createClass(TwoTouchHandler, [{\n    key: \"reset\",\n    value: function reset() {\n      this.active = false;\n      delete this.firstTwoTouches;\n    }\n  }, {\n    key: \"start\",\n    value: function start(points) {\n      return;\n    }\n  }, {\n    key: \"move\",\n    value: function move(points, pinchAround, e) {\n      return;\n    }\n  }, {\n    key: \"touchstart\",\n    value: function touchstart(e, points, mapTouches) {\n      if (this.firstTwoTouches || mapTouches.length < 2) {\n        return;\n      }\n\n      this.firstTwoTouches = [mapTouches[0].identifier, mapTouches[1].identifier];\n      this.start([points[0], points[1]]);\n    }\n  }, {\n    key: \"touchmove\",\n    value: function touchmove(e, points, mapTouches) {\n      if (!this.firstTwoTouches) {\n        return;\n      }\n\n      e.preventDefault();\n\n      var _this$firstTwoTouches = _slicedToArray(this.firstTwoTouches, 2),\n          idA = _this$firstTwoTouches[0],\n          idB = _this$firstTwoTouches[1];\n\n      var a = getTouchById(mapTouches, points, idA);\n      var b = getTouchById(mapTouches, points, idB);\n\n      if (!a || !b) {\n        return;\n      }\n\n      var pinchAround = this.aroundCenter ? null : a.add(b).div(2);\n      return this.move([a, b], pinchAround, e);\n    }\n  }, {\n    key: \"touchend\",\n    value: function touchend(e, points, mapTouches) {\n      if (!this.firstTwoTouches) {\n        return;\n      }\n\n      var _this$firstTwoTouches2 = _slicedToArray(this.firstTwoTouches, 2),\n          idA = _this$firstTwoTouches2[0],\n          idB = _this$firstTwoTouches2[1];\n\n      var a = getTouchById(mapTouches, points, idA);\n      var b = getTouchById(mapTouches, points, idB);\n\n      if (a && b) {\n        return;\n      }\n\n      if (this.active) {\n        DOM.suppressClick();\n      }\n\n      this.reset();\n    }\n  }, {\n    key: \"touchcancel\",\n    value: function touchcancel() {\n      this.reset();\n    }\n  }, {\n    key: \"enable\",\n    value: function enable(options) {\n      this.enabled = true;\n      this.aroundCenter = !!options && options.around === 'center';\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.enabled = false;\n      this.reset();\n    }\n  }, {\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      return this.active;\n    }\n  }]);\n\n  return TwoTouchHandler;\n}();\n\nexport { TwoTouchHandler as default };\n\nfunction getTouchById(mapTouches, points, identifier) {\n  for (var i = 0; i < mapTouches.length; i++) {\n    if (mapTouches[i].identifier === identifier) {\n      return points[i];\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}