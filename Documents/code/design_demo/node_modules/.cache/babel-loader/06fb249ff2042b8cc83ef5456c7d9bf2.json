{"ast":null,"code":"import { ns } from './elem';\nimport { kebabCase } from '../string/format';\nexport function getAttribute(elem, name) {\n  return elem.getAttribute(name);\n}\nexport function removeAttribute(elem, name) {\n  const qualified = qualifyAttr(name);\n\n  if (qualified.ns) {\n    if (elem.hasAttributeNS(qualified.ns, qualified.local)) {\n      elem.removeAttributeNS(qualified.ns, qualified.local);\n    }\n  } else if (elem.hasAttribute(name)) {\n    elem.removeAttribute(name);\n  }\n}\nexport function setAttribute(elem, name, value) {\n  if (value == null) {\n    return removeAttribute(elem, name);\n  }\n\n  const qualified = qualifyAttr(name);\n\n  if (qualified.ns && typeof value === 'string') {\n    elem.setAttributeNS(qualified.ns, name, value);\n  } else if (name === 'id') {\n    elem.id = `${value}`;\n  } else {\n    elem.setAttribute(name, `${value}`);\n  }\n}\nexport function setAttributes(elem, attrs) {\n  Object.keys(attrs).forEach(name => {\n    setAttribute(elem, name, attrs[name]);\n  });\n}\nexport function attr(elem, name, value) {\n  if (name == null) {\n    const attrs = elem.attributes;\n    const ret = {};\n\n    for (let i = 0; i < attrs.length; i += 1) {\n      ret[attrs[i].name] = attrs[i].value;\n    }\n\n    return ret;\n  }\n\n  if (typeof name === 'string' && value === undefined) {\n    return elem.getAttribute(name);\n  }\n\n  if (typeof name === 'object') {\n    setAttributes(elem, name);\n  } else {\n    setAttribute(elem, name, value);\n  }\n}\nexport function qualifyAttr(name) {\n  if (name.indexOf(':') !== -1) {\n    const combinedKey = name.split(':');\n    return {\n      ns: ns[combinedKey[0]],\n      local: combinedKey[1]\n    };\n  }\n\n  return {\n    ns: null,\n    local: name\n  };\n}\nexport function kebablizeAttrs(attrs) {\n  const result = {};\n  Object.keys(attrs).forEach(key => {\n    const name = kebabCase(key);\n    result[name] = attrs[key];\n  });\n  return result;\n}\nexport function styleToObject(styleString) {\n  const ret = {};\n  const styles = styleString.split(';');\n  styles.forEach(item => {\n    const section = item.trim();\n\n    if (section) {\n      const pair = section.split('=');\n\n      if (pair.length) {\n        ret[pair[0].trim()] = pair[1] ? pair[1].trim() : '';\n      }\n    }\n  });\n  return ret;\n}\nexport function mergeAttrs(target, source) {\n  Object.keys(source).forEach(attr => {\n    if (attr === 'class') {\n      target[attr] = target[attr] ? `${target[attr]} ${source[attr]}` : source[attr];\n    } else if (attr === 'style') {\n      const to = typeof target[attr] === 'object';\n      const so = typeof source[attr] === 'object';\n      let tt;\n      let ss;\n\n      if (to && so) {\n        tt = target[attr];\n        ss = source[attr];\n      } else if (to) {\n        tt = target[attr];\n        ss = styleToObject(source[attr]);\n      } else if (so) {\n        tt = styleToObject(target[attr]);\n        ss = source[attr];\n      } else {\n        tt = styleToObject(target[attr]);\n        ss = styleToObject(source[attr]);\n      }\n\n      target[attr] = mergeAttrs(tt, ss);\n    } else {\n      target[attr] = source[attr];\n    }\n  });\n  return target;\n}","map":null,"metadata":{},"sourceType":"module"}