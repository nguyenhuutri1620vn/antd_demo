{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/initializerWarningHelper\";\n\nvar _dec, _dec2, _class, _class2, _descriptor;\n\nimport { TYPES } from '@antv/l7-core';\nimport { inject, injectable } from 'inversify';\nimport 'reflect-metadata';\nexport function normalizePasses(passes) {\n  return passes.map(function (pass) {\n    if (typeof pass === 'string') {\n      pass = [pass, {}];\n    }\n\n    return pass;\n  });\n}\nvar MultiPassRendererPlugin = (_dec = injectable(), _dec2 = inject(TYPES.IGlobalConfigService), _dec(_class = (_class2 = function () {\n  function MultiPassRendererPlugin() {\n    _classCallCheck(this, MultiPassRendererPlugin);\n\n    _initializerDefineProperty(this, \"configService\", _descriptor, this);\n\n    _defineProperty(this, \"enabled\", void 0);\n  }\n\n  _createClass(MultiPassRendererPlugin, [{\n    key: \"apply\",\n    value: function apply(layer, _ref) {\n      var _this = this;\n\n      var rendererService = _ref.rendererService,\n          postProcessingPassFactory = _ref.postProcessingPassFactory,\n          normalPassFactory = _ref.normalPassFactory;\n      layer.hooks.init.tap('MultiPassRendererPlugin', function () {\n        var _layer$getLayerConfig = layer.getLayerConfig(),\n            enableMultiPassRenderer = _layer$getLayerConfig.enableMultiPassRenderer,\n            _layer$getLayerConfig2 = _layer$getLayerConfig.passes,\n            passes = _layer$getLayerConfig2 === void 0 ? [] : _layer$getLayerConfig2;\n\n        _this.enabled = !!enableMultiPassRenderer && layer.getLayerConfig().enableMultiPassRenderer !== false;\n\n        if (_this.enabled) {\n          layer.multiPassRenderer = _this.createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory);\n          layer.multiPassRenderer.setRenderFlag(true);\n        }\n      });\n      layer.hooks.beforeRender.tap('MultiPassRendererPlugin', function () {\n        if (_this.enabled) {\n          var _rendererService$getV = rendererService.getViewportSize(),\n              width = _rendererService$getV.width,\n              height = _rendererService$getV.height;\n\n          layer.multiPassRenderer.resize(width, height);\n        }\n      });\n    }\n  }, {\n    key: \"createMultiPassRenderer\",\n    value: function createMultiPassRenderer(layer, passes, postProcessingPassFactory, normalPassFactory) {\n      var multiPassRenderer = layer.multiPassRenderer;\n\n      var _layer$getLayerConfig3 = layer.getLayerConfig(),\n          enablePicking = _layer$getLayerConfig3.enablePicking,\n          enableTAA = _layer$getLayerConfig3.enableTAA;\n\n      if (enableTAA) {\n        multiPassRenderer.add(normalPassFactory('taa'));\n      } else {\n        multiPassRenderer.add(normalPassFactory('render'));\n      }\n\n      normalizePasses(passes).forEach(function (pass) {\n        var _pass = _slicedToArray(pass, 2),\n            passName = _pass[0],\n            initializationOptions = _pass[1];\n\n        multiPassRenderer.add(postProcessingPassFactory(passName), initializationOptions);\n      });\n      multiPassRenderer.add(postProcessingPassFactory('copy'));\n      return multiPassRenderer;\n    }\n  }]);\n\n  return MultiPassRendererPlugin;\n}(), _descriptor = _applyDecoratedDescriptor(_class2.prototype, \"configService\", [_dec2], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n}), _class2)) || _class);\nexport { MultiPassRendererPlugin as default };","map":null,"metadata":{},"sourceType":"module"}