{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { deepMix } from '@antv/util';\nimport { ext } from '@antv/matrix-util';\nimport Button from './timeButton';\nimport { TIMEBAR_CONFIG_CHANGE, PRE_STEP_BTN, NEXT_STEP_BTN } from './constant';\nvar transform = ext.transform;\nvar DEFAULT_RECT_FILL = '#aaa';\nvar DEFAULT_RECT_STROKE = 'green';\nvar DEFAULT_PLAYBTN_STYLE = {\n  fill: '#aaa',\n  fillOpacity: 0.35,\n  stroke: '#aaa'\n};\nvar DEFAULT_PREBTN_STYLE = {\n  fill: '#fff'\n};\nvar DEFAULT_NEXTBTN_STYLE = {\n  fill: 'green'\n};\nvar DEFAULT_SPEED_CONTROLLER_STYLE = {\n  pointer: {\n    fill: '#aaa',\n    lineWidth: 0\n  },\n  scroller: {\n    stroke: '#aaa',\n    fill: '#aaa',\n    lineWidth: 1,\n    lineAppendWidth: 5,\n    cursor: 'pointer'\n  },\n  text: {\n    fill: '#aaa',\n    textBaseline: 'top'\n  }\n};\nvar DEFAULT_TIMETYPE_CONTROLLER_STYLE = {\n  check: {\n    stroke: 'green',\n    lineWidth: 3\n  },\n  box: {\n    fill: '#fff',\n    stroke: '#aaa',\n    lineWidth: 2,\n    radius: 3,\n    width: 12,\n    height: 12\n  },\n  text: {\n    fill: '#aaa',\n    fontSize: 12,\n    textBaseline: 'top'\n  }\n};\nvar DEFAULT_CONTROLLER_CONFIG = {\n  speed: 1,\n  loop: false,\n  fill: '#fff',\n  stroke: '#fff',\n  hideTimeTypeController: false,\n  preBtnStyle: {\n    fill: '#aaa',\n    stroke: '#aaa'\n  },\n  nextBtnStyle: {\n    fill: '#aaa',\n    stroke: '#aaa'\n  },\n  playBtnStyle: {\n    fill: '#aaa',\n    stroke: '#aaa',\n    fillOpacity: 0.05\n  },\n  speedControllerStyle: DEFAULT_SPEED_CONTROLLER_STYLE,\n  timeTypeControllerStyle: DEFAULT_TIMETYPE_CONTROLLER_STYLE\n};\nvar SPEED_CONTROLLER_OFFSET = 110;\nvar TOGGLE_MODEL_OFFSET = 50;\n\nvar ControllerBtn =\n/** @class */\nfunction () {\n  function ControllerBtn(cfg) {\n    this.controllerCfg = deepMix({}, DEFAULT_CONTROLLER_CONFIG, cfg);\n    this.group = cfg.group;\n    this.controllerGroup = this.group.addGroup({\n      name: 'controller-group'\n    });\n    this.speedAxisY = [];\n    this.currentSpeed = this.controllerCfg.speed;\n    this.currentType = 'range';\n    this.fontFamily = cfg.fontFamily || 'Arial, sans-serif';\n    this.init();\n  }\n\n  ControllerBtn.prototype.init = function () {\n    this.renderPlayButton();\n  };\n  /** 获取播放键 marker path */\n\n\n  ControllerBtn.prototype.getNextMarkerPath = function (x, y, len) {\n    return [['M', x, y - len], ['L', x + len, y], ['L', x, y + len], ['Z', x, y - len], ['M', x, y], ['L', x - len, y - len], ['L', x - len, y + len], ['Z']];\n  };\n\n  ControllerBtn.prototype.getPreMarkerPath = function (x, y, len) {\n    return [['M', x, y - len], ['L', x - len, y], ['L', x, y + len], ['L', x, y - len], ['M', x, y], ['L', x + len, y - len], ['L', x + len, y + len], ['Z']];\n  };\n\n  ControllerBtn.prototype.renderPlayButton = function () {\n    var controllerCfg = this.controllerCfg;\n    var width = controllerCfg.width,\n        height = controllerCfg.height,\n        x = controllerCfg.x,\n        y = controllerCfg.y,\n        hideTimeTypeController = controllerCfg.hideTimeTypeController,\n        _a = controllerCfg.fill,\n        fill = _a === void 0 ? DEFAULT_RECT_FILL : _a,\n        _b = controllerCfg.stroke,\n        stroke = _b === void 0 ? DEFAULT_RECT_STROKE : _b,\n        _c = controllerCfg.containerStyle,\n        containerStyle = _c === void 0 ? {} : _c;\n\n    var playBtnStyle = __assign(__assign({}, DEFAULT_PLAYBTN_STYLE), controllerCfg.playBtnStyle || {});\n\n    var preBtnStyle = __assign(__assign({}, DEFAULT_PREBTN_STYLE), controllerCfg.preBtnStyle || {});\n\n    var nextBtnStyle = __assign(__assign({}, DEFAULT_NEXTBTN_STYLE), controllerCfg.nextBtnStyle || {});\n\n    var r = height / 2 - 5;\n    var realY = y + 10; // 绘制最外层的矩形包围框\n\n    var container = this.controllerGroup.addShape('rect', {\n      attrs: __assign({\n        x: x,\n        y: realY,\n        width: width,\n        height: height,\n        stroke: stroke,\n        fill: fill\n      }, containerStyle),\n      name: 'container-rect'\n    });\n\n    if (this.playButton) {\n      this.playButton.update({\n        x: width / 2,\n        y: realY,\n        r: r\n      });\n    } else {\n      this.playButton = new Button({\n        group: this.controllerGroup,\n        x: width / 2,\n        y: realY + r + 5,\n        r: r,\n        isPlay: this.isPlay,\n        style: playBtnStyle\n      });\n    } // 后退按钮\n\n\n    var prePaddingX = preBtnStyle.offsetX || 0;\n    var prePaddingY = preBtnStyle.offsetY || 0;\n    var preR = (preBtnStyle.scale || 1) * r;\n    this.controllerGroup.addShape('path', {\n      attrs: __assign({\n        path: this.getPreMarkerPath(width / 2 - 5 * r + prePaddingX, realY + r + 5 + prePaddingY, preR * 0.5)\n      }, preBtnStyle),\n      name: PRE_STEP_BTN\n    }); // 前进按钮\n\n    var nxtPaddingX = nextBtnStyle.offsetX || 0;\n    var nxtPaddingY = nextBtnStyle.offsetY || 0;\n    var nxtR = (nextBtnStyle.scale || 1) * r;\n    this.controllerGroup.addShape('path', {\n      attrs: __assign({\n        path: this.getNextMarkerPath(width / 2 + 5 * r + nxtPaddingX, realY + r + 5 + nxtPaddingY, nxtR * 0.5)\n      }, nextBtnStyle),\n      name: NEXT_STEP_BTN\n    });\n    container.toBack(); // 调节speed的按钮\n\n    this.renderSpeedBtn();\n\n    if (!hideTimeTypeController) {\n      this.renderToggleTime();\n    }\n\n    this.bindEvent(); // 根据配置的 scale、offsetX，offsetY 缩放和移动控制栏\n\n    var _d = this.controllerCfg.scale,\n        scale = _d === void 0 ? 1 : _d;\n    var currentBBox = this.controllerGroup.getCanvasBBox();\n    var centerX = (currentBBox.maxX + currentBBox.minX) / 2;\n    var centerY = (currentBBox.maxY + currentBBox.minY) / 2;\n    var matrix = transform([1, 0, 0, 0, 1, 0, 0, 0, 1], [['t', -centerX, -centerY], ['s', scale, scale], ['t', centerX, centerY]]);\n    this.controllerGroup.setMatrix(matrix);\n  };\n\n  ControllerBtn.prototype.renderSpeedBtn = function () {\n    var _a = this.controllerCfg,\n        y = _a.y,\n        width = _a.width,\n        hideTimeTypeController = _a.hideTimeTypeController;\n\n    var speedControllerStyle = __assign(__assign({}, DEFAULT_SPEED_CONTROLLER_STYLE), this.controllerCfg.speedControllerStyle || {});\n\n    var _b = speedControllerStyle.scroller,\n        scroller = _b === void 0 ? {} : _b,\n        _c = speedControllerStyle.text,\n        text = _c === void 0 ? {} : _c,\n        _d = speedControllerStyle.pointer,\n        pointer = _d === void 0 ? {} : _d,\n        _e = speedControllerStyle.scale,\n        scale = _e === void 0 ? 1 : _e,\n        _f = speedControllerStyle.offsetX,\n        offsetX = _f === void 0 ? 0 : _f,\n        _g = speedControllerStyle.offsetY,\n        offsetY = _g === void 0 ? 0 : _g;\n    var speedGroup = this.controllerGroup.addGroup({\n      name: 'speed-group'\n    });\n    this.speedGroup = speedGroup;\n    var speedNum = [];\n    var maxSpeed = 5;\n    this.speedAxisY = [19, 22, 26, 32, 39]; // 增加speed刻度\n\n    for (var i = 0; i < 5; i++) {\n      var axisY = y + this.speedAxisY[i]; // 灰色刻度\n\n      var startX = width - (!hideTimeTypeController ? SPEED_CONTROLLER_OFFSET : TOGGLE_MODEL_OFFSET);\n      speedGroup.addShape('line', {\n        attrs: __assign({\n          x1: startX,\n          x2: startX + 15,\n          y1: axisY,\n          y2: axisY\n        }, scroller),\n        speed: maxSpeed,\n        name: 'speed-rect'\n      });\n      this.speedAxisY[i] = axisY;\n      speedNum.push(maxSpeed);\n      maxSpeed = maxSpeed - 1;\n    } // 速度文本\n\n\n    this.speedText = speedGroup.addShape('text', {\n      attrs: __assign({\n        x: width - (!hideTimeTypeController ? SPEED_CONTROLLER_OFFSET : TOGGLE_MODEL_OFFSET) + 20,\n        y: this.speedAxisY[0] + 4,\n        text: \"1.0X\",\n        fontFamily: this.fontFamily || 'Arial, sans-serif'\n      }, text),\n      name: 'speed-text'\n    });\n    this.speedPoint = speedGroup.addShape('path', {\n      attrs: __assign({\n        path: this.getPointerPath(width - (!hideTimeTypeController ? SPEED_CONTROLLER_OFFSET : TOGGLE_MODEL_OFFSET), 0),\n        matrix: [1, 0, 0, 0, 1, 0, 0, this.speedAxisY[4], 1]\n      }, pointer),\n      name: 'speed-pointer'\n    }); // 根据配置在 speedControllerStyle 中的 scale offsetX offsetY 缩放和移动速度控制器\n\n    var currentBBox = this.speedGroup.getCanvasBBox();\n    var centerX = (currentBBox.maxX + currentBBox.minX) / 2;\n    var centerY = (currentBBox.maxY + currentBBox.minY) / 2;\n    var matrix = this.speedGroup.getMatrix() || [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    matrix = transform(matrix, [['t', -centerX, -centerY], ['s', scale, scale], ['t', centerX + offsetX * scale, centerY + offsetY * scale]]);\n    this.speedGroup.setMatrix(matrix);\n  };\n\n  ControllerBtn.prototype.getPointerPath = function (x, y) {\n    return [['M', x, y], ['L', x - 10, y - 4], ['L', x - 10, y + 4], ['Z']];\n  };\n\n  ControllerBtn.prototype.renderToggleTime = function () {\n    var _a;\n\n    var width = this.controllerCfg.width;\n\n    var timeTypeControllerStyle = __assign(__assign({}, DEFAULT_TIMETYPE_CONTROLLER_STYLE), this.controllerCfg.timeTypeControllerStyle || {});\n\n    var _b = timeTypeControllerStyle.scale,\n        scale = _b === void 0 ? 1 : _b,\n        _c = timeTypeControllerStyle.offsetX,\n        offsetX = _c === void 0 ? 0 : _c,\n        _d = timeTypeControllerStyle.offsetY,\n        offsetY = _d === void 0 ? 0 : _d,\n        _e = timeTypeControllerStyle.box,\n        box = _e === void 0 ? {} : _e,\n        _f = timeTypeControllerStyle.check,\n        check = _f === void 0 ? {} : _f,\n        _g = timeTypeControllerStyle.text,\n        text = _g === void 0 ? {} : _g;\n    this.toggleGroup = this.controllerGroup.addGroup({\n      name: 'toggle-group'\n    });\n    this.toggleGroup.addShape('rect', {\n      attrs: __assign({\n        x: width - TOGGLE_MODEL_OFFSET,\n        y: this.speedAxisY[0] + 3.5\n      }, box),\n      isChecked: false,\n      name: 'toggle-model'\n    });\n    this.checkedIcon = this.toggleGroup.addShape('path', {\n      attrs: __assign({\n        path: [['M', width - TOGGLE_MODEL_OFFSET + 3, this.speedAxisY[1] + 6], ['L', width - TOGGLE_MODEL_OFFSET + 7, this.speedAxisY[1] + 10], ['L', width - TOGGLE_MODEL_OFFSET + 12, this.speedAxisY[1] + 4]]\n      }, check),\n      capture: false,\n      name: 'check-icon'\n    });\n    this.checkedIcon.hide();\n    this.checkedText = this.toggleGroup.addShape('text', {\n      attrs: __assign({\n        text: ((_a = this.controllerCfg) === null || _a === void 0 ? void 0 : _a.timePointControllerText) || '单一时间',\n        x: width - TOGGLE_MODEL_OFFSET + 15,\n        y: this.speedAxisY[0] + 4,\n        fontFamily: typeof window !== 'undefined' ? window.getComputedStyle(document.body, null).getPropertyValue('font-family') || 'Arial, sans-serif' : 'Arial, sans-serif'\n      }, text),\n      name: 'checked-text'\n    }); // 根据配置在 timeTypeControllerStyle 中的 scale offsetX offsetY 缩放和移动速度控制器\n\n    var currentBBox = this.toggleGroup.getCanvasBBox();\n    var centerX = (currentBBox.maxX + currentBBox.minX) / 2;\n    var centerY = (currentBBox.maxY + currentBBox.minY) / 2;\n    var matrix = this.toggleGroup.getMatrix() || [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    matrix = transform(matrix, [['t', -centerX, -centerY], ['s', scale, scale], ['t', centerX + offsetX * scale, centerY + offsetY * scale]]);\n    this.toggleGroup.setMatrix(matrix);\n  };\n\n  ControllerBtn.prototype.bindEvent = function () {\n    var _this = this;\n\n    this.speedGroup.on('speed-rect:click', function (evt) {\n      var currentPointerY = evt.target.attr('y1');\n\n      var pointerMatrix = _this.speedPoint.attr('matrix');\n\n      var currentYIdx = _this.speedAxisY.indexOf(pointerMatrix[7] || 0);\n\n      var targetYIdx = _this.speedAxisY.indexOf(currentPointerY);\n\n      var yDiff = _this.speedAxisY[targetYIdx] - _this.speedAxisY[currentYIdx];\n      pointerMatrix = transform(pointerMatrix, [['t', 0, yDiff]]);\n\n      _this.speedPoint.setMatrix(pointerMatrix);\n\n      _this.currentSpeed = _this.speedAxisY.length - targetYIdx;\n\n      _this.speedText.attr('text', \"\".concat(_this.currentSpeed, \".0X\"));\n\n      _this.group.emit(TIMEBAR_CONFIG_CHANGE, {\n        speed: _this.currentSpeed,\n        type: _this.currentType\n      });\n    });\n    this.speedGroup.on('mousewheel', function (evt) {\n      evt.preventDefault();\n      var pointerMatrix = _this.speedPoint.attr('matrix') || [1, 0, 0, 0, 1, 0, 0, 0, 1];\n      var currentPointerY = pointerMatrix[7];\n\n      var currentYIdx = _this.speedAxisY.indexOf(currentPointerY);\n\n      if (currentYIdx === -1) {\n        // 找到最近的一个 y\n        var minDist_1 = Infinity;\n\n        _this.speedAxisY.forEach(function (y, idx) {\n          var dist = Math.abs(y - currentPointerY);\n\n          if (minDist_1 > dist) {\n            minDist_1 = dist;\n            currentYIdx = idx;\n          }\n        });\n      }\n\n      if (evt.originalEvent.deltaY > 0) currentYIdx = Math.max(0, currentYIdx - 1);else currentYIdx = Math.min(_this.speedAxisY.length - 1, currentYIdx + 1);\n      var yDiff = _this.speedAxisY[currentYIdx] - currentPointerY;\n      pointerMatrix = transform(pointerMatrix, [['t', 0, yDiff]]);\n\n      _this.speedPoint.setMatrix(pointerMatrix);\n\n      _this.currentSpeed = _this.speedAxisY.length - currentYIdx;\n\n      _this.speedText.attr('text', \"\".concat(_this.currentSpeed, \".0X\"));\n\n      _this.group.emit(TIMEBAR_CONFIG_CHANGE, {\n        speed: _this.currentSpeed,\n        type: _this.currentType\n      });\n    });\n\n    if (this.toggleGroup) {\n      this.toggleGroup.on('toggle-model:click', function (evt) {\n        var _a, _b;\n\n        var isChecked = evt.target.get('isChecked');\n\n        if (!isChecked) {\n          _this.checkedIcon.show();\n\n          _this.checkedText.attr('text', ((_a = _this.controllerCfg) === null || _a === void 0 ? void 0 : _a.timeRangeControllerText) || '时间范围');\n\n          _this.currentType = 'single';\n        } else {\n          _this.checkedIcon.hide();\n\n          _this.checkedText.attr('text', ((_b = _this.controllerCfg) === null || _b === void 0 ? void 0 : _b.timePointControllerText) || '单一时间');\n\n          _this.currentType = 'range';\n        }\n\n        evt.target.set('isChecked', !isChecked);\n\n        _this.group.emit(TIMEBAR_CONFIG_CHANGE, {\n          type: _this.currentType,\n          speed: _this.currentSpeed\n        });\n      });\n    }\n  };\n\n  ControllerBtn.prototype.destroy = function () {\n    this.speedGroup.off('speed-rect:click');\n\n    if (this.toggleGroup) {\n      this.toggleGroup.off('toggle-model:click');\n      this.toggleGroup.destroy();\n    }\n\n    this.speedGroup.destroy();\n  };\n\n  return ControllerBtn;\n}();\n\nexport default ControllerBtn;","map":null,"metadata":{},"sourceType":"module"}