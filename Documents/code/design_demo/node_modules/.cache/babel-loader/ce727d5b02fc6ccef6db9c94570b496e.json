{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { Path } from '../../geometry';\nimport { normalize } from './util';\nexport const circle = _a => {\n  var {\n    r\n  } = _a,\n      attrs = __rest(_a, [\"r\"]);\n\n  const radius = r || 5;\n  return Object.assign(Object.assign({\n    cx: radius\n  }, attrs), {\n    tagName: 'circle',\n    r: radius\n  });\n};\nexport const circlePlus = _a => {\n  var {\n    r\n  } = _a,\n      attrs = __rest(_a, [\"r\"]);\n\n  const radius = r || 5;\n  const path = new Path();\n  path.moveTo(radius, 0).lineTo(radius, radius * 2);\n  path.moveTo(0, radius).lineTo(radius * 2, radius);\n  return {\n    children: [Object.assign(Object.assign({}, circle({\n      r: radius\n    })), {\n      fill: 'none'\n    }), Object.assign(Object.assign({}, attrs), {\n      tagName: 'path',\n      d: normalize(path.serialize(), -radius)\n    })]\n  };\n};","map":null,"metadata":{},"sourceType":"module"}