{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, isEqual, isFunction, isNumber, isObject, isArray, noop, mix, upperFirst, uniqueId } from '@antv/util';\nimport { ext } from '@antv/matrix-util';\nimport { removeFromArray, isParent } from '../util/util';\nimport { multiplyMatrix, multiplyVec2, invert } from '../util/matrix';\nimport Base from './base';\nvar transform = ext.transform;\nvar MATRIX = 'matrix';\nvar CLONE_CFGS = ['zIndex', 'capture', 'visible', 'type']; // 可以在 toAttrs 中设置，但不属于绘图属性的字段\n\nvar RESERVED_PORPS = ['repeat'];\nvar DELEGATION_SPLIT = ':';\nvar WILDCARD = '*'; // 需要考虑数组嵌套数组的场景\n// 数组嵌套对象的场景不考虑\n\nfunction _cloneArrayAttr(arr) {\n  var result = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    if (isArray(arr[i])) {\n      result.push([].concat(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n\n  return result;\n}\n\nfunction getFormatFromAttrs(toAttrs, shape) {\n  var fromAttrs = {};\n  var attrs = shape.attrs;\n\n  for (var k in toAttrs) {\n    fromAttrs[k] = attrs[k];\n  }\n\n  return fromAttrs;\n}\n\nfunction getFormatToAttrs(props, shape) {\n  var toAttrs = {};\n  var attrs = shape.attr();\n  each(props, function (v, k) {\n    if (RESERVED_PORPS.indexOf(k) === -1 && !isEqual(attrs[k], v)) {\n      toAttrs[k] = v;\n    }\n  });\n  return toAttrs;\n}\n\nfunction checkExistedAttrs(animations, animation) {\n  if (animation.onFrame) {\n    return animations;\n  }\n\n  var startTime = animation.startTime,\n      delay = animation.delay,\n      duration = animation.duration;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n  each(animations, function (item) {\n    // 后一个动画开始执行的时间 < 前一个动画的结束时间 && 后一个动画的执行时间 > 前一个动画的延迟\n    if (startTime + delay < item.startTime + item.delay + item.duration && duration > item.delay) {\n      each(animation.toAttrs, function (v, k) {\n        if (hasOwnProperty.call(item.toAttrs, k)) {\n          delete item.toAttrs[k];\n          delete item.fromAttrs[k];\n        }\n      });\n    }\n  });\n  return animations;\n}\n\nvar Element =\n/** @class */\nfunction (_super) {\n  __extends(Element, _super);\n\n  function Element(cfg) {\n    var _this = _super.call(this, cfg) || this;\n    /**\n     * @protected\n     * 图形属性\n     * @type {ShapeAttrs}\n     */\n\n\n    _this.attrs = {};\n\n    var attrs = _this.getDefaultAttrs();\n\n    mix(attrs, cfg.attrs);\n    _this.attrs = attrs;\n\n    _this.initAttrs(attrs);\n\n    _this.initAnimate(); // 初始化动画\n\n\n    return _this;\n  } // override\n\n\n  Element.prototype.getDefaultCfg = function () {\n    return {\n      visible: true,\n      capture: true,\n      zIndex: 0\n    };\n  };\n  /**\n   * @protected\n   * 获取默认的属相\n   */\n\n\n  Element.prototype.getDefaultAttrs = function () {\n    return {\n      matrix: this.getDefaultMatrix(),\n      opacity: 1\n    };\n  };\n  /**\n   * @protected\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n\n\n  Element.prototype.onCanvasChange = function (changeType) {};\n  /**\n   * @protected\n   * 初始化属性，有些属性需要加工\n   * @param {object} attrs 属性值\n   */\n\n\n  Element.prototype.initAttrs = function (attrs) {};\n  /**\n   * @protected\n   * 初始化动画\n   */\n\n\n  Element.prototype.initAnimate = function () {\n    this.set('animable', true);\n    this.set('animating', false);\n  };\n\n  Element.prototype.isGroup = function () {\n    return false;\n  };\n\n  Element.prototype.getParent = function () {\n    return this.get('parent');\n  };\n\n  Element.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n\n  Element.prototype.attr = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var name = args[0],\n        value = args[1];\n    if (!name) return this.attrs;\n\n    if (isObject(name)) {\n      for (var k in name) {\n        this.setAttr(k, name[k]);\n      }\n\n      this.afterAttrsChange(name);\n      return this;\n    }\n\n    if (args.length === 2) {\n      this.setAttr(name, value);\n      this.afterAttrsChange((_a = {}, _a[name] = value, _a));\n      return this;\n    }\n\n    return this.attrs[name];\n  }; // 是否被裁剪，被裁剪则不显示，不参与拾取\n\n\n  Element.prototype.isClipped = function (refX, refY) {\n    var clip = this.getClip();\n    return clip && !clip.isHit(refX, refY);\n  };\n  /**\n   * 内部设置属性值的接口\n   * @param {string} name 属性名\n   * @param {any} value 属性值\n   */\n\n\n  Element.prototype.setAttr = function (name, value) {\n    var originValue = this.attrs[name];\n\n    if (originValue !== value) {\n      this.attrs[name] = value;\n      this.onAttrChange(name, value, originValue);\n    }\n  };\n  /**\n   * @protected\n   * 属性值发生改变\n   * @param {string} name 属性名\n   * @param {any} value 属性值\n   * @param {any} originValue 属性值\n   */\n\n\n  Element.prototype.onAttrChange = function (name, value, originValue) {\n    if (name === 'matrix') {\n      this.set('totalMatrix', null);\n    }\n  };\n  /**\n   * 属性更改后需要做的事情\n   * @protected\n   */\n\n\n  Element.prototype.afterAttrsChange = function (targetAttrs) {\n    if (this.cfg.isClipShape) {\n      var applyTo = this.cfg.applyTo;\n\n      if (applyTo) {\n        applyTo.onCanvasChange('clip');\n      }\n    } else {\n      this.onCanvasChange('attr');\n    }\n  };\n\n  Element.prototype.show = function () {\n    // 不是高频操作直接使用 set\n    this.set('visible', true);\n    this.onCanvasChange('show');\n    return this;\n  };\n\n  Element.prototype.hide = function () {\n    // 不是高频操作直接使用 set\n    this.set('visible', false);\n    this.onCanvasChange('hide');\n    return this;\n  };\n\n  Element.prototype.setZIndex = function (zIndex) {\n    this.set('zIndex', zIndex);\n    var parent = this.getParent();\n\n    if (parent) {\n      // 改变 zIndex 不应该立即触发渲染 (调用 onCanvasChange('zIndex'))，需要经过 sort 再触发\n      parent.sort();\n    }\n\n    return this;\n  };\n\n  Element.prototype.toFront = function () {\n    var parent = this.getParent();\n\n    if (!parent) {\n      return;\n    }\n\n    var children = parent.getChildren();\n    var el = this.get('el');\n    var index = children.indexOf(this);\n    children.splice(index, 1);\n    children.push(this);\n    this.onCanvasChange('zIndex');\n  };\n\n  Element.prototype.toBack = function () {\n    var parent = this.getParent();\n\n    if (!parent) {\n      return;\n    }\n\n    var children = parent.getChildren();\n    var el = this.get('el');\n    var index = children.indexOf(this);\n    children.splice(index, 1);\n    children.unshift(this);\n    this.onCanvasChange('zIndex');\n  };\n\n  Element.prototype.remove = function (destroy) {\n    if (destroy === void 0) {\n      destroy = true;\n    }\n\n    var parent = this.getParent();\n\n    if (parent) {\n      removeFromArray(parent.getChildren(), this);\n\n      if (!parent.get('clearing')) {\n        // 如果父元素正在清理，当前元素不触发 remove\n        this.onCanvasChange('remove');\n      }\n    } else {\n      this.onCanvasChange('remove');\n    }\n\n    if (destroy) {\n      this.destroy();\n    }\n  };\n\n  Element.prototype.resetMatrix = function () {\n    this.attr(MATRIX, this.getDefaultMatrix());\n    this.onCanvasChange('matrix');\n  };\n\n  Element.prototype.getMatrix = function () {\n    return this.attr(MATRIX);\n  };\n\n  Element.prototype.setMatrix = function (m) {\n    this.attr(MATRIX, m);\n    this.onCanvasChange('matrix');\n  }; // 获取总的 matrix\n\n\n  Element.prototype.getTotalMatrix = function () {\n    var totalMatrix = this.cfg.totalMatrix;\n\n    if (!totalMatrix) {\n      var currentMatrix = this.attr('matrix');\n      var parentMatrix = this.cfg.parentMatrix;\n\n      if (parentMatrix && currentMatrix) {\n        totalMatrix = multiplyMatrix(parentMatrix, currentMatrix);\n      } else {\n        totalMatrix = currentMatrix || parentMatrix;\n      }\n\n      this.set('totalMatrix', totalMatrix);\n    }\n\n    return totalMatrix;\n  }; // 上层分组设置 matrix\n\n\n  Element.prototype.applyMatrix = function (matrix) {\n    var currentMatrix = this.attr('matrix');\n    var totalMatrix = null;\n\n    if (matrix && currentMatrix) {\n      totalMatrix = multiplyMatrix(matrix, currentMatrix);\n    } else {\n      totalMatrix = currentMatrix || matrix;\n    }\n\n    this.set('totalMatrix', totalMatrix);\n    this.set('parentMatrix', matrix);\n  };\n  /**\n   * @protected\n   * 获取默认的矩阵\n   * @returns {number[]|null} 默认的矩阵\n   */\n\n\n  Element.prototype.getDefaultMatrix = function () {\n    return null;\n  }; // 将向量应用设置的矩阵\n\n\n  Element.prototype.applyToMatrix = function (v) {\n    var matrix = this.attr('matrix');\n\n    if (matrix) {\n      return multiplyVec2(matrix, v);\n    }\n\n    return v;\n  }; // 根据设置的矩阵，将向量转换相对于图形/分组的位置\n\n\n  Element.prototype.invertFromMatrix = function (v) {\n    var matrix = this.attr('matrix');\n\n    if (matrix) {\n      var invertMatrix = invert(matrix);\n\n      if (invertMatrix) {\n        return multiplyVec2(invertMatrix, v);\n      }\n    }\n\n    return v;\n  }; // 设置 clip\n\n\n  Element.prototype.setClip = function (clipCfg) {\n    var canvas = this.getCanvas(); // 应该只设置当前元素的 clip，不应该去修改 clip 本身，方便 clip 被复用\n    // TODO: setClip 的传参既 shape 配置，也支持 shape 对象\n    // const preShape = this.get('clipShape');\n    // if (preShape) {\n    //   // 将之前的 clipShape 销毁\n    //   preShape.destroy();\n    // }\n\n    var clipShape = null; // 如果配置项为 null，则不移除 clipShape\n\n    if (clipCfg) {\n      var ShapeBase = this.getShapeBase();\n      var shapeType = upperFirst(clipCfg.type);\n      var Cons = ShapeBase[shapeType];\n\n      if (Cons) {\n        clipShape = new Cons({\n          type: clipCfg.type,\n          isClipShape: true,\n          applyTo: this,\n          attrs: clipCfg.attrs,\n          canvas: canvas\n        });\n      }\n    }\n\n    this.set('clipShape', clipShape);\n    this.onCanvasChange('clip');\n    return clipShape;\n  };\n\n  Element.prototype.getClip = function () {\n    // 高频率调用的地方直接使用 this.cfg.xxx\n    var clipShape = this.cfg.clipShape; // 未设置时返回 Null，保证一致性\n\n    if (!clipShape) {\n      return null;\n    }\n\n    return clipShape;\n  };\n\n  Element.prototype.clone = function () {\n    var _this = this;\n\n    var originAttrs = this.attrs;\n    var attrs = {};\n    each(originAttrs, function (i, k) {\n      if (isArray(originAttrs[k])) {\n        attrs[k] = _cloneArrayAttr(originAttrs[k]);\n      } else {\n        attrs[k] = originAttrs[k];\n      }\n    });\n    var cons = this.constructor; // @ts-ignore\n\n    var clone = new cons({\n      attrs: attrs\n    });\n    each(CLONE_CFGS, function (cfgName) {\n      clone.set(cfgName, _this.get(cfgName));\n    });\n    return clone;\n  };\n\n  Element.prototype.destroy = function () {\n    var destroyed = this.destroyed;\n\n    if (destroyed) {\n      return;\n    }\n\n    this.attrs = {};\n\n    _super.prototype.destroy.call(this); // this.onCanvasChange('destroy');\n\n  };\n  /**\n   * 是否处于动画暂停状态\n   * @return {boolean} 是否处于动画暂停状态\n   */\n\n\n  Element.prototype.isAnimatePaused = function () {\n    return this.get('_pause').isPaused;\n  };\n  /**\n   * 执行动画，支持多种函数签名\n   * 1. animate(toAttrs: ElementAttrs, duration: number, easing?: string, callback?: () => void, delay?: number)\n   * 2. animate(onFrame: OnFrame, duration: number, easing?: string, callback?: () => void, delay?: number)\n   * 3. animate(toAttrs: ElementAttrs, cfg: AnimateCfg)\n   * 4. animate(onFrame: OnFrame, cfg: AnimateCfg)\n   * 各个参数的含义为:\n   *   toAttrs  动画最终状态\n   *   onFrame  自定义帧动画函数\n   *   duration 动画执行时间\n   *   easing   动画缓动效果\n   *   callback 动画执行后的回调\n   *   delay    动画延迟时间\n   */\n\n\n  Element.prototype.animate = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.get('timeline') && !this.get('canvas')) {\n      return;\n    }\n\n    this.set('animating', true);\n    var timeline = this.get('timeline');\n\n    if (!timeline) {\n      timeline = this.get('canvas').get('timeline');\n      this.set('timeline', timeline);\n    }\n\n    var animations = this.get('animations') || []; // 初始化 tick\n\n    if (!timeline.timer) {\n      timeline.initTimer();\n    }\n\n    var toAttrs = args[0],\n        duration = args[1],\n        _a = args[2],\n        easing = _a === void 0 ? 'easeLinear' : _a,\n        _b = args[3],\n        callback = _b === void 0 ? noop : _b,\n        _c = args[4],\n        delay = _c === void 0 ? 0 : _c;\n    var onFrame;\n    var repeat;\n    var pauseCallback;\n    var resumeCallback;\n    var animateCfg; // 第二个参数，既可以是动画最终状态 toAttrs，也可以是自定义帧动画函数 onFrame\n\n    if (isFunction(toAttrs)) {\n      onFrame = toAttrs;\n      toAttrs = {};\n    } else if (isObject(toAttrs) && toAttrs.onFrame) {\n      // 兼容 3.0 中的写法，onFrame 和 repeat 可在 toAttrs 中设置\n      onFrame = toAttrs.onFrame;\n      repeat = toAttrs.repeat;\n    } // 第二个参数，既可以是执行时间 duration，也可以是动画参数 animateCfg\n\n\n    if (isObject(duration)) {\n      animateCfg = duration;\n      duration = animateCfg.duration;\n      easing = animateCfg.easing || 'easeLinear';\n      delay = animateCfg.delay || 0; // animateCfg 中的设置优先级更高\n\n      repeat = animateCfg.repeat || repeat || false;\n      callback = animateCfg.callback || noop;\n      pauseCallback = animateCfg.pauseCallback || noop;\n      resumeCallback = animateCfg.resumeCallback || noop;\n    } else {\n      // 第四个参数，既可以是回调函数 callback，也可以是延迟时间 delay\n      if (isNumber(callback)) {\n        delay = callback;\n        callback = null;\n      } // 第三个参数，既可以是缓动参数 easing，也可以是回调函数 callback\n\n\n      if (isFunction(easing)) {\n        callback = easing;\n        easing = 'easeLinear';\n      } else {\n        easing = easing || 'easeLinear';\n      }\n    }\n\n    var formatToAttrs = getFormatToAttrs(toAttrs, this);\n    var animation = {\n      fromAttrs: getFormatFromAttrs(formatToAttrs, this),\n      toAttrs: formatToAttrs,\n      duration: duration,\n      easing: easing,\n      repeat: repeat,\n      callback: callback,\n      pauseCallback: pauseCallback,\n      resumeCallback: resumeCallback,\n      delay: delay,\n      startTime: timeline.getTime(),\n      id: uniqueId(),\n      onFrame: onFrame,\n      pathFormatted: false\n    }; // 如果动画元素队列中已经有这个图形了\n\n    if (animations.length > 0) {\n      // 先检查是否需要合并属性。若有相同的动画，将该属性从前一个动画中删除,直接用后一个动画中\n      animations = checkExistedAttrs(animations, animation);\n    } else {\n      // 否则将图形添加到动画元素队列\n      timeline.addAnimator(this);\n    }\n\n    animations.push(animation);\n    this.set('animations', animations);\n    this.set('_pause', {\n      isPaused: false\n    });\n  };\n  /**\n   * 停止动画\n   * @param {boolean} toEnd 是否到动画的最终状态\n   */\n\n\n  Element.prototype.stopAnimate = function (toEnd) {\n    var _this = this;\n\n    if (toEnd === void 0) {\n      toEnd = true;\n    }\n\n    var animations = this.get('animations');\n    each(animations, function (animation) {\n      // 将动画执行到最后一帧\n      if (toEnd) {\n        if (animation.onFrame) {\n          _this.attr(animation.onFrame(1));\n        } else {\n          _this.attr(animation.toAttrs);\n        }\n      }\n\n      if (animation.callback) {\n        // 动画停止时的回调\n        animation.callback();\n      }\n    });\n    this.set('animating', false);\n    this.set('animations', []);\n  };\n  /**\n   * 暂停动画\n   */\n\n\n  Element.prototype.pauseAnimate = function () {\n    var timeline = this.get('timeline');\n    var animations = this.get('animations');\n    var pauseTime = timeline.getTime();\n    each(animations, function (animation) {\n      animation._paused = true;\n      animation._pauseTime = pauseTime;\n\n      if (animation.pauseCallback) {\n        // 动画暂停时的回调\n        animation.pauseCallback();\n      }\n    }); // 记录下是在什么时候暂停的\n\n    this.set('_pause', {\n      isPaused: true,\n      pauseTime: pauseTime\n    });\n    return this;\n  };\n  /**\n   * 恢复动画\n   */\n\n\n  Element.prototype.resumeAnimate = function () {\n    var timeline = this.get('timeline');\n    var current = timeline.getTime();\n    var animations = this.get('animations');\n    var pauseTime = this.get('_pause').pauseTime; // 之后更新属性需要计算动画已经执行的时长，如果暂停了，就把初始时间调后\n\n    each(animations, function (animation) {\n      animation.startTime = animation.startTime + (current - pauseTime);\n      animation._paused = false;\n      animation._pauseTime = null;\n\n      if (animation.resumeCallback) {\n        animation.resumeCallback();\n      }\n    });\n    this.set('_pause', {\n      isPaused: false\n    });\n    this.set('animations', animations);\n    return this;\n  };\n  /**\n   * 触发委托事件\n   * @param  {string}     type 事件类型\n   * @param  {GraphEvent} eventObj 事件对象\n   */\n\n\n  Element.prototype.emitDelegation = function (type, eventObj) {\n    var _this = this;\n\n    var paths = eventObj.propagationPath;\n    var events = this.getEvents();\n    var relativeShape;\n\n    if (type === 'mouseenter') {\n      relativeShape = eventObj.fromShape;\n    } else if (type === 'mouseleave') {\n      relativeShape = eventObj.toShape;\n    }\n\n    var _loop_1 = function (i) {\n      var element = paths[i]; // 暂定跟 name 绑定\n\n      var name_1 = element.get('name');\n\n      if (name_1) {\n        // 第一个 mouseenter 和 mouseleave 的停止即可，因为后面的都是前面的 Parent\n        if ( // 只有 element 是 Group 或者 Canvas 的时候，才需要判断 isParent\n        (element.isGroup() || element.isCanvas && element.isCanvas()) && relativeShape && isParent(element, relativeShape)) {\n          return \"break\";\n        }\n\n        if (isArray(name_1)) {\n          each(name_1, function (subName) {\n            _this.emitDelegateEvent(element, subName, eventObj);\n          });\n        } else {\n          this_1.emitDelegateEvent(element, name_1, eventObj);\n        }\n      }\n    };\n\n    var this_1 = this; // 至少有一个对象，且第一个对象为 shape\n\n    for (var i = 0; i < paths.length; i++) {\n      var state_1 = _loop_1(i);\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  Element.prototype.emitDelegateEvent = function (element, name, eventObj) {\n    var events = this.getEvents(); // 事件委托的形式 name:type\n\n    var eventName = name + DELEGATION_SPLIT + eventObj.type;\n\n    if (events[eventName] || events[WILDCARD]) {\n      // 对于通配符 *，事件名称 = 委托事件名称\n      eventObj.name = eventName;\n      eventObj.currentTarget = element;\n      eventObj.delegateTarget = this; // 将委托事件的监听对象 delegateObject 挂载到事件对象上\n\n      eventObj.delegateObject = element.get('delegateObject');\n      this.emit(eventName, eventObj);\n    }\n  };\n  /**\n   * 移动元素\n   * @param {number} translateX 水平移动距离\n   * @param {number} translateY 垂直移动距离\n   * @return {IElement} 元素\n   */\n\n\n  Element.prototype.translate = function (translateX, translateY) {\n    if (translateX === void 0) {\n      translateX = 0;\n    }\n\n    if (translateY === void 0) {\n      translateY = 0;\n    }\n\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', translateX, translateY]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 移动元素到目标位置\n   * @param {number} targetX 目标位置的水平坐标\n   * @param {number} targetX 目标位置的垂直坐标\n   * @return {IElement} 元素\n   */\n\n\n  Element.prototype.move = function (targetX, targetY) {\n    var x = this.attr('x') || 0;\n    var y = this.attr('y') || 0;\n    this.translate(targetX - x, targetY - y);\n    return this;\n  };\n  /**\n   * 移动元素到目标位置，等价于 move 方法。由于 moveTo 的语义性更强，因此在文档中推荐使用 moveTo 方法\n   * @param {number} targetX 目标位置的 x 轴坐标\n   * @param {number} targetY 目标位置的 y 轴坐标\n   * @return {IElement} 元素\n   */\n\n\n  Element.prototype.moveTo = function (targetX, targetY) {\n    return this.move(targetX, targetY);\n  };\n  /**\n   * 缩放元素\n   * @param {number} ratioX 水平缩放比例\n   * @param {number} ratioY 垂直缩放比例\n   * @return {IElement} 元素\n   */\n\n\n  Element.prototype.scale = function (ratioX, ratioY) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['s', ratioX, ratioY || ratioX]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以画布左上角 (0, 0) 为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n\n\n  Element.prototype.rotate = function (radian) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['r', radian]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以起始点为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n\n\n  Element.prototype.rotateAtStart = function (rotate) {\n    var _a = this.attr(),\n        x = _a.x,\n        y = _a.y;\n\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', -x, -y], ['r', rotate], ['t', x, y]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n  /**\n   * 以任意点 (x, y) 为中心旋转元素\n   * @param {number} radian 旋转角度(弧度值)\n   * @return {IElement} 元素\n   */\n\n\n  Element.prototype.rotateAtPoint = function (x, y, rotate) {\n    var matrix = this.getMatrix();\n    var newMatrix = transform(matrix, [['t', -x, -y], ['r', rotate], ['t', x, y]]);\n    this.setMatrix(newMatrix);\n    return this;\n  };\n\n  return Element;\n}(Base);\n\nexport default Element;","map":null,"metadata":{},"sourceType":"module"}