{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Emitter } from 'mana-common';\nexport var Disposable;\n\n(function (Disposable) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function is(arg) {\n    return !!arg && typeof arg === 'object' && 'dispose' in arg && typeof arg.dispose === 'function';\n  }\n\n  Disposable.is = is;\n\n  function create(func) {\n    return {\n      dispose: func\n    };\n  }\n\n  Disposable.create = create;\n  Disposable.NULL = create(() => {});\n})(Disposable || (Disposable = {}));\n\nexport class DisposableCollection {\n  constructor() {\n    this.disposables = [];\n    this.onDisposeEmitter = new Emitter();\n    this.disposingElements = false;\n\n    for (var _len = arguments.length, toDispose = new Array(_len), _key = 0; _key < _len; _key++) {\n      toDispose[_key] = arguments[_key];\n    }\n\n    toDispose.forEach(d => this.push(d));\n  }\n  /**\n   * This event is fired only once\n   * on first dispose of not empty collection.\n   */\n\n\n  get onDispose() {\n    return this.onDisposeEmitter.event;\n  }\n\n  checkDisposed() {\n    if (this.disposed && !this.disposingElements) {\n      this.onDisposeEmitter.fire(undefined);\n      this.onDisposeEmitter.dispose();\n    }\n  }\n\n  get disposed() {\n    return this.disposables.length === 0;\n  }\n\n  dispose() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.disposed || this.disposingElements) {\n        return;\n      }\n\n      this.disposingElements = true;\n\n      while (!this.disposed) {\n        try {\n          const d = this.disposables.pop();\n          yield d.dispose();\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      this.disposingElements = false;\n      this.checkDisposed();\n    });\n  }\n\n  push(disposable) {\n    const {\n      disposables\n    } = this;\n    disposables.push(disposable);\n    const originalDispose = disposable.dispose.bind(disposable);\n    const toRemove = Disposable.create(() => {\n      const index = disposables.indexOf(disposable);\n\n      if (index !== -1) {\n        disposables.splice(index, 1);\n      }\n\n      this.checkDisposed();\n    });\n\n    disposable.dispose = () => {\n      toRemove.dispose();\n      originalDispose();\n    };\n\n    return toRemove;\n  }\n\n  pushAll(disposables) {\n    return disposables.map(disposable => this.push(disposable));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}