{"ast":null,"code":"import { flow, deepAssign } from '../../utils';\nimport { theme, animation, annotation, tooltip } from '../../adaptor/common';\nimport { line, point } from '../../adaptor/geometries';\nimport { meta } from '../tiny-area/adaptor';\nimport { getTinyData } from './utils';\nimport { X_FIELD, Y_FIELD } from './constants';\nexport { meta };\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      color = options.color,\n      lineStyle = options.lineStyle,\n      pointMapping = options.point;\n  var pointState = pointMapping === null || pointMapping === void 0 ? void 0 : pointMapping.state;\n  var seriesData = getTinyData(data);\n  chart.data(seriesData); // line geometry 处理\n\n  var primary = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      line: {\n        color: color,\n        style: lineStyle\n      },\n      point: pointMapping\n    }\n  });\n  var pointParams = deepAssign({}, primary, {\n    options: {\n      tooltip: false,\n      state: pointState\n    }\n  });\n  line(primary);\n  point(pointParams);\n  chart.axis(false);\n  chart.legend(false);\n  return params;\n}\n/**\n * 迷你折线图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(geometry, meta, theme, tooltip, animation, annotation())(params);\n}","map":null,"metadata":{},"sourceType":"module"}