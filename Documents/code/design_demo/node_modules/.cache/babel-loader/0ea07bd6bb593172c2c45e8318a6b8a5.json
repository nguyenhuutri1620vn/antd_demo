{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { getProps, getGraphInstance, getAppInstance } from './global';\nimport { XFlowGraphCommands } from '@antv/xflow';\nexport var Log = window.console;\nexport var getGraphData = function (flowchartId) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var app, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          app = getAppInstance(flowchartId);\n          return [4\n          /*yield*/\n          , app.executeCommand(XFlowGraphCommands.SAVE_GRAPH_DATA.id, {\n            saveGraphDataService: function (graphMeta, graphData) {\n              return __awaiter(void 0, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  data = graphData;\n                  return [2\n                  /*return*/\n                  ];\n                });\n              });\n            }\n          })];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , data];\n      }\n    });\n  });\n};\nexport var excLoadData = function (app, data) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var res, graphData;\n\n    var _a, _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          if (!((_a = data === null || data === void 0 ? void 0 : data.nodes) === null || _a === void 0 ? void 0 : _a.length)) {\n            return [2\n            /*return*/\n            ];\n          }\n\n          return [4\n          /*yield*/\n          , app.executeCommand(XFlowGraphCommands.LOAD_DATA.id, {\n            loadDataService: function () {\n              return __awaiter(void 0, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  return [2\n                  /*return*/\n                  , data];\n                });\n              });\n            }\n          })];\n\n        case 1:\n          res = _c.sent();\n          graphData = ((_b = res === null || res === void 0 ? void 0 : res.contextProvider()) === null || _b === void 0 ? void 0 : _b.getResult()).graphData;\n          /** 3. 画布内容渲染 */\n\n          return [4\n          /*yield*/\n          , app.executeCommand(XFlowGraphCommands.GRAPH_RENDER.id, {\n            graphData: graphData\n          })];\n\n        case 2:\n          /** 3. 画布内容渲染 */\n          _c.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n};\nexport var getFlowchartId = function (e) {\n  var _a, _b, _c;\n\n  var currentNode = (_a = e === null || e === void 0 ? void 0 : e.e) === null || _a === void 0 ? void 0 : _a.currentTarget;\n\n  if (!currentNode) {\n    return (_b = document.getElementsByClassName('xflow-canvas-container')[0]) === null || _b === void 0 ? void 0 : _b.getAttribute('data-flowchart-id');\n  }\n\n  var containter = null;\n\n  while (!containter) {\n    var current = currentNode.getElementsByClassName('xflow-canvas-container');\n\n    if ((current === null || current === void 0 ? void 0 : current.length) > 0) {\n      containter = current;\n    }\n\n    currentNode = currentNode.parentNode;\n  }\n\n  return (_c = containter[0]) === null || _c === void 0 ? void 0 : _c.getAttribute('data-flowchart-id');\n};\n/**\n * 防抖函数\n * @param func 执行函数\n * @param delay 延迟时间 ms\n * @param immediate 是否立即执行\n */\n\nexport var debounce = function (func, delay, immediate) {\n  if (immediate === void 0) {\n    immediate = false;\n  }\n\n  var timer;\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var that = this;\n\n    if (immediate) {\n      func.apply(that, args);\n      immediate = false;\n      return;\n    }\n\n    clearTimeout(timer);\n    timer = window.setTimeout(function () {\n      func.apply(that, args);\n    }, delay);\n  };\n};\nexport var getGraphHistory = function (flowchartId) {\n  return getGraphInstance(flowchartId).history;\n};\n/** 更新配置时通知上传执行保存 */\n\nexport var onConfigChange = debounce(function (config, flowchartId) {\n  var configChange = getProps(flowchartId, 'onConfigChange');\n\n  if (!configChange || typeof configChange !== 'function') {\n    return;\n  }\n\n  return configChange(__assign({\n    data: getGraphData(flowchartId)\n  }, config));\n}, 300, true);","map":null,"metadata":{},"sourceType":"module"}