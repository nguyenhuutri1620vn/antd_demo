{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nimport React from 'react';\nimport { Empty, Spin } from 'antd';\nimport { SchemaForm } from './schema-form';\nimport { makeControlMap, xflowDefaultControls } from './schema-form/control-map/index';\nexport var PanelBody = function (props) {\n  var _a = props.schema,\n      schema = _a === void 0 ? {\n    tabs: []\n  } : _a,\n      triggerUpdate = props.triggerUpdate,\n      onFieldsChange = props.onFieldsChange,\n      afterUpdatingCb = props.afterUpdatingCb,\n      defaultControlRender = props.defaultControlRender,\n      loading = props.loading,\n      controlMapService = props.controlMapService,\n      _b = props.defaultControls,\n      defaultControls = _b === void 0 ? [] : _b;\n  var controlMapCache = React.useMemo(function () {\n    var controlMap = makeControlMap(__spreadArray(__spreadArray([], xflowDefaultControls, true), defaultControls, true));\n\n    if (controlMapService) {\n      controlMapService(controlMap);\n    }\n\n    return controlMap;\n  }, [controlMapService, defaultControls]);\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      className: \"\".concat(props.prefixClz, \"-body\"),\n      style: __assign(__assign({}, props.style), {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center'\n      })\n    }, React.createElement(Spin, {\n      spinning: true\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    className: \"\".concat(props.prefixClz, \"-body\"),\n    style: props.style\n  }, schema.tabs.length > 0 && React.createElement(SchemaForm, {\n    schema: schema,\n    onFieldsChange: onFieldsChange,\n    controlMap: controlMapCache,\n    defaultControlRender: defaultControlRender,\n    afterUpdatingCb: afterUpdatingCb,\n    triggerUpdate: triggerUpdate\n  }), schema.tabs.length === 0 && React.createElement(Empty, {\n    style: {\n      paddingTop: '64px'\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}