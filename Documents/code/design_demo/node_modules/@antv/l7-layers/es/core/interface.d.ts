import { IAnimateOption } from '@antv/l7-core';
import { IColorRamp } from '@antv/l7-utils';
import { styleOffset, styleSingle } from '../core/BaseModel';
import { anchorType } from '../utils/symbol-layout';
export declare enum lineStyleType {
    'solid' = 0,
    'dash' = 1
}
export interface ILineLayerStyleOptions {
    opacity: styleSingle;
    lineType?: keyof typeof lineStyleType;
    dashArray?: [number, number];
    segmentNumber?: number;
    forward?: boolean;
    lineTexture?: boolean;
    iconStep?: number;
    iconStepCount?: number;
    textureBlend?: string;
    sourceColor?: string;
    targetColor?: string;
    thetaOffset?: number;
    globalArcHeight?: number;
    vertexHeightScale?: number;
    borderWidth?: number;
    borderColor?: string;
    heightfixed?: boolean;
    mask?: boolean;
    maskInside?: boolean;
}
export interface IPointLayerStyleOptions {
    opacity: number;
    strokeOpacity: number;
    strokeWidth: number;
    stroke: string;
    textOffset?: [number, number];
    textAnchor?: anchorType;
    spacing?: number;
    padding?: [number, number];
    halo?: number;
    gamma?: number;
    fontWeight?: string;
    fontFamily?: string;
    textAllowOverlap?: boolean;
    pickLight?: boolean;
    depth?: boolean;
    sourceColor?: string;
    targetColor?: string;
    opacityLinear?: {
        enable: boolean;
        dir: string;
    };
    lightEnable: boolean;
    heightfixed?: boolean;
    offsets?: styleOffset;
    blend?: string;
    unit?: string;
    mask?: boolean;
    maskInside?: boolean;
    animateOption: IAnimateOption;
}
export interface IPolygonLayerStyleOptions {
    opacity: styleSingle;
    opacityLinear: {
        enable: boolean;
        dir: string;
    };
    heightfixed?: boolean;
    pickLight: boolean;
    mask?: boolean;
    maskInside?: boolean;
}
export interface IImageLayerStyleOptions {
    opacity: number;
    mask?: boolean;
    maskInside?: boolean;
}
export interface IHeatMapLayerStyleOptions {
    opacity: number;
    intensity: number;
    radius: number;
    angle: number;
    rampColors: IColorRamp;
    mask?: boolean;
    maskInside?: boolean;
    coverage?: number;
}
export interface IRasterLayerStyleOptions {
    opacity: number;
    domain: [number, number];
    noDataValue: number;
    clampLow: boolean;
    clampHigh: boolean;
    rampColors: IColorRamp;
    mask?: boolean;
    maskInside?: boolean;
}
