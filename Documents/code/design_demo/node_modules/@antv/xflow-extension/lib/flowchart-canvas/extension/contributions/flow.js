"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowHooksContribution = void 0;
var tslib_1 = require("tslib");
var mana_syringe_1 = require("mana-syringe");
var xflow_core_1 = require("@antv/xflow-core");
var xflow_core_2 = require("@antv/xflow-core");
var config_graph_1 = require("../../config-graph");
var utils_1 = require("../../utils");
/**
 * 内置的hook contribution
 * 处理 config上的runtime的注册项
 */
var FlowHooksContribution = /** @class */ (function () {
    function FlowHooksContribution() {
        var _this = this;
        this.toDispose = new xflow_core_1.DisposableCollection();
        this.registerHookHub = function () { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
            return (0, tslib_1.__generator)(this, function (_a) {
                return [2 /*return*/, xflow_core_1.Disposable.create(function () { })];
            });
        }); };
        this.registerHook = function (hooks) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
            var toDispose, disposables;
            var _this = this;
            return (0, tslib_1.__generator)(this, function (_a) {
                toDispose = new xflow_core_1.DisposableCollection();
                disposables = [
                    hooks.afterGraphInit.registerHook({
                        name: 'call add edge to replace temp edge',
                        handler: function (handlerArgs) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
                            var commandService, graph;
                            var _this = this;
                            return (0, tslib_1.__generator)(this, function (_a) {
                                commandService = handlerArgs.commandService, graph = handlerArgs.graph;
                                graph.on(config_graph_1.NsAddEdgeEvent.EVENT_NAME, function (args) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
                                    var edge, edgeConfig, config, onAddEdge;
                                    return (0, tslib_1.__generator)(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                edge = args.edge, edgeConfig = (0, tslib_1.__rest)(args, ["edge"]);
                                                config = {
                                                    edgeConfig: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, edgeConfig), { 
                                                        // renderKey: FLOWCHART_EDGE, // 暂不支持
                                                        source: {
                                                            cell: edgeConfig.source,
                                                            port: edgeConfig.sourcePortId,
                                                        }, target: {
                                                            cell: edgeConfig.target,
                                                            port: edgeConfig.targetPortId,
                                                        }, zIndex: 1, attrs: {
                                                            line: {
                                                                stroke: '#A2B1C3',
                                                                targetMarker: {
                                                                    name: 'block',
                                                                    width: 12,
                                                                    height: 8,
                                                                },
                                                                strokeDasharray: '5 5',
                                                                strokeWidth: 1,
                                                            },
                                                        }, data: (0, tslib_1.__assign)({}, edgeConfig) }),
                                                };
                                                return [4 /*yield*/, commandService.executeCommand(xflow_core_1.XFlowEdgeCommands.ADD_EDGE.id, config)];
                                            case 1:
                                                _a.sent();
                                                onAddEdge = (0, utils_1.getProps)('onAddEdge');
                                                if (typeof onAddEdge === 'function') {
                                                    onAddEdge(config);
                                                }
                                                args.edge.remove();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                                return [2 /*return*/];
                            });
                        }); },
                    }),
                ];
                toDispose.pushAll(disposables);
                return [2 /*return*/, xflow_core_1.Disposable.create(function () { })];
            });
        }); };
    }
    FlowHooksContribution = (0, tslib_1.__decorate)([
        (0, mana_syringe_1.singleton)({ contrib: xflow_core_2.IHookContribution })
    ], FlowHooksContribution);
    return FlowHooksContribution;
}());
exports.FlowHooksContribution = FlowHooksContribution;
//# sourceMappingURL=flow.js.map